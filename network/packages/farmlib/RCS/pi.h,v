head	1.2;
access;
symbols
	Helios_C40_1_3_Official_Release:1.2
	Alenia_release:1.2
	Helios1_3:1.2
	C40_Field_Test_2:1.2
	Helios13_beta:1.1;
locks; strict;
comment	@ * @;


1.2
date	92.09.09.12.01.46;	author bart;	state Exp;
branches;
next	1.1;

1.1
date	92.01.16.14.35.21;	author bart;	state Exp;
branches;
next	;


desc
@Header file defining the pi example
@


1.2
log
@First release
@
text
@/**
*** pi.h
***	This header file defines the job and reply packets
***	used within the first pi example.
**/

typedef struct Pi_Job {
	int	WorkerNumber;
	int	NumberWorkers;
	int	Intervals;
} Pi_Job;

typedef struct Pi_Reply {
	double	PartialArea;
} Pi_Reply;

@


1.1
log
@Initial revision
@
text
@a0 18
/*------------------------------------------------------------------------
--                                                                      --
--      H E L I O S   P A R A L L E L   P R O G R A M M I N G		--
--	-----------------------------------------------------		--
--									--
--	  F A R M   C O M P U T A T I O N   L I B R A R Y		--
--	  -----------------------------------------------		--
--									--
--		Copyright (C) 1992, Perihelion Software Ltd.		--
--                        All Rights Reserved.                          --
--                                                                      --
-- Pi example, pi.h							--
--                                                                      --
--	Author:  BLV 3/1/92						--
--                                                                      --
------------------------------------------------------------------------*/
/* RcsId: $Id: root.h,v 1.17 1991/10/11 16:27:20 paul Exp $ */

d2 3
a4 2
*** This packet is sent by the producer on start-up, and informs the workers
*** for how long they should calculate.
d6 1
d8 3
a10 1
	int	Duration;
a12 4
/**
*** This is the reply packet, indicating how many attempts were made and
*** how many successes were achieved.
**/
d14 1
a14 2
	int	Attempts;
	int	Successes;
a16 6
/**
*** Global functions.
**/
extern	void	Pi_Producer(void);	/* pi.c		*/
extern	void	Pi_Consumer(void);	/* pi.c		*/
extern	void	Pi_Worker(void);	/* picalc.c	*/
@
