head	1.1;
access;
symbols
	Helios_C40_1_3_Official_Release:1.1
	Alenia_release:1.1
	Helios1_3:1.1;
locks; strict;
comment	@# @;


1.1
date	92.01.16.13.22.17;	author bart;	state Exp;
branches;
next	;


desc
@README file for the hardware test suite
@


1.1
log
@Initial revision
@
text
@		Hardware Test Suite
		===================

  This simple hardware test suite was developed as part of the Helios
fault-tolerance work, in an attempt to measure the reliability of existing
hardware. It consists of the following components:

  memory.c : this program allocates a large chunk of memory, fills it
	     with random numbers, and performs continuous checksumming on
	     this memory. The purpose of this program is to attempt to
	     measure the frequency of soft failures in the memory subsystem
	     of a processor. Soft failures typically affect a single bit
	     and are caused by cosmic particles, alpha radiation, and so on.

  linktest.c : pairs of these programs are run across every suitable link in
	     the network, and continually exchange large buffers across the
	     link. These buffers are checksummed. The aim is to measure the
	     frequency of link failures, particularly soft failures
	     affecting a single bit or byte.

  control.c : this is the controlling component of a taskforce containing
	     a memory component for every free processor and a pair of
	     linktest components across every link between free processors. The
	     control program is responsible primarily for terminating the
	     taskforce after a suitable delay.

  configur.c : the hardware test suite is intended to be run on any
	     reasonably sized processor network (eight processors or more)
	     irrespective of the topology of the network. Producing a
	     suitable taskforce for this is not trivial, and hence it has
	     been automated. The configur program examines the current
	     network using Resource Management library calls and produces
	     a suitable CDL script on its standard output. This script
	     can then be compiled using the CDL compiler to produce an
	     executable taskforce. This program also serves as an example
	     on how to use the Resource Management library to perform
	     mappings.

  runtest.cdl : typically this is the CDL script that is produced by the
	     configur program. It can be compiled using
		 cdl -o runtest runtest.cdl

  runtest :  this is the final executable that is produced. The runtest
	     binary takes three arguments indicating the number of days,
	     hours, and minutes for which the test suite should run.
	     For example, if it is intended to run the taskforce all
	     weekend then a suitable command might be:
		runtest 2 14 0
	     This would run the test suite for two whole days and an extra
	     fourteen hours. Hence if the test suite is started on
	     Friday afternoon or Friday evening it would run for all of
	     Saturday and Sunday, and terminate just before normal office
	     hours on Monday morning.


@
