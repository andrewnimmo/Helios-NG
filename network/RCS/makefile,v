head	1.44;
access;
symbols
	Helios_C40_1_3_Official_Release:1.36
	Alenia_release:1.36
	Helios1_3:1.36
	C40_Field_Test_2:1.35
	C40_Field_Test_R1:1.30
	Helios13_beta:1.30
	Helios1_2_2_Fault:1.23
	Helios1_2_2_Native:1.22
	Helios1_2_2_native_beta:1.22
	Helios1_2_2:1.20
	Helios1_2_2Beta:1.19
	Helios1_2_1:1.11
	Helios1_2:1.5;
locks; strict;
comment	@# @;


1.44
date	94.06.07.12.37.29;	author nickc;	state Exp;
branches;
next	1.43;

1.43
date	94.04.07.11.16.20;	author nickc;	state Exp;
branches;
next	1.42;

1.42
date	93.12.10.09.13.14;	author nickc;	state Exp;
branches;
next	1.41;

1.41
date	93.12.08.17.38.47;	author nickc;	state Exp;
branches;
next	1.40;

1.40
date	93.08.13.10.33.49;	author bart;	state Exp;
branches;
next	1.39;

1.39
date	93.08.05.15.12.49;	author bart;	state Exp;
branches;
next	1.38;

1.38
date	93.07.26.08.39.14;	author nickc;	state Exp;
branches;
next	1.37;

1.37
date	93.06.22.14.08.39;	author bart;	state Exp;
branches;
next	1.36;

1.36
date	92.10.20.15.01.29;	author bart;	state Exp;
branches;
next	1.35;

1.35
date	92.10.11.13.37.09;	author bart;	state Exp;
branches;
next	1.34;

1.34
date	92.09.14.17.10.28;	author bart;	state Exp;
branches;
next	1.33;

1.33
date	92.08.14.18.29.54;	author bart;	state Exp;
branches;
next	1.32;

1.32
date	92.07.31.16.56.23;	author paul;	state Exp;
branches;
next	1.31;

1.31
date	92.07.09.17.23.03;	author paul;	state Exp;
branches;
next	1.30;

1.30
date	92.06.28.12.29.50;	author bart;	state Exp;
branches;
next	1.29;

1.29
date	92.06.26.17.48.13;	author bart;	state Exp;
branches;
next	1.28;

1.28
date	92.06.11.10.39.07;	author bart;	state Exp;
branches;
next	1.27;

1.27
date	92.06.08.15.27.20;	author bart;	state Exp;
branches;
next	1.26;

1.26
date	92.04.24.15.34.20;	author bart;	state Exp;
branches;
next	1.25;

1.25
date	92.03.03.19.35.45;	author bart;	state Exp;
branches;
next	1.24;

1.24
date	92.01.16.14.41.04;	author bart;	state Exp;
branches;
next	1.23;

1.23
date	92.01.15.11.04.39;	author bart;	state Exp;
branches;
next	1.22;

1.22
date	92.01.14.14.20.34;	author bart;	state Exp;
branches;
next	1.21;

1.21
date	91.12.02.16.49.13;	author martyn;	state Exp;
branches;
next	1.20;

1.20
date	91.10.09.15.09.08;	author paul;	state Exp;
branches;
next	1.19;

1.19
date	91.07.09.16.42.48;	author martyn;	state Exp;
branches;
next	1.18;

1.18
date	91.06.20.10.32.52;	author martyn;	state Exp;
branches;
next	1.17;

1.17
date	91.06.20.10.10.06;	author martyn;	state Exp;
branches;
next	1.16;

1.16
date	91.05.07.16.29.51;	author paul;	state Exp;
branches;
next	1.15;

1.15
date	91.05.07.15.09.31;	author paul;	state Exp;
branches;
next	1.14;

1.14
date	91.05.07.09.25.03;	author ben;	state Exp;
branches;
next	1.13;

1.13
date	91.04.08.18.09.02;	author paul;	state Exp;
branches;
next	1.12;

1.12
date	91.04.07.13.20.21;	author bart;	state Exp;
branches;
next	1.11;

1.11
date	91.03.11.23.27.35;	author bart;	state Exp;
branches;
next	1.10;

1.10
date	91.03.07.12.27.08;	author paul;	state Exp;
branches;
next	1.9;

1.9
date	91.03.03.23.13.20;	author paul;	state Exp;
branches;
next	1.8;

1.8
date	91.03.01.14.54.32;	author bart;	state Exp;
branches;
next	1.7;

1.7
date	91.02.27.16.22.25;	author bart;	state Exp;
branches;
next	1.6;

1.6
date	91.01.15.14.57.25;	author bart;	state Exp;
branches;
next	1.5;

1.5
date	90.09.24.18.42.57;	author bart;	state Exp;
branches;
next	1.4;

1.4
date	90.09.24.18.38.41;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	90.09.20.13.12.13;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	90.09.14.17.27.16;	author bart;	state Exp;
branches;
next	1.1;

1.1
date	90.09.12.15.20.56;	author jon;	state Exp;
branches;
next	;


desc
@@


1.44
log
@reordered makefile to avoid link convter problems
@
text
@#-----------------------------------------------------------------------------
# Helios generic make system
#-----------------------------------------------------------------------------
# Helios generic component make rules for: network
#
# File: /HSRC/network/makefile
#
# These are the host/processor independent rules and variables for this
# component of Helios. It is included by the processor specific makefile
# That may add to some of its functionality. You should only alter this
# makefile by using "ifneq ($(HPROC),YYY)" clauses for a specific processor.
#
# SccsId: %W% %G%
# RcsId: $Id: makefile,v 1.43 1994/04/07 11:16:20 nickc Exp nickc $
#		(C) Copyright 1990 Perihelion Software
#
# WARNING: assumes you are using GNUmake.
#-----------------------------------------------------------------------------

ifndef InProcMake
# This part of the makefile is run in the components generic source directory

  # These variables should already be set by your make script or environment.
  ifndef HPROC
    HPROC = TRAN
  endif

  ifndef HHOST
    HHOST = SUN4
  endif

  ifndef HSRC
    HSRC = /usr/perihelion/Helios
  endif

  ifndef HPROD
    HPROD = $(HSRC)/slashhelios/$(HPROC)
  endif

.PHONY: notarget
notarget:
	@@$(MAKE) -C $(HPROC)

.DEFAULT:
	@@$(MAKE) -C $(HPROC) $@@

else
#-----------------------------------------------------------------------------
# This part of the makefile is always run in a processor specific subdirectory.

# Manditory variables for a component:
# name of this dir relative to $(HSRC)
COMPONENT = network

# Manditory includes
include $(HSRC)/makeinc/$(HHOST).mak	# Default host system variables
include $(HSRC)/makeinc/$(HPROC).mak	# Default processor rules and vars.

# Manditory phoney targets
.PHONY: default clean Xdefault Xclean
# "default"    - should make this component in its proc subdir
# "install"    - copy the new component to $(HPROD) production directory
# "installdef" - If component is a library, make .def file and install in LIB
# "clean"      - remove all intermediate and executable files from proc subdir
# Phoney targets prefixed by X are for adding processor specific targets.
#
# Processor specific sources are held in the processor specific subdir.,
# generic ones in the directory above it.
HVPATH := $(HSRC)/$(COMPONENT)

ifdef RSRC
HVPATH := $(HSRC)/$(COMPONENT)/$(HPROC):$(RSRC)/$(COMPONENT)/$(HPROC):$(HSRC)/$(COMPONENT):/$(RSRC)/$(COMPONENT)
endif

vpath %.h $(HVPATH)
vpath %.a $(HVPATH)
vpath %.c $(HVPATH)

#-----------------------------------------------------------------------------
# The networking software can produce three different systems:
#    SS : single-user single-processor	(Tiny Helios)
#    MS : multi-user  single-processor	(ARM)
#    MM : multi-user  multi-processor   (The real system)
#

ifeq ($(HPROC),TRAN)
  SYSTEMS := SS MS MM
endif
ifeq ($(HPROC),ARM)
  SYSTEMS := SS
endif
ifeq ($(HPROC),C40)
  SYSTEMS := SS MS MM
endif
ifndef SYSTEMS
  Please define the target systems for your processor.
endif

#
# The different systems require different sets of targets, with some
# overlaps
#
GENERIC_TARGETS_LIB := RmLib RmLib.def netutils.lib session.lib
GENERIC_TARGETS_BIN := stopio rebootio clink logname tty id uptime \
		run passadm remote.nrm

SS_TARGETS_LIB := tfm.sp
SS_TARGETS_BIN := login.ss newuser.su ps.sp loaded.sp wsh.sp kill.sp \
		findtfm diag_tfm

MS_TARGETS_LIB := session.sp tfm.sp
MS_TARGETS_BIN := startns.sp login.sp newuser write wall users whoami \
		who sendto findsm ps.sp loaded.sp wsh.sp kill.sp \
		findtfm diag_tfm diag_sm

MM_TARGETS_LIB := netagent netserv session tfm null_ra.d
MM_TARGETS_BIN := startns startns.64 startns.any login newuser \
		write wall users whoami who sendto diag_ns findns findsm \
		domain ps loaded network elink plink dlink lstatus \
		rmgen wsh remote joinnet kill crash \
		findtfm diag_tfm diag_sm

#
# Determine the actual targets for the processor
#
TARGETS_LIB := 
TARGETS_BIN := 

ifneq (,$(findstring SS,$(SYSTEMS)))
 TARGETS_LIB := $(TARGETS_LIB) $(SS_TARGETS_LIB)
 TARGETS_BIN := $(TARGETS_BIN) $(SS_TARGETS_BIN)
endif
ifneq (,$(findstring MS,$(SYSTEMS)))
 TARGETS_LIB := $(TARGETS_LIB) $(MS_TARGETS_LIB)
 TARGETS_BIN := $(TARGETS_BIN) $(MS_TARGETS_BIN)
endif
ifneq (,$(findstring MM,$(SYSTEMS)))
 TARGETS_LIB := $(TARGETS_LIB) $(MM_TARGETS_LIB)
 TARGETS_BIN := $(TARGETS_BIN) $(MM_TARGETS_BIN)
endif

#
# Eliminate duplicates from the list. The generic targets have to be made
# first under all circumstances, because these include things like the
# various libraries
TARGETS_LIB := $(GENERIC_TARGETS_LIB) $(sort $(TARGETS_LIB))
TARGETS_BIN := $(GENERIC_TARGETS_BIN) $(sort $(TARGETS_BIN))

# 
# Check for the presence of OEM-specific sources, and for various useful
# little packages that have their own subdirectories
#
dirname := $(HPROC)

TELMAT_TEST   := ../telmat/$(dirname)
PARSYTEC_TEST := ../parsytec/$(dirname)
MEIKO_TEST    := ../meiko/$(dirname)
FARMLIB_TEST  := ../packages/farmlib/$(dirname)
HWTESTS1_TEST := ../packages/hwtests1/$(dirname)
RMTESTS_TEST  := ../packages/rmtests/$(dirname)
TFTESTS_TEST  := ../packages/tftests/$(dirname)

TELMAT        := $(strip $(wildcard $(TELMAT_TEST)))
PARSYTEC      := $(strip $(wildcard $(PARSYTEC_TEST)))
MEIKO         := $(strip $(wildcard $(MEIKO_TEST)))
FARMLIB       := $(strip $(wildcard $(FARMLIB_TEST)))
HWTESTS1      := $(strip $(wildcard $(HWTESTS1_TEST)))
RMTESTS	      := $(strip $(wildcard $(RMTESTS_TEST)))
TFTESTS       := $(strip $(wildcard $(TFTESTS_TEST)))

default : $(TARGETS_LIB) $(TARGETS_BIN) Xdefault
	ifeq ($(TELMAT),$(TELMAT_TEST))
		$(MAKE) -C $(TELMAT)
	endif
	ifeq ($(PARSYTEC),$(PARSYTEC_TEST))
		$(MAKE) -C $(PARSYTEC)
	endif
	ifeq ($(MEIKO),$(MEIKO_TEST))
	 	$(MAKE) -C $(MEIKO)
	endif
	ifeq ($(FARMLIB),$(FARMLIB_TEST))
		$(MAKE) -C $(FARMLIB)
	endif
	ifeq ($(HWTESTS1),$(HWTESTS1_TEST))
		$(MAKE) -C $(HWTESTS1)
	endif
	ifeq ($(RMTESTS),$(RMTESTS_TEST))
		$(MAKE) -C $(RMTESTS)
	endif
	ifeq ($(TFTESTS),$(TFTESTS_TEST))
		$(MAKE) -C $(TFTESTS)
	endif

install	: installdef $(TARGETS_LIB) $(TARGETS_BIN) Xinstall
	$(CP) $(TARGETS_BIN) $(BIN)
	$(CP) $(TARGETS_LIB) $(LIB)
	ifeq ($(TELMAT),$(TELMAT_TEST))
		$(MAKE) -C $(TELMAT) install
	endif
	ifeq ($(PARSYTEC),$(PARSYTEC_TEST))
		$(MAKE) -C $(PARSYTEC) install
	endif
	ifeq ($(MEIKO),$(MEIKO_TEST))
		$(MAKE) -C $(MEIKO) install
	endif
	ifeq ($(FARMLIB),$(FARMLIB_TEST))
		$(MAKE) -C $(FARMLIB) install
	endif
	ifeq ($(HWTESTS1),$(HWTESTS1_TEST))
		$(MAKE) -C $(HWTESTS1) install
	endif
	ifeq ($(RMTESTS),$(RMTESTS_TEST))
		$(MAKE) -C $(RMTESTS) install
	endif
	ifeq ($(TFTESTS),$(TFTESTS_TEST))
		$(MAKE) -C $(TFTESTS) install
	endif

ifeq ($(HPROC),ARM)		# special kludge as abcarm doesn't use "Files"
	mv $(LIB)/tfm.sp $(LIB)/tfm
	mv $(BIN)/loaded.sp $(BIN)/loaded
	mv $(BIN)/kill.sp $(BIN)/kill
	mv $(BIN)/ps.sp $(BIN)/ps
	mv $(BIN)/wsh.sp $(BIN)/wsh
	mv $(BIN)/login.ss $(BIN)/login
	mv $(BIN)/newuser.su $(BIN)/newuser
endif
	$(TOUCH) install

installdef: RmLib.def
	ifeq ($(TELMAT),$(TELMAT_TEST))
		$(MAKE) -C $(TELMAT) installdef
	endif
	ifeq ($(PARSYTEC),$(PARSYTEC_TEST))
		$(MAKE) -C $(PARSYTEC) installdef
	endif
	ifeq ($(MEIKO),$(MEIKO_TEST))
		$(MAKE) -C $(MEIKO) installdef
	endif
	ifeq ($(FARMLIB),$(FARMLIB_TEST))
		$(MAKE) -C $(FARMLIB) installdef
	endif
	ifeq ($(HWTESTS1),$(HWTESTS1_TEST))
		$(MAKE) -C $(HWTESTS1) installdef
	endif
	ifeq ($(RMTESTS),$(RMTESTS_TEST))
		$(MAKE) -C $(RMTESTS) installdef
	endif
	ifeq ($(TFTESTS),$(TFTESTS_TEST))
		$(MAKE) -C $(TFTESTS) installdef
	endif
	$(CP) RmLib.def $(LIB)
	$(TOUCH) installdef

clean	: Xclean
	-$(RM) $(OBJECTS)
	-$(RM) $(TARGETS_BIN)
	-$(RM) $(TARGETS_LIB)
	-$(RM) $(XOBJECTS)
	-$(RM) $(XTARGETS) 
	-$(RM) mkout core ../mkout install installdef Xinstall
	ifeq ($(TELMAT),$(TELMAT_TEST))
		$(MAKE) -C $(TELMAT) clean
	endif
	ifeq ($(PARSYTEC),$(PARSYTEC_TEST))
		$(MAKE) -C $(PARSYTEC) clean
	endif
	ifeq ($(MEIKO),$(MEIKO_TEST))
		$(MAKE) -C $(MEIKO) clean
	endif
	ifeq ($(FARMLIB),$(FARMLIB_TEST))
		$(MAKE) -C $(FARMLIB) clean
	endif
	ifeq ($(HWTESTS1),$(HWTESTS1_TEST))
		$(MAKE) -C $(HWTESTS1) clean
	endif
	ifeq ($(RMTESTS),$(RMTESTS_TEST))
		$(MAKE) -C $(RMTESTS) clean
	endif
	ifeq ($(TFTESTS),$(TFTESTS_TEST))
		$(MAKE) -C $(TFTESTS) clean
	endif


#-----------------------------------------------------------------------------
# for archive, backup and cleaning purposes,
# note all generic SOURCE and OBJECT files:

# Note all sources
SOURCES		= $(SOURCES.c) $(SOURCES.a) \
		   $(HEADERS.c) $(HEADERS.m) \
		   $(SOURCES.odd)

# Full set of object files - cheat a little - all possibles
# Some files are not generated using obvious sources
OBJECTS		= $(SOURCES.c:.c=.o) $(SOURCES.a:.a=.o) \
		  $(SOURCES.c:.c=.p) $(SOURCES.a:.a=.p) \
		  $(SOURCES.c:.c=.q) $(SOURCES.a:.a=.q) \
		 sessionsp.o tfmsp.o tfmjobss.o newuser2.o \
		 startns6.o startnsa.o startnss.o \
		 loginss.o loginsp.o \
		 wshsp.o pssp.o loadedsp.o killsp.o remoten.o

SOURCES.c	=	nuconfig.c nuprtnet.c nuprttf.c nuheap.c \
			nuqrtns.c nulocks.c nucount.c nuioc.c nuobjs.c \
			nuwalk.c nuports.c nuinfo.c numon.c nupasswd.c \
			rmlib1.c rmlib2.c rmlib3.c rmlhost.c \
			startns.c readmap.c \
			netserv.c netboot.c netmon.c netalloc.c \
			netnativ.c netmisc.c \
			tfm.c readcdl.c tfmjobs.c tfmmap.c \
			tfmmisc.c tfmrun.c tfmwoe.c \
			session.c userdb.c \
			stopio.c \
			rebootio.c \
			domain.c \
			newuser.c newuser2.c \
			findns.c \
			findsm.c \
			findtfm.c \
			login.c \
			write.c \
			wall.c \
			sendto.c \
			users.c \
			who.c \
			logname.c \
			tty.c \
			id.c \
			whoami.c \
			slnewusr.c sltests.c sllogin.c sltfm.c slnames.c \
			slwindow.c \
			diag_tfm.c diag_ns.c diag_sm.c \
			run.c \
			ps.c \
			loaded.c \
			uptime.c \
			clink.c \
			netagent.c \
			network.c \
			lstatus.c \
			elink.c \
			plink.c \
			dlink.c \
			rmgen.c \
			wsh.c \
			remote.c \
			joinnet.c \
			kill.c \
			null_ra.c \
			crash.c \
			passadm.c

# AMPP source files
SOURCES.a 	= 	resource.a 	\
			modend.a driver.a

# C header files
HEADERS.c	=	session.h rmlib.h netutils.h private.h exports.h \
			netaux.h tfmaux.h sessaux.h

# AMPP macro files
HEADERS.m	=

# Any other source files
SOURCES.odd	= makefile


#-----------------------------------------------------------------------------
# Other generic component variables:

DEFINES	:= $(DEFINES)

# Set any flags required
NCFLAGS := $(NCFLAGS) -D_BSD
# Optional flags:
#	-DSTACKCHECK		used by parts of the software to override 
#				-ps1 pragma
#	-DSTACKEXTENSION	use small stacks, relies on -DSTACKCHECK

CCFLAGS := $(CCFLAGS) -I$(INCLUDE) -D_BSD
ifeq ($(HPROC),TRAN)
  # -pg0 remove names from code
  NCFLAGS   := $(NCFLAGS) -t4 -pg0 -D_BSD
  LINKFLAGS := $(LINKFLAGS) -f
  TFMHEAP   := -h30000
  NSHEAP    := -h30000
  SMHEAP    := -h50000
endif
ifeq ($(HPROC),C40)
  # -zpc1	= enable mem check, -zpm1 = enable backtrace
  NCFLAGS   := $(NCFLAGS) -DSTACKCHECK -DSTACKEXTENSION
  TFMHEAP   := -h30000
  NSHEAP    := -h30000
  SMHEAP    := -h40000
endif
ifeq ($(HPROC),ARM)
  NCFLAGS := $(NCFLAGS) -DSTACKCHECK
endif

ifndef SSTART
 ifeq ($(HPROC),ARM)
   SSTART = $(LIB)/sstart.o
 else
   SSTART = $(LIB)/s0.o
 endif
endif

CSTART = $(LIB)/c0.o

# Note any library def files to be linked with
# in this case for the resource management library
LIBDEFS	:= $(LIB)/kernel.def $(LIB)/syslib.def $(LIB)/util.def $(LIB)/posix.def

# Libraries needed by most of the software
LIBS := -lsession.lib -lRmLib.def -lnetutils.lib \
		-l$(LIB)/c.lib -l$(LIB)/helios.lib -l$(LIB)/bsd.lib

# libraries needed for running on bare machine
 SYSLIBS := -l$(LIB)/helios.lib -lsession.lib

#-----------------------------------------------------------------------------
# Resource Management Library. This is the same for all systems, a little bit
# unfortunate since it is quite big and some of the facilities are useless
# unless you have a multi-processor network. However, it is too much effort
# to untangle everything.

RmLib :	resource.p rmlib1.p rmlib2.p rmlib3.p modend.p 
	$(LINK.LIBRARY) -nRmLib $^ $(LIBDEFS) -o$@@

RmLib.def :	resource.a
	$(MAKE.DEF)

#-----------------------------------------------------------------------------
# Session Manager library, a scanned library for now. This is only useful
# in a multi-user environment.

session.lib : slnewusr.o sltests.o sllogin.o sltfm.o slnames.o slwindow.o
ifeq ($(HPROC),TRAN)
	$(LINK) -p -o$@@ $^
else
	cat $^ > $@@
endif

#-----------------------------------------------------------------------------
# netutils.lib, another scanned library. This is always made, it contains
# things like PrintNetwork() which are needed all over the place.

netutils.lib : nuconfig.o nuprtnet.o nuprttf.o nuheap.o nuqrtns.o \
		nulocks.o nucount.o nuioc.o nuobjs.o nuwalk.o nuports.o \
		nuinfo.o numon.o nupasswd.o
ifeq ($(HPROC),TRAN)
	$(LINK) -p -o$@@ $^
else
	cat $^ > $@@
endif

#-----------------------------------------------------------------------------
# The three main servers are the Network Server, the Session Manager, and
# the Taskforce Manager. The Network Server is only useful in a multi-processor
# environment, and there is only one version.
# Note: the heap size is the same as that of the Processor Manager to reduce
# fragmentation problems
netserv : netserv.o netmisc.o netboot.o netmon.o netalloc.o netnativ.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ $(NSHEAP) -s2000 $(CSTART) $^ $(LIBS)

#
# The Session Manager comes in two flavours, session.sp for the MS system and
# session for the MM system. In the MS system multiple users can log in, they
# may or may not use TFM's, but all TFM's run on the same processor.
session : session.o userdb.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ $(SMHEAP) -s2000 $(CSTART) $^ $(LIBS)

session.sp : sessionsp.o userdb.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ $(SMHEAP) -s2000 $(CSTART) $^ $(LIBS)

sessionsp.o : session.c
ifeq ($(HPROC),ARM)
	$(NC) -c $(NCFLAGS) -o$@@ -I$(HSRC)/$(COMPONENT) -DSingleProcessor $<
else
	$(CC) -c $(CCFLAGS) -o$@@ -I$(HSRC)/$(COMPONENT) -DSingleProcessor $<
endif

#
# The TFM can come in two flavours as well. There is tfm.sp for the single
# processor version, and tfm for the multi-processor version.
# The heap sizes match the heap of the Processor Manager to reduce fragmentation
tfm : tfm.o readcdl.o tfmmap.o tfmmisc.o tfmrun.o tfmwoe.o tfmjobs.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ $(NSHEAP) -s2000 $(CSTART) $^ $(LIBS)

tfm.sp : tfmrun.o tfmmap.o tfmjobss.o tfmsp.o readcdl.o tfmmisc.o tfmwoe.o nulocks.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ $(NSHEAP) -s2000 $(CSTART) $^ $(LIBS)

tfmsp.o : tfm.c
ifeq ($(HPROC),ARM)
	$(NC) -c $(NCFLAGS) -o$@@ -I$(HSRC)/$(COMPONENT) -DSingleProcessor $<
else
	$(CC) -c $(CCFLAGS) -o$@@ -I$(HSRC)/$(COMPONENT) -DSingleProcessor $<
endif

tfmjobss.o : tfmjobs.c
ifeq ($(HPROC),ARM)
	$(NC) -c $(NCFLAGS) -o$@@ -I$(HSRC)/$(COMPONENT) -DSingleProcessor $<
else
	$(CC) -c $(CCFLAGS) -o$@@ -I$(HSRC)/$(COMPONENT) -DSingleProcessor $<
endif

#-----------------------------------------------------------------------------
# device drivers
null_ra.d : driver.q null_ra.q modend.q RmLib.def
	$(LINK.LIBRARY) -o $@@ $^ $(LIBDEFS)

#-----------------------------------------------------------------------------
# `system' commands, these do not need the C library. Newuser is complicated,
# there are two versions of this depending on whether or not there is a
# Session Manager

netagent : netagent.o
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s1500 -h5000 $(SSTART) $^ $(SYSLIBS)

clink : clink.o
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s1000 -h2000 $(SSTART) $^ $(SYSLIBS) -l$(LIB)/c.lib

newuser : newuser.o
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s2000 -h2000 $(SSTART) $^ $(SYSLIBS) -l$(LIB)/c.lib

newuser.su : newuser2.o
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s2000 -h2000 $(CSTART) $^ $(LIBS)

#-----------------------------------------------------------------------------
# Startns comes in umpteen delicious flavours.

startns : startns.o readmap.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

startns.64 : startns6.o readmap.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

startns.any : startnsa.o readmap.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

startns.sp : startnss.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

startns.o : startns.c
ifeq ($(HPROC),ARM)
	$(NC) -c $(NCFLAGS) -o$@@ -DLimit20 -I$(HSRC)/$(COMPONENT) $<
else
	$(CC) -c $(CCFLAGS) -o$@@ -DLimit20 -I$(HSRC)/$(COMPONENT) $<
endif

startns6.o : startns.c
ifeq ($(HPROC),ARM)
	$(NC) -c $(NCFLAGS) -o$@@ -DLimit64 -I$(HSRC)/$(COMPONENT) $<
else
	$(CC) -c $(CCFLAGS) -o$@@ -DLimit64 -I$(HSRC)/$(COMPONENT) $<
endif

startnsa.o : startns.c
ifeq ($(HPROC),ARM)
	$(NC) -c $(NCFLAGS) -o$@@ -I$(HSRC)/$(COMPONENT) $<
else
	$(CC) -c $(CCFLAGS) -o$@@ -I$(HSRC)/$(COMPONENT) $<
endif

startnss.o : startns.c
ifeq ($(HPROC),ARM)
	$(NC) -c $(NCFLAGS) -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
else
	$(CC) -c $(CCFLAGS) -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
endif

#-----------------------------------------------------------------------------
# Login also needs rather a lot of versions.
login : login.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h10000 $(CSTART) $^ $(LIBS)

login.ss : loginss.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h10000 $(CSTART) $^ $(LIBS)

login.sp : loginsp.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h10000 $(CSTART) $^ $(LIBS)

loginss.o : login.c
ifeq ($(HPROC),ARM)
	$(NC) -c $(NCFLAGS) -o$@@ -DSingleSingle -I$(HSRC)/$(COMPONENT) $<
else
	$(CC) -c $(CCFLAGS) -o$@@ -DSingleSingle -I$(HSRC)/$(COMPONENT) $<
endif

loginsp.o : login.c
ifeq ($(HPROC),ARM)
	$(NC) -c $(NCFLAGS) -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
else
	$(CC) -c $(CCFLAGS) -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
endif

#-----------------------------------------------------------------------------
# And so on for the various complicated commands.

wsh : wsh.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

wsh.sp : wshsp.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

wshsp.o : wsh.c
ifeq ($(HPROC),ARM)
	$(NC) -c $(NCFLAGS) -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
else
	$(CC) -c $(CCFLAGS) -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
endif

ps :	ps.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

ps.sp : pssp.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

pssp.o : ps.c
ifeq ($(HPROC),ARM)
	$(NC) -c $(NCFLAGS) -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
else
	$(CC) -c $(CCFLAGS) -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
endif

loaded : loaded.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

loaded.sp : loadedsp.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

loadedsp.o : loaded.c
ifeq ($(HPROC),ARM)
	$(NC) -c $(NCFLAGS) -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
else
	$(CC) -c $(CCFLAGS) -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
endif

kill : kill.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

kill.sp : killsp.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

killsp.o : kill.c
ifeq ($(HPROC),ARM)
	$(NC) -c $(NCFLAGS) -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
else
	$(CC) -c $(CCFLAGS) -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
endif

remote : remote.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

remote.nrm : remoten.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

remoten.o : remote.c
ifeq ($(HPROC),ARM)
	$(NC) -c $(NCFLAGS) -o$@@ -DNoRmLib -I$(HSRC)/$(COMPONENT) $<
else
	$(CC) -c $(CCFLAGS) -o$@@ -DNoRmLib -I$(HSRC)/$(COMPONENT) $<
endif

#-----------------------------------------------------------------------------
# And finally some commands that are simple, and for which only one
# version is needed.

rmgen : rmgen.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s6000 -h4000 $(CSTART) $^ $(LIBS)

joinnet : joinnet.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

stopio : stopio.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

rebootio : rebootio.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

write : write.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

wall : wall.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

users : users.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

whoami : whoami.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

who :	who.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

diag_tfm : diag_tfm.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

logname : logname.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

tty :	tty.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

sendto : sendto.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

id :	id.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

network : network.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

domain : domain.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

uptime : uptime.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

diag_ns : diag_ns.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

diag_sm : diag_sm.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

findns : findns.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

findsm : findsm.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

findtfm : findtfm.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

run :	run.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

elink : elink.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

dlink : dlink.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

plink : plink.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

lstatus : lstatus.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

crash : crash.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

passadm : passadm.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)

#-----------------------------------------------------------------------------
endif #InProcMake	# This line must be at EOF
@


1.43
log
@slightly rearranged component line for tfm.sp
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.42 1993/12/10 09:13:14 nickc Exp nickc $
d491 1
a491 1
tfm.sp : tfmsp.o tfmmap.o tfmjobss.o tfmrun.o readcdl.o tfmmisc.o tfmwoe.o nulocks.o
@


1.42
log
@fixed to use NC rather than CC
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.41 1993/12/08 17:38:47 nickc Exp nickc $
d488 1
a488 1
tfm : tfm.o tfmjobs.o readcdl.o tfmmap.o tfmmisc.o tfmrun.o tfmwoe.o
d491 1
a491 1
tfm.sp : tfmsp.o tfmjobss.o readcdl.o tfmmap.o tfmmisc.o tfmrun.o tfmwoe.o
@


1.41
log
@added ARM6 rules
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.40 1993/08/13 10:33:49 bart Exp nickc $
a91 3
ifeq ($(HPROC),ARM6)
  SYSTEMS := SS
endif
a227 9
ifeq ($(HPROC),ARM6)		# special kludge as abcarm doesn't use "Files"
	mv $(LIB)/tfm.sp $(LIB)/tfm
	mv $(BIN)/loaded.sp $(BIN)/loaded
	mv $(BIN)/kill.sp $(BIN)/kill
	mv $(BIN)/ps.sp $(BIN)/ps
	mv $(BIN)/wsh.sp $(BIN)/wsh
	mv $(BIN)/login.ss $(BIN)/login
	mv $(BIN)/newuser.su $(BIN)/newuser
endif
a399 3
ifeq ($(HPROC),ARM6)
  NCFLAGS := $(NCFLAGS) -DSTACKCHECK
endif
d405 1
a405 5
   ifeq ($(HPROC),ARM6)
     SSTART = $(LIB)/sstart.o
   else
     SSTART = $(LIB)/s0.o
   endif
d478 3
d482 1
d495 3
d499 1
d502 3
d506 1
d546 3
d550 1
d553 3
d557 1
d560 3
d564 1
d567 3
d571 1
d585 3
d589 1
d592 3
d596 1
d608 3
d612 1
d621 3
d625 1
d634 3
d638 1
d647 3
d651 1
d660 3
d664 1
@


1.40
log
@Sorted out various minor problems
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.24 1992/01/16 14:41:04 bart Exp $
d92 3
d231 9
d412 3
d418 1
a418 1
  SSTART = $(LIB)/sstart.o
d420 5
a424 1
  SSTART = $(LIB)/s0.o
@


1.39
log
@Added the rmlhost.c module
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.38 1993/07/26 08:39:14 nickc Exp bart $
a86 3
 ifdef BartsWorld
  SYSTEMS := MM
 else
a87 1
 endif
d153 1
a153 5
ifdef BartsWorld
 dirname := tran
else
 dirname := $(HPROC)
endif
d167 1
a167 1
HWTESTS1        := $(strip $(wildcard $(HWTESTS1_TEST)))
d175 1
a175 2
	ifndef BartsWorld
	 ifeq ($(PARSYTEC),$(PARSYTEC_TEST))
d177 2
a178 2
	 endif
	 ifeq ($(MEIKO),$(MEIKO_TEST))
d180 2
a181 2
	 endif
	 ifeq ($(FARMLIB),$(FARMLIB_TEST))
d183 2
a184 2
	 endif
	 ifeq ($(HWTESTS1),$(HWTESTS1_TEST))
d186 2
a187 2
	 endif
	 ifeq ($(RMTESTS),$(RMTESTS_TEST))
d189 2
a190 2
	 endif
	 ifeq ($(TFTESTS),$(TFTESTS_TEST))
a191 1
	 endif
a192 10
	ifdef BartsWorld	# nobody else should define this
		export RmLib session.lib netagent netserv session tfm null_ra.d \
		pa_ra.d tram_ra.d RmLib.def \
		/helios/lib
		export startns stopio rebootio login newuser write wall users \
		whoami who diag_tfm clink logname tty sendto id network uptime \
		diag_ns findns findsm findtfm run domain ps loaded lstatus elink \
		plink dlink rmgen wsh remote joinnet kill startns.64 startns.any \
		rboot pa_rboot pa_reset tr_reset diag_sm passadm /helios/bin
	endif
a193 1

d218 1
a254 1

d296 2
a297 2
OBJECTS		= $(SOURCES.c:.c=.p) $(SOURCES.a:.a=.p) \
		  $(SOURCES.c:.c=.o) $(SOURCES.a:.a=.o) \
d332 2
a333 1
			slwindow.c diag_tfm.c diag_ns.c diag_sm.c \
d376 5
d383 2
a384 1
  NCFLAGS := $(NCFLAGS) -t4 -pg0
d386 3
d391 5
a395 2
# -zpc1	= enable mem check, -zpm1 = enable backtrace
  NCFLAGS := $(NCFLAGS) #-zpm1 -zpc1	# tmp enable mem check
d397 3
a400 1

d465 1
a465 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h60000 -s2000 $(CSTART) $^ $(LIBS)
d472 1
a472 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h50000 -s2000 $(CSTART) $^ $(LIBS)
d475 1
a475 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h50000 -s2000 $(CSTART) $^ $(LIBS)
d485 1
a485 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h60000 -s2000 $(CSTART) $^ $(LIBS)
d488 1
a488 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h60000 -s2000 $(CSTART) $^ $(LIBS)
a497 1

@


1.38
log
@fixed typo in clean target
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.37 1993/06/22 14:08:39 bart Exp nickc $
d328 1
a328 1
			rmlib1.c rmlib2.c rmlib3.c \
d396 1
a396 1
CCFLAGS := -D_BSD
@


1.37
log
@Added new target remote.nrm, a version of remote which does not require
RmLib
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.36 1992/10/20 15:01:29 bart Exp bart $
d295 1
a295 1
	ifeq ($(HWTESTS1),$(HWTEST1_TEST))
@


1.36
log
@Renamed the tests1 directory to hwtests1
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.35 1992/10/11 13:37:09 bart Exp bart $
d109 1
a109 1
		run passadm
d323 1
a323 1
		 wshsp.o pssp.o loadedsp.o killsp.o
d608 9
a622 3

remote : remote.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)
@


1.35
log
@Added support for encrypted passwords
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.34 1992/09/14 17:10:28 bart Exp bart $
d167 1
a167 1
TESTS1_TEST   := ../packages/tests1/$(dirname)
d169 1
a169 1
TFTESTS_TEST := ../packages/tftests/$(dirname)
d175 1
a175 1
TESTS1        := $(strip $(wildcard $(TESTS1_TEST)))
d193 2
a194 2
	 ifeq ($(TESTS1),$(TESTS1_TEST))
		$(MAKE) -C $(TESTS1)
d230 2
a231 2
	ifeq ($(TESTS1),$(TESTS1_TEST))
		$(MAKE) -C $(TESTS1) install
d263 2
a264 2
	ifeq ($(TESTS1),$(TESTS1_TEST))
		$(MAKE) -C $(TESTS1) installdef
d295 2
a296 2
	ifeq ($(TESTS1),$(TEST1_TEST))
		$(MAKE) -C $(TESTS1) clean
@


1.34
log
@Increased stacksize for rmgen, it has a few more buffers on its stack to
support idroms.
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.33 1992/08/14 18:29:54 bart Exp bart $
d109 1
a109 1
		run
d211 1
a211 1
		rboot pa_rboot pa_reset tr_reset diag_sm /helios/bin
d327 1
a327 1
			nuwalk.c nuports.c nuinfo.c numon.c \
d371 2
a372 1
			crash.c
d457 1
a457 1
		nuinfo.o numon.o
d697 3
@


1.33
log
@Crash now builds for C40
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.31 1992/07/09 17:23:03 paul Exp paul $
d612 1
a612 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $(CSTART) $^ $(LIBS)
@


1.32
log
@Added optional debugging flags for C40
@
text
@d124 1
a124 1
		rmgen wsh remote joinnet kill # crash \
@


1.31
log
@fixed up for .q device driver builds
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.30 1992/06/28 12:29:50 bart Exp $
d397 1
a397 1
  NCFLAGS := $(NCFLAGS) -t4 -pg0 -D_BSD
d399 4
@


1.30
log
@Replaced invocation of make by $(MAKE)
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.29 1992/06/26 17:48:13 bart Exp $
d319 1
d352 2
a353 2
			slnewusr.c sltests.c sllogin.c sltfm.c slnames.c slwindow.c \
			diag_tfm.c diag_ns.c diag_sm.c \
d499 2
a500 1
null_ra.d : driver.p null_ra.p modend.p RmLib.def
@


1.29
log
@make install no longer copies everything every time
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.28 1992/06/11 10:39:07 bart Exp bart $
d181 1
a181 1
		make -C $(TELMAT)
d185 1
a185 1
		make -C $(PARSYTEC)
d188 1
a188 1
	 	make -C $(MEIKO)
d191 1
a191 1
		make -C $(FARMLIB)
d194 1
a194 1
		make -C $(TESTS1)
d197 1
a197 1
		make -C $(RMTESTS)
d200 1
a200 1
		make -C $(TFTESTS)
d219 1
a219 1
		make -C $(TELMAT) install
d222 1
a222 1
		make -C $(PARSYTEC) install
d225 1
a225 1
		make -C $(MEIKO) install
d228 1
a228 1
		make -C $(FARMLIB) install
d231 1
a231 1
		make -C $(TESTS1) install
d234 1
a234 1
		make -C $(RMTESTS) install
d237 1
a237 1
		make -C $(TFTESTS) install
d252 1
a252 1
		make -C $(TELMAT) installdef
d255 1
a255 1
		make -C $(PARSYTEC) installdef
d258 1
a258 1
		make -C $(MEIKO) installdef
d261 1
a261 1
		make -C $(FARMLIB) installdef
d264 1
a264 1
		make -C $(TESTS1) installdef
d267 1
a267 1
		make -C $(RMTESTS) installdef
d270 1
a270 1
		make -C $(TFTESTS) installdef
d284 1
a284 1
		make -C $(TELMAT) clean
d287 1
a287 1
		make -C $(PARSYTEC) clean
d290 1
a290 1
		make -C $(MEIKO) clean
d293 1
a293 1
		make -C $(FARMLIB) clean
d296 1
a296 1
		make -C $(TESTS1) clean
d299 1
a299 1
		make -C $(RMTESTS) clean
d302 1
a302 1
		make -C $(TFTESTS) clean
@


1.28
log
@Fixed a typo in a TFTESTS check
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.27 1992/06/08 15:27:20 bart Exp bart $
d250 1
a250 1
installdef: $(LIB)/RmLib.def
d272 1
a274 2
$(LIB)/RmLib.def : RmLib.def 
	$(CP) $^ $(LIB)
@


1.27
log
@Moved the netutils routine LookupProcessor into the Resource Management
library, RmLookupProcessor()
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.26 1992/04/24 15:34:20 bart Exp bart $
d237 1
a237 1
		make -C $(TfTESTS) install
a238 1

@


1.26
log
@Added diag_sm and various new components of the network utilities
library. Also, minor clean-ups.
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.25 1992/03/03 19:35:45 bart Exp bart $
d326 1
a326 1
SOURCES.c	=	nuconfig.c nuprtnet.c nuprttf.c nuheap.c nulookup.c \
d451 1
a451 1
netutils.lib : nuconfig.o nuprtnet.o nuprttf.o nuheap.o nulookup.o nuqrtns.o \
@


1.25
log
@Put in the correct C40 support
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.24 1992/01/16 14:41:04 bart Exp bart $
d97 1
a97 1
  SYSTEMS := SS
d108 2
a109 2
GENERIC_TARGETS_BIN := stopio rebootio diag_tfm clink logname tty id uptime \
		findtfm run
d112 2
a113 1
SS_TARGETS_BIN := login.ss newuser.su ps.sp loaded.sp wsh.sp kill.sp
d117 2
a118 1
		who sendto findsm ps.sp loaded.sp wsh.sp kill.sp
d124 2
a125 1
		rmgen wsh remote joinnet kill crash
d154 2
a155 1
# Check for the presence of OEM-specific sources
d157 5
a161 6
TELMAT        := $(strip $(wildcard ../telmat/$(HPROC)))
TELMAT_TEST   := ../telmat/$(HPROC)
PARSYTEC      := $(strip $(wildcard ../parsytec/$(HPROC)))
PARSYTEC_TEST := ../parsytec/$(HPROC)
MEIKO         := $(strip $(wildcard ../meiko/$(HPROC)))
MEIKO_TEST    := ../meiko/$(HPROC)
d163 7
a169 7
#
# Various useful little packages that have their own subdirectories
#
FARMLIB       := $(strip $(wildcard ../packages/farmlib/$(HPROC)))
FARMLIB_TEST  := ../packages/farmlib/$(HPROC)
TESTS1        := $(strip $(wildcard ../packages/tests1/$(HPROC)))
TESTS1_TEST   := ../packages/tests1/$(HPROC)
d171 8
d196 6
d211 1
a211 1
		rboot pa_rboot pa_reset tr_reset /helios/bin
d233 6
d265 1
a265 1
		make -C $(TESTS1)
d267 6
d300 6
d327 2
a328 1
			nuqrtns.c nulocks.c nucount.c nuioc.c \
d354 1
a354 2
			diag_tfm.c \
			diag_ns.c \
d395 3
a397 4
ifeq ($(HPROC),ARM)
  NCFLAGS := $(NCFLAGS)
else
 ifeq ($(HPROC),TRAN)
a398 2
  CCFLAGS := -D_BSD
  DEFINES := $(DEFINES)
a399 3
 else
  NCFLAGS := $(NCFLAGS)
 endif
d430 2
a431 3
RmLib :	resource.p rmlib1.p rmlib2.p rmlib3.p modend.p \
		$(LIBDEFS) 
	$(LINK.LIBRARY) -nRmLib $^ -o$@@
d452 2
a453 1
		nulocks.o nucount.o nuioc.o
d466 2
a467 2
netserv : $(CSTART) netserv.o netmisc.o netboot.o netmon.o netalloc.o netnativ.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h60000 -s2000 $^ $(LIBS)
d473 2
a474 2
session : $(CSTART) session.o userdb.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h30000 -s2000 $^ $(LIBS)
d476 2
a477 2
session.sp : $(CSTART) sessionsp.o userdb.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h30000 -s2000 $^ $(LIBS)
d486 2
a487 2
tfm : $(CSTART) tfm.o tfmjobs.o readcdl.o tfmmap.o tfmmisc.o tfmrun.o tfmwoe.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h60000 -s2000 $^ $(LIBS)
d489 2
a490 2
tfm.sp : $(CSTART) tfmsp.o tfmjobss.o readcdl.o tfmmap.o tfmmisc.o tfmrun.o tfmwoe.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h60000 -s2000 $^ $(LIBS)
d500 2
a501 2
null_ra.d : driver.p null_ra.p modend.p $(LIBDEFS) RmLib.def
	$(LINK.LIBRARY) -o $@@ $^
d508 2
a509 2
netagent : $(SSTART) netagent.o
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s1500 -h5000 $^ $(SYSLIBS)
d511 2
a512 2
clink : $(SSTART) clink.o
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s1000 -h2000 $^ $(SYSLIBS) -l$(LIB)/c.lib
d514 2
a515 2
newuser : $(SSTART) newuser.o
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s2000 -h2000 $^ $(SYSLIBS) -l$(LIB)/c.lib
d517 2
a518 2
newuser.su : $(CSTART) newuser2.o
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s2000 -h2000 $^ $(LIBS)
d523 2
a524 2
startns : $(CSTART) startns.o readmap.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d526 2
a527 2
startns.64 : $(CSTART) startns6.o readmap.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d529 2
a530 2
startns.any : $(CSTART) startnsa.o readmap.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d532 2
a533 2
startns.sp : $(CSTARTS) startnss.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d549 2
a550 2
login : $(CSTART) login.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h10000 $^ $(LIBS)
d552 2
a553 2
login.ss : $(CSTART) loginss.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h10000 $^ $(LIBS)
d555 2
a556 2
login.sp : $(CSTART) loginsp.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h10000 $^ $(LIBS)
d567 2
a568 2
wsh : $(CSTART) wsh.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d570 2
a571 2
wsh.sp : $(CSTART) wshsp.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d576 2
a577 2
ps :	$(CSTART) ps.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d579 2
a580 2
ps.sp : $(CSTART) pssp.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d585 2
a586 2
loaded : $(CSTART) loaded.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d588 2
a589 2
loaded.sp : $(CSTART) loadedsp.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d594 2
a595 2
kill : $(CSTART) kill.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d597 2
a598 2
kill.sp : $(CSTART) killsp.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d607 2
a608 2
rmgen : $(CSTART) rmgen.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d610 2
a611 2
remote : $(CSTART) remote.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d613 2
a614 2
joinnet : $(CSTART) joinnet.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d616 2
a617 2
stopio : $(CSTART) stopio.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d619 2
a620 2
rebootio : $(CSTART) rebootio.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d622 2
a623 2
write : $(CSTART) write.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d625 2
a626 2
wall : $(CSTART) wall.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d628 2
a629 2
users : $(CSTART) users.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d631 2
a632 2
whoami : $(CSTART) whoami.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d634 2
a635 2
who :	$(CSTART) who.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d637 2
a638 2
diag_tfm : $(CSTART) diag_tfm.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d640 2
a641 2
logname : $(CSTART) logname.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d643 2
a644 2
tty :	$(CSTART) tty.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d646 2
a647 2
sendto : $(CSTART) sendto.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d649 2
a650 2
id :	$(CSTART) id.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d652 2
a653 2
network : $(CSTART) network.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d655 2
a656 2
domain : $(CSTART) domain.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d658 2
a659 2
uptime : $(CSTART) uptime.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d661 2
a662 2
diag_ns : $(CSTART) diag_ns.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d664 2
a665 2
findns : $(CSTART) findns.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d667 2
a668 2
findsm : $(CSTART) findsm.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d670 2
a671 2
findtfm : $(CSTART) findtfm.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d673 2
a674 2
run :	$(CSTART) run.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d676 2
a677 2
elink : $(CSTART) elink.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d679 2
a680 2
dlink : $(CSTART) dlink.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d682 2
a683 2
plink : $(CSTART) plink.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d685 2
a686 2
lstatus : $(CSTART) lstatus.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d688 5
a692 2
crash : $(CSTART) crash.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
@


1.24
log
@1) added crash.c
2) added a packages subdirectory. The makefile will now make
   packages/farmlib and packages/tests1 if appropriate
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.23 1992/01/15 11:04:39 bart Exp bart $
d94 3
@


1.23
log
@Major update of networking sources, to incorporate the fault-tolerance
work as demonstrated at the IED meeting 10.1.92
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.5 90/09/24 18:42:57 bart Exp Locker: bart $
d119 1
a119 1
		rmgen wsh remote joinnet kill 
d150 6
a155 3
TELMAT := $(strip $(wildcard ../telmat/$(HPROC)))
PARSYTEC := $(strip $(wildcard ../parsytec/$(HPROC)))
MEIKO := $(strip $(wildcard ../meiko/$(HPROC)))
d157 8
d166 2
a167 2
	ifeq ($(TELMAT),../telmat/$(HPROC))
		make -C ../telmat/$(HPROC)
d170 2
a171 2
	 ifeq ($(PARSYTEC),../parsytec/$(HPROC))
		make -C ../parsytec/$(HPROC)
d173 2
a174 2
	 ifeq ($(MEIKO),../meiko/$(HPROC))
	 	make -C ../meiko/$(HPROC)
d176 6
d198 2
a199 2
	ifeq ($(TELMAT),../telmat/$(HPROC))
		make -C ../telmat/$(HPROC) install
d201 2
a202 2
	ifeq ($(PARSYTEC),../parsytec/$(HPROC))
		make -C ../parsytec/$(HPROC) install
d204 2
a205 2
	ifeq ($(MEIKO),../meiko/$(HPROC))
		make -C ../meiko/$(HPROC) install
d207 7
d226 2
a227 2
	ifeq ($(TELMAT),../telmat/$(HPROC))
		make -C ../telmat/$(HPROC) installdef
d229 2
a230 2
	ifeq ($(PARSYTEC),../parsytec/$(HPROC))
		make -C ../parsytec/$(HPROC) installdef
d232 2
a233 2
	ifeq ($(MEIKO),../meiko/$(HPROC))
		make -C ../meiko/$(HPROC) installdef
d235 6
d253 2
a254 2
	ifeq ($(TELMAT),../telmat/$(HPROC))
		make -C ../telmat/$(HPROC) clean
d256 2
a257 2
	ifeq ($(PARSYTEC),../parsytec/$(HPROC))
		make -C ../parsytec/$(HPROC) clean
d259 2
a260 2
	ifeq ($(MEIKO),../meiko/$(HPROC))
		make -C ../meiko/$(HPROC) clean
d262 6
d333 2
a334 1
			null_ra.c
d654 3
@


1.22
log
@Major update of networking sources, to match Helios1_2_2_native_beta
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.21 1991/12/02 16:49:13 martyn Exp bart $
d87 3
d91 1
d112 1
a112 1
MS_TARGETS_BIN := startns.sp stopns login.sp newuser write wall users whoami \
d116 1
a116 1
MM_TARGETS_BIN := startns startns.64 startns.any stopns login newuser \
d119 1
a119 1
		rmgen wsh remote joinnet kill
d158 2
a159 1
	ifeq ($(PARSYTEC),../parsytec/$(HPROC))
d161 4
a165 3
	ifeq ($(MEIKO),../meiko/$(HPROC))
		make -C ../meiko/$(HPROC)
	endif
d168 1
a168 1
		pa_ra.d tram_ra.d rmlib.def \
d177 1
d253 1
d256 4
a259 2
			netserv.c netboot.c netmon.c netalloc.c netnativ.c \
			tfm.c readcdl.c tfmjobs.c \
a260 1
			stopns.c \
d305 1
a305 1
			netaux.h tfmaux.h
d324 2
a325 1
  NCFLAGS := $(NCFLAGS) -t4
d342 1
a342 3
#ifndef CSTART
  CSTART = $(LIB)/c0.o
#endif
d349 2
a350 1
 LIBS := -lsession.lib -lRmLib.def -lnetutils.lib -l$(LIB)/c.lib -l$(LIB)/helios.lib -l$(LIB)/bsd.lib
d383 2
a384 1
netutils.lib : nuconfig.o nuprtnet.o nuprttf.o nuheap.o nulookup.o
d395 4
a399 3
netserv : $(CSTART) netserv.o netboot.o netmon.o netalloc.o netnativ.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h20000 -s2000 $^ $(LIBS)

d405 1
a405 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h20000 -s2000 $^ $(LIBS)
d408 1
a408 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h20000 -s2000 $^ $(LIBS)
d411 1
a411 1
	$(CC) -c -o$@@ -I$(HSRC)/$(COMPONENT) -DSingleProcessor $<
d416 3
a418 3
#
tfm : $(CSTART) tfm.o tfmjobs.o readcdl.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h20000 -s2000 $^ $(LIBS)
d420 2
a421 2
tfm.sp : $(CSTART) tfmsp.o tfmjobss.o readcdl.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h20000 -s2000 $^ $(LIBS)
d424 1
a424 1
	$(CC) -c -o$@@ -I$(HSRC)/$(COMPONENT) -DSingleProcessor $<
d427 1
a427 1
	$(CC) -c -o$@@ -I$(HSRC)/$(COMPONENT) -DSingleProcessor $<
d467 1
a467 1
	$(CC) -c -o$@@ -DLimit20 -I$(HSRC)/$(COMPONENT) $<
d470 1
a470 1
	$(CC) -c -o$@@ -DLimit64 -I$(HSRC)/$(COMPONENT) $<
d473 1
a473 1
	$(CC) -c -o$@@ -I$(HSRC)/$(COMPONENT) $<
d476 1
a476 1
	$(CC) -c -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
d481 1
a481 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d484 1
a484 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d487 1
a487 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)
d490 1
a490 1
	$(CC) -c -o$@@ -DSingleSingle -I$(HSRC)/$(COMPONENT) $<
d493 1
a493 1
	$(CC) -c -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
d505 1
a505 1
	$(CC) -c -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
d514 1
a514 1
	$(CC) -c -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
d523 1
a523 1
	$(CC) -c -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
a529 1
	$(CC) -c -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
d532 1
a532 1
	$(CC) -c -o$@@ -DSingleProcessor -I$(HSRC)/$(COMPONENT) $<
a550 3
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)

stopns : $(CSTART) stopns.o
@


1.21
log
@finally removed ORION
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.20 1991/10/09 15:09:08 paul Exp martyn $
d72 1
a72 1
HVPATH := $(RSRC)/$(COMPONENT)/$(HPROC):$(HSRC)/$(COMPONENT):$(RSRC)/$(COMPONENT)
d162 1
a162 1
		pa_ra.d tram_ra.d poly_r.d \
d168 1
a168 1
		rboot pa_rboot pa_reset tr_reset polyrst /helios/bin
d245 2
a246 2
SOURCES.c	=	nuconfig.c nuprtnet.c nuprttf.c nuheap.c \
			rmlib1.c rmlib2.c \
d248 1
a248 1
			netserv.c netboot.c netmon.c netalloc.c \
d352 1
a352 1
RmLib :	resource.p rmlib1.p rmlib2.p modend.p \
d374 1
a374 1
netutils.lib : nuconfig.o nuprtnet.o nuprttf.o nuheap.o 
d386 1
a386 1
netserv : $(CSTART) netserv.o netboot.o netmon.o netalloc.o
@


1.20
log
@changed test for OEM directories to take account of processor version as well
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.19 1991/07/09 16:42:48 martyn Exp $
d29 1
a29 1
    HHOST = ORION
@


1.19
log
@added correct library for newuser and clink
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.18 1991/06/20 10:32:52 martyn Exp $
d146 3
a148 3
TELMAT := $(strip $(wildcard ../telmat))
PARSYTEC := $(strip $(wildcard ../parsytec))
MEIKO := $(strip $(wildcard ../meiko))
d151 1
a151 1
	ifeq ($(TELMAT),../telmat)
d154 1
a154 1
	ifeq ($(PARSYTEC),../parsytec)
d157 1
a157 1
	ifeq ($(MEIKO),../meiko)
d174 1
a174 1
	ifeq ($(TELMAT),../telmat)
d177 1
a177 1
	ifeq ($(PARSYTEC),../parsytec)
d180 1
a180 1
	ifeq ($(MEIKO),../meiko)
d195 1
a195 1
	ifeq ($(TELMAT),../telmat)
d198 1
a198 1
	ifeq ($(PARSYTEC),../parsytec)
d201 1
a201 1
	ifeq ($(MEIKO),../meiko)
d216 1
a216 1
	ifeq ($(TELMAT),../telmat)
d219 1
a219 1
	ifeq ($(PARSYTEC),../parsytec)
d222 1
a222 1
	ifeq ($(MEIKO),../meiko)
@


1.18
log
@remove #ifndef CSTART around definition of CSTART

PAB - check this for the ARM version
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.17 1991/06/20 10:10:06 martyn Exp $
d432 1
a432 1
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s1000 -h2000 $^ $(SYSLIBS)
d435 1
a435 1
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s2000 -h2000 $^ $(SYSLIBS)
@


1.17
log
@remove some ARM specific stuff
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.16 1991/05/07 16:29:51 paul Exp $
d332 1
a332 1
ifndef CSTART
d334 1
a334 1
endif
@


1.16
log
@rename login and newuser to correct versions
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.15 1991/05/07 15:09:31 paul Exp paul $
a340 3
ifeq ($(HPROC),ARM)	# quick bodge while -l isn't working in armlink
 LIBS := -lsession.lib -lRmLib.def -lnetutils.lib -l$(LIB)/servlib.def -l$(LIB)/fault.def -l$(LIB)/bsd.lib
else
a341 1
endif
a343 3
ifeq ($(HPROC),ARM)	# quick bodge while -l isn't working in armlink
 SYSLIBS :=
else
a344 1
endif
@


1.15
log
@fixed for ARM version so that install defaults to single processor versions
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.14 1991/05/07 09:25:03 ben Exp $
d189 2
@


1.14
log
@*** empty log message ***
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.13 1991/04/08 18:09:02 paul Exp $
d183 7
@


1.13
log
@fixed it to work differently for single/multi user/processor.
But really wanted to fix it for the arm (armlink -l option is naff)
This has been done, but the changes should be reversed when -l is working!
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.12 1991/04/07 13:20:21 bart Exp $
d333 1
a333 1
 LIBS := session.lib RmLib.def netutils.lib $(LIB)/servlib.def $(LIB)/fault.def $(LIB)/bsd.lib
@


1.12
log
@Added support for Tiny Helios. Various bits of the networking software can
now be compiled with options such as -DSingleProcessor, to produce reduced
versions of Helios.
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.5 90/09/24 18:42:57 bart Exp Locker: bart $
d87 1
a87 1
  SYSTEMS = SS MS MM
d90 1
a90 1
  SYSTEMS = MS
d123 1
a123 1
ifneq (,($findstring SS,$(SYSTEMS)))
d127 1
a127 1
ifneq (,($findstring MS,$(SYSTEMS)))
d131 1
a131 1
ifneq (,($findstring MM,$(SYSTEMS)))
d316 3
d320 1
d332 5
a336 1
LIBS := -lsession.lib -lRmLib.def -lnetutils.lib -l$(LIB)/c.lib -l$(LIB)/helios.lib
d338 7
d386 1
a386 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h20000 -s2000 $^ $(LIBS) -l$(LIB)/bsd.lib
d428 1
a428 1
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s1500 -h5000 $^ $(LIBS)
d431 1
a431 1
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s1000 -h2000 $^ $(LIBS)
d434 1
a434 1
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s2000 -h2000 $^ $(LIBS)
d576 1
a576 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ -l$(LIB)/bsd.lib $(LIBS)
d579 1
a579 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ -l$(LIB)/bsd.lib $(LIBS)
@


1.11
log
@Changed the clink stacksize from 500 bytes to 1000, which is more
reasonable.
@
text
@a7 6
#-----------------------------------------------------------------------------
# Note:
# Some single processor versions of network commands are also made here.
# If the $(HSINGLEPROC) variable is defined then make only these bits.
#-----------------------------------------------------------------------------
#
d14 1
a14 1
# RcsId: $Id: makefile,v 1.10 91/03/07 12:27:08 paul Exp Locker: bart $
d23 4
d28 3
a30 6
# The variables HPROC, HHOST, HSRC, and HPROD should already be set by 
# your make script or environment, if not then get local defaults from
# $(HSRC)/makeinc/DFLT.mak. Note that the following pathname cannot use $(HSRC).
ifndef HPROC
include ../makeinc/DFLT.mak
endif
d32 8
d80 5
a84 1
# Generic component make rules and variables added below here
d86 9
a94 11
# Note all final generic targets here
ifdef HSINGLEPROC
# @@@@@@ HSINGLEPROC TARGETS ALSO REQUIRED: ps login lstatus kill whoami loaded
  TARGETS := run wsh clink 	# any others?
else
  TARGETS := RmLib RmLib.def session.lib netutils.lib netagent netserv session \
	tfm startns stopio rebootio stopns login newuser write wall \
	users whoami who diag_tfm clink logname tty sendto id uptime \
	diag_ns findns findsm findtfm run domain ps loaded null_ra.d \
	network elink plink dlink lstatus rmgen wsh remote joinnet \
	startns.64 startns.any kill
d96 7
a102 5
  # Check for the presence of OEM-specific sources
  TELMAT := $(strip $(wildcard ../telmat))
  PARSYTEC := $(strip $(wildcard ../parsytec))
  MEIKO := $(strip $(wildcard ../meiko))
endif	# HSINGLEPROC
d104 47
a150 1
default : $(TARGETS) Xdefault
d167 1
a167 1
		plink dlink rmgen wsh remote joinnet kill \
d171 3
a173 49
install	: installdef $(TARGETS) Xinstall
ifdef HSINGLEPROC
	$(CP) $(TARGETS) $(BIN)
else
	$(CP) RmLib $(LIB)
	$(CP) session.lib $(LIB)
	$(CP) netagent $(LIB)
	$(CP) netserv $(LIB)
	$(CP) session $(LIB)
	$(CP) tfm $(LIB)
	$(CP) null_ra.d $(LIB)
	$(CP) startns $(BIN)
	$(CP) startns.64 $(BIN)/private
	$(CP) startns.any $(BIN)/private
	$(CP) stopio $(BIN)
	$(CP) rebootio $(BIN)
#	$(CP) stopns $(BIN)
	$(CP) login $(BIN)
	$(CP) newuser $(BIN)
	$(CP) write $(BIN)
	$(CP) wall $(BIN)
	$(CP) users $(BIN)
	$(CP) whoami $(BIN)
	$(CP) who $(BIN)
	$(CP) diag_tfm $(BIN)
	$(CP) clink $(BIN)
	$(CP) logname $(BIN)
	$(CP) tty $(BIN)
	$(CP) sendto $(BIN)
	$(CP) id $(BIN)
	$(CP) network $(BIN)
	$(CP) uptime $(BIN)
	$(CP) diag_ns $(BIN)
	$(CP) findns $(BIN)
	$(CP) findsm $(BIN)
	$(CP) findtfm $(BIN)
	$(CP) run $(BIN)
	$(CP) domain $(BIN)
	$(CP) ps $(BIN)
	$(CP) loaded $(BIN)
	$(CP) lstatus $(BIN)
	$(CP) elink $(BIN)
	$(CP) plink $(BIN)
	$(CP) dlink $(BIN)
	$(CP) rmgen $(BIN)
	$(CP) wsh $(BIN)
	$(CP) remote $(BIN)
	$(CP) joinnet $(BIN)
	$(CP) kill $(BIN)
a182 1
endif	# HSINGLEPROC
a184 4
ifdef HSINGLEPROC
installdef:
	$(TOUCH) installdef
else
a195 1
endif	# HSINGLEPROC
d202 2
a203 1
	-$(RM) $(TARGETS)
d217 1
d228 1
d231 4
a234 1
		  startns6.o startnsa.o
d246 1
a246 1
			newuser.c \
d302 4
a305 6

ifdef HSINGLEPROC
  DEFINES := $(DEFINES) -DHSINGLEPROC
endif

ifeq ($(HPROC),TRAN)
d309 1
a309 1
else
d311 1
d315 3
a317 1
SSTART = $(LIB)/s0.o
d328 1
a328 10
ifdef HSINGLEPROC
  ifeq ($(HPROC),ARM)	# @@@@@@ Hack for ARM whilst armlink has faulty -l option
    # not required as we use old $(CSTART): [$(LIB)/c.lib $(LIB)/helios.lib]
    LIBS := $(LIB)/servlib.def $(LIB)/fault.def
  else
    LIBS := -l$(LIB)/c.lib -l$(LIB)/helios.lib
  endif
else
  LIBS := -lsession.lib -lRmLib.def -lnetutils.lib -l$(LIB)/c.lib -l$(LIB)/helios.lib
endif # HSINGLEPROC
a329 13
# Libraries required by "system programs" - i.e. no CLib
ifdef HSINGLEPROC
  ifeq ($(HPROC),ARM)	# @@@@@@ Hack for ARM whilst armlink has faulty -l option
    SLIBS :=	$(LIB)/servlib.def $(LIB)/fault.def $(LIB)/kernel.def \
		$(LIB)/syslib.def $(LIB)/util.def $(LIB)/posix.def
  else
    SLIBS := -l$(LIB)/helios.lib
  endif
else
  SLIBS := -lsession.lib -lRmLib.def -lnetutils.lib -l$(LIB)/helios.lib
endif # HSINGLEPROC


d331 4
a334 1
# Generic targets and their dependencies:
d336 2
a337 7
# uncomment if you have compiler or makedepend generated dependencies
#include depends

#-----------------------------------------------------------------------------
# Resource Management Library

RmLib :	resource.p rmlib1.p rmlib2.p modend.p $(LIBDEFS) 
d344 2
a345 1
# Session Manager library, a scanned library for now
d355 2
a356 1
# netutils.lib, another scanned library
d366 3
a368 1
# The three main servers
d373 17
d393 1
a393 1
session : $(CSTART) session.o userdb.o
d396 6
a403 1

d408 3
a410 1
# `system' commands, these do not need the C library
d413 1
a413 1
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s1500 -h5000 $^ $(SLIBS)
d415 3
d419 1
a419 1
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s2000 -h2000 $^ $(SLIBS)
d421 2
a422 2
clink : $(SSTART) clink.o
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s1000 -h2000 $^ $(SLIBS)
d425 1
a425 1
# Simple commands
d427 1
a427 2
ifeq ($(HPROC),TRAN)
  startns : $(CSTART) startns.o readmap.o
d430 1
a430 1
  startns.64 : $(CSTART) startns6.o readmap.o
d433 1
a433 1
  startns.any : $(CSTART) startnsa.o readmap.o
d436 2
d439 2
a440 4
  startns.o : startns.c
	$(NC) -DLimit20 $(CPPFLAGS) $(NCFLAGS) $(DEFINES) $< -s$(TEMP)/$*.s
	$(ASM) $(ASMFLAGS) -o $@@ $(TEMP)/$*.s
	-$(RMTEMP) $(TEMP)/$*.s
d442 2
a443 4
  startns6.o : startns.c
	$(NC) -DLimit64 $(CPPFLAGS) $(NCFLAGS) $(DEFINES) $< -s$(TEMP)/$*.s
	$(ASM) $(ASMFLAGS) -o $@@ $(TEMP)/$*.s
	-$(RMTEMP) $(TEMP)/$*.s
d445 9
a453 7
  startnsa.o : startns.c
	$(NC) $(CPPFLAGS) $(NCFLAGS) $(DEFINES) $< -s$(TEMP)/$*.s
	$(ASM) $(ASMFLAGS) -o $@@ $(TEMP)/$*.s
	-$(RMTEMP) $(TEMP)/$*.s
else
	# need a better way of bodging this Bart!
  startns startns.64 startns.any: $(CSTART) startns.o readmap.o
a454 2
	echo Need a way of generating startnsX for processors other than TRAN!
endif	# !TRAN
d456 2
d459 1
a459 1
rmgen : $(CSTART) rmgen.o
d462 9
d474 41
a529 3
login : $(CSTART) login.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)

d563 3
a583 9
domain : $(CSTART) domain.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ -l$(LIB)/bsd.lib $(LIBS)

ps :	$(CSTART) ps.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)

loaded : $(CSTART) loaded.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)

a593 3
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)

kill : $(CSTART) kill.o
@


1.10
log
@\changed SINGLEPROC to HSINGLEPROC
@
text
@d20 1
a20 1
# RcsId: $Id: makefile,v 1.9 91/03/03 23:13:20 paul Exp Locker: paul $
d407 1
a407 1
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s500 -h2000 $^ $(SLIBS)
@


1.9
log
@Made to work for single processor versions of Helios - $(SINGLEPROC)
If this flag is set then a limited subset of single processor versions of
the commands are made. -DSINGLEPROC is defined for single processor versions
@
text
@d11 1
a11 1
# If the $(SINGLEPROC) variable is defined then make only these bits.
d20 1
a20 1
# RcsId: $Id: makefile,v 1.8 91/03/01 14:54:32 bart Exp Locker: paul $
a78 5
# Hack for ARM
ifeq ($(HPROC),ARM)
  SINGLEPROC = TRUE
endif

d80 2
a81 2
ifdef SINGLEPROC
# @@@@@@ SINGLEPROC TARGETS ALSO REQUIRED: ps login lstatus kill whoami loaded
d95 1
a95 1
endif	# SINGLEPROC
d119 1
a119 1
ifdef SINGLEPROC
d176 1
a176 1
endif	# SINGLEPROC
d179 1
a179 1
ifdef SINGLEPROC
d194 1
a194 1
endif	# SINGLEPROC
d296 2
a297 4
ifdef SINGLEPROC
  DEFINES := $(DEFINES) -DSINGLEPROC
else
  DEFINES := $(DEFINES) -DMULTIPROC
d320 1
a320 1
ifdef SINGLEPROC
d329 1
a329 1
endif # SINGLEPROC
d332 1
a332 1
ifdef SINGLEPROC
d341 1
a341 1
endif # SINGLEPROC
@


1.8
log
@Now tests for the presence of telmat, parsytec, and meiko subdirectories
containing oem-specific and confidential sources. If such a subdirectory
is present there is a recursive call to make in the
right subdirectory.
@
text
@d8 6
d20 1
a20 1
# RcsId: $Id: makefile,v 1.7 91/02/27 16:22:25 bart Exp Locker: bart $
a28 4
  # These variables should already be set by your make script or environment.
  ifndef HPROC
    HPROC = TRAN
  endif
d30 6
a35 3
  ifndef HHOST
    HHOST = ORION
  endif
a36 8
  ifndef HSRC
    HSRC = /usr/perihelion/Helios
  endif

  ifndef HPROD
    HPROD = $(HSRC)/slashhelios/$(HPROC)
  endif

d66 1
a66 1
VPATH := $(HSRC)/$(COMPONENT)
d68 8
d79 5
d85 5
a89 1
TARGETS := RmLib RmLib.def session.lib netutils.lib netagent netserv session \
d96 5
a100 4
# Check for the presence of OEM-specific sources
TELMAT := $(strip $(wildcard ../telmat))
PARSYTEC := $(strip $(wildcard ../parsytec))
MEIKO := $(strip $(wildcard ../meiko))
d124 3
d181 1
d184 4
d199 1
d300 3
a302 2
ifeq ($(HPROC),ARM)
  NCFLAGS := $(NCFLAGS)
d304 4
a307 1
 ifeq ($(HPROC),TRAN)
d311 1
a311 1
 else
a312 1
 endif
d316 1
a316 3
ifndef SSTART
  SSTART = $(LIB)/s0.o
endif
d327 10
a336 1
LIBS := -lsession.lib -lRmLib.def -lnetutils.lib -l$(LIB)/c.lib -l$(LIB)/helios.lib
d338 13
a357 3
# standalone servers - run from the shell

#-----------------------------------------------------------------------------
d360 1
a360 2
RmLib :	resource.p rmlib1.p rmlib2.p modend.p \
		$(LIBDEFS) 
d368 1
d378 1
d388 1
d400 1
d408 1
a408 1
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s1500 -h5000 $^ $(LIBS)
d411 1
a411 1
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s2000 -h2000 $^ $(LIBS)
d414 1
a414 1
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s500 -h2000 $^ $(LIBS)
d419 2
a420 1
startns : $(CSTART) startns.o readmap.o
d423 1
a423 1
startns.64 : $(CSTART) startns6.o readmap.o
d426 1
a426 1
startns.any : $(CSTART) startnsa.o readmap.o
d429 2
a430 1
startns.o : startns.c
d435 1
a435 1
startns6.o : startns.c
d440 1
a440 1
startnsa.o : startns.c
d444 6
d451 1
a472 2
# @@@@@@ Horrendous (temporary) KLUDGE (courtesy of PAB)
ifeq (($HPROC),ARM)
a473 3
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ session.lib RmLib.def netutils.lib $(LIB)/c.lib $(LIB)/helios.lib
else
login : $(CSTART) login.o
a474 1
endif
@


1.7
log
@1) clean split up into several lines, to get around bug in Helios rm command
2) added startns6.o and startnsa.o to the objects explicitly
3) added null_ra.c to the sources, missing before
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.6 91/01/15 14:57:25 bart Exp Locker: bart $
d82 4
a85 3
ifeq ($(HPROC),TRAN)
TARGETS := $(TARGETS) 
endif
d88 19
d154 9
d166 9
d183 2
a184 2
	-$(RM) $(XOBJECTS) 
	-$(RM) $(XTARGETS)
d186 9
a194 1

@


1.6
log
@Some unknown person has been fiddling with the makefile in the past month
while I was on holiday, and basically screwed it up. This appears to be
a correct version again.
Bart
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.5 90/09/24 18:42:57 bart Exp Locker: bart $
d143 5
a147 2
	-$(RM) $(OBJECTS) $(TARGETS) $(XOBJECTS) $(XTARGETS) mkout \
		core ../mkout install installdef Xinstall
d161 2
a162 1
		  $(SOURCES.c:.c=.o) $(SOURCES.a:.a=.o)
d206 2
a207 1
			kill.c
@


1.5
log
@nupsdobj no longer needed
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.4 90/09/24 18:38:41 paul Exp Locker: bart $
d76 5
a80 3
	tfm startns stopio rebootio stopns rmtrans login newuser write wall \
	users whoami who diag_tfm clink logname tty sendto id shownet uptime \
	diag_ns findns findsm findtfm run domain ps loaded null_ra.d
d97 2
d101 1
a101 2
	$(CP) stopns $(BIN)
	$(CP) rmtrans $(BIN)
d115 1
a115 1
	$(CP) shownet $(BIN)
d125 9
a168 1
			rmtrans.c \
a189 1
			shownet.c \
d192 11
a202 1
			netagent.c 
d209 2
a210 1
HEADERS.c	=	session.h rmlib.h
d226 1
a226 1
  NCFLAGS := $(NCFLAGS) -Zps1
d229 1
a229 1
  NCFLAGS := $(NCFLAGS) -ps1 -t4
d233 1
a233 1
  NCFLAGS := $(NCFLAGS) -ps1
d293 1
a293 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h20000 -s2000 $^ $(LIBS)
d324 33
a365 3
rmtrans : $(CSTART) rmtrans.o readmap.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS)

d405 2
a406 2
shownet : $(CSTART) shownet.o
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS) -l$(LIB)/bsd.lib
d427 1
a427 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^ $(LIBS) -l$(LIB)/bsd.lib
d433 15
@


1.4
log
@arm fixes
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.3 90/09/20 13:12:13 paul Exp Locker: paul $
d148 1
a148 1
SOURCES.c	=	nuconfig.c nuprtnet.c nuprttf.c nupsdobj.c nuheap.c \
d262 1
a262 1
netutils.lib : nuconfig.o nuprtnet.o nuprttf.o nupsdobj.o nuheap.o 
@


1.3
log
@non transputer make fixes
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.2 90/09/14 17:27:16 bart Exp $
a215 2
LINKFLAGS := $(LINKFLAGS) -lsession.lib -lRmLib.def -lnetutils.lib \
	-l$(LIB)/c.lib -l$(LIB)/helios.lib 
d229 3
d272 1
a272 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h20000 -s2000 $^
d275 1
a275 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h20000 -s2000 $^
d278 1
a278 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -h20000 -s2000 $^
d289 1
a289 1
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s1500 -h5000 $^
d292 1
a292 1
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s2000 -h2000 $^
d295 1
a295 1
	$(LINK) $(LINKFLAGS) -o $@@ -n$@@ -s500 -h2000 $^
d301 1
a301 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d304 1
a304 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d307 1
a307 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d310 1
a310 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d313 1
a313 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d315 5
d321 2
a322 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d325 1
a325 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d328 1
a328 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d331 1
a331 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d334 1
a334 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d337 1
a337 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d340 1
a340 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d343 1
a343 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d346 1
a346 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d349 1
a349 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d352 1
a352 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d355 1
a355 1
	$(LINK) $(LINKFLAGS) -l$(LIB)/bsd.lib -o$@@ -n$@@ -s4000 -h4000 $^
d358 1
a358 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d361 1
a361 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d364 1
a364 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d367 1
a367 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d370 1
a370 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d373 1
a373 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d376 1
a376 1
	$(LINK) $(LINKFLAGS) -l$(LIB)/bsd.lib -o$@@ -n$@@ -s4000 -h4000 $^
d379 1
a379 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
d382 1
a382 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 $^
@


1.2
log
@*** empty log message ***
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.7 90/09/05 18:29:06 bart Exp Locker: bart $
d146 1
a146 3
		  $(SOURCES.c:.c=.o) $(SOURCES.a:.a=.o) \
		  $(SOURCES.c:.c=.si) $(SOURCES.c:.c=.sa) \
		  $(SOURCES.c:.c=.dl)
d186 1
a186 1
			modend.a
a200 1
# Other possibles are: -DPMDEBUG -DSYSDEB
d223 4
a226 2
CSTART = $(LIB)/c0.o
  
d253 1
d255 3
d262 1
d264 3
@


1.1
log
@Initial revision
@
text
@d1 4
a4 1
#------------------------------------------------------------------------
d6 244
a249 183
#           H E L I O S   N E T W O R K I N G   S O F T W A R E
#           ---------------------------------------------------
#
#             Copyright (C) 1990, Perihelion Software Ltd.
#                        All Rights Reserved.
#
# makefile
#
#	Author:  BLV 1/5/90
#
#-----------------------------------------------------------------------
#
# $Header$
#
# N.B. Uses Gnu Make
#
# The usual suffixes
.suffixes:
.suffixes: .o .s .c .a

#
# The commands and files to use
CC 		= cc
#ASM 		= asm -v -f
ASM		= asm
LINK		= asm
AMPP 		= ampp
CP		= export
#
# the directories and files to use
INCLUDE 	= /include/,$(HELIOS)/include
MINCLUDE	= $(HELIOS)/include/ampp
LIB 		= $(HELIOS)/lib
NET		= $(HELIOS)/bin
TMP		= /ram
HELIOS 		= /helios
MODEND		= /helios/lib/modend.o
LIBS		= -l$(LIB)/c.lib -lrmlib.def
START		= $(LIB)/c0.o
SSTART		= $(LIB)/s0.o

NCFLAGS = -j$(INCLUDE)/ -D__TRAN
COMP	= $(CC) $(NCFLAGS)

#default rules

.c.s:
	$(CC) $(NCFLAGS) $*.c -s$*.s

.c.o:  
	$(CC) $(NCFLAGS) $*.c -s $(TMP)/x
	$(ASM) -p $(TMP)/x -o$*.o

.a.o:
	$(AMPP) -i$(INCLUDE)/ $(INCLUDE)/basic.m $*.a -o $(TMP)/x
	$(ASM) -p $(TMP)/x -o$*.o

.a.s:
	$(AMPP) -o$*.s -i$(INCLUDE)/ $(INCLUDE)/basic.m $*.a

.s.o:
	$(ASM) -p $*.s -o$*.o
	
#
# Various targets, first for the lib directory
LIB_TARGETS = rmlib rmlib.def session.lib netagent netserv session tfm \
		tram_ra.d pa_ra.d telmat_ra.d telmat_c.d rte_ra.d rte_c.d \
		null_ra.d
# For the /helios/net directory
NET_TARGETS = startns stopio rebootio stopns rmtrans login newuser write \
		wall users whoami who diag_tfm 	tr_reset pa_reset clink \
		rboot pa_rboot logname tty sendto id shownet uptime diag_ns \
		findns findsm findtfm run domain ps loaded 
# And for the include directory
INC_TARGETS = rmlib.h session.h
# Commands for internal use only
MISC_TARGETS = runtf showcdl

default : netutils.lib $(LIB_TARGETS) $(NET_TARGETS) $(INC_TARGETS) $(MISC_TARGETS)
	$(CP) $(LIB_TARGETS) $(LIB)
	$(CP) $(INC_TARGETS) /helios/include
	$(CP) $(NET_TARGETS) $(NET)
	rm -f $(TMP)/x
touch :
	touch *.c *.h *.a */*.c */*.h */*.a

clean :
	rm $(LIB_TARGETS) $(NET_TARGETS) *.o *.s

#
# A scanned library for various utilities
netutils.lib : nuconfig.o nuprtnet.o nuprttf.o nupsdobj.o nuheap.o
	$(ASM) -p -o $@@ $^

#
# The resource management library is a resident library. with all
# the problems that causes
rmlib : resource.o rmlib1.o rmlib2.o $(MODEND)
	$(LINK) -n RmLib $^ $(LIBS) -o$@@

rmlib1.o : rmlib1.c
	$(CC) -r $(NCFLAGS) $*.c -s $(TMP)/x
	$(ASM) -p -o$*.o $(TMP)/x

rmlib2.o : rmlib2.c
	$(CC) -r $(NCFLAGS) $*.c -s $(TMP)/x
	$(ASM) -p -o$*.o $(TMP)/x

rmlib.def : rmlib.d rmdef.a
	$(AMPP) -o$(TMP)/x -i$(MINCLUDE)/ $(MINCLUDE)/basic.m rmdef.a
	$(ASM) -p $(TMP)/x -o $@@

rmlib.d : resource.o

resource.o : resource.a
	$(AMPP) -o$(TMP)/x -i$(MINCLUDE)/ $(MINCLUDE)/basic.m resource.a
	$(ASM) -p -drmlib.d $(TMP)/x -o $@@

startns : startns.o readmap.o
	$(LINK) -o$@@ $(START) $^ $(LIBS) -lnetutils.lib

netserv : netserv.o netboot.o netmon.o netalloc.o
	$(LINK) -h20000 -o$@@ $(START) $^ $(LIBS) -lnetutils.lib

tfm : tfm.o readcdl.o tfmjobs.o
	$(LINK) -h20000 -o$@@ $(START) $^ $(LIBS) -lnetutils.lib

session : session.o userdb.o
	$(LINK) -h20000 -o$@@ $(START) $^ $(LIBS) -lnetutils.lib

stopns : stopns.o
	$(LINK) -o$@@ $(START) $^ $(LIBS) -lnetutils.lib

stopio : stopio.o
	$(LINK) -o$@@ $(START) $^ $(LIBS) -lnetutils.lib

rebootio : rebootio.o
	$(LINK) -o$@@ $(START) $^ $(LIBS) -lnetutils.lib

rmtrans : rmtrans.o readmap.o
	$(LINK) -o$@@ $(START) $^ $(LIBS) -lnetutils.lib

domain : domain.o
	$(LINK) -o$@@ $(START) $^ $(LIBS) -lnetutils.lib -l$(LIB)/bsd.lib

newuser : newuser.o session.lib
	$(LINK) -o$@@ $(SSTART) $@@.o $(LIBS) -lsession.lib

findns : findns.o
	$(LINK) -o$@@ $(START) $@@.o $(LIBS)

findsm : findsm.o
	$(LINK) -o$@@ $(START) $@@.o $(LIBS)

findtfm : findtfm.o
	$(LINK) -o$@@ $(START) $@@.o $(LIBS) -lsession.lib

login : login.o session.lib
	$(LINK) -o$@@ -h4000 $(START) $@@.o $(LIBS) -lsession.lib

write : write.o session.lib
	$(LINK) -o$@@ $(START) $@@.o $(LIBS) -lsession.lib

wall : wall.o session.lib
	$(LINK) -o$@@ $(START) $@@.o $(LIBS) -lsession.lib

sendto : sendto.o session.lib
	$(LINK) -o$@@ $(START) $@@.o $(LIBS) -lsession.lib

users : users.o
	$(LINK) -o$@@ $(START) $@@.o $(LIBS) -lsession.lib

who : who.o
	$(LINK) -o$@@ $(START) $^ $(LIBS) -lsession.lib

logname : logname.o
	$(LINK) -o$@@ $(START) $^ $(LIBS) -lsession.lib

tty : tty.o
	$(LINK) -o$@@ $(START) $^ $(LIBS) -lsession.lib

id : id.o
	$(LINK) -o$@@ $(START) $^ $(LIBS) -lsession.lib
d251 2
a252 3
whoami : whoami.o session.lib
	$(LINK) -o$@@ $(START) $@@.o $(LIBS) -lsession.lib

d254 1
a254 110
	asm -p $^ -o $@@

diag_tfm : diag_tfm.o session.lib
	$(LINK) -o$@@ $(START) $@@.o $(LIBS) -lsession.lib

diag_ns : diag_ns.o
	$(LINK) -o$@@ $(START) $@@.o $(LIBS)

run : run.o
	$(LINK) -o$@@ $(START) $@@.o $(LIBS)

ps : ps.o
	$(LINK) -o$@@ $(START) $@@.o $(LIBS) -lsession.lib

loaded : loaded.o
	$(LINK) -o$@@ $(START) $@@.o $(LIBS) -lsession.lib

runtf : runtf.o session.lib
	$(LINK) -o$@@ $(START) $@@.o $(LIBS) -lsession.lib

showcdl : showcdl.o readcdl.o
	$(LINK) -o$@@ $(START) $^ $(LIBS) -lnetutils.lib

shownet : shownet.o
	$(LINK) -o$@@ $(START) $^ $(LIBS) -lnetutils.lib -l$(LIB)/bsd.lib

uptime : uptime.o
	$(LINK) -o$@@ $(START) $^ $(LIBS)

tr_reset : tr_reset.o
	$(LINK) -s500 -h2000 -o$@@ $(SSTART) $^ $(LIBS)

pa_reset : pa_reset.o
	$(LINK) -s500 -h2000 -o$@@ $(SSTART) $^ $(LIBS)

clink : clink.o
	$(LINK) -s500 -h2000 -o$@@ $(SSTART) $^ $(LIBS)

#
# These programs can be compiled with or without handbooting. 
# Without handboot the system library call BootLink() is used.
# Otherwise the programs do their own booting.
rboot : rboot.c
	$(CC) $(NCFLAGS) -DHANDBOOT rboot.c -s $(TMP)/x
#	$(CC) $(NCFLAGS) rboot.c -s $(TMP)/x
	$(LINK) -s1000 -h4000 -o$@@ $(SSTART) $(TMP)/x $(LIBS)

pa_rboot : rboot.c
	$(CC) $(NCFLAGS) -DHANDBOOT -DPARSYTEC rboot.c -s $(TMP)/x
#	$(CC) $(NCFLAGS) -DPARSYTEC rboot.c -s $(TMP)/x
	$(LINK) -s1000 -h4000 -o$@@ $(SSTART) $(TMP)/x $(LIBS)

netagent : netagent.c
	$(CC) $(NCFLAGS) -DHANDBOOT $^ -s $(TMP)/x
#	$(CC) $(NCFLAGS) $^ -s $(TMP)/x
	$(LINK) -s1500 -h5000 -o$@@ $(SSTART) $(TMP)/x $(LIBS)

#
# The various device drivers
# BLV for copyright reasons most of these will have to be moved to separate
# BLV directories

tram_ra.d : driver.o tram_ra.o
	$(LINK) $^ $(MODEND) $(LIBS) -o $@@

tram_ra.o : tram_ra.c
	$(CC) -r $(NCFLAGS) $^ -s $(TMP)/x
	$(ASM) -p -o $@@ $(TMP)/x

pa_ra.d : driver.o pa_ra.o
	$(LINK) $^ $(MODEND) $(LIBS) -o $@@

pa_ra.o : pa_ra.c
	$(CC) -r $(NCFLAGS) $^ -s $(TMP)/x
	$(ASM) -p -o $@@ $(TMP)/x

telmat_ra.d : driver.o telmat_ra.o 
	$(LINK) $^ $(MODEND) $(LIBS) -o $@@

telmat_ra.o : telmat_ra.c
	$(CC) -r $(NCFLAGS) $^ -s $(TMP)/x
	$(ASM) -p -o $@@ $(TMP)/x

telmat_c.d : driver.o telmat_c.o
	$(LINK) $^ $(MODEND) $(LIBS) -o $@@

telmat_c.o : telmat_c.c
	$(CC) -r $(NCFLAGS) $^ -s $(TMP)/x
	$(ASM) -p -o $@@ $(TMP)/x

rte_ra.d : driver.o rte_ra.o 
	$(LINK) $^ $(MODEND) $(LIBS) -o $@@

rte_ra.o : rte_ra.c
	$(CC) -r $(NCFLAGS) $^ -s $(TMP)/x
	$(ASM) -p -o $@@ $(TMP)/x

rte_c.d : driver.o rte_c.o 
	$(LINK) $^ $(MODEND) $(LIBS) -o $@@

rte_c.o : rte_c.c
	$(CC) -r $(NCFLAGS) $^ -s $(TMP)/x
	$(ASM) -p -o $@@ $(TMP)/x

null_ra.d : driver.o null_ra.o 
	$(LINK) $^ $(MODEND) $(LIBS) -o $@@

null_ra.o : null_ra.c
	$(CC) -r $(NCFLAGS) $^ -s $(TMP)/x
	$(ASM) -p -o $@@ $(TMP)/x
d256 113
a368 3
driver.o : driver.a
	$(AMPP)  -o $(TMP)/x -i$(MINCLUDE)/ $(MINCLUDE)/basic.m $^
	$(ASM) -p -o $@@ $(TMP)/x
d370 2
@
