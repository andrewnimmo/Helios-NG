head	1.5;
access;
symbols
	Helios_C40_1_3_Official_Release:1.4
	Alenia_release:1.4
	Helios1_3:1.4
	C40_Field_Test_2:1.4
	C40_Field_Test_R1:1.4
	Helios13_beta:1.4
	Helios1_2_2_Fault:1.3
	Helios1_2_2_Native:1.3
	Helios1_2_2_native_beta:1.3
	Helios1_2_2:1.2
	Helios1_2_2Beta:1.2
	Helios1_2_1:1.1
	Helios1_2:1.1;
locks; strict;
comment	@ * @;


1.5
date	93.08.11.10.29.17;	author bart;	state Exp;
branches;
next	1.4;

1.4
date	92.06.08.15.27.20;	author bart;	state Exp;
branches;
next	1.3;

1.3
date	92.01.14.14.20.34;	author bart;	state Exp;
branches;
next	1.2;

1.2
date	91.06.03.13.07.55;	author bart;	state Exp;
branches;
next	1.1;

1.1
date	90.11.01.14.47.44;	author bart;	state Exp;
branches;
next	;


desc
@command to enable a link, going through the network server rather than
accessing the link through kernel calls
@


1.5
log
@memory reduction
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--           H E L I O S   N E T W O R K I N G   S O F T W A R E	--
--           ---------------------------------------------------	--
--                                                                      --
--             Copyright (C) 1990, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- elink.c								--
--                                                                      --
--	Enable a link, going through the network server.		--
--                                                                      --
--	Author:  BLV 27/10/90						--
--                                                                      --
------------------------------------------------------------------------*/
/* RcsId: $Header: /hsrc/network/RCS/elink.c,v 1.4 1992/06/08 15:27:20 bart Exp $*/

#include <stdio.h>
#include <nonansi.h>
#include <string.h>
#include <stdarg.h>
#include <stdlib.h>
#include "rmlib.h"
#include "netutils.h"

#ifndef eq
#define eq ==
#define ne !=
#endif

static void 		usage(void);

int	main(int argc, char **argv)
{ char		*processor_name;
  int		link;
  RmProcessor	processor;
  RmNetwork	network;
  int		purpose;
  RmProcessor	neighbour;
  int		destlink;
  int		mode = 0;
  int		rc;
  char		*text;
      
  if (argc ne 3) usage();
  processor_name = argv[1];
  link		 = atoi(argv[2]);
  if (link < 0) usage();
  
  network = RmGetNetwork();
  if (network eq (RmNetwork) NULL)
   { fprintf(stderr, "elink: failed to get network details\n");
     exit(EXIT_FAILURE);
   }

  processor = RmLookupProcessor(network, processor_name);
  if (processor eq (RmProcessor) NULL)
   { fprintf(stderr, "elink: failed to find processor %s in the network\n",
   		processor_name);
     usage();
   }

  if (link >= RmCountLinks(processor))
   { fprintf(stderr, "elink: processor %s only has %d link%s\n",
   		processor_name, RmCountLinks(processor),
   		(RmCountLinks(processor) ne 1) ? "s" : " " );
     exit(EXIT_FAILURE);
   }
   
  purpose = RmGetProcessorPurpose(processor);
  if ((purpose & RmP_Mask) eq RmP_Native)
   { fputs("elink: cannot enable links of native processors\n", stderr);     
     exit(EXIT_FAILURE);
   }

	/* BLV - routers ? */
	
  if ((purpose & RmP_Mask) eq RmP_IO)
   { neighbour = RmFollowLink(processor, link, &destlink);
     if (neighbour eq (RmProcessor) NULL)
      { fputs("elink: cannot disable that link of an I/O processor\n",
      		stderr);
      	exit(EXIT_FAILURE);
      }
     else
      { processor = neighbour; link = destlink; }
   }

  rc = RmSetLinkMode(processor, link, RmL_Intelligent);
  if (rc ne RmE_Success)
   fprintf(stderr, "elink: failed to enable that link, RmLib error %s\n",
   		RmMapErrorToString(rc));

  Delay(OneSec);	/* to give the kernel a chance */
  
  rc = RmGetLinkMode(processor, link, &mode);
  if (rc ne RmE_Success)
   { fprintf(stderr, "elink: failed to re-examine that link, RmLib error %s\n",
   		 RmMapErrorToString(rc));
     exit(EXIT_FAILURE);
   }

  switch(mode)
   { case RmL_NotConnected	: text = "not connected"; break;
     case RmL_Dumb		: text = "dumb"; 	  break;
     case RmL_Pending		: text = "pending";	  break;
     case RmL_Intelligent	: text = "running";	  break;
     case RmL_Dead		: text = "dead";	  break;
     default			: text = "unknown";
   }
   
  printf("New link state : %s\n", text);
}

static void usage(void)
{ fputs("elink: usage,       elink <processor> link\n", stderr);
  fputs("     : for example, elink /00 2\n", stderr);
  exit(EXIT_FAILURE);
}
@


1.4
log
@Moved the netutils routine LookupProcessor into the Resource Management
library, RmLookupProcessor()
@
text
@d16 1
a16 2

static char* rcsid = "$Header: /users/bart/hsrc/network/RCS/elink.c,v 1.3 1992/01/14 14:20:34 bart Exp bart $";
@


1.3
log
@Major update of networking sources, to match Helios1_2_2_native_beta
@
text
@d17 1
a17 1
static char* rcsid = "$Header: /users/bart/netbak/network/RCS/elink.c,v 1.1 1991/08/06 17:32:53 bart Exp $";
d57 1
a57 5
  if (processor_name[0] eq '/')
   processor = LookupProcessor(network, &(processor_name[1]));
  else
   processor = LookupProcessor(network, processor_name);
   
@


1.2
log
@stack checking now enabled
,
@
text
@d17 1
a17 1
static char* rcsid = "$Header: /giga/HeliosRoot/Helios/network/RCS/elink.c,v 1.1 90/11/01 14:47:44 bart Exp $";
d25 1
a32 1
static RmProcessor	LookupProcessor(RmNetwork, char *);
d51 1
a51 1
  network = RmGetNetwork(NULL);
d76 1
a76 1
  if (purpose eq RmP_Native)
d81 3
a83 1
  if (purpose eq RmP_IO)
d96 2
a97 1
   fprintf(stderr, "elink: RmLib error %x when enabling that link\n", rc);
d103 2
a104 1
   { fprintf(stderr, "elink: RmLib error %x re-examining that link\n", rc);
a124 53

/**
*** Given a network, look up the processor. 
*** Arguments : Network, the root structure or a subnet
***             name, something like Cluster/00
*** 
*** The routine determines the last bit of the name, e.g. 00, and
*** searches the network. When a processor is reached whose ID matches
*** this last bit of the name, the search goes back up the tree trying
*** to match all the parents.
**/
static int	LookupAux1(RmProcessor, ...);

static RmProcessor	LookupProcessor(RmNetwork Network, char *name)
{ char		*temp = name + strlen(name);
  
  for ( ; (temp >= name) && (*temp ne '/'); temp--);

  return((RmProcessor) RmSearchNetwork(Network, &LookupAux1, name, ++temp));
}

static int LookupAux1(RmProcessor Processor, ...)
{ va_list	args;
  char		*name;
  char		*last_name;
  RmNetwork	current;
  int		amount;
      
  va_start(args, Processor);
  name		= va_arg(args, char *);
  last_name	= va_arg(args, char *);
  va_end(args);
  
  if (RmIsNetwork(Processor))
   return(RmSearchNetwork((RmNetwork) Processor, &LookupAux1, name, last_name));

	/* Unless the last bit matches, do not bother to check */  
  if (strcmp(RmGetProcessorID(Processor), last_name)) return(0);

  current	= (RmNetwork) Processor;
  
  while (last_name > name)	/* If name is 00, match is immediate	*/
   { last_name--; last_name--;  /* Skip the / and get to last char	*/
     for ( amount = 0; (last_name >= name) && (*last_name ne '/'); 
           last_name--, amount++);
     last_name++;		/* should now be Cluster */
     current = RmParentNetwork((RmProcessor) current);
     if (current eq (RmNetwork) NULL) return(0);
     if (strncmp(RmGetNetworkID(current), last_name, amount)) return(0); 
   }
  return((int) Processor);
}

@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
static char* rcsid = "$Header: /usr/perihelion/Helios/network/RCS/elink.c,v 1.1 90/09/12 13:48:20 jon Exp $";
a24 4

#pragma -s1		/* disable stack checking */
#pragma -f0		/* and vector stack */
#pragma -g0		/* and do not put the names into the code */
@
