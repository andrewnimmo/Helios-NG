head	1.6;
access;
symbols
	Helios_C40_1_3_Official_Release:1.5
	Alenia_release:1.5
	Helios1_3:1.5
	C40_Field_Test_2:1.5
	C40_Field_Test_R1:1.5
	Helios13_beta:1.5
	Helios1_2_2_Fault:1.4
	Helios1_2_2_Native:1.4
	Helios1_2_2_native_beta:1.4
	Helios1_2_2:1.4
	Helios1_2_2Beta:1.4
	Helios1_2_1:1.3
	Helios1_2:1.2;
locks; strict;
comment	@ * @;


1.6
date	93.08.11.10.38.11;	author bart;	state Exp;
branches;
next	1.5;

1.5
date	92.04.24.15.38.00;	author bart;	state Exp;
branches;
next	1.4;

1.4
date	91.06.03.13.26.47;	author bart;	state Exp;
branches;
next	1.3;

1.3
date	91.03.01.17.20.02;	author bart;	state Exp;
branches;
next	1.2;

1.2
date	90.09.24.18.50.02;	author bart;	state Exp;
branches;
next	1.1;

1.1
date	90.09.12.14.41.44;	author jon;	state Exp;
branches;
next	;


desc
@@


1.6
log
@memory reduction
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--           H E L I O S   N E T W O R K I N G   S O F T W A R E	--
--           ---------------------------------------------------	--
--                                                                      --
--             Copyright (C) 1990, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- netutils : nuheap.c							--
--									--
--	Author:  BLV 3/8/90						--
--                                                                      --
------------------------------------------------------------------------*/
/* RcsId: $Header: /hsrc/network/RCS/nuheap.c,v 1.5 1992/04/24 15:38:00 bart Exp $*/

#include <helios.h>
#include <task.h>
#include <syslib.h>
#include <queue.h>
#include <memory.h>

/**
*** This unbelievably gruesome code zaps the module table entries for
*** Malloc and Free, installing my own routines which call the system ones
*** and produce some debugging. It only works on the transputer version.
**/

#ifdef __TRAN
static	WordFnPtr	real_Malloc;
static	WordFnPtr	real_Free;

static word	my_Malloc(int x)
{ word result = ((real_Malloc)(x));

  IOdebug("Malloc(%d) : %x", x, result);
  return(result);
}

static word	my_Free(int x)
{ word	result = ((real_Free)(x));

  IOdebug("Free(%x)", x);
  return(result);
}

void PatchMalloc(void)
{ int	*table = (int *) &MyTask;

  IOdebug("Installing own versions of Malloc and Free");
  real_Malloc = (WordFnPtr) table[26];
  real_Free   = (WordFnPtr) table[27];
  table[26]   = (int) &my_Malloc;
  table[27]   = (int) &my_Free;
}
#else
void PatchMalloc(void)
{
}
#endif

@


1.5
log
@Changed so that it only compiles for the transputer, not for processors
with split module tables
@
text
@d14 1
a14 2

static char *rcsid = "$Header: /users/bart/hsrc/network/RCS/nuheap.c,v 1.4 1991/06/03 13:26:47 bart Exp $";
@


1.4
log
@stack checking now enabled.
@
text
@d9 1
a9 1
-- netutils : nu.c							--
d15 1
a15 1
static char *rcsid = "$Header: /giga/HeliosRoot/Helios/network/RCS/nuheap.c,v 1.3 91/03/01 17:20:02 bart Exp $";
d20 2
d26 1
a26 1
*** and produce some debugging.
d29 1
a50 6
/*
  printf("table[26] is %x\n", table[26]);
  printf("table[27] is %x\n", table[27]);
  printf("&Malloc is %x\n", &Malloc);
  printf("&Free is %x\n", &Free);
*/
d56 5
@


1.3
log
@Various files had been left checked out somehow, tidying up.
@
text
@d15 1
a15 1
static char *rcsid = "$Header: /usr/perihelion/Helios/network/RCS/nuheap.c,v 1.2 90/09/24 18:50:02 bart Exp Locker: bart $";
a20 3
#pragma	-s1
#pragma -g0

d32 1
d39 1
@


1.2
log
@changed my mind about the heap debugging code I wanted
@
text
@d15 1
a15 1
static char *rcsid = "$Header: /usr/perihelion/Helios/network/RCS/nupsdobj.c,v 1.1 90/09/12 14:44:03 jon Exp $";
@


1.1
log
@Initial revision
@
text
@d1 16
a16 1
#include <stdio.h>
a17 2
#include <queue.h>
#include <memory.h>
d19 4
d24 8
a31 1
static char *rcsid = "$Header$";
d33 4
a36 33
typedef struct Memb {
	word		Size;
	struct Memb	*Next;
} Memb;

typedef struct HeapBlock {
	Node	Node;
	word	Size;
	word	Free;
	Memb	*FreeQ;
} HeapBlock;


static void HeapInfo(HeapBlock *heap)
{
	Memb *m = (Memb *)(heap+1);
	Memb *f = heap->FreeQ;
	
	printf("Heap %p Size %d Free %d FreeQ %p\n",
			heap,heap->Size,heap->Free,heap->FreeQ);
	
	while( m < (Memb *)((char *)(heap+1) + heap->Size) )
	{
		if( m == f )
		{
			printf("Free  : %p %d\n",m,m->Size);
			f = f->Next;
		}
		else {
			printf("Alloc : %p %d\n",m,m->Size);
		}
		m = (Memb *)((char *)m + m->Size);
	}
d39 5
a43 2
void ShowHeap(void)
{ HeapBlock *heap = (HeapBlock *) MyTask->HeapBase;
d45 2
a46 1
  heap = (HeapBlock *) (((word) heap + 15) & ~15);
d48 11
a58 4
  while (heap->Node.Next != (Node *) NULL)    
  { HeapInfo(heap);
    heap = (HeapBlock *) heap->Node.Next;
  }
a59 1

@
