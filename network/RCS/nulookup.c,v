head	1.1;
access;
symbols
	Helios_C40_1_3_Official_Release:1.1
	Alenia_release:1.1
	Helios1_3:1.1
	C40_Field_Test_2:1.1
	C40_Field_Test_R1:1.1
	Helios13_beta:1.1
	Helios1_2_2_Fault:1.1
	Helios1_2_2_Native:1.1
	Helios1_2_2_native_beta:1.1;
locks; strict;
comment	@ * @;


1.1
date	92.01.14.14.23.22;	author bart;	state Exp;
branches;
next	;


desc
@utility to look up a processor in a network
@


1.1
log
@Initial revision
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--           H E L I O S   N E T W O R K I N G   S O F T W A R E	--
--           ---------------------------------------------------	--
--                                                                      --
--             Copyright (C) 1990, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- netutils : nulookup.c						--
--									--
--	Author:  BLV 10//91						--
--                                                                      --
------------------------------------------------------------------------*/

static char *rcsid = "$Header: /users/bart/netbak/network/RCS/nulookup.c,v 1.1 1991/08/06 17:32:53 bart Exp $";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdarg.h>
#include <message.h>
#include <syslib.h>
#include <nonansi.h>
#include "private.h"
#include "exports.h"
#include "rmlib.h"

/**
*** Given a network, look up the processor. 
*** Arguments : Network, the root structure or a subnet
***             name, something like Cluster/00
*** 
*** The routine determines the last bit of the name, e.g. 00, and
*** searches the network. When a processor is reached whose ID matches
*** this last bit of the name, the search goes back up the tree trying
*** to match all the parents.
**/
static int	LookupAux1(RmProcessor, ...);

RmProcessor	LookupProcessor(RmNetwork Network, char *name)
{ char		*temp = name + strlen(name);
  
  for ( ; (temp >= name) && (*temp ne '/'); temp--);

  return((RmProcessor) RmSearchProcessors(Network, &LookupAux1, name, ++temp));
}

static int LookupAux1(RmProcessor Processor, ...)
{ va_list	args;
  char		*name;
  char		*last_name;
  RmNetwork	current;
  int		amount;
      
  va_start(args, Processor);
  name		= va_arg(args, char *);
  last_name	= va_arg(args, char *);
  va_end(args);
  
	/* Unless the last bit matches, do not bother to check */  
  if (strcmp(RmGetProcessorId(Processor), last_name)) return(0);

  current	= (RmNetwork) Processor;
  
  while (last_name > name)	/* If name is 00, match is immediate	*/
   { last_name--; last_name--;  /* Skip the / and get to last char	*/
     for ( amount = 0; (last_name >= name) && (*last_name ne '/'); 
           last_name--, amount++);
     last_name++;		/* should now be Cluster */
     current = RmParentNetwork((RmProcessor) current);
     if (current eq (RmNetwork) NULL) return(0);
     if (strncmp(RmGetNetworkId(current), last_name, amount)) return(0); 
   }
  return((int) Processor);
}


@
