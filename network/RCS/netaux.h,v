head	1.21;
access;
symbols
	Helios_C40_1_3_Official_Release:1.20
	Alenia_release:1.20
	Helios1_3:1.20
	C40_Field_Test_2:1.19
	C40_Field_Test_R1:1.15
	Helios13_beta:1.15
	Helios1_2_2_Fault:1.10
	Helios1_2_2_Native:1.9
	Helios1_2_2_native_beta:1.9
	Helios1_2_2:1.8
	Helios1_2_2Beta:1.8
	Helios1_2_1:1.7
	Helios1_2:1.6;
locks; strict;
comment	@ * @;


1.21
date	93.08.11.10.32.52;	author bart;	state Exp;
branches;
next	1.20;

1.20
date	92.10.26.19.13.56;	author bart;	state Exp;
branches;
next	1.19;

1.19
date	92.09.16.08.56.37;	author paul;	state Exp;
branches;
next	1.18;

1.18
date	92.09.15.18.23.04;	author bart;	state Exp;
branches;
next	1.17;

1.17
date	92.08.14.17.20.40;	author bart;	state Exp;
branches;
next	1.16;

1.16
date	92.07.21.11.01.08;	author bart;	state Exp;
branches;
next	1.15;

1.15
date	92.06.10.14.52.58;	author bart;	state Exp;
branches;
next	1.14;

1.14
date	92.06.07.16.26.59;	author bart;	state Exp;
branches;
next	1.13;

1.13
date	92.05.08.16.36.25;	author bart;	state Exp;
branches;
next	1.12;

1.12
date	92.04.24.15.35.37;	author bart;	state Exp;
branches;
next	1.11;

1.11
date	92.03.25.18.03.41;	author bart;	state Exp;
branches;
next	1.10;

1.10
date	92.01.15.11.04.39;	author bart;	state Exp;
branches;
next	1.9;

1.9
date	92.01.14.14.20.34;	author bart;	state Exp;
branches;
next	1.8;

1.8
date	91.07.10.11.53.10;	author bart;	state Exp;
branches;
next	1.7;

1.7
date	91.02.27.16.29.51;	author bart;	state Exp;
branches;
next	1.6;

1.6
date	90.12.01.15.03.14;	author bart;	state Exp;
branches;
next	1.5;

1.5
date	90.11.25.20.00.30;	author bart;	state Exp;
branches;
next	1.4;

1.4
date	90.11.21.15.52.43;	author bart;	state Exp;
branches;
next	1.3;

1.3
date	90.11.01.14.50.43;	author bart;	state Exp;
branches;
next	1.2;

1.2
date	90.10.18.13.25.23;	author bart;	state Exp;
branches;
next	1.1;

1.1
date	90.09.12.14.36.15;	author jon;	state Exp;
branches;
next	;


desc
@@


1.21
log
@1) some of the options, particularly native networks and joinnet, are
   now supported only on particular processor types.
2) all stack sizes are now declared in this module
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--           H E L I O S   N E T W O R K I N G   S O F T W A R E	--
--           ---------------------------------------------------	--
--                                                                      --
--             Copyright (C) 1990, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- netaux.h								--
--                                                                      --
--	Additional odds and ends needed by the Network Server and	--
--	related programs/drivers.					--
--                                                                      --
--	Author:  BLV 18/8/90						--
--                                                                      --
------------------------------------------------------------------------*/
/* $Header: /hsrc/network/RCS/netaux.h,v 1.20 1992/10/26 19:13:56 bart Exp $ */

#ifndef __config_h
#include <config.h>
#endif
#ifndef __c40_h
#include <c40.h>
#endif

#ifdef __NetworkServer

#if defined(__TRAN)
#define Native_Supported	1
#else
#define Native_Supported	0
#endif
#if !defined(__C40)
#define Joinnet_Supported	1
#else
#define Joinnet_Supported	0
#endif

	/* This is used for requests sent by the resource management library */
typedef struct	NsConnStruct {
	Semaphore	WriteLock;
	int		Program;
	int		FullAccess;
	List		Processors;
	int		Id;	/* Unique identifier for this session */
	int		Socket_ctos;
	int		Socket_stoc;
	Stream		*Pipe_ctos;
	Stream		*Pipe_stoc;
} NsConnStruct;
typedef NsConnStruct *NsConn;

	/* This is used for new bootstrap jobs */
typedef struct	BootstrapJob {
	int		Sequence;
	int		NumberProcessors;
	int		Next;
	int		MaxProcessors;
	int		SafetyCheck;
	RmProcessor	*Table;
	RmProcessor	*Progress;
	Semaphore	Lock;
	Semaphore	Finished;
	int		NumberProcesses;
	Semaphore	ProcessesFinished;
	Semaphore	LinksPending;
	Semaphore	LinksEnabled;
	Semaphore	ClearNames;
	bool		JobStarted;
} BootstrapJob;

	/* this structure is used for external network connections */
typedef	struct	ExternalNetwork {
	RmProcessor	Connector;
	int		Link;
	bool		Reported;
} ExternalNetwork;


#define Debug(a, b) if (DebugOptions & a) debug b
extern		WORD	DebugOptions;
#endif

/**
*** Debugging options. N.B. the top bit must always be clear, or
*** there will be confusion between sending masks around and
*** error messages. dbg_Inquire is exempt because this is passed only
*** in the control vector.
**/
#define		dbg_Inquire		-1
#define		dbg_Redirect		-2
#define		dbg_Revert		-3
#define		dbg_Boot		0x0001
#define		dbg_Execute		0x0002
#define		dbg_Allocate		0x0004
#define		dbg_Release		0x0008
#define		dbg_Monitor		0x0010
#define		dbg_Problem		0x0020
#define		dbg_Links		0x0040
#define		dbg_Initialise		0x0080
#define		dbg_Memory		0x0100
#define		dbg_Native		0x0200
#define		dbg_Comms		0x0400
#define		dbg_Lock		0x0800
#define		dbg_IOC			0x1000

/**
*** Protocols used between the Network Server and the Netagent program.
**/
#define	NetAgentCode		"/helios/lib/netagent"

typedef struct	NA_Message {
	WORD	FnRc;
	WORD	Arg1;
	WORD	Arg2;
	WORD	Size;
	BYTE	*Data;
} NA_Message;

#define NA_Quit			0x001
#define NA_TransputerBoot	0x002	/* Normal transputer bootstrap	*/
#define NA_ParsytecBoot		0x003	/* same, but with parsytec reset*/
#define NA_SetLinkMode		0x004	/* Link control			*/
#define NA_Protect		0x005	/* set protection		*/
#define NA_Revoke		0x006
#define NA_Cupdate		0x007	/* Change name			*/
#define NA_Clean		0x008	/* Clean out any garbage	*/
#define NA_ClearNames		0x009	/* Clean out name tables	*/
#define NA_ParsytecReset	0x00A	/* perform a Parsytec reset	*/
#define NA_UpdateIO		0x00B	/* update an I/O processor name	*/
#define NA_GetLinkMode		0x00C	/* get current link state	*/
#define NA_Terminate		0x00D	/* Terminate processor		*/
#define NA_Noop			0x00E	/* Keep running please		*/
#define NA_C40Boot		0x00F	/* Normal C40 bootstrap		*/
#define NA_i860Boot		0x010	/* Normal i860 bootstrap	*/

/**
*** These manifests are used in conjunction with processor bootstraps.
*** They are not documented anywhere, but see the source file kernel/link1.c.
*** BootLink() and My_BootLink() can fail in various different places.
**/
#define	Boot_SoftResetSize	 1
#define Boot_SoftResetCode	 2
#define Boot_BootstrapSize	 3
#define Boot_BootstrapCode	 4
#define Boot_Clear1		 5
#define Boot_Clear2		 6
#define Boot_Clear3		 7
#define Boot_ControlByte	 8
#define Boot_Image		 9
#define Boot_ConfigSize		10
#define Boot_ConfigVector	11
#define Boot_ProtocolTail	12
#define Boot_Acknowledgement	13
#define Boot_Acknowledgement2	14
#define Boot_Hwconfig		15
#define Boot_Idrom		16

/**
*** This structure is used for C40 bootstrap requests. It is an extended
*** version of the configuration vector.
**/
typedef struct C40_Bootstrap {
	RPTR	Nucleus;
	RPTR	Bootfile;
	WORD	Hwconfig;
	IDROM	Idrom;
	WORD	ConfigSize;
	Config	Config;
} C40_Bootstrap;

/**
*** These structures are used inside the Network Server and in device drivers
*** loaded by the Network Server. Associated with every processor are the
*** following.
***
*** 1) Three capabilities. One for owner access, which allows
***    everything accept changing the access. One for the network server
***    which includes alter access. This means that the Network Server is the
***    only program in the entire system that can change the access matrix,
***    by passing it onto the network agent. And one read-only capability.
*** 2) A count of the number of device drivers and commands that have some
***    control over this processor.
*** 3) A table of structures, one for every device driver. This table is
***    actually at the end of the data structure so that it gets freed
***    at the same time, but is of variable size. For now I allow two
***    words of information per device driver per processor, which should
***    be enough.
*** 4) A table of the standard links. This allows the Network Server to
***    reconfigure processors back to a sensible state when they are returned
***    to the system pool, if users have been fiddling with link switches.
***    N.B. this table should not be copied until after the device drivers
***    have been initialised, to allow for the Telmat configuration driver
***    to change the connections. Also, various other bits of state.
*** 5) Details of the Netagent if it is currently running on that processor.
***    When the count drops to zero the program is terminated.
**/
typedef struct	DriverEntry {
	RmHardwareFacility	*Hardware;
	word			Flags;
	word			Aux1;
	word			Aux2;
} DriverEntry;

#define	DriverFlags_ResetDriver		0x00000001
#define DriverFlags_ConfigureDriver	0x00000002
#define DriverFlags_ResetCommand	0x00000004
#define DriverFlags_DefiniteReset	0x00000010
#define DriverFlags_PossibleReset	0x00000020
#define DriverFlags_SpecialBootstrap	0x00000040
#define DriverFlags_NativePossible	0x00000080
#define DriverFlags_MappingFlexible	0x00000100
#define DriverFlags_Reclaim		0x00000200

typedef struct	ProcessorEntry {
	Node		NetagentNode;
	Stream		*Netagent;
	Semaphore	NetagentLock;
	word		NetagentCount;
	word		NetagentDate;
	RmProcessor	Processor;	/* pointer back to real processor */
	Node		Connection;	/* entry in connection list */
	Node		Cleaners;	/* node for the cleaners list */
	Capability	Owner;
	Capability	General;
	Capability	Full;
	int		Incarnation;
	word		NumberDrivers;
	DriverEntry	*DriverEntry;
	word		Purpose;
	RmLink		*StandardLinks;
	bool		BeingBooted;
	word		CommandDate;
	Object		*WindowServer;
	Object		*ConsoleWindow;
} ProcessorEntry;

/**
*** These data structures are used in the network device drivers. 
*** 1) NetworkFuncs is a simple table to let the device drivers access useful
***    routines within the Network Server.
*** 2) NetworkDCB is the device control block, as per the usual device drivers.
***    I find this structure not very useful, so in addition...
*** 3) DriverRequest is the most common structure seen by people working on
***    device drivers. DriverConfRequest is used for certain link configuration
***    requests which are more complex.
***    
**/
typedef struct NetworkFuncs {
	VoidFnPtr	report;
	VoidFnPtr	fatal;
	WordFnPtr	LookupProcessor;
	WordFnPtr	rexec;
	WordFnPtr	BuildConfig;
	WordFnPtr	StartNetworkAgent;
	WordFnPtr	StopNetworkAgent;
	WordFnPtr	XchNetworkAgent;
} NetworkFuncs;

typedef struct NetworkDCB {
	DCB		DCB;
	char		*NetworkName;
	RmNetwork	Net;
	void		*HardwareFacility;
	RmProcessor	RootProcessor;
	NetworkFuncs	*Functions;
	int		Spare[20];	/* BLV - used to be 5, but not enough */
} NetworkDCB;

typedef struct DriverRequest {
	int		FnRc;
	int		NumberProcessors;
	RmProcessor	Processor[1];
} DriverRequest;


typedef struct	DriverConnection {
	RmProcessor	Source;
	int		SourceLink;
	RmProcessor	Dest;
	int		DestLink;
} DriverConnection;

typedef struct DriverConfRequest {
	int			FnRc;
	int			NumberConnections;
	bool			Exact;
	bool			Preserve;
	DriverConnection	*Connections;
} DriverConfRequest;

#define ND_Initialise		0x01	/* For reset and config drivers	*/

#define ND_Reset		0x02	/* Reset drivers only		*/
#define ND_Analyse		0x03
#define ND_TestReset		0x04
#define ND_Boot			0x05
#define ND_ConditionalReset	0x06

#define	ND_MakeLinks		0x10	/* Configuration drivers only	*/
#define ND_TestLinks		0x11
#define ND_ObtainProcessors	0x12
#define ND_MakeInitialLinks	0x13
#define ND_FreeProcessors	0x14

/**
*** These flags make use of the nibble 0x00F00000, reserved for
*** applications.
***
*** This flag is used to indicate whether or not other users should get
*** read-only access to processors.
**/
#define	NsFlags_DenyReadOnly		0x00100000

/**
*** This flag is used for processors not specified in the resource map.
*** When external networks are added to the main machine, every processor
*** inside the external network will have this flag set.
**/
#define	NsFlags_NotInResourceMap	0x00200000

/**
*** This flag is used for processors allocated to a TFM. If one of them
*** goes then things are seriously wrong.
**/
#define NsFlags_TfmProcessor		0x00400000

/**
*** Stack sizes for various threads spawned within the Network Server
*** 1) BootstrapStack. Every bootstrap job involves one master thread
***    plus an additional thread for every processor booted in this job.
**/
#ifndef STACKEXTENSION
#define	Bootstrap_Stack			2000
#define	Monitor_Stack			1500
#define Problem_Stack			2500
#define ProblemAux3_Stack		1500
#define AcceptRmLib_Stack		2000
#define ConnectionGuardian_Stack	2000
#define	AgentMonitor_Stack		1024
#define Cleaning_Stack			1024
#define NS_Stack			2000
#else
#define	Bootstrap_Stack			1000
#define	Monitor_Stack			 750
#define Problem_Stack			1000
#define ProblemAux3_Stack		1000
#define AcceptRmLib_Stack		1000
#define ConnectionGuardian_Stack	1000
#define	AgentMonitor_Stack		 750
#define Cleaning_Stack			 750
#define	NS_Stack			1000
#endif

/**
*** Function prototypes within the Network Server
**/
#ifdef __NetworkServer
			/* Module netserv.c */
extern	void		fatal	(char *, ...);
extern	void		report	(char *, ...);
extern	void		debug	(char *, ...);
extern  char		ProcessorName[IOCDataMax];
extern	Object		*ThisProcessor;
extern	RmNetwork	Net;
extern	RmTaskforce	DefaultTaskforce;
extern	RmProcessor	RootProcessor;
extern	RmProcessor	BootIOProcessor;
extern	char		NetworkName[NameMax];
extern	bool		FullReset;
extern	int		NumberProcessors;
extern	Object		*NetAgent;
extern	bool		SilentMode;
extern	WORD		LastChange;
extern	void		TerminateNetworkServer(void);
extern  RmProcessor	LastBooted;
extern	int		ReplyRmLib(NsConn, int, RmReply *);
extern	void		RemConnection(RmProcessor, int reason);
extern	void		InformConnection(RmProcessor, int reason);
extern	void		AbortConnection(NsConn);
extern	void		KickSessionManager(void);
extern	char		**nsrc_environ;

			/* Module netboot.c */
extern	void		InitBootstrap(void);
extern	void		StartBootstrap(void);
extern	BootstrapJob	*NewBootstrapJob(void);
extern	bool		AddProcessorToBootstrapJob(BootstrapJob *, RmProcessor);
extern	bool		StartBootstrapJob(BootstrapJob *);
extern	void		WaitBootstrapJob(BootstrapJob *);
extern	void		AbortBootstrapJob(BootstrapJob *);
extern	bool		BuildTRANConfig(RmProcessor source,
	RmProcessor dest, int destlink, Config **config_vec, word *confsize);
extern	void		UpdateProcessor(RmProcessor, bool name_only);
extern	void		UpdateIOProcessor(RmProcessor, bool name_only);
extern	void		HandleGetLinkMode(NsConn, int, RmRequest *, RmReply *);
extern	void		HandleSetLinkMode(NsConn, int, RmRequest *, RmReply *);
extern	int		SetLinkMode(RmProcessor Processor, int link, int mode);
extern	int		GetLinkMode(RmProcessor Processor, int link);
extern	void		ClearNames(RmProcessor);
extern	int		ResetProcessors(int, RmProcessor *);
	
			/* Module netmon.c */
extern	int		Monitor_Delay;
extern	void		InitMonitor(void);
extern	void		MarkProcessor(RmProcessor, bool locate_failed);
extern	void		MarkLink(RmProcessor, int);
extern	bool		CheckProcessor(RmProcessor);
extern	void		HandleReportProcessor(NsConn, int, RmRequest *, RmReply *);
extern	void		HandleLinkChange(ServInfo *);
extern	void		HandleAcceptNetwork(NsConn, int, RmRequest *, RmReply *);
extern	void		HandleJoinNetwork(NsConn, int, RmRequest *, RmReply *);

			/* Module netalloc.c */
extern	void		InitAlloc(void);
extern	void		HandleGetNetwork(NsConn, int, RmRequest *, RmReply *);
extern	void		HandleLastChange(NsConn, int, RmRequest *, RmReply *);
extern	void		HandleIsProcessorFree(NsConn, int, RmRequest *, RmReply *);
extern	void		HandleObtainProcessor(NsConn, int, RmRequest *, RmReply *);
extern	void		HandleReleaseProcessor(NsConn, int, RmRequest *, RmReply *);
extern	void		HandleObtainNetwork(NsConn, int, RmRequest *, RmReply *);
extern	void		HandleReleaseNetwork(NsConn, int, RmRequest *, RmReply *);
extern	word		AutomaticRelease(Node *);

			/* Module netnativ.c */
extern	void		InitNative(void);
extern	void		HandleNative(NsConn, int, RmRequest *, RmReply *);
extern	void		HandleConnections(NsConn, int, RmRequest *, RmReply *);
extern	void		CleanNative(RmProcessor);

			/* Module netmisc.c, utility routines.		*/
extern	void		InitMisc(void);
extern	bool		StartNetworkAgent(RmProcessor);
extern	bool		StopNetworkAgent(RmProcessor);
extern	int		XchNetworkAgent(RmProcessor, NA_Message *, bool rc,
			int rsize, BYTE *rdata);
extern	void		RemNetworkAgent(RmProcessor);
extern	void		TerminateProcessor(RmProcessor);
extern	word		rexec(RmProcessor, Object *, Environ *, word delay);
extern	word		rexec_task(RmProcessor, RmTask, Environ *, word delay);
extern	Object		*NetMapProcessorToObject(RmProcessor);
extern	char		*BuildName(char *buffer, RmProcessor);
extern	word		FullRead(Stream *, BYTE *, word , word);
extern	RmProcessor	LookupProcessor(RmNetwork, char *);

#endif /* __NetworkServer */

@


1.20
log
@Added the Reclaim drivers flag
@
text
@d17 1
a17 1
/* $Header: /m/giga/HeliosRoot/Helios/network/RCS/netaux.h,v 1.19 1992/09/16 08:56:37 paul Exp $ */
d28 11
d333 21
a353 1
#define		BootstrapStack		2048
d404 1
@


1.19
log
@fixed up for inconsistent #if's
@
text
@d17 1
a17 1
/* $Header: /m/giga/HeliosRoot/Helios/network/RCS/netaux.h,v 1.18 1992/09/15 18:23:04 bart Exp paul $ */
d202 1
@


1.18
log
@The C40 bootstrap has been modified to support IDRom information
supplied in the resource map.
@
text
@d17 1
a17 1
/* $Header: /users/bart/hsrc/network/RCS/netaux.h,v 1.17 1992/08/14 17:20:40 bart Exp $ */
a18 2
#ifdef __NetworkServer

d25 2
@


1.17
log
@Added i860 support
@
text
@d17 1
a17 1
/* $Header: /users/bart/hsrc/network/RCS/netaux.h,v 1.15 1992/06/10 14:52:58 bart Exp $ */
d24 3
d142 5
d149 13
d360 1
a360 1
extern	bool		BuildConfig(RmProcessor source,
@


1.16
log
@1) tidied up the diagnostics.
2) switched from NetLookupProcessor to RmLookupProcessor
3) preloaded netagent code is now protected so that it cannot be deleted
   during cleaning.
@
text
@d121 1
@


1.15
log
@Simplified the cleaners. There is no longer a separate thread
responsible for starting cleaning threads at suitable intervals,
because there is no longer any need for intervals with the new netagent
communication code.
@
text
@d17 1
a17 1
/* $Header: /users/bart/hsrc/network/RCS/netaux.h,v 1.14 1992/06/07 16:26:59 bart Exp $ */
d328 1
@


1.14
log
@Added a flag to the ExternalNetwork structure, in case multiple
processors are reported as missing at about the same time.
@
text
@d17 1
a17 1
/* $Header: /users/bart/hsrc/network/RCS/netaux.h,v 1.12 1992/04/24 15:35:37 bart Exp $ */
a367 1
extern	void		RemCleaners(RmProcessor);
@


1.13
log
@1) changed the communication between netserv and netagent from pipes to
   client-server message passing
2) folded the network server sources
@
text
@d62 1
@


1.12
log
@The manifest for the netagent location has been moved here from the
Network Server
@
text
@d17 1
a17 1
/* $Header: /users/bart/hsrc/network/RCS/netaux.h,v 1.11 1992/03/25 18:03:41 bart Exp $ */
a93 2
*** This consists of a single 3-word packet, possibly followed by
*** additional data.
d101 2
d182 1
a182 1
	Stream		*NetagentPipe;
d379 2
a380 2
extern	int		XchNetworkAgent(RmProcessor, NA_Message *,
			int wsize, BYTE *wdata,	bool rc, int rsize, BYTE *rdata);
@


1.11
log
@Various changes including:
1) first attempt at C40 support
2) RmLib execute support (not yet fully tested)
3) faster bootstrap, taskforce load, and better mapping
@
text
@d17 1
a17 1
/* $Header: /users/bart/hsrc/network/RCS/netaux.h,v 1.10 1992/01/15 11:04:39 bart Exp $ */
d97 2
@


1.10
log
@Major update of networking sources, to incorporate the fault-tolerance
work as demonstrated at the IED meeting 10.1.92
@
text
@d17 1
a17 1
/* $Header: /usr/perihelion/Helios/network/RCS/netaux.h,v 1.6 90/12/01 15:03:14 bart Exp $ */
d52 3
d116 2
d197 2
d290 7
@


1.9
log
@Major update of networking sources, to match Helios1_2_2_native_beta
@
text
@d17 1
a17 1
/* $Header: /users/bart/netbak/network/RCS/netaux.h,v 1.3 1991/08/21 15:54:09 bart Exp $ */
a26 1
	Stream		*Pipe;
d32 4
d86 2
d269 1
a269 1
#define	NsFlags_DenyReadOnly	0x00100000
d279 6
a291 1
extern	RmProcessor	LookupProcessor(RmNetwork, char *);
a302 1
extern	Semaphore	SingleStep;
d305 1
d307 4
a310 1
extern  RmProcessor	LastBooted;
a312 1

a319 6
extern	bool		StartNetworkAgent(RmProcessor);
extern	bool		StopNetworkAgent(RmProcessor);
extern	int		XchNetworkAgent(RmProcessor, bool locked, NA_Message *,
			int wsize, BYTE *wdata,	bool rc, int rsize, BYTE *rdata);
extern	word		rexec(RmProcessor, Object *, Environ *, word delay);
extern	word		rexec_task(RmProcessor, RmTask, Environ *, word delay);
a321 2
extern	Object		*NetMapProcessorToObject(RmProcessor);
extern	char		*BuildName(char *buffer, RmProcessor);
d327 1
a328 1
extern	void		TerminateProcessor(RmProcessor);
d333 2
a334 3
extern	void		StartMonitor(RmProcessor);
extern	void		StopMonitor(RmProcessor);
extern	void		MarkProcessor(RmProcessor);
d336 1
d343 3
a349 1
extern	word		FullRead(Stream *, BYTE *, word , word);
d351 1
d359 15
d375 1
@


1.8
log
@Added new options dbg_Native and NA_Terminate, for native network support.
@
text
@d17 1
a17 1
/* $Header: /users/bart/hsrc/network/RCS/netaux.h,v 1.7 1991/02/27 16:29:51 bart Exp bart $ */
d32 1
a57 19
			/* Module netserv.c */
extern	void		fatal	(char *, ...);
extern	void		report	(char *, ...);
extern	void		debug	(char *, ...);
extern	RmProcessor	LookupProcessor(RmNetwork, char *);
extern  char		ProcessorName[IOCDataMax];
extern	Object		*ThisProcessor;
extern	RmNetwork	Net;
extern	RmTaskforce	DefaultTaskforce;
extern	RmProcessor	RootProcessor;
extern	RmProcessor	BootIOProcessor;
extern	char		NetworkName[NameMax];
extern	bool		FullReset;
extern	int		NumberProcessors;
extern	Object		*NetAgent;
extern	bool		SilentMode;
extern	Semaphore	SingleStep;
extern	WORD		LastChange;
extern	void		TerminateNetworkServer(void);
a58 42
			/* Module netboot.c */

extern	void		InitBootstrap(void);
extern	void		StartBootstrap(void);
extern	BootstrapJob	*NewBootstrapJob(void);
extern	bool		AddProcessorToBootstrapJob(BootstrapJob *, RmProcessor);
extern	bool		StartBootstrapJob(BootstrapJob *);
extern	void		WaitBootstrapJob(BootstrapJob *);
extern	bool		StartNetworkAgent(RmProcessor);
extern	bool		StopNetworkAgent(RmProcessor);
extern	word		rexec(RmProcessor, Object *, Environ *, word delay);
extern	word		rexec_task(RmProcessor, RmTask, Environ *, word delay);
extern	bool		BuildConfig(RmProcessor source,
	RmProcessor dest, int destlink, Config **config_vec, word *confsize);
extern	Object		*NetMapProcessorToObject(RmProcessor);
extern	char		*BuildName(char *buffer, RmProcessor);
extern	void		UpdateProcessor(RmProcessor, bool name_only);
extern	void		UpdateIOProcessor(RmProcessor, bool name_only);
extern	void		HandleGetLinkMode(NsConn, int, int);
extern	void		HandleSetLinkMode(NsConn, int, int);
extern	int		SetLinkMode(RmProcessor Processor, int link, int mode);
extern	void		ClearNames(RmProcessor);
	
			/* Module netmon.c */
extern	void		InitMonitor(void);
extern	void		StartMonitor(RmProcessor);
extern	void		StopMonitor(RmProcessor);
extern	void		MarkProcessor(RmProcessor);
extern	bool		CheckProcessor(RmProcessor);
extern	void		HandleLinkChange(ServInfo *);
extern	void		HandleAcceptNetwork(NsConn, int, int);
extern	void		HandleJoinNetwork(NsConn, int, int);

			/* Module netalloc.c */
extern	void		InitAlloc(void);
extern	void		HandleObtainProcessor(NsConn, int, int);
extern	void		HandleReleaseProcessor(NsConn, int, int);
extern	void		HandleObtainNetwork(NsConn, int, int);
extern	void		HandleReleaseNetwork(NsConn, int, int);
extern	word		FullRead(Stream *, BYTE *, word , word);
extern	word		AutomaticRelease(Node *);

d82 1
d165 2
d190 9
a198 1
*** These data structures are used in the network device drivers
d208 1
d218 1
a218 1
	int		Spare[20];	/* used to be 5, but not enough */
d227 16
d273 80
@


1.7
log
@changed the NetworkDCB driver-specific space from 5 words to 20, because
complex drivers need the space.
@
text
@d17 1
a17 1
/* $Header: /giga/Helios/network/RCS/netaux.h,v 1.6 90/12/01 15:03:14 bart Exp Locker: bart $ */
d141 1
d166 1
@


1.6
log
@added a prototype for clearnames(), defined in netboot.c but now used
in netmon.c
@
text
@d17 1
a17 1
/* $Header: /usr/perihelion/Helios/network/RCS/netaux.h,v 1.1 90/09/12 14:36:15 jon Exp $ */
d264 1
a264 1
	int		Spare[5];
@


1.5
log
@added some more routines, plus another field to ProcessorEntry to store
a date stamp for commands started by the Network Server
@
text
@d98 1
@


1.4
log
@added support for joining networks
@
text
@d88 1
d240 1
@


1.3
log
@sources update after visit to Parsytec 22.10.90-31.10.90
@
text
@d51 6
d75 1
d92 2
a93 2
extern	void		UpdateProcessor(RmProcessor);
extern	void		UpdateIOProcessor(RmProcessor);
d96 1
d104 3
d285 3
d291 8
a298 1
#define		NsFlags_DenyReadOnly	0x00100000
@


1.2
log
@minor bug fixes in time for Helios 1.2 beta1 release
@
text
@d37 1
d45 4
d77 1
d87 2
d151 1
a152 1

d218 1
a218 1
	Node		Cleaner;	/* node for the cleaners list */
d227 1
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
/* $Header$ */
d51 1
a51 1
extern  char		ProcessorName[128];
@
