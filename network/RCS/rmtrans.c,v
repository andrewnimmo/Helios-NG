head	1.1;
access;
symbols
	Helios_C40_1_3_Official_Release:1.1
	Alenia_release:1.1
	Helios1_3:1.1
	C40_Field_Test_2:1.1
	C40_Field_Test_R1:1.1
	Helios13_beta:1.1
	Helios1_2_2_Fault:1.1
	Helios1_2_2_Native:1.1
	Helios1_2_2_native_beta:1.1
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1
	Helios1_2:1.1;
locks; strict;
comment	@ * @;


1.1
date	90.09.12.14.55.16;	author jon;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--           H E L I O S   N E T W O R K I N G   S O F T W A R E	--
--           ---------------------------------------------------	--
--                                                                      --
--             Copyright (C) 1990, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- rmtrans.c								--
--                                                                      --
--	Purpose : to translate an old-style resource map into the new	--
--		  format
--                                                                      --
--	Author:  BLV 20/5/90						--
--                                                                      --
------------------------------------------------------------------------*/

static char *rcsid = "$Header$";

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <stdarg.h>
#include <message.h>
#include <syslib.h>
#include <nonansi.h>
#include <posix.h>
#include "private.h"
#include "exports.h"
#include "netutils.h"
#include "rmlib.h"

#ifdef Malloc
#undef Malloc
#endif

/**
*** A few forward declarations
**/
static	void		usage(void);
	void		read_resource_map(char *);
	void		fatal(void);
	RmNetwork	Network		= (RmNetwork) NULL;
	RmTaskforce	Taskforce	= (RmTaskforce) NULL;
	char		*ProgramName	= "RmTrans";
	
/**
*** Main(), process the arguments, read the resource map, and write it out
**/
int main(int argc, char **argv)
{ char *resource_map     = Null(char);
  int  result;
    
  if (argc ne 2) usage();
  resource_map = *(++argv);

  read_resource_map(resource_map);
#ifdef DEBUG   
  PrintNetwork(Network);
#endif

  if (resource_map[0] ne '/')
   (void) rename(resource_map, "rmtrans.bak");
  
  if ((result = RmWrite(resource_map, Network, (RmTaskforce)NULL)) ne
      RmE_Success)
   { fprintf(stderr, "Error writing back resource map : ");
     switch(result)
      { case RmE_BadFile : fprintf(stderr, "file I/O error"); break;
        default		 : fprintf(stderr, "unexpected error %d", result);
      }
     fputc('\n', stderr);
     if (resource_map[0] ne '/')
      (void) rename("rmtrans.bak", resource_map);
     return(EXIT_FAILURE);
   }

  if (resource_map[0] ne '/')
   (void) unlink("rmtrans.bak");
  return(EXIT_SUCCESS);   
}

/**
*** Various error handling routines.
**/
static void usage(void)
{
  puts(
  "Usage : rmtrans <resource map>");
  fatal();
}

void fatal(void)
{  
  exit(EXIT_FAILURE);
} 

@
