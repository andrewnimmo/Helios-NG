head	1.17;
access;
symbols
	Helios_1_3_1:1.15
	Helios_C40_1_3_Official_Release:1.14
	Alenia_release:1.13
	Helios1_3:1.11
	C40_Field_Test_2:1.11
	C40_Field_Test_R1:1.11
	Helios13_beta:1.11
	Helios1_2_2:1.10
	Helios1_2_2Beta:1.10
	Helios1_2_1:1.8
	Helios1_2:1.2
	V1_2Beta0:1.1;
locks; strict;


1.17
date	94.06.20.16.00.47;	author nickc;	state Exp;
branches;
next	1.16;

1.16
date	94.05.20.15.40.35;	author vlsi;	state Exp;
branches;
next	1.15;

1.15
date	93.08.12.10.43.19;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	93.01.13.11.01.16;	author bart;	state Exp;
branches;
next	1.13;

1.13
date	92.12.03.16.40.32;	author al;	state Exp;
branches;
next	1.12;

1.12
date	92.11.24.11.13.25;	author al;	state Exp;
branches;
next	1.11;

1.11
date	92.06.24.08.15.56;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	91.06.03.11.15.34;	author nick;	state Exp;
branches;
next	1.9;

1.9
date	91.05.06.14.54.04;	author paul;	state Exp;
branches;
next	1.8;

1.8
date	91.03.25.16.08.03;	author nick;	state Exp;
branches;
next	1.7;

1.7
date	91.03.25.15.57.00;	author nick;	state Exp;
branches;
next	1.6;

1.6
date	91.03.22.18.33.29;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	91.03.21.21.33.14;	author paul;	state Exp;
branches;
next	1.4;

1.4
date	91.03.11.22.32.59;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	91.02.14.15.21.45;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	90.11.01.16.07.36;	author nick;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.13.22.32;	author nick;	state Exp;
branches;
next	;


desc
@Master faults database
@


1.17
log
@added comment describing failings of signal()
@
text
@#		Function/Error code database
#		============================
#
#	This file is the master database for all function and error codes
#	used under Helios. The format of the file is as follows.
#
#	Any line beginning with # is a comment.

#	A line beginning with ! introduces a code class. This consists of
#	a class name, mask and prefix. Only the bits set in the mask will
#	be compared when looking for a code match. The prefix is used only
#	by gencodes.
#	A class is terminated by !!.

#	Code lines contain a code name, a value and an optional comment.
#	If the value is matched the comment is generated, otherwise the
#	code name is used.

#	The following special comment lines are used by gencodes to generate
#	C header files:

#	#!<file>		send output to <file>
#	##<pp command>		generate a preprocessor command.
#	#{			start verbatim text to output
#	#}			end verbatim text

#	Additionally comments are converted to C comments and class and code
#	lined converted to appropriate #defines

# RCSId: $Id$

#!codes.h
#-------------------------------------------------------------------------
#--                                                                     --
#--                     H E L I O S   N U C L E U S                     --
#--                     ---------------------------                     --
#--                                                                     --
#--             Copyright (C) 1987, Perihelion Software Ltd.            --
#--          Copyright (c) 1994, Perihelion Distribiuted Software.      --
#--                        All Rights Reserved.                         --
#--                                                                     --
#-- codes.h								--
#--                                                                     --
#--	Error and Function code encoding.				--
#--									--
#--	Function codes:							--
#--	A 32-bit function code is interpreted as follows:		--
#--		0 CC SSSSS RRRR GGGGGGGGGGGGGGGG FFFF			--
#--	where:								--
#--	C = function class:						--
#--		00 = GSP request					--
#--		11 = private protocol					--
#--	S = Subsystem identifier, or zero if unknown			--
#--	R = Retry counter						--
#--	G = General function code					--
#--	F = Server specific subfunction					--
#--									--
#--	Error codes:							--
#--	A 32-bit error code is interpreted as follows:			--
#--		1 CC SSSSS GGGGGGGG EEEEEEEEEEEEEEEE			--
#--	where:								--
#--	C = Error class:						--
#--		00 = Recoverable					--
#--		01 = Warning						--
#--		10 = Error						--
#--		11 = Fatal						--
#--	S = Subsystem identifier					--
#--	G = General error code						--
#--	E = Specific/object error code					--
#--                                                                     --
#--	WARNING: this file is generated automatically from the master	--
#--	codes databse (faults/master.fdb). Any changes here will	--
#--     be overwritten.					    		--
#--									--
#--	Author:  NHG 11/9/87						--
#--                                                                     --
#-------------------------------------------------------------------------

##ifndef __codes_h
##define __codes_h

##ifndef __helios_h
##include <helios.h>
##endif

#----------------------------------------------------------------------
#-- Subsystems							     --
#----------------------------------------------------------------------

!SubSystem 	0x1f000000	SS_

Unknown		0x00000000	Unknown Subsystem
Kernel		0x01000000
SysLib		0x02000000	System Library
ProcMan		0x03000000	Processor Manager
Loader		0x04000000
TFM		0x05000000	Task Force Manager
RamDisk		0x06000000	Ram Disk
HardDisk	0x07000000	File System
Fifo		0x08000000	Fifo Server
NameTable	0x09000000	Name Server
IOProc		0x0a000000	I/O Processor
Window		0x0b000000	Window Server
IOC		0x0c000000	IO Controller
NullDevice	0x0d000000	Null Device
Pipe		0x0e000000	Pipe Subsystem
Batch		0x0f000000	Batch Server
Unused1		0x10000000
NetServ		0x11000000	Network Manager
SM		0x12000000	Session Manager
Device		0x13000000	Device
InterNet	0x14000000	Internet Server
RomDisk		0x15000000	Rom Disk
Executive	0x16000000	Executive
HServer		0x17000000	/helios Server
RmLib		0x18000000	Resource Management Library
FloppyDisk	0x19000000	Floppy Disk
Keyboard	0x1A000000	Keyboard Server
Logger		0x1B000000	Error and Debug Message Logger
Pointer		0x1C000000	Mouse or Stylus Server
Clock		0x1D000000	Clock Server
Unused2		0x1E000000
User		0x1F000000	User Written Server
!!

#----------------------------------------------------------------------
#-- Function Classes						     --
#----------------------------------------------------------------------

!FunctionClass	0x60000000	FC_

GSP		0x00000000	General Server Protocol
Private		0x60000000	Private Protocol
!!

#----------------------------------------------------------------------
#-- Function Retry Counter					     --
#----------------------------------------------------------------------

!RetryCount	0x00F00000	FR_

Inc		0x00100000	Retry count increment
!!

#----------------------------------------------------------------------
#-- General Functions						     --
#----------------------------------------------------------------------

!GeneralFunction	0x000FFFF0	FG_

Unknown		0x00000000	Unknown Function

#IOC requests
Open		0x00000010
Create		0x00000020
Locate		0x00000030
ObjectInfo	0x00000040
ServerInfo	0x00000050
Delete		0x00000060
Rename		0x00000070
Link		0x00000080
Protect		0x00000090
SetDate		0x000000a0
Refine		0x000000b0
CloseObj	0x000000c0
Revoke		0x000000d0
Reserved1	0x000000e0
Reserved2	0x000000f0

##define FG_LastIOCFn	FG_Reserved2
##define IOCFns		15

#direct server requests
Read		0x00001010
Write		0x00001020
GetSize		0x00001030
SetSize		0x00001040
Close		0x00001050
Seek		0x00001060
GetInfo		0x00001070
SetInfo		0x00001080
EnableEvents	0x00001090
Acknowledge	0x000010A0
NegAcknowledge 	0x000010B0
Select		0x000010C0
ReadAck		0x000010D0
Abort		0x000010E0

#General Server Functions
ReStart		0x00001FE0	restart server
Terminate	0x00001FF0	terminate server

#ProcMan->ProcMan private messages
Search		0x00002010	distributed search
FollowTrail	0x00002020	follow port trail

#Loader private message
ServerSearch	0x00002030

#Task->IOC private messages
MachineName	0x00003010	get processor name
Debug		0x00003020	set debug flags
Alarm		0x00003030	set sleep alarm
Reconfigure	0x00003040	reconfigure processor
SetFlags	0x00003050	set task flags
SetSignalPort	0x00003060	set signal port

#Parent->TFM->ProcMan private messages
SendEnv		0x00004010	send environment to task
Signal		0x00004020	send signal to task
ProgramInfo	0x00004030	get task status
RequestEnv	0x00004040	request environment

#Task->LinkIOC private messages
BootLink	0x00005010	boot processor

#Network Control Functions
NetMask		0x0000F000	
NetStatus	0x00006000	network status message
NetReq		0x00007000	network request message

#Socket Related Requests
Socket		0x00008010	create socket
Bind		0x00008020	bind socket to address
Listen		0x00008030	set socket connection queue size
Accept		0x00008040	accept a connection
Connect		0x00008050	connect to a remote service
SendMessage	0x00008060	send datagram or other message
RecvMessage	0x00008070	receieve datagram or other message

#Device Requests
Format		0x0000a010	format disc
WriteBoot	0x0000a020	write boot area

#RomDisk -> Loader private request
RomCreate	0x0000b010	Create loader entry with image in RomDisk

#Range of function codes for prototyping/private interfaces
PrivateFirst	0x00010000	First private code
PrivateLast	0x0001fff0	Last private code
!!

#----------------------------------------------------------------------
#-- Sub Functions						     --
#----------------------------------------------------------------------

!SubFunction	0x0000000f	FF_

#Set by ReOpen
ReOpen		0x00000001

#Set by Load and Execute before calling Create
LoadOnly	0x00000001
Execute		0x00000002

#Info type codes for Set and GetInfo
SendInfo	0x00000001	send info in GetInfo
Attributes	0x00000000	
Ioctl		0x00000002	Unix style I/O control
SocketInfo	0x00000004	TCP/IP style Socket Info
!!

#----------------------------------------------------------------------
#-- Error Codes							     --
#----------------------------------------------------------------------

##define ErrBit		(word)0x80000000	/* set for all error codes	*/
##define Err_Null	0L		/* no error at all		*/

#----------------------------------------------------------------------
#-- Error Classes						     --
#----------------------------------------------------------------------

!ErrorClass	(word)0xe0000000	EC_

Recover		(word)0x80000000	Recoverable error
Warn		(word)0xa0000000	Warning
Error		(word)0xc0000000	Error
Fatal		(word)0xe0000000	Fatal error
!!

#----------------------------------------------------------------------
#-- General Error codes						     --
#----------------------------------------------------------------------

!GeneralError	0x00FF0000	EG_

UnknownError	0x00000000	unknown error
NoMemory	0x00010000	memory allocation failure for
Create		0x00020000	failed to create
Delete		0x00030000	failed to delete
Protected	0x00040000	protected
Timeout		0x00050000	timeout on
Unknown		0x00060000	failed to find
FnCode		0x00070000	unknown function code for
Name		0x00080000	mal-formed name for
Invalid		0x00090000	invalid or corrupt
InUse		0x000a0000	in use/locked
Congested	0x000b0000	congested
WrongFn		0x000c0000	inappropriate function for
Broken		0x000d0000	broken
Exception	0x000e0000	exception
WrongSize	0x000f0000	wrong size for
ReBooted	0x00100000	rebooted
Open		0x00110000	failed to open
Execute		0x00120000	failed to execute
Boot		0x00130000	failed to boot
State		0x00140000	wrong state for
NoResource	0x00150000	insufficient mapping resource for
Errno		0x00160000	posix error
CallBack	0x00170000	call back in
WriteProtected	0x00180000	write protected
NewTimeout	0x00190000	new timeout
Parameter	0x00ff0000	bad parameter
!!

#----------------------------------------------------------------------
#-- Object codes for general errors				     --
#----------------------------------------------------------------------

!ObjectCode	0x0000ffff	EO_

Unknown		0x00008000	unknown object
Message		0x00008001
Task		0x00008002
Port		0x00008003
Route		0x00008004
Directory	0x00008005
Object		0x00008006
Stream		0x00008007
Program		0x00008008
Module		0x00008009
Matrix		0x0000800a
Fifo		0x0000800b
File		0x0000800c
Capability	0x0000800d
Name		0x0000800e
Window		0x0000800f
Server		0x00008010	
TaskForce	0x00008011
Link		0x00008012
Memory		0x00008013
Pipe		0x00008014
NetServ		0x00008015
Network		0x00008016
User		0x00008017
Session		0x00008018
Loader		0x00008019
ProcMan		0x0000801a
TFM		0x0000801b
Attribute	0x0000801c
NoProcessors	0x0000801d	number of processors
ProcessorType	0x0000801e
Processor	0x0000801f
Socket		0x00008020
Medium		0x00008021	device medium
Password	0x00008022
!!

#----------------------------------------------------------------------
#-- Exception codes						     --
#----------------------------------------------------------------------

!Exception	0x0000ffff	EE_

Null		0x00000000
Kill		0x00000004
Abort		0x00000005
Suspend		0x00000006
Restart		0x00000007
Interrupt	0x00000008
ErrorFlag	0x00000009
StackError	0x0000000a
Signal		0x00007f00
!!

#----------------------------------------------------------------------
#-- Kernel errors						     --
#----------------------------------------------------------------------

##define EK_Timeout	(EC_Recover+SS_Kernel+EG_Timeout+EO_Message)

#----------------------------------------------------------------------
#-- Processor Manager Errors					     --
#----------------------------------------------------------------------

##define EP_Unknown	(EC_Error+SS_ProcMan+EG_Unknown)
##define EP_BadFunction	(EC_Error+SS_ProcMan+EG_FnCode)
##define EP_Protected	(EC_Error+SS_ProcMan+EG_Protected)
##define EP_Name		(EC_Error+SS_ProcMan+EG_Name)

##endif

#End of codes.h

#!signal.h

# WARNING: this file is generated automatically from the master codes
# database (faults/master.fdb), any changes here will be overwritten.

#{
#ifndef __signal_h
#define __signal_h

typedef unsigned long	sigset_t;

typedef int sig_atomic_t;
/* "sig_atomic_t" defines the type which is the integral type of an
 * object that can be modified as an atomic entity, even in the
 * presence of asynchronous interrupts (ANSI X3.159-1989 4.7)
 */

struct sigaction
  {
    void (*	sa_handler)();
    sigset_t	sa_mask;
    int		sa_flags;
    void **	sa_priv;
  };

/* flags */

#ifndef _POSIX_SOURCE
#define SA_SETSIG 	1	/* handler set by signal() 		  */
#define SA_ASYNC	2	/* signal can be delivered asynchronously */
#endif

#define SA_NOCLDSTOP	4	/* do not generate SIGCHLD		  */

extern void _ignore_signal_handler(int);
extern void _default_signal_handler(int);
extern void _error_signal_marker(int);

#define SIG_IGN _ignore_signal_handler
#define SIG_DFL _default_signal_handler
#define SIG_ERR _error_signal_marker

#}	
!Signal 	0x0000001f			
SIGZERO		0	no signal
SIGABRT		1	abort
SIGFPE		2	arithmetic exception
SIGILL		3	illegal instruction
SIGINT		4	attention from user
SIGSEGV		5	bad memory access
SIGTERM		6	termination request
SIGSTAK		7	stack overflow
SIGALRM		8	alarm/timeout signal
SIGHUP		9	hangup
SIGPIPE		10	pipe signal
SIGQUIT		11	interactive termination
SIGTRAP		12	trace trap
SIGUSR1		13	user 1
SIGUSR2		14	user 2
SIGCHLD		15	child termination
SIGURG		16	urgent data available
SIGCONT		17	continue
SIGSTOP		18	stop
SIGTSTP		19	interactive stop
SIGTTIN		20	background read
SIGTTOU		21	background write
SIGWINCH	22	window changed
SIGSIB		23	sibling crashed
SIGKILL		31	termination

#{
#ifndef _POSIX_SOURCE
#define	NSIG		32
#endif

/* codes for sigprocmask */
#define SIG_BLOCK	1
#define SIG_UNBLOCK	2
#define SIG_SETMASK	3


extern int 		kill( int pid, int sig );
extern int 		siginitset(  sigset_t * set );
extern int 		sigfillset(  sigset_t * set );
extern int 		sigaddset(   sigset_t * set, int sig );
extern int 		sigdelset(   sigset_t * set, int sig );
extern int 		sigismember( sigset_t * set, int sig );
extern int 		sigaction( int sig, struct sigaction * act, struct sigaction * oact );
extern int 		sigprocmask( int how, sigset_t * set, sigset_t * oset );
extern int 		sigpending( sigset_t * set );
extern int 		sigsuspend( sigset_t * set );
extern unsigned int 	alarm( unsigned int sec );
extern int 		pause( void );
extern unsigned int 	sleep( unsigned int seconds );
extern void (*		signal( int sig, void (*func)( int ) ))(int);
extern int 		raise( int sig );

/* NB/ BEWARE.  The signal() function will make any asynchronous
 * signal (SIGABRT, SIGHUP, SIGINT, SIGKILL, SIGQUIT, and SIGTERM 
 * behave synchronously.  ie The handler will only be called the
 * next time a POSIX call is made.  This means that the following
 * example program will not work:
 *    void handler( int sig )
 *    { printf( "hello world\n" ); return; }
 *
 *    int main( void )
 *    { (void) signal( SIGINT, handler );
 *      for (;;);
 *      return 0;
 *    }
 * because although the signal will be delivered, the handler()
 * function will only be called when the next POSIX call is
 * made.  To make this example work, the sigaction() function
 * should be used instead:
 *    int main( void )
 *    { struct sigaction new;
 *      new.sa_handler = handler;
 *      new.sa_mask    = 0;
 *      new.sa_flags   = SA_SETSIG | SA_ASYNC;
 *      sigaction( SIGINT, &new, NULL );
 *      for (;;);
 *      return 0;
 *    }
 * This is documented in the Helios Parallel Operating System
 * book in the chapter on UNIX compatibility.
 */

#ifdef _BSD
/* BSD compatability */

struct sigvec
  {
    int	(*	sv_handler)();
    int		sv_mask;
    int		sv_onstack;
  };

struct sigstack
  {
    char *	ss_sp;
    int		ss_onstack;
  };

#define sigmask(x) (1U<<(x))

extern int    sigvec( int sig, struct sigvec * vec, struct sigvec * ovec );
extern int    sigblock(   int mask );
extern int    sigsetmask( int mask );
extern int    sigpause(   int mask );
extern int    sigstack( struct sigstack * ss, struct sigstack * oss );

extern char * sys_siglist[];

#endif /*_BSD*/

#endif
#}

#end of signal.h 

#!errno.h

# errno.h : Posix Library error numbers

# WARNING: this file is generated automatically from the master codes
# database (faults/master.fdb), any changes here will be overwritten.

!Posix		0x0000ffff

##ifndef __errno_h
##define __errno_h

EZERO		0		No error
E2BIG		1		Arg list too long
EACCES		2		Permission denied
EAGAIN		3		Resource temporarily unavailable
EBADF		4		Bad file number
EBUSY		5		Resource busy
ECHILD		6		No child processes
EDEADLK		7		Resource deadlock would occur
EDOM		8		Domain error
EEXIST		9		Already exists
EFAULT		10		Bad address
EFBIG		11		File too large
EINTR		12		Interrupted system call
EINVAL		13		Invalid argument
EIO		14		Input/output error
EISDIR		15		Wrong operation applied to directory
EMFILE		16		Too many open files
EMLINK		17		Too many links
ENAMETOOLONG	18		Filename too long
ENFILE		19		Too many open files in system
ENODEV		20		No such device
ENOENT		21		No such file or directory
ENOEXEC		22		Exec format error
ENOLCK		23		No locks available
ENOMEM		24		Not enough memory space
ENOSPC		25		No space left on device
ENOTDIR		26		Not a directory
ENOTEMPTY	27		Directory not empty
ENOTTY		28		Inappropriate I/O operation
ENXIO		29		No such device or address
EPERM		30		Operation not permitted
EPIPE		31		Broken pipe
##ifndef ERANGE
ERANGE		32		Result too large
##endif
EROFS		33		Read only file system
ESPIPE		34		Invalid seek
ESRCH		35		No such process
EXDEV		36		Improper link
# BSD Extensions (mostly for sockets)
EWOULDBLOCK	37		Operation will block
EINPROGRESS	38		Operation now in progress
EALREADY	39		Operation already in progress
ENOTSOCK	40		Socket operation on non-socket
EDESTADDRREQ	41		Destination address required
EMSGSIZE	42		Message too long
EPROTOTYPE	43		Protocol wrong type for socket
ENOPROTOOPT	44		Bad protocol option
EPROTONOSUPPORT	45		Protocol not supported
ESOCKTNOSUPPORT	46		Socket type not supported
EOPNOTSUPP	47		Operation not supported on socket
EPFNOSUPPORT	48		Protocol family not supported
EAFNOSUPPORT	49		Address family not supported
EADDRINUSE	50		Address already in use
EADDRNOTAVAIL	51		Cannot assign requested address
ENETDOWN	52		Network is down
ENETUNREACH	53		Network is unreachable
ENETRESET	54		Network dropped connection on reset
ECONNABORTED	55		Software caused connection abort
ECONNRESET	56		Connection reset by peer
ENOBUFS		57		No buffer space available
EISCONN		58		Socket is already connected
ENOTCONN	59		Socket is not connected
ESHUTDOWN	60		Cannot send after shutdown
ETIMEDOUT	61		Connection timed out
ECONNREFUSED	62		Connection refused
EHOSTDOWN	63		Host is down
EHOSTUNREACH	64		No route to host
# BSD 4.4 codes (for UFS)
ENOTBLK		65		Block devive required
EFTYPE		66		Inappropriate file type or format
ELOOP		67		Too many levels of symbolic links
EUSERS		68		Too many users
EDQUOT		69		Disc quota exceeded
ESTALE		70		Stale NFS file handle
ETXTBSY		71		Text file busy
EPROCLIM	72		Process limited has been reached
# psuedo-error returned inside UNIX kernel to modify return to process
ERESTART	-1		Restart syscall

##define MAX_PERROR 72		/* maximum posix error code */



#{
extern int errno;

#ifndef _POSIX_SOURCE
#ifdef _BSD

extern char * sys_errlist[];	/* error message array		*/
extern int    sys_nerr;		/* size of same			*/

#endif
#endif

#}

##endif

# end of errno.h
@


1.16
log
@"sig_atomic_t" added to signal.h
"sa_priv" added to the sigaction structure in signal.h
The standard signal prototype changed from handler(int) to handler().
NOTE: This last change is to allow signal handlers to be declared
with more than the standard Posix (int sig) parameters without the
build complaining.
@
text
@d30 1
a30 1
# SccsId: %W% %G%
d39 1
d72 2
a73 1
#--	codes databse. Any changes here will be overwritten.		--
a77 1
# SccsId: %W%	%G% Copyright (C) 1987, Perihelion Software Ltd.
d399 1
a399 1
# database, any changes here will be overwritten.
d413 7
a419 6
struct sigaction {
	void		(*sa_handler)();
	sigset_t	sa_mask;
	int		sa_flags;
	void		**sa_priv;
};
d477 45
a521 15
extern int 		kill(int pid, int sig);
extern int 		siginitset(sigset_t *set);
extern int 		sigfillset(sigset_t *set);
extern int 		sigaddset(sigset_t *set, int sig);
extern int 		sigdelset(sigset_t *set, int sig);
extern int 		sigismember(sigset_t *set, int sig);
extern int 		sigaction(int sig, struct sigaction *act, struct sigaction *oact);
extern int 		sigprocmask( int how, sigset_t *set, sigset_t *oset);
extern int 		sigpending(sigset_t *set);
extern int 		sigsuspend(sigset_t *set);
extern unsigned int 	alarm(unsigned int sec);
extern int 		pause(void);
extern unsigned int 	sleep(unsigned int seconds);
extern void 		(*signal (int sig, void (*func)()))(int);
extern int 		raise(int sig);
d527 5
a531 5
{
	int	(*sv_handler)();
	int	sv_mask;
	int	sv_onstack;
};
d534 4
a537 4
{
	char *	ss_sp;
	int	ss_onstack;
};
d541 5
a545 5
extern int sigvec(int sig, struct sigvec *vec, struct sigvec *ovec);
extern int sigblock(int mask);
extern int sigsetmask(int mask);
extern int sigpause(int mask);
extern int sigstack(struct sigstack *ss,struct sigstack *oss);
d547 1
a547 1
extern char *sys_siglist[];
d561 1
a561 1
# database, any changes here will be overwritten.
d658 2
a659 2
extern char *sys_errlist[];	/* error message array		*/
extern int sys_nerr;		/* size of same			*/
@


1.15
log
@added missing prototypes for signal functions
@
text
@d406 6
d416 1
d488 1
a488 1
extern void 		(*signal (int sig, void (*func)(int)))(int);
@


1.14
log
@added casts to the error codes to avoid problems with signed versus
unsigned comparisons.
@
text
@d504 2
@


1.13
log
@Added EPROCLIM
@
text
@d266 1
a266 1
##define ErrBit		0x80000000	/* set for all error codes	*/
d273 1
a273 1
!ErrorClass	0xe0000000	EC_
d275 4
a278 4
Recover		0x80000000	Recoverable error
Warn		0xa0000000	Warning
Error		0xc0000000	Error
Fatal		0xe0000000	Fatal error
@


1.12
log
@Added EDQUOT EUSERS ENOTBLK EFTYPE ELOOP ERESTART ETXTBSY and ESTALE
for UFS (BSD 4.4).
@
text
@d603 1
d607 1
a607 1
##define MAX_PERROR 71		/* maximum posix error code */
@


1.11
log
@changed sigmask() macro to use usigned constants (avoids compiler warning message)
@
text
@d595 10
d606 3
a608 1
##define MAX_PERROR 64		/* maximum posix error code */
@


1.10
log
@Error code NewTimeout added to allow a server to tell a client to wait
a while for the next reply. Unlike CallBack it does not expect the client
to re-transmit the request.
@
text
@d496 1
a496 1
	char	*ss_sp;
d500 1
a500 1
#define sigmask(x) (1<<(x))
@


1.9
log
@added default user written subsystem field
@
text
@d312 1
@


1.8
log
@Attrib -> Attributes, comment improved.
@
text
@d107 1
a107 1
Unused		0x10000000
d121 2
@


1.7
log
@SubType codes for SetInfo and GetInfo added
@
text
@d255 3
a257 3
Attrib		0x00000000	Attributes
Ioctl		0x00000002	I/O control
SocketInfo	0x00000004	Socket Info
@


1.6
log
@added mouse and clock server subsystems
@
text
@d252 6
@


1.5
log
@added logger
@
text
@d118 3
a120 1
Logger		0x1B000000	Debug Message Logger
@


1.4
log
@added keyboard server and write protect error
@
text
@d118 1
@


1.3
log
@added floppy disk server subsystem manifest
@
text
@d99 4
a102 4
Fifo		0x08000000	Fifo server
NameTable	0x09000000	Name server
IOProc		0x0a000000	I/O processor
Window		0x0b000000	Window server
d105 2
a106 2
Pipe		0x0e000000	Pipe subsystem
Batch		0x0f000000	Batch server
d114 1
a114 1
HServer		0x17000000	/helios server
d117 1
d300 1
@


1.2
log
@FF_ReOpen added
@
text
@d116 1
@


1.1
log
@Initial revision
@
text
@d241 4
@
