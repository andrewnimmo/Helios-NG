head	1.4;
access;
symbols
	Helios_1_3_1:1.4
	Helios_C40_1_3_Official_Release:1.4
	Alenia_release:1.3
	Helios1_3:1.3
	C40_Field_Test_2:1.3
	C40_Field_Test_R1:1.3
	Helios13_beta:1.3
	Helios1_2_2:1.3
	Helios1_2_2Beta:1.3
	Helios1_2_1:1.3
	Helios1_2:1.2
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.4
date	93.04.20.12.59.03;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	91.02.15.14.35.52;	author nick;	state Exp;
branches;
next	1.2;

1.2
date	90.11.15.17.52.23;	author nick;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.13.29.53;	author nick;	state Exp;
branches;
next	;


desc
@terminal control interface
@


1.4
log
@removed compile time warnings
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--                     P O S I X    L I B R A R Y			--
--                     --------------------------                       --
--                                                                      --
--             Copyright (C) 1988, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- termios.c								--
--                                                                      --
--	Terminal IO control.						--
--                                                                      --
--	Author:  NHG 8/5/88						--
--                                                                      --
------------------------------------------------------------------------*/
/* SccsId:	 %W%	%G% Copyright (C) 1987, Perihelion Software Ltd.*/
/* $Id: termios.c,v 1.3 1991/02/15 14:35:52 nick Exp nickc $ */


#include <helios.h>	/* standard header */

#define __in_termios 1	/* flag that we are in this module */


#include "pposix.h"
#include <termios.h>
#include <attrib.h>

#define	CTRL(c)	(c&037)

extern int cf_getospeed(struct termios *p)
{ 
	CHECKSIGS();
	return (int) GetOutputSpeed((Attributes *)p); 
}

extern int cf_setospeed(struct termios *p, int speed)
{
	CHECKSIGS();
	SetOutputSpeed((Attributes *)p,speed); return 0; 
}

extern int cf_getispeed(struct termios *p)
{
	CHECKSIGS();
	return (int) GetInputSpeed((Attributes *)p);
}

extern int cf_setispeed(struct termios *p, int speed)
{
	CHECKSIGS();
	SetInputSpeed((Attributes *)p,speed); return 0;
}


extern int tcgetattr(int fd, struct termios *p)
{
	Stream *s;
	fdentry *f;
	
	CHECKSIGS();
	if((f = checkfd(fd)) == NULL ) return -1;
	
	s = f->pstream->stream;

	if( GetAttributes(s,(Attributes *)p) < 0 )
	{ errno = posix_error(Result2(s)); return -1; }

	/* These bits are really ConsoleRawInput and ConsoleRawOutput */
	/* so we must invert them to mean what POSIX thinks.	      */
	
	p->c_lflag ^= ICANNON;
	p->c_oflag ^= OPOST;

	/* now setup c_cc vector */
	p->c_cc[VINTR] = CTRL('c');
	p->c_cc[VQUIT] = 034;
	p->c_cc[VSUSP] = CTRL('z');
	p->c_cc[VSTART] = CTRL('q');
	p->c_cc[VSTOP] = CTRL('s');

	if( p->c_lflag & ICANNON )
	{
		p->c_cc[VEOF] = CTRL('d');
		p->c_cc[VEOL] = '\n';
		p->c_cc[VERASE] = 0177;
		p->c_cc[VKILL] = CTRL('u');		
	}
	else
	{
		p->c_cc[VMIN] = p->c_min;
		p->c_cc[VTIME] = p->c_time;
	}
	
	CHECKSIGS();
	return 0;
}

extern int tcsetattr(int fd, int actions, struct termios *p)
{
	Stream *s;

	fdentry *f;
	
	CHECKSIGS();
	if((f = checkfd(fd)) == NULL ) return -1;

	actions = actions;
	
	s = f->pstream->stream;

	p->c_lflag ^= ICANNON;
	p->c_oflag ^= OPOST;

	p->c_min = p->c_cc[VMIN];
	p->c_time = p->c_cc[VTIME];
	
	if( SetAttributes(s,(Attributes *)p) < 0 )
	{ errno = posix_error(Result2(s)); return -1; }

	CHECKSIGS();
	return 0;
}

extern int tcsendbreak(int fd, int duration)
{
	fd = fd; duration = duration;
	/* @@@@@@ tcsendbreak */
	CHECKSIGS();
	return 0; 
}

extern int tcdrain(int fd)
{
	fd = fd;
	/* @@@@@@ tcdrain */
	CHECKSIGS();
	return 0;
}

extern int tcflush(int fd, int qselect)
{
	fd = fd; qselect = qselect;
	/* @@@@@@ tcflush */
	CHECKSIGS();
	return 0;
}

extern int tcflow(int fd, int action)
{
	fd = fd; action = action;
	/* @@@@@@ tcflow */
	CHECKSIGS();
	errno = EINVAL; return -1;
}

/* end of termios.c */
@


1.3
log
@CTRL() macro was wrong - always gave ^C
@
text
@d17 1
a17 1
/* $Id: termios.c,v 1.2 90/11/15 17:52:23 nick Exp Locker: nick $ */
d34 1
a34 1
	return GetOutputSpeed((Attributes *)p); 
d46 1
a46 1
	return GetInputSpeed((Attributes *)p);
@


1.2
log
@tcgetpgrp() and tcsetpgrp() moved to signal.c
@
text
@d17 1
a17 1
/* $Id: termios.c,v 1.1 90/09/05 13:29:53 nick Exp $ */
d29 1
a29 1
#define	CTRL(c)	('c'&037)
d76 1
a76 1
	p->c_cc[VINTR] = CTRL(c);
d78 3
a80 3
	p->c_cc[VSUSP] = CTRL(z);
	p->c_cc[VSTART] = CTRL(q);
	p->c_cc[VSTOP] = CTRL(s);
d84 1
a84 1
		p->c_cc[VEOF] = CTRL(d);
d87 1
a87 1
		p->c_cc[VKILL] = CTRL(u);		
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
/* $Id$ */
a154 18
}

extern int tcgetpgrp(int fd)
{
	fd = fd;
	/* @@@@@@ tcgetpgrp */
	errno = EINVAL;
	CHECKSIGS();
	return -1;
}

extern int tcsetpgrp(int fd, int pid)
{
	fd = fd; pid = pid;
	/* @@@@@@ tcsetpgrp */
	errno = EINVAL;
	CHECKSIGS();
	return -1;
@
