head	1.6;
access;
symbols
	Helios_1_3_1:1.6
	Helios_C40_1_3_Official_Release:1.5
	Alenia_release:1.5
	Helios1_3:1.5
	C40_Field_Test_2:1.5
	C40_Field_Test_R1:1.5
	Helios13_beta:1.5
	Helios1_2_2:1.3
	Helios1_2_2Beta:1.3
	Helios1_2_1:1.3
	Helios1_2:1.3
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.6
date	93.07.12.10.24.51;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	92.04.16.00.30.17;	author paul;	state Exp;
branches;
next	1.4;

1.4
date	91.12.13.19.43.43;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	90.10.16.11.40.49;	author nick;	state Exp;
branches;
next	1.2;

1.2
date	90.09.25.19.27.02;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.13.28.39;	author nick;	state Exp;
branches;
next	;


desc
@password database access
@


1.6
log
@fixed warning message from new compiler
@
text
@/* $Id: pwd.c,v 1.5 1992/04/16 00:30:17 paul Exp nickc $ */

#include "pposix.h"
#include <pwd.h>

#define PWFILE "/helios/etc/passwd"

struct DBINFO
{
	struct passwd p;	
};

extern struct DBINFO *dbinfo;
static struct DBINFO *mydbinfo;


extern struct passwd *getpwuid(uid_t uid)
{
	struct passwd *p;	
	struct DBINFO *tdbi;
	
	/* We must test here for a Session Manager and obtain this info */
	/* from there if it exists.					*/
	tdbi = mydbinfo, mydbinfo = dbinfo, dbinfo = tdbi;
	errno = opendb(PWFILE,0);
	if( errno ) return NULL;
	p = &dbinfo->p;
	p->pw_uid = uid;
	errno = scandb("%s:%s:!d:%d:%s:%s:%s",&p->pw_name,&p->pw_passwd,
		uid,&p->pw_gid,&p->pw_gecos,&p->pw_dir,&p->pw_shell);
	if( errno ) return NULL;
	closedb(1);
	tdbi = mydbinfo, mydbinfo = dbinfo, dbinfo = tdbi;
	return p;
}

extern struct passwd *getpwnam(char *name)
{
	struct passwd *p;
	struct DBINFO *tdbi;
	
	/* We must test here for a Session Manager and obtain this info */
	/* from there if it exists.					*/
	tdbi = mydbinfo, mydbinfo = dbinfo, dbinfo = tdbi;
	errno = opendb(PWFILE,0);
	if( errno ) return NULL;
	p = &dbinfo->p;
	p->pw_name = name;
	errno = scandb("!s:%s:%d:%d:%s:%s:%s",&p->pw_name,&p->pw_passwd,
		&p->pw_uid,&p->pw_gid,&p->pw_gecos,&p->pw_dir,&p->pw_shell);
	if( errno ) return NULL;
	closedb(1);
	tdbi = mydbinfo, mydbinfo = dbinfo, dbinfo = tdbi;
	return p;
}

extern struct passwd *getpwent(void) { return NULL; }
extern int endpwent(void) {return -1; }
extern void setpwent(void) { return; }

@


1.5
log
@fix for bogus empty function fix
,
,
@
text
@d1 1
a1 1
/* $Id: pwd.c,v 1.4 1991/12/13 19:43:43 paul Exp paul $ */
a15 5
extern int opendb(char *name, int mode);
extern int closedb(int mode);
extern int scandb(char *format, ... );

extern int errno;
@


1.4
log
@get around compiler bug that doesn't allow empty fns - C40
@
text
@d1 1
a1 1
/* $Id: pwd.c,v 1.3 90/10/16 11:40:49 nick Exp $ */
d64 1
a65 6
#if !defined(__ARM) && !defined(__C40)
	/* get around compiler feature - doesn't allow empty fns!*/
	/* ARM/C40 version temporarily added in asm to posixasm.a */
	extern void setpwent(void) { return; };

#endif
@


1.3
log
@now uses a different DBINFO structure to network routines, to avoid
clashes.
@
text
@d1 1
a1 1
/* $Id: pwd.c,v 1.2 90/09/25 19:27:02 paul Exp $ */
d64 6
a69 3
#ifndef __HELIOSARM /* get around compiler feature - doesn't allow empty fns!*/
			/* ARM version temporarily added in asm to posixasm.a */
extern void setpwent(void) { return; };
@


1.2
log
@arm changes
@
text
@d1 1
a1 1
/* $Id: pwd.c,v 1.1 90/09/05 13:28:39 nick Exp $ */
d14 1
d24 3
a26 2
	struct passwd *p;

d29 1
d38 1
d45 2
a46 1

d49 1
d58 1
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $Id$ */
d56 3
d60 1
a60 2
extern int endpwent(void) {return -1; }

@
