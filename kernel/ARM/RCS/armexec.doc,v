head	1.1;
access;
symbols;
locks
	paul:1.1; strict;
comment	@# @;


1.1
date	92.09.25.15.49.45;	author paul;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@Helios-ARM Work Schedule
------------------------

Paul Beskeen
14/09/92


+ = done.
- = to do.


Bootstrap
---------
	- Implement with Acorn toolkit
	- Perhaps in screen memory?
	- See what old code we can use from ABC port.


Asm
---
	+ Testing and debugging the output of the arm version of the generic
	assembler.

	- Add ARM6 compatibility
	- add lea pseudo-opcode.
	- -ve mov to mvn, +ve mvn to mov substitution.

	+ Conversion of all assembler code to generic assembler.
		+ sstart.a
		+ cstart.a
		+ modend.a
		+ utilasm.a
		+ utilstar.a
		+ sysstart.a
		+ servstart.a
		+ desSfn.a
		+ pstart.a
		+ posixasm.a
		+ clibstar.a
		...

Make System
-----------
	+ makefile for C compiler.
	+ make generic exec accessable for ARM and C40.
	+ makefile for ARM
	- understand all sysstrip type ROMming stuff.
	- fix for new names of utilities
	- fix for new rules needed.
		+ nucleus
		+ syslib
		+ util
		+ servers


Include
-------
	- Ifdef all abc'isms to __ABC (inferred __ARM)
	+ C include files
		+ root.h
		+ link.h
		+ cpustate.h
		+ event.h
		+ arm.h
		+ module.h
		+ memory.h
		+ config.h

	- Updating the std macros
		+ basic.m
		+ device.m
		+ library.m
		+ module.m

	- add new AMPP headers
		+ arm.m
		- armmodt.m
		+ arm.h (InterruptVectors)
		- check structs.m works for arm

	- sort out size of interrupt vectors in root.[mh]

	- convert genhdr to automatically produce AMPP headers from their C
	equivalents.


Linker
------
	- Update ARM version for auto codestub generation - enables assembler
	import directive to work.


Ansi C
------
	+ Port to snake.
	+ Add to main makefile.
	- Convert to latest C Norcroft compiler
	- Add auto stub generation ala C40

Kernel
------
	- Find a solution to supporting multiple types of base hardware
	(links, clocks, mmu's, etc) in the kernel. - Kernel device drivers, or
	simply conditional compilation/assembly. This leads to multiple kernel /
	nucleus versions via sysbuild.

	- Sharing the source of the generic executive between the ARM and C40.

	- Create execroot.m file that holds defn of execroot, rather than
	individual defn in c40execroot.m, arm... etc. Also include this file
	in root.m?

	- Porting the generic executive to the ARM
		- ARM save and restore processor state.
		- Interrupt handling

	- Update executive to handle Archimedies specific hardware.
		- Creating code to handle whatever podule interface we decide
		upon - Gnome or SJ research podules. Could also use the serial
		or parallel ports for compatibility with VLSI work.

		- memc
			- linear memory initialisation
			- memory sizing functions.
		- ARM6 mmu
			- needed to enable cache and wrie buffer

		- ioc (timer)
			- whatever timer is available on VLSI PID

	Fixup proper pre-emption when interrupts occur (also for C40).

	Use of SavePCSState()/RestorePCSState() in Dispatcher.

	Better interrupt handling scheme.
		Attach directly to interrupt vector.
		Allow multiple attaches/detaches/attachtest.
		Allow PCS compilent wrapper layer.
		Force Dispatch() if CurrentPri > HighestAvailPri

	Use of SWI's for kernel/system library entry points?
	Use of Supervisor mode?

	- do we need to enable cache on ARM3?
	- how do we distinguish between an ARM2, 250, 3, 60, 600?

I/O Server
----------
	- Standardise ARM boot protocol.
	- Update to support ARM boot protocol.
	- Update for use with serial/parallel interfaces SUN/PC

Nucleus
-------
	- Ifdef all abc'isms
	- Remove abclib


Cmds
----
	+ mem, free and any programs that think onchip mem may be available.
	- need simple memory based disassembler debugger.
	- How easy would it be to write a AAOF to Helios converter?
		- probably impossible due to different register usage.

Debugging
---------

	- screen can be set to character mode?
		- kdebug -> screen
	- runtime memory editor (mex?, hexpert?)
		- add ARM/C40 disassembler
	- alter I/O Server to have built in debugger for ARM
		- halt and debug command
		- disassembler
	- scheduler trace vector
		- on each re-schedule note:
			the new thread
			the reason for de-scheduling current thread
			the current time.
	- fname
		- given address, should find and print function name
		associated with it (if any).


Documentation
-------------

	- Convert C40 documentation to that for ARM.



Packages
--------
	- X Windows
		- X Lib.
		- X server.

	- network
		- port tcpip
		- local ethernet driver.

	- local Console
		- keyboard
		- window
		- mouse

	- UFS file system
		- raw driver.
		- driver for SCSI
		- driver for ST506
		- driver for IDE

	- ADFS file system
		- driver for SCSI
		- driver for ST506
		- driver for IDE
		- driver for floppy

	- MSDOS filesystem
		- driver for floppy

	- various
		- parallel
		- rs232



Cleanup ToDo
-------------

The emphasis was on speed, so somethings are not done as cleanly as they might:

	The library.m code doesn't check the initialisation parameter passed.

	Some parts of the assembler need updating:
		-ve mov -> mvn
		lea pseudo op.
		better error messages

	Linker should support arm codestub generation.

	Convert all occurances of helios.arm to __ARM, etc for all
	processors. Std defines should be the same for C and AMPP.

	procname() in syslib/procman
		Need single generic version in kernel.
		Need checking that they work for the ARM.
		module.h and module.m do not agree on Proc struct.
			- should be the same as C40 (no extra xputer gubbins)
			- ccarm will have to be updated for this change.

	module.h Proc struct shouldn't default to __TRAN version.

	ARM6 compatibility.

	Check if we really do have to export some of the more odd functions,
	such as linkrx/Dispatch/etc (used to support out of kernel link
	drivers).


Things to CHECK
---------------

	use of patcharmdprest in posixasm.a
	
	use of 'add reg, pc, label': do we need label to be -8, -12,
	or just label?
		- need to change desSfn.a if not -8

	does patchintr(patcharmjp, labelref(.fred), b 0) adjust for the
	pipeline correctly?
@
