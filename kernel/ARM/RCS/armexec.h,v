head	1.2;
access;
symbols;
locks
	paul:1.2; strict;
comment	@ * @;


1.2
date	93.08.24.08.41.11;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	92.09.25.15.49.45;	author paul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Integrated latest ARM world with Heliosv1.3.1 release.
(CheckPoint).
@
text
@/*
 * File:	armexec.h
 * Subsystem:	ARM Helios executive
 * Author:	P.A.Beskeen
 * Date:	Sept '92
 *
 * Description: ARM specific Helios executive manifests. These allow you
 * 		to change the basic parameters of the ARM executive.
 *
 * WARNING:	Changes to these values should be reflected in "armexec.m"
 *
 * RcsId: $Id: armexec.h,v 1.1 1992/09/25 15:49:45 paul Exp paul $
 *
 * (C) Copyright 1992 Perihelion Software Ltd.
 * 
 * RcsLog: $Log: armexec.h,v $
 * Revision 1.1  1992/09/25  15:49:45  paul
 * Initial revision
 *
 *
 */

#ifndef __armexec_h
#define __armexec_h

#include <arm.h>


#if defined(__ARCHIMEDES) && !defined(__IOC)
# define __IOC			/* Archi. uses ARM IOC chip.		*/
#endif

#define DBG(x) {char y = x | 0x80; _LinkTx(1,(Channel)0x03342000,&y);}
#define DBGW(x) {int y = x | 0x80808080; _LinkTx(4,(Channel)0x03342000,&y);}

/* Define executive/kernel options: */

#define	LINKIO		1	/* Processor has links.			*/

#ifdef LINKIO
# define LINKINTR	1	/* Needs LinkReq structs in ExecRoot.	*/

# define COMMSLINKS	4	/* Maximum Number of comms links */
#endif

#define	PERFMON		1	/* Enable performance monitor.		*/

#ifdef __ABC
# define ONCHIPRAM	1	/* If processor has on-chip RAM.	*/
#endif

#define PRIORITYLEVELS	8	/* Number of priority levels.		*/


/* Define executive parameters: */

/*
 * DEFAULTTICKSPERSLICE defines the default number of clock ticks for each
 * thread before it is sliced - currently the clock ticks at one millisecond
 * intervals.
 */
#define DEFAULTTICKSPERSLICE	10	/* 1/100 of a second slice */


/*
 * DISPATCHSTACKSIZE is the maximum size of stack required for a call to
 * Dispatch(). It is use to allow a thread to stay in the dispatchers idle
 * loop until a new thread is sheduled, but still allow interrupts to occur
 * Must include the size of a SaveState structure.
 */
#define DISPATCHSTACKSIZE	48	/* words of stack space */


/*
 * STARTUPSTACKSIZE is the size of the stack required for the first
 * thread used to initialise the system. @@@@@@ This could well be smaller.
 */
#define STARTUPSTACKSIZE	384	/* words of stack space */


/* Define ExecRoot position in low RAM. *WARNING* If this manifest is changed,
 * then update ExecRoot_base in armexec.h.
 */
#if 0
# define ExecRoot_base		0x2800
#else
/* Leave first 32k free for bootstrap/monitor system */
/* *WARNING* If this constant is changed then armexec.m must also be updated */
# define ExecRoot_base		0x9800
#endif

/* Set interrupt level, if in user mode, use trap interface. */

#ifdef __ARM6
# error "IntsOff() not defined for ARM600"
# error "IntsOn() not defined for ARM600"
#else
#if 0 /* wait until _word() implemented */
# define IntsOff	_word(0xe33ff3c3) /* teqp psr, INTflags | SVCmode */
# define IntsOn		_word(0xe33ff003) /* teqp psr, 0 | SVCmode */
#else
/* while _word() doesn't work use std functions */
#endif
#endif


/* ARM specific function prototypes */

/* Initialise ARM CPU specific details */

void ARMExecInit(void);


/* Initialise any system hardware specific details */

void HWSpecificInit(void);


/* Initialise trap table to point @@ trap fn's */

void InitTrapTable(void);

/* Initialise Exception vector to point at handlers (includes
 * IRQ and FIQ vectors)
*/
void InitExceptionVectors(void);


/* Preload FIQ and IRQ banked registers */
void InitExceptionStacks(void);


/* Exported processor interrupt mask update */

void EnableIRQ(void);
void DisableIRQ(void);

void EnableFIQ(void);
void DisableFIQ(void);


/* Exported processor mode alteration */

void KernelEnterSVCMode(void);	/* For internal use only and must not be used */
				/* during a trap from a user thread as this */
				/* would corrupt the user mode link register .*/
void EnterSVCMode(void);	/* For export use only! */
void EnterUserMode(void);	/* For internal and export use. */


#endif /* __armexec_h */



/* End of armexec.h */
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
 * RcsId: $Id$
d16 3
a18 1
 * RcsLog: $Log$
d20 1
d27 20
a46 1
#include <event.h>	/* for IntsOn/Off() */
a47 2
#define	LINKIO	1		/* processor has links		*/
#define	PERFMON 1		/* enable performance monitor	*/
d49 1
a49 1
# define ONCHIPRAM 1		/* processor has on-chip RAM	*/
d52 1
a52 2
/* Number of priority levels */
#define PRIORITYLEVELS		8
a53 2
/* Number of on-chip comms links */
#define COMMSLINKS		1
d55 1
d57 15
a71 4
/* DEFAULTTICKSPERSLICE defines the default number of clock ticks for each */
/* thread before it is sliced - currently the clock ticks at one millisecond */
/* intervals */
#define DEFAULTTICKSPERSLICE	100	/* 1/10 of a second slice */
a72 4
/* DISPATCHSTACKSIZE is the maximum size of stack required for a call to */
/* Dispatch(). It is use to allow a thread to stay in the dispatchers idle */
/* loop until a new thread is sheduled, but still allow interrupts to occur */
#define DISPATCHSTACKSIZE	40	/* words of stack space */
d74 5
a78 3
/* Enable interrupts and idle until an interrupt occurs */
/* On the 'C40 this means Execute the IDLE instruction */
void IdleUntilInterrupt(void);
d81 2
a82 4
#ifdef SYSDEB
/* @@@@@@ implement ARM version
 * # define CHECKSS(x)	if((x) < (SaveState *)(0x2ff800*4)) \
 *			{_Trace(0xdeaddddd, (word)x, 0); JTAGHalt();}
d84 6
a89 1
# define CHECKSS(x)
d92 59
d155 1
a155 1
/* end of armexec.h */
@
