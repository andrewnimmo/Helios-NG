head	1.2;
access;
symbols;
locks; strict;
comment	@-- @;


1.2
date	93.08.24.08.41.11;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	92.09.25.15.49.45;	author paul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@Integrated latest ARM world with Heliosv1.3.1 release.
(CheckPoint).
@
text
@-- File:	armexec.a
-- Subsystem:	ARM Helios executive
-- Author:	P.A.Beskeen
-- Date:	Sept '92
--
-- Description: ARM Helios executive support assembler functions.
--
--		This source provides general support functions for the
--		Helios ARM executive.
--
-- RcsId: $Id: armexec.a,v 1.1 1992/09/25 15:49:45 paul Exp paul $
--
-- (C) Copyright 1992 Perihelion Software Ltd.
-- 
-- RcsLog: $Log: armexec.a,v $
-- Revision 1.1  1992/09/25  15:49:45  paul
-- Initial revision
--
--


include ../gexec.m	-- Executive manifests
include module.m


---------------------------------------------------------------------
-- Return the address of the Executive ExecRoot data structure. This data
-- structure contains global Executive information plus private data describing
-- the currently active thread.
--
-- Called by C so must conform to PCS. Exported for user access, for future
-- compatibility, this fn should be used, rather than a constant. The Kernel /
-- executive simply uses a macro.
--
-- @@@@@@ update gexec.h #define when position is fixed.
--
-- ExecRoot * GetExecRoot(void);

	Function 'GetExecRoot

	GetExecRoot r0
	movs	pc, lr



---------------------------------------------------------------------
-- Module Table functions

-- word _SetModTab(word *modtab);
--
-- Sets new module table pointer, returning the original
--
-- Called by C so must conform to PCS.
--

	Function _SetModTab

	mov	tmp, mt		-- save old MT
	mov	mt, a1		-- Set new MT
	mov	a1, tmp		-- return original MT
	movs	pc, lr


-- _GetModTab
--
-- Returns current module table pointer
--
-- Called by C so must conform to PCS.
-- word _GetModTab(void);

	Function _GetModTab

	mov	a1, mt
	movs	pc, lr



---------------------------------------------------------------------
-- Memory sizing functions

_if _false [	-- gexec.c currently defines this.
-- Calculate the amount of available memory.
-- StoreSize is passed the base of free memory, it should return the address
-- of the first unusable byte (word) of RAM
--
-- Called by C so must conform to PCS.
--
-- byte *StoreSize(byte *mem_start) ;

	Function StoreSize

	error "StoreSize not defined"
]


_if _defp 'ONCHIPRAM [
-- FastStoreSize
--
-- Calculate and return the size of on-chip memory
-- FastStoreSize is passed a pointer to a word where base address of the
-- on-chip RAM will be placed. This pointer is updated and the function
-- returns the size of the on-chip RAM in bytes.
--
-- Called by C so must conform to PCS.
--
-- word FastStoreSize(byte **base)

	Function FastStoreSize

	error "FastStoreSize not defined"
]


_if _defp 'CODES [
---------------------------------------------------------------------
-- InitErrorCodes
--
-- Returns pointer to errorcode array
--
-- Called by C so must be PCS conformant

	Function InitErrorCodes

	lea	a1, ..ErrorCodes
	movs	pc, lr


-- The error code array:
..ErrorCodes:
	word	0x81058001	-- 0 Err_Timeout 
	word	0xa1098003	-- 1 Err_BadPort 
	word	0xa1098004	-- 2 Err_BadRoute 
	word	0xc1098012	-- 3 Err_DeadLink 
	word	0xa1010000	-- 4 Err_NoMemory 
	word	0x810b8004	-- 5 Err_Congestion 
	word	0xe10e0004	-- 6 Err_Kill 
	word	0xc10e0005	-- 7 Err_Abort 
	word	0x810b8003	-- 8 Err_NotReady 
	word	0xa1098012	-- 9 Err_BadLink 

]


---------------------------------------------------------------------
-- Debugging/trace functions
--
-- _linkreg, _fpreg, _spreg
--
-- Returns the value of the registers as used by the calling function.
--
-- Called from C so must be PCS compilent
--
-- ARM PCS defines stack frame pointer fp points to callers lr, sp, fp, args...


-- Return original link register value from callers caller

	Function _linkreg

_test _false [
	-- ARM PCS defines that fp-4 points to return link of calling function
	ldr	a1, (fp,-4)		-- get the return address
][
	mov	a1, lr
]
	movs	pc, lr


-- Return current frame-pointer

	Function  _fpreg

	mov	a1, fp			-- return the frame pointer
	movs	pc, lr


-- Return original user stack pointer value from callers caller.
-- As we are a leaf function this should not have changed.

	Function _spreg

	-- ARM PCS defines that fp-8 points to calling fns saved sp
--	ldr	a1, (fp,-8)		-- get original stack pointer of caller
	mov	a1, sp
	movs	pc, lr



-- LED DEBUG CODE.
-- @@@@@@ Use this code to set LEDS to 'FOURBITNUMTOSET'.
_if _false [ -- @@@@@@ tmp DBG 
		mvn	r2, (FOURBITNUMTOSET << 4)
		ldr	r3,hw_PARALLEL_holder2	-- get the GPIO hardware address
		strb	r2,(r3,hw_parallel.GPIO)-- and update the LED
		b	passt
		hw_PARALLEL_holder2:
			word	hw_PARALLEL
passt:
]


-- end of armexec.a
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
-- RcsId: $Id$
d15 3
a17 1
-- RcsLog: $Log$
d19 1
d31 5
a35 1
-- Called by C so must conform to PCS.
d41 2
a42 23


---------------------------------------------------------------------
-- Hardware initialisation functions

-- Reset the processor and restart boot sequence
--
-- Called by C so must conform to PCS.
--
-- void ResetCPU(void);

	Function ResetCPU


-- Reset all on-chip links, canceling any current transfers
-- nothing more can be done on a C40 - AbortLinkTx/Rx cancels any DMA.
-- But the contents of the fifos will still be sent.
--
-- Called by C so must conform to PCS.
-- void ResetLinkHardware(void);

	Function ResetLinkHardware

a43 12
-- Set or get the system stack address.
--
-- If the new stack address is NULL, then return the existing stack address,
-- otherwise set the system stack to the new address. Programs should return
-- the stack to the original address before exiting. This function can be
-- used to increase the size of the stack and/or place it in on-chip memory.
--
-- Called by C so must conform to PCS.
--
-- wordptr SetSystemStack(wordptr newstackaddr);

	Function SetSystemStack
d49 1
a49 1
-- _SetModTab
d54 1
a54 1
-- word _SetModTab(word *modtab);
d58 4
d73 3
d77 1
d81 1
d92 3
d96 1
d110 2
d113 2
d124 3
d141 1
d152 2
d160 8
d173 2
d176 1
d182 5
d189 11
@
