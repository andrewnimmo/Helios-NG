head	1.14;
access;
symbols
	Helios_1_3_1:1.14
	Helios_C40_1_3_Official_Release:1.14
	Alenia_release:1.13
	C40_Field_Test_2:1.11
	C40_Field_Test_R1:1.6;
locks; strict;
comment	@# @;


1.14
date	93.02.05.11.12.56;	author paul;	state Exp;
branches;
next	1.13;

1.13
date	92.11.12.20.54.42;	author paul;	state Exp;
branches;
next	1.12;

1.12
date	92.11.12.17.14.43;	author paul;	state Exp;
branches;
next	1.11;

1.11
date	92.09.25.09.37.41;	author paul;	state Exp;
branches;
next	1.10;

1.10
date	92.09.23.17.22.20;	author paul;	state Exp;
branches;
next	1.9;

1.9
date	92.08.12.18.45.35;	author paul;	state Exp;
branches;
next	1.8;

1.8
date	92.08.06.12.24.54;	author paul;	state Exp;
branches;
next	1.7;

1.7
date	92.07.30.18.34.10;	author paul;	state Exp;
branches;
next	1.6;

1.6
date	92.06.26.17.58.10;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	92.05.14.08.45.47;	author paul;	state Exp;
branches;
next	1.4;

1.4
date	92.04.28.09.22.17;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	92.04.21.10.40.50;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	92.04.21.09.54.56;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	91.12.03.11.52.12;	author paul;	state Exp;
branches;
next	;


desc
@c40 executive manifests
@


1.14
log
@fixed timeslice to 100th of a sec rather than a tenth
@
text
@-- File:	c40exec.m
-- Subsystem:	'C40 Helios executive
-- Author:	P.A.Beskeen
-- Date:	Nov '91
--
-- Description: 'C40 specific Helios executive manifests
--
--
-- RcsId: $Id: c40exec.m,v 1.13 1992/11/12 20:54:42 paul Exp $
--
-- (C) Copyright 1991 Perihelion Software Ltd.
-- 
---
-- WARNING: These definition must be kept upto date with "c40exec.h"
--

_report ['include 'c40exec.m]
_def 'c40exec.m_flag 1

include structs.m
include sem.m
include c40.m
include c40mmap.m
include cpustate.m
include tim40.m


_def 'LINKDMA 1		-- default to DMA rather than interrupt driven links

_if _not _defp 'LINKDMA [
	_def 'LINKINTR 1
]

-- LinkReq struct hold status of link read/write over interrupts
struct LinkReq [
	-- @@@@@@ maybe add mask for this links IOCRDY/IOCFULL intr. here?
	word	Count		-- number of words remaining to read/write
	word	Buf		-- current buffer pointer (WPTR)
]


-- Place address of execroot into register.
-- Address is defined by bootstrap that loads the address of the execroot
-- into the tvtp expansion regsister.
_defq 'GetExecRoot['AddrReg] [
	ldep	tvtp, AddrReg
]

-- Place word address of nucleus root struct into register.
-- @@@@@@ be aware of GetRoot macro in root.m that will need changing if
-- ExecRoot.Nucleus changes position
_defq 'GetNucRoot['AddrReg] [
	ldep	tvtp, AddrReg
	-- C40WordAddress *+AddrReg(ExecRoot.KernelRoot), AddrReg
	lsh	-2, *+AddrReg(ExecRoot.KernelRoot), AddrReg
	addi	R_BASE, AddrReg
]


-- Misc exec definitions

_def 'ONEMILLISEC	1000		-- one millisecond in microseconds

_def 'PRIORITYLEVELS	8		-- number of priority levels
_def 'HIGHPRI		0		-- defines highest priority
_def 'REALIDLEPRI	PRIORITYLEVELS	-- defines scheduler idle priority

-- DEFAULTTICKSPERSLICE defines the default number of clock ticks for each
-- thread before it is sliced - currently the clock ticks at one millisecond
-- intervals.
_def 'DEFAULTTICKSPERSLICE	10		-- 1/100 of a second slice

-- DISPATCHSTACKSIZE is the maximum size of stack required for a call to
-- Dispatch(). It is use to allow a thread to stay in the dispatchers idle
-- loop until a new thread is sheduled, but still allow interrupts to occur
_def 'DISPATCHSTACKSIZE	40		-- words of stack space



-- endof c40exec.m
@


1.13
log
@made C40Word/CAddress compatible with IR0 != 0
@
text
@d9 1
a9 1
-- RcsId: $Id: c40exec.m,v 1.12 1992/11/12 17:14:43 paul Exp $
d71 1
a71 1
_def 'DEFAULTTICKSPERSLICE	100		-- 1/10 of a second slice
@


1.12
log
@now uses generic cpustate.m
rl
@
text
@d9 1
a9 1
-- RcsId: $Id: c40exec.m,v 1.11 1992/09/25 09:37:41 paul Exp $
d45 2
a46 7
_def 'GetExecRoot['AddrReg] [
	_test _false [
		-- ExecRoot is defined to be directly after the end of on-chip RAM
		ldhi	0x30, AddrReg	-- lsb is automatically zeroed
	][
		ldep	tvtp, AddrReg
	]
d52 1
a52 1
_def 'GetNucRoot['AddrReg] [
d54 3
a56 1
	C40WordAddress *+AddrReg(ExecRoot.KernelRoot), AddrReg
@


1.11
log
@chopped out generic definitions and inserted them into gexec.m
@
text
@d9 1
a9 1
-- RcsId: $Id: c40exec.m,v 1.10 1992/09/23 17:22:20 paul Exp paul $
d24 1
a24 1
include c40cpustate.m
@


1.10
log
@added moveable execroot support
@
text
@d9 1
a9 1
-- RcsId: $Id: c40exec.m,v 1.9 1992/08/12 18:45:35 paul Exp $
d28 1
a28 1
_def 'LinkDMA 1		-- default to DMA rather than interrupt driven links
d30 3
a81 105
-- Define flags held in Hardware Config word sent to bootstrap code by booter
_def	'HW_NucleusLocalS0	0	-- load nuc. into local bus strobe 0
					-- above is default
_def	'HW_NucleusLocalS1	1	-- load nuc. into local bus strobe 1
_def	'HW_NucleusGlobalS0	2	-- load nuc. into global bus strobe 0
_def	'HW_NucleusGlobalS1	4	-- load nuc. into global bus strobe 1
_def	'HW_PseudoIDROM		8	-- download and use pseudo IDROM
_def	'HW_ReplaceIDROM	16	-- download and replace existing IDROM
_def	'HW_CacheOff		32	-- dont enable cache


-- ExecRoot element offsets

struct ExecRoot [
	word	CurrentSaveArea		-- Points to current threads
					-- Save area (BPTR) - must be first
	word	CurrentPri		-- Priority of current thread
					-- The run Q's
	word	HighestAvailPri		-- Highest runnable thread

	word	KernelRoot		-- kernel RootStruct address (BPTR)
					-- *DO NOT* change pos without changing
					-- use by GetRoot macro in root.m!
	word	Nucleus			-- load address of nucleus (BPTR)

	word	IdleTime		-- Amount of time spent in idle
	word	Timer			-- Current Microsecond clock value
	word	SliceTime		-- Clock ticks until next time slice
	word	TicksPerSlice		-- Quantum given to each slice
	word	SliceEnabled		-- TRUE if we can time slice
	word	TimerQ			-- Timer queue for Sleep() (BPTR)

	--Run Q's for different priorities
	word	Queue0.head
	word	Queue0.tail
	word	Queue1.head
	word	Queue1.tail
	word	Queue2.head
	word	Queue2.tail
	word	Queue3.head
	word	Queue3.tail
	word	Queue4.head
	word	Queue4.tail
	word	Queue5.head
	word	Queue5.tail
	word	Queue6.head
	word	Queue6.tail
	word	Queue7.head
	word	Queue7.tail

	word	KnownThreads		-- List of all known current threads
					-- chained off SaveState->nextknown

	word	SystemStack		-- Can be changed for interrupt
					-- handlers that need larger stacks
					-- (BPTR)
	word	SystemStackSize		-- Current SysStack size

	-- structures hold count and pointers for that links current
	-- transaction - set up by LinkRx/Tx and used by the INTERRUPT DRIVEN
	-- VERSIONS of __LinkTx/Rx
	struct LinkReq		LinkInStat0
	struct LinkReq		LinkInStat1
	struct LinkReq		LinkInStat2
	struct LinkReq		LinkInStat3
	struct LinkReq		LinkInStat4
	struct LinkReq		LinkInStat5

	struct LinkReq		LinkOutStat0
	struct LinkReq		LinkOutStat1
	struct LinkReq		LinkOutStat2
	struct LinkReq		LinkOutStat3
	struct LinkReq		LinkOutStat4
	struct LinkReq		LinkOutStat5

	-- holds small stack for Dispatch()
	vec	[_mul DISPATCHSTACKSIZE 4] DispatchStack


	-- C40 specific items:

	struct	IDROM ID_ROM		-- IDROM contents

	word	DMAInts			-- # of end of DMA interrupts occurred
	word	Latency			-- last timer latency seen
	word	MaxLatency		-- max timer latency seen
	word	MaxLatencyPC		-- PC of high latency thread


	-- KDebug specific items:

	vec 80	KDBuffer		-- static buffer for KDebug()'s
	word	KDBufPos		-- Position in buffer
	word	KDebugEnable		-- TRUE = can output KDebugs

					-- KERNELDEBUG3 support:
	word	KD3StartB		-- start of msg dump buffer
	word	KD3EndB			-- end of msg dump buffer
	word	KD3StartM		-- pointer to start of msgs
	word	KD3EndM			-- pointer to end of msgs
	struct Sem	KD3Sem		-- Kick sem to initiate msg send


] -- end of ExecRoot structure
 
@


1.9
log
@fixed getroot macro
@
text
@d9 1
a9 1
-- RcsId: $Id: c40exec.m,v 1.8 1992/08/06 12:24:54 paul Exp $
a38 26
-- @@@@@@ The following values will may change when we add full memory
-- configurability: nucleus/data/code loaded on global/local address busses

-- Place base address of nucleus into register.
_def 'NucPosition['AddrReg] [
	ldi32	0x300440 AddrReg
]

-- Place base address of system stack into register.
_def 'SysStack['AddrReg] [
	ldhi	0x30, AddrReg	-- lsb is automatically zeroed
	or	0x100, AddrReg	-- 1kb system stack
]

-- Place base address of trap vector table into register.
_def 'TrapVectors['AddrReg] [
	ldhi	0x30, AddrReg
	or	0x200, AddrReg	
]

-- Place base address of interrupt vector table into register.
_def 'InterruptVectors['AddrReg] [
	ldhi	0x30, AddrReg
	or	0x400, AddrReg	
]

d40 2
a41 1
-- ExecRoot is defined to be directly after the end of on-chip RAM
d43 6
a48 1
	ldhi	0x30, AddrReg	-- lsb is automatically zeroed
d55 1
a55 1
	ldhi	0x30, AddrReg
d100 2
a101 2
					-- DO NOT change pos without changing
					-- used by GetRoot macro in root.m!
@


1.8
log
@added GetNucRoot macro
@
text
@d9 1
a9 1
-- RcsId: $Id: c40exec.m,v 1.7 1992/07/30 18:34:10 paul Exp $
d76 1
a76 1
	C40WordAddress *+AddrReg(ExecRoot.Nucleus), AddrReg
@


1.7
log
@fix for idlemon
@
text
@d9 1
a9 1
-- RcsId: $Id: c40exec.m,v 1.6 1992/06/26 17:58:10 paul Exp paul $
d42 1
a42 1
-- Place base address of system stack into register.
d69 8
@


1.6
log
@ticksperslice changed to just a default, idrom struct added to execroot
harware config word flags added
@
text
@d9 1
a9 1
-- RcsId: $Id: c40exec.m,v 1.5 1992/05/14 08:45:47 paul Exp $
d116 1
a116 1
	word	IdleCount		-- number of times we have hit IDLE
@


1.5
log
@changed execroot struct org. + changed slice quantum to 1/10 of a sec
@
text
@d9 1
a9 1
-- RcsId: $Id: c40exec.m,v 1.4 1992/04/28 09:22:17 paul Exp $
d25 1
d39 8
d50 1
a50 1
	or	0x80, AddrReg	
d80 4
a83 3
-- TICKSPERSLICE defines the number of clock ticks for each thread before
-- it is sliced - currently the clock ticks at one millisecond intervals
_def 'TICKSPERSLICE	100		-- 1/10 of a second slice
d90 10
a99 2
_if _false
	[_def	'__TIM40	1]	-- define if targeted at TIM-40 standard
d119 1
d169 1
a170 4
	word	CPUCycleTime		-- # nanoseconds for one CPU cycle
	word	ClockTick		-- # CPUCycles*2 in 1 millisecond
	word	StoreSize		-- size of local bus RAM
	word	StoreStart		-- start of local bus RAM
d172 2
d179 1
d181 1
d193 1
a194 1

@


1.4
log
@added SliceEnabled
@
text
@d9 1
a9 1
-- RcsId: $Id: c40exec.m,v 1.3 1992/04/21 10:40:50 paul Exp $
d27 11
d73 1
a73 1
_def 'TICKSPERSLICE	25	
d130 32
d173 1
a173 13
	word	CPUCycleTime		-- # nanoseconds for one CPU cycle
	word	ClockTick		-- # CPUCycles*2 in 1 millisecond
	word	StoreSize		-- size of local bus RAM
	word	StoreStart		-- start of local bus RAM

	word	DMAInts			-- # of end of DMA interrupts occurred
	word	MaxLatency		-- max timer latency seen
	word	MaxLatencyPC		-- PC of high latency thread

					-- holds small stack for Dispatch()
	vec	[_mul DISPATCHSTACKSIZE 4] DispatchStack
]
-- end of ExecRoot structure
@


1.3
log
@remove rcs info as rcs gets comment char wrong
@
text
@d9 1
a9 1
-- RcsId: $Id: c40exec.m,v 1.2 1992/04/21 09:54:56 paul Exp $
d90 1
@


1.2
log
@alpha version
@
text
@d9 1
a9 1
-- RcsId: $Id$
d13 1
a13 2
-- RcsLog: $Log$
--
@


1.1
log
@Initial revision
@
text
@d1 16
a16 17
/*
 * File:	c40exec.m
 * Subsystem:	'C40 Helios executive
 * Author:	P.A.Beskeen
 * Date:	Nov '91
 *
 * Description: 'C40 specific Helios executive manifests
 *
 *
 * RcsId: $Id$
 *
 * (C) Copyright 1991 Perihelion Software Ltd.
 * 
 * RcsLog: $Log$
 *
 * WARNING: These definition must be kept upto date with "c40exec.h"
 */
d21 2
d24 1
d28 4
a31 7
// Place address of execroot into register.
//
// ExecRoot is defined to be directly after the end of internal RAM

_defp ExecRoot['Areg]
[
	ldhi	0x30, Areg	// lsb is automatically zeroed
d34 5
d40 5
a44 1
/* ExecRoot element offsets */
d46 5
a50 5
_defp XRoot_CurrentSaveArea	0	/* Points to current threads */
					/* Save area (BPTR) - must be first */
_defp XRoot_CurrentPri		1	/* Priority of current thread */
					/* The run Q's */
_defp XRoot_HighestAvailPri	2	/* Highest runnable thread */
a51 3
_defp XRoot_Timer		3	/* Current Microsecond clock value */
_defp XRoot_SliceTime		4	/* Clock ticks until next time slice */
_defp XRoot_TimerQ		5	/* Timer queue for Sleep() (BPTR) */
d53 1
a53 17
/* Run Q's for different priorities */
_defp XRoot_Queue0.head		6
_defp XRoot_Queue0.tail		7
_defp XRoot_Queue1.head		8
_defp XRoot_Queue1.tail		9
_defp XRoot_Queue2.head		10
_defp XRoot_Queue2.tail		11
_defp XRoot_Queue3.head		12
_defp XRoot_Queue3.tail		13
_defp XRoot_Queue4.head		14
_defp XRoot_Queue4.tail		15
_defp XRoot_Queue5.head		16
_defp XRoot_Queue5.tail		17
_defp XRoot_Queue6.head		18
_defp XRoot_Queue6.tail		19
_defp XRoot_Queue7.head		20
_defp XRoot_Queue7.tail		21
d55 1
a55 3
_defp XRoot_KnownThreads	22	/* List of all known current threads */
					/* chained off SaveState->nextknown */
_defp XRoot_Nucleus		23	/* load address of nucleus */
d57 81
a137 1
_defp XRoot_IdleCount		24	/* number of times we have hit IDLE */
d139 4
a142 36
_defp XRoot_SysStack		25	/* Can be changed for interrupt */
					/* handlers that need larger stacks */
					/* (BPTR) */
_defp XRoot_SysStackSize	26	/* Current SysStack size */

_defp XRoot_CPUCycleTime	27	/* # nanoseconds for one CPU cycle */
_defp XRoot_ClockTick		28	/* # CPUCycles*2 in 1 millisecond */
_defp StoreSize			29	/* size of local bus RAM */
_defp StoreStart		30	/* start of local bus RAM */

_defp XRoot_LinkTxQ		31	/* size = COMMSLINKS */
_defp XRoot_LinkRxQ		37	/* size = COMMSLINKS */

_defp XRoot_DispatchStack	43	/* holds small stack for Dispatch() */

/* end of ExecRoot structure offsets */


_defp ONEMILLISEC	1000		/* one millisecond in microseconds */


_defp PRIORITYLEVELS	8		/* number of priority levels */
_defp HIGHPRI		0		/* defines highest priority */
_defp REALIDLEPRI	PRIORITYLEVELS	/* defines scheduler idle priority */


/* TICKSPERSLICE defines the number of clock ticks for each thread before */
/* it is sliced - currently the clock ticks at one millisecond intervals */
_defp TICKSPERSLICE	25	


/* DISPATCHSTACKSIZE is the maximum size of stack required for a call to */
/* Dispatch(). It is use to allow a thread to stay in the dispatchers idle */
/* loop until a new thread is sheduled, but still allow interrupts to occur */
_defp DISPATCHSTACKSIZE	40	/* words of stack space */

d144 1
d146 1
a146 1
// endof c40exec.m
@
