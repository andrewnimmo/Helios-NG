head	1.1;
access;
symbols
	Helios_1_3_1:1.1
	Helios_C40_1_3_Official_Release:1.1
	Alenia_release:1.1
	C40_Field_Test_2:1.1
	C40_Field_Test_R1:1.1;
locks; strict;
comment	@ * @;


1.1
date	91.12.03.11.49.44;	author paul;	state Exp;
branches;
next	;


desc
@c40 specific definitions - global
@


1.1
log
@Initial revision
@
text
@/*
 * File:	c40.h
 * Subsystem:	Helios/C40 implementation
 * Author:	P.A.Beskeen
 * Date:	Nov '91
 *
 * Description: 'C40 specific Helios manifests
 *
 *
 * RcsId: $Id$
 *
 * (C) Copyright 1991 Perihelion Software Ltd.
 * 
 * RcsLog: $Log$
 *
 */

#ifndef __c40_h
#define __c40_h

#include <helios.h>


/* 'C40 Procedure Call Standard (PCS) manifests */

/* The number of arguments passed in registers as defined by the 'C40 PCS */
#define PCS_ARGREGS	4

/* The number of bytes held as a stack overflow area. The true end of the */
/* stack is pointed to by the user stack end register + PCSSTACKGUARD */
#define PCS_STACKGUARD	(64 * sizeof(word))

/* Notes what type of user stack is used by the PCS */
#define PCS_FULLDECENDING


/* Convert a Helios C byte address pointer to a 'C40 CPU word pointer */
/* - this may loose some byte selection information */
/* @@@@@@ Have to convert these routines to take account of the C base */
/* pointer (IR0) if we change it to a non zero value */
#define C40WordAddress(Cptr)	((word)(Cptr) >> 2)

/* Convert a 'C40 CPU word pointer to a Helios C byte address pointer */
/* Points to first byte of word */
#define C40CAddress(Wptr)	((word)(Wptr) << 2)

#endif /* __c40_h */

@
