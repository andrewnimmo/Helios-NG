head	1.19;
access;
symbols
	Helios_1_3_1:1.19
	Helios_C40_1_3_Official_Release:1.13
	Alenia_release:1.11
	C40_Field_Test_2:1.11;
locks; strict;
comment	@ * @;


1.19
date	93.10.04.15.06.57;	author paul;	state Exp;
branches;
next	1.18;

1.18
date	93.09.10.13.43.35;	author nickc;	state Exp;
branches;
next	1.17;

1.17
date	93.08.05.14.16.29;	author nickc;	state Exp;
branches;
next	1.16;

1.16
date	93.08.05.08.47.07;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	93.08.04.10.10.21;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	93.08.02.08.21.10;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	93.03.29.08.55.56;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	93.03.26.16.46.52;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	92.09.22.13.29.26;	author paul;	state Exp;
branches;
next	1.10;

1.10
date	92.09.03.10.07.34;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	92.09.02.08.27.18;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	92.08.21.07.58.43;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	92.07.31.17.35.21;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	92.07.23.14.57.04;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	92.07.22.07.52.12;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	92.07.22.07.51.01;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	92.07.21.09.46.00;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	92.07.21.09.06.18;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	92.07.20.14.55.55;	author nickc;	state Exp;
branches;
next	;


desc
@C language component of stack extension code
@


1.19
log
@updated to allocate small transient structures from low memory. Stack extn.
frames, port tables and message buffers.
@
text
@/*
 * stack_c.c : 	C Stack manipulation code, C part
 *
 *   Copyright (c) 1992, 1993 Perihelion Software Ltd.
 *     All rights reserved.
 *
 * Author :	N Clifton
 * Version :	$Revision: 1.18 $
 * Date :	$Date: 1993/09/10 13:43:35 $
 * Id :		$Id: stack_c.c,v 1.18 1993/09/10 13:43:35 nickc Exp $
 */

#ifndef __C40
#error	stack_c.c is designed for Helios-C40 only
#endif

/*{{{  pragmas      */

#pragma no_stack_checks

/*}}}*/
/*{{{  header files */

#include "../kernel.h"
#include <helios.h>
#include <stdio.h>
#include <task.h>
#include <signal.h>
#include <stdlib.h>
#include <c40.h>

/*}}}*/
/*{{{  constants    */

#define STACK_DEBUG	0

/*}}}*/
/*{{{  functions    */

/*{{{  StackMalloc  */

/*
 * FUNCTION: StackMalloc
 *
 * DESCRIPTION:
 *	Allocates a new stack chunk
 *
 * ARGUMENTS:
 * 	numWords -- required minimum size of the stack chunk
 *
 * RETURNS:
 * 	Pointer to the head of a new stack chunk, word aligned,
 *	contiguous, and guaranteed to be at least 'numWords'
 *	long.  The pointer points to a stack chunk structure.
 *	The stack itself starts just below this structure,
 *	descending through memory.
 *	Returns NULL upon failure.
 */

PRIVATE stack_chunk *
StackMalloc ( unsigned long int numWords )		/* number of words required in new chunk */
{
  stack_chunk *		pChunk;
  stack_chunk *		pCurrentChunk;
  
  
  if (STACK_DEBUG)
    KDebug( "StackMalloc: asked to provided a chunk of %d words\n", numWords );
  
  /* get hold of the current stack chunk structure */
  
  pCurrentChunk = (stack_chunk *)(GetExecRoot()->CurrentSaveArea->stack_chunk);
  
  if (STACK_DEBUG && pCurrentChunk == NULL)
    {
      KDebug( ( "StackMalloc: unable to find current stack chunk\n" ) );
      
      return NULL;
    }  
  
  /* remember that we are going to knock some space off the stack */
      
  numWords += (PCS_STACKGUARD / sizeof (word));
  
  /* grab task's stack lock */
  
  Wait( & _Task_ -> StackLock );
  
  /* scan free chunks for a chunk of the right size */
  
  for (pChunk  = Head_( stack_chunk, _Task_ -> StackChunks );
       pChunk != NULL &&
       !EndOfList_( pChunk ) &&
       pChunk->size < numWords;
       pChunk  = Next_( stack_chunk, pChunk ) )
    ;
  
  /* check the result of our scan */

  if (pChunk != NULL && !EndOfList_( pChunk ))
    {
      /* we found a suitable node - remove it from free list */
      
      Remove( (Node *)pChunk );
    }
  
  /* release stack lock */
  
  Signal( & _Task_ -> StackLock );
      
  /* if we failed to find a suitable free stack chunk then allocate one */
  
  if (pChunk == NULL || EndOfList_( pChunk ))
    {
      unsigned long int *	ptr;
      unsigned long int		min_num_words = ProgramWord_( _Task_->Program, Stacksize ) / sizeof (word);
      
      
      /*
       * Ensure that the stack chunk to be allocated meets
       * our minimum requirements, and also check that if we
       * are going to allocate a large chunk, then we allocate
       * a bit extra to cope with further stack growth.
       */
      
      if (numWords < min_num_words)
	numWords = min_num_words;
      else
	numWords += min_num_words;
      
      /* allocate space for the new chunk and stack chunk structure */
      
      ptr = (unsigned long int *)LowAllocMem( numWords * sizeof(word) + sizeof (stack_chunk),
					  &(_Task_->MemPool) );
      
      /* check the value returned */
      
      if (ptr == NULL)
	{
	  /* no memory available - abort */
	  
	  if (STACK_DEBUG)
	    KDebug( ( "StackMalloc: unable to allocate memory for a new stack chunk\n" ) );
	  
	  CallException( _Task_, SIGSTAK );
	  
	  return NULL;
	}
      
      /* Malloc'd pointer is at bottom of allocated RAM, but we have a descending stack, so move to top */
      
      pChunk = (stack_chunk *)(ptr + numWords);
      
      /* fill in stack chunk size */
      
      pChunk->size = numWords;	  /* inclusive of STACK_GUARD */
      
      /* initialise stack chunk pointers */
      
      pChunk->prev = (stack_chunk *)pChunk;
      pChunk->next = (stack_chunk *)pChunk;      
    }
  
# if STACK_DEBUG
  KDebug( ( "StackMalloc: using chunk %x, ending at %x\n",
	   pChunk, ((word *)(pChunk - 1)) - pChunk->size  ) );
#endif
      
  /* insert it after current stack chunk */
  
  pChunk->prev = pCurrentChunk;
  pCurrentChunk->next = pChunk;
  
  /* install this new chunk in this thread's save state structure */
  
  GetExecRoot()->CurrentSaveArea->stack_chunk = pChunk;
  
#if STACK_DEBUG
    {
      int a;
      
      
      a = _word( 0x08000012 );
      
      KDebug( ("StackMalloc: current chunk %x new chunk %x, se = %x\n", 
	       pCurrentChunk, pChunk, a * 4 ) );
    }
#endif
  
  return pChunk;
  
} /* StackMalloc */

/*}}}*/
/*{{{  StackFree    */

/*
 * FUNCTION: StackFree
 *
 * DESCRIPTION:
 *	Frees an allocated stack chunk
 *
 * ARGUMENTS:
 * 	pChunk	-- chunk to be freed
 *
 * RETURNS:
 * 	Nothing
 */

/*
 * NB/
 * This code is running on the old (full) stack and so
 * it must not call any routines that perform stack checking
 */

PRIVATE void
StackFree ( stack_chunk * pChunk )		/* chunk to be freed */
{
  if (STACK_DEBUG)
    {
      if (pChunk == NULL)
	{
	  KDebug( ( "StackFree: trying to free a NULL chunk\n" ) );

	  return;
	}    
      
      if (pChunk->prev == NULL)
	{
	  KDebug( ( "StackFree: no previous stack chunk!\n" ) );

	  return;
	}
    }
  
  /* record the new current stack chunk */

  GetExecRoot()->CurrentSaveArea->stack_chunk = pChunk->prev;

  /* get hold of the stack lock */
  
  Wait( &_Task_ -> StackLock );

  /* Add the free stack chunk to the end of the free stack chunk list */
  
  AddTail( &_Task_ -> StackChunks, (Node *)pChunk );

  /* release the stack lock */

  Signal( &_Task_ -> StackLock );  

#if STACK_DEBUG
    KDebug( ("StackFree: freed %x, new %x ends at %x, SE = %x\n", 
	     pChunk,
	     GetExecRoot()->CurrentSaveArea->stack_chunk,
	     ((word *)(GetExecRoot()->CurrentSaveArea->stack_chunk - 1)) -
	     GetExecRoot()->CurrentSaveArea->stack_chunk->size,
	     pChunk->stack_end_pointer ) );
#endif
  
  return;
  
} /* StackFree */

/*}}}*/
/*{{{  ReleaseStack */

/*
 * FUNCTION: ReleaseStack
 *
 * DESCRIPTION:
 *	Releases all free stack chunks back to the free pool
 *
 * ARGUMENTS:
 * 	None
 *
 * RETURNS:
 * 	Nothing
 */

/*
 * Note/ This function is no longer needed and could be removed.
 * The 1.3 kernel, however, does export it - hence it remains here.
 */

PUBLIC void
ReleaseStack( void )
{
  stack_chunk *	pChunk;

  
  if (STACK_DEBUG)
    KDebug( "ReleaseStack: Starting" );

  /* grab stack lock */

  Wait( & _Task_ -> StackLock );
  
  /*
   * now walk along list, freeing chunks, until we
   * reach the end.
   */

  for (pChunk = Head_( stack_chunk, _Task_ -> StackChunks );
       pChunk != NULL &&
       !EndOfList_( pChunk );
       )
    {
      stack_chunk *	pNext;


      /* remember the pointer to the next chunk */
      
      pNext = Next_( stack_chunk, pChunk );
      
      /* free the memory of the current chunk */

      if (STACK_DEBUG)
	KDebug( "ReleaseStack: Freeing block at %x",
	       (unsigned long int *)pChunk - (pChunk->size) );
      
      FreeMem( (unsigned long int *)pChunk - (pChunk->size) );
      
      /* point to the next chunk */
      
      pChunk = pNext;
    }

  /* release stack lock */

  Signal( & _Task_ -> StackLock );
  
  if (STACK_DEBUG)
    KDebug( "ReleaseStack: Finished" );
      
  return;
  
} /* ReleaseStack */

/*}}}*/

/*}}}*/

/* end of stack_c.c */
@


1.18
log
@added comment
@
text
@d8 3
a10 3
 * Version :	$Revision: 1.17 $
 * Date :	$Date: 1993/08/05 14:16:29 $
 * Id :		$Id: stack_c.c,v 1.17 1993/08/05 14:16:29 nickc Exp nickc $
d133 1
a133 1
      ptr = (unsigned long int *)AllocMem( numWords * sizeof(word) + sizeof (stack_chunk),
@


1.17
log
@fixed to work on a per-task basis
@
text
@d8 3
a10 3
 * Version :	$Revision: 1.16 $
 * Date :	$Date: 1993/08/05 08:47:07 $
 * Id :		$Id: stack_c.c,v 1.16 1993/08/05 08:47:07 nickc Exp nickc $
d208 6
@


1.16
log
@fixed so that stack chunks are sized based on Stacksize field in the task structure
@
text
@d8 3
a10 3
 * Version :	$Revision: 1.15 $
 * Date :	$Date: 1993/08/04 10:10:21 $
 * Id :		$Id: stack_c.c,v 1.15 1993/08/04 10:10:21 nickc Exp nickc $
d63 2
a64 2
  stack_chunk *		pchunk;
  stack_chunk *		pcurrent_chunk;
d66 1
a66 1

d72 1
a72 1
  pcurrent_chunk = (stack_chunk *)(GetExecRoot()->CurrentSaveArea->stack_chunk);
d74 1
a74 1
  if (STACK_DEBUG && pcurrent_chunk == NULL)
d77 1
a77 1

d85 11
a95 5
  /* scan free chunks appended to current chunk for a chunk of the right size */

  for (pchunk = pcurrent_chunk->next;
       pchunk != NULL && pchunk->size < numWords;
       pchunk = pchunk->next)
d99 7
d107 7
a113 1
  if (pchunk == NULL)
a114 2
      /* unable to find a suitable chunk, so allocate one instead */

d118 1
a118 1

d125 1
a125 1

d130 1
a130 1

d132 1
a132 1

d141 1
a141 1

d144 1
a144 1

d152 1
a152 1
      pchunk = (stack_chunk *)(ptr + numWords);
d156 1
a156 1
      pchunk->size = numWords;	  /* inclusive of STACK_GUARD */
d160 2
a161 2
      pchunk->prev = NULL;
      pchunk->next = NULL;      
d166 1
a166 1
	   pchunk, ((word *)(pchunk - 1)) - pchunk->size  ) );
a168 12
  /* we now have a free stack chunk - extract it from chunk chain */
  
  if (pchunk->prev != NULL)
    {
      pchunk->prev->next = pchunk->next;
    }
  
  if (pchunk->next != NULL)
    {
      pchunk->next->prev = pchunk->prev;
    }
  
d171 2
a172 9
  pchunk->prev = pcurrent_chunk;
  pchunk->next = pcurrent_chunk->next;
  
  if (pcurrent_chunk->next != NULL)
    {
      pcurrent_chunk->next->prev = pchunk;
    }
  
  pcurrent_chunk->next = pchunk;
d176 1
a176 1
  GetExecRoot()->CurrentSaveArea->stack_chunk = pchunk;
d181 1
a181 1

d186 1
a186 1
	       pcurrent_chunk, pchunk, a * 4 ) );
d190 1
a190 1
  return pchunk;
d234 9
a242 1
  /* do not bother to free the stack chunk - just leave it one the chunk chain */
d244 2
d248 4
a251 1
	     pChunk, pChunk->prev, ((word *)(pChunk->prev - 1)) - pChunk->prev->size,
d266 1
a266 1
 *	Releases all (but the first) stack chunks back to the free pool
d275 5
a287 4
      
  /* get hold of current stack chunk */

  pChunk = (stack_chunk *) (GetExecRoot()->CurrentSaveArea->stack_chunk);
d289 1
a289 5
  /*
   * sanity check -
   * if the prev field of this chunk is not NULL then we are
   * not in the first stack chunk and so we cannot free any!
   */
d291 1
a291 7
  if (pChunk->prev != NULL)
    {
      if (STACK_DEBUG)
	KDebug( "ReleaseStack: Called from somewhere outside of first stack chunk!" );
      
      return;
    }
d295 1
a295 3
   * reach the end.  Note, however, that since we did
   * not allocate the first stack chunk (NewProcess did),
   * we must not free that chunk.
d298 4
a301 3
  pChunk = pChunk->next;	/* skip first chunk */
  
  while (pChunk != NULL)
d308 2
a309 2
      pNext = pChunk->next;

d323 4
@


1.15
log
@oops - fixed buglet introduced by previous delta
@
text
@d8 3
a10 3
 * Version :	$Revision: 1.14 $
 * Date :	$Date: 1993/08/02 08:21:10 $
 * Id :		$Id: stack_c.c,v 1.14 1993/08/02 08:21:10 nickc Exp nickc $
a36 3
#define ONE_K		1024		/* binary 1000 */
#define MIN_NUM_WORDS	2 * ONE_K	/* minimum number of words in a stack chunk */

d99 2
a101 1

d108 3
a110 3
      
      if (numWords < MIN_NUM_WORDS)
	numWords = MIN_NUM_WORDS;
d112 1
a112 1
	numWords += MIN_NUM_WORDS;
d132 1
a132 1

d134 1
a134 1

d136 1
a136 1

d138 1
a138 1

d140 1
a140 1

d153 1
a153 1

d163 1
a163 1

d168 1
a168 1

d175 1
a175 1

d177 1
a177 1

d179 1
a179 1

d193 1
a193 1
    
@


1.14
log
@added folding
@
text
@d8 3
a10 3
 * Version :	$Revision: 1.13 $
 * Date :	$Date: 1993/03/29 08:55:56 $
 * Id :		$Id: stack_c.c,v 1.13 1993/03/29 08:55:56 nickc Exp nickc $
d149 4
a152 3
  if (STACK_DEBUG)
    KDebug( ( "StackMalloc: using chunk %x, ending at %x\n",
	     pchunk, ((word *)(pchunk - 1)) - pchunk->size  ) );
d182 1
a182 1
  if (STACK_DEBUG)
d192 2
a193 1

d240 1
a240 1
  if (STACK_DEBUG)
d244 2
a245 1

@


1.13
log
@fixed comments!
@
text
@d8 3
a10 3
 * Version :	$Revision: 1.12 $
 * Date :	$Date: 1993/03/26 16:46:52 $
 * Id :		$Id: stack_c.c,v 1.12 1993/03/26 16:46:52 nickc Exp nickc $
d14 1
a14 1
#error	stack_c.c is designed for C40 Helios only
d17 1
a17 1
/* pragmas */
d21 2
a22 1
/* header files */
d32 2
d35 1
a35 1
/* constants */
a36 2
/* #define DEBUG */

d40 2
a41 3
/* macros */

/* types */
d43 1
a43 1
/* functions */
a44 1

d70 2
a71 3
#ifdef DEBUG
  KDebug( "StackMalloc: asked to provided a chunk of %d words\n", numWords );
#endif
d77 1
a77 2
#ifdef DEBUG
  if (pcurrent_chunk == NULL)
a82 1
#endif
d127 3
a129 3
#ifdef DEBUG
	  KDebug( ( "StackMalloc: unable to allocate memory for a new stack chunk\n" ) );
#endif
d149 3
a151 4
#ifdef DEBUG
  KDebug( ( "StackMalloc: using chunk %x, ending at %x\n",
	   pchunk, ((word *)(pchunk - 1)) - pchunk->size  ) );
#endif
d181 1
a181 1
#ifdef DEBUG
d184 1
a190 1
#endif
d196 2
d215 1
a215 2
#ifdef DEBUG
  if (pChunk == NULL)
d217 3
a219 1
      KDebug( ( "StackFree: trying to free a NULL chunk\n" ) );
d221 6
a226 2
      return;
    }    
d228 2
a229 5
  if (pChunk->prev == NULL)
    {
      KDebug( ( "StackFree: no previous stack chunk!\n" ) );

      return;
d231 1
a231 2
#endif

d238 4
a241 5
#ifdef DEBUG  
  KDebug( ("StackFree: freed %x, new %x ends at %x, SE = %x\n", 
	   pChunk, pChunk->prev, ((word *)(pChunk->prev - 1)) - pChunk->prev->size,
	   pChunk->stack_end_pointer ) );
#endif
d247 2
d269 2
a270 3
#ifdef DEBUG
  KDebug( "ReleaseStack: Starting" );
#endif
d284 2
a285 3
#ifdef DEBUG
      KDebug( "ReleaseStack: Called from somewhere outside of first stack chunk!" );
#endif
d310 4
d321 2
a322 3
#ifdef DEBUG
  KDebug( "ReleaseStack: Finished" );
#endif
d328 1
a328 2
  
/* end of stack.c */
d330 1
a330 1
/* @@@@ emacs customization */
d332 1
a332 5
/* Local Variables: */
/* mode: c */
/* outline-regexp: "^[a-zA-Z_]*(" */
/* eval: (outline-minor-mode 1) */
/* End: */
@


1.12
log
@added function ReleaseStack() to free up stack chunks once a thread has exited.  (Function is called from _ProcExit() )
@
text
@d8 3
a10 3
 * Version :	$Revision: 1.11 $
 * Date :	$Date: 1992/09/22 13:29:26 $
 * Id :		$Id: stack_c.c,v 1.11 1992/09/22 13:29:26 paul Exp nickc $
d295 3
a297 3
   * reach a chunk with a NULL next field.  Note, however,
   * that since we did not allocate the first stack chunk
   * (NewProcess did), we must not free that chunk.
d312 2
d315 1
a315 3
      FreeMem( (unsigned long int *)pChunk - (pChunk->size) );

      /* point back to the next chunk */
@


1.11
log
@renamed ExecRoot() to GetExecRoot()
@
text
@d4 1
a4 1
 *   Copyright (c) 1992 Perihelion Software Ltd.
d8 3
a10 3
 * Version :	$Revision: 1.10 $
 * Date :	$Date: 1992/09/03 10:07:34 $
 * Id :		$Id: stack_c.c,v 1.10 1992/09/03 10:07:34 nickc Exp paul $
d47 1
a47 1
 * FUNCTION: _stack_malloc
d53 1
a53 1
 * 	num_words      - required minimum size of the stack chunk
d57 1
a57 1
 *	contiguous, and guaranteed to be at least 'num_words'
d59 1
a59 1
 *	The stack itself starts just below this sructure,
d65 1
a65 1
_stack_malloc( unsigned long int num_words )		/* number of words required in new chunk */
d72 1
a72 1
  KDebug( ( "_stack_malloc: asked to provided a chunk of %d words\n", num_words ) );
d74 1
a74 1

d82 1
a82 1
      KDebug( ( "_stack_malloc: unable to find current stack chunk\n" ) );
d90 1
a90 1
  num_words += (PCS_STACKGUARD / sizeof (word));
d95 1
a95 1
       pchunk != NULL && pchunk->size < num_words;
d109 1
a109 1
       * ensure that the stack chunk to be allocated meets
d115 2
a116 2
      if (num_words < MIN_NUM_WORDS)
	num_words = MIN_NUM_WORDS;
d118 1
a118 1
	num_words += MIN_NUM_WORDS;
d122 1
a122 1
      ptr = (unsigned long int *)AllocMem( num_words * sizeof(word) + sizeof (stack_chunk),
d132 1
a132 1
	  KDebug( ( "_stack_malloc: unable to allocate memory for a new stack chunk\n" ) );
d141 1
a141 1
      pchunk = (stack_chunk *)(ptr + num_words);
d145 1
a145 1
      pchunk->size = num_words;	  /* inclusive of STACK_GUARD */
d154 1
a154 1
  KDebug( ( "_stack_malloc: using chunk %x, ending at %x\n",
d192 1
a192 1
      KDebug( ("stack_malloc: current chunk %x new chunk %x, se = %x\n", 
d199 1
a199 1
} /* _stack_malloc */
d203 1
a203 1
 * FUNCTION: _stack_free
d209 1
a209 1
 * 	pchunk	-- chunk to be freed
d216 1
a216 1
_stack_free( stack_chunk * pchunk )		/* chunk to be freed */
d219 1
a219 1
  if (pchunk == NULL)
d221 1
a221 1
      KDebug( ( "_stack_free: trying to free a NULL chunk\n" ) );
d226 1
a226 1
  if (pchunk->prev == NULL)
d228 1
a228 1
      KDebug( ( "_stack_free: no previous stack chunk!\n" ) );
d236 1
a236 1
  GetExecRoot()->CurrentSaveArea->stack_chunk = pchunk->prev;
d241 3
a243 3
  KDebug( ("stack_free: freed %x, new %x ends at %x, SE = %x\n", 
	   pchunk, pchunk->prev, ((word *)(pchunk->prev - 1)) - pchunk->prev->size,
	   pchunk->stack_end_pointer ) );
d248 71
a318 1
} /* _stack_free */
d320 7
d328 1
@


1.10
log
@improved debugging output
@
text
@d8 3
a10 3
 * Version :	$Revision: 1.9 $
 * Date :	$Date: 1992/09/02 08:27:18 $
 * Id :		$Id: stack_c.c,v 1.9 1992/09/02 08:27:18 nickc Exp nickc $
d77 1
a77 1
  pcurrent_chunk = (stack_chunk *)(ExecRoot()->CurrentSaveArea->stack_chunk);
d184 1
a184 1
  ExecRoot()->CurrentSaveArea->stack_chunk = pchunk;
d236 1
a236 1
  ExecRoot()->CurrentSaveArea->stack_chunk = pchunk->prev;
@


1.9
log
@improved stack_malloc() (I hope)
@
text
@d8 3
a10 3
 * Version :	$Revision: 1.8 $
 * Date :	$Date: 1992/08/21 07:58:43 $
 * Id :		$Id: stack_c.c,v 1.8 1992/08/21 07:58:43 nickc Exp nickc $
d58 3
a60 2
 *	long.  Just above this pointer, a stack_chunk structure
 *	will have been created, and the first two fields filled in.
d64 1
a64 1
PUBLIC unsigned long int *
d71 6
d98 1
a98 1

d112 1
a112 1
       * a bit extra to cope with futher stack growth.
d120 1
a120 1
      /* allocate space for the new chunk */
d122 2
a123 1
      ptr = (unsigned long int *)AllocMem( num_words * sizeof(word) + sizeof (stack_chunk), &(_Task_->MemPool) );
d136 1
a136 1
	  return NULL;	  
d147 1
a147 1
      /* assemble chunk pointers */
d153 5
d187 8
a194 2
  KDebug( ("stack_malloc: current chunk %x new chunk %x\n", 
	pcurrent_chunk, pchunk ) );
d197 1
a197 1
  return ((unsigned long int *)pchunk);
d215 1
a215 1
PUBLIC void
d241 3
a243 2
  KDebug( ("stack_free:   current chunk %x, new chunk %x\n", 
	pchunk, pchunk->prev ) );
@


1.8
log
@added in STACK_GUARD words to newly allocated chunk
@
text
@d8 3
a10 3
 * Version :	$Revision: 1.7 $
 * Date :	$Date: 1992/07/31 17:35:21 $
 * Id :		$Id: stack_c.c,v 1.7 1992/07/31 17:35:21 nickc Exp nickc $
d81 4
d91 2
d101 6
a106 1
      /* ensure that the stack chunk to be allocated meets our minimum requirements */
d110 2
a112 4
      /* remember that we are going to knock some space off the stack */
      
      num_words += (PCS_STACKGUARD / sizeof (word));
  
d131 1
a131 1
      /* Malloc'd pointer is at bottom of allocated RAM - move to top */
d137 1
a137 1
      pchunk->size = num_words;
@


1.7
log
@minor formatting changes
@
text
@d8 3
a10 3
 * Version :	$Revision: 1.6 $
 * Date :	$Date: 1992/07/23 14:57:04 $
 * Id :		$Id: stack_c.c,v 1.6 1992/07/23 14:57:04 nickc Exp nickc $
d99 2
d102 2
@


1.6
log
@fixed bugs
@
text
@d2 1
a2 1
 * stack.c : 	C Stack manipulation code, C part
d8 3
a10 3
 * Version :	$Revision: 1.5 $
 * Date :	$Date: 1992/07/22 07:52:12 $
 * Id :		$Id: stack_c.c,v 1.5 1992/07/22 07:52:12 nickc Exp $
d14 1
a14 1
#error	stack.c is designed for C40 Helios only
d216 1
a216 1
  
@


1.5
log
@changed _stack_free to use saved state aswell
@
text
@d8 3
a10 3
 * Version :	$Revision: 1.4 $
 * Date :	$Date: 1992/07/22 07:51:01 $
 * Id :		$Id: stack_c.c,v 1.4 1992/07/22 07:51:01 paul Exp nickc $
a44 18
#ifdef DEBUG
/*
 * FUNCTION: debug
 *
 * DESCRIPTION:
 * 	Display a formatted debugging message on stderr.
 * 	Automatically appends a new-line to the message.
 * 	Automatically flushes stderr, and seeks to the end
 *	before and after printing.
 *	Automatically prepends the process's ID to the message
 *
 * ARGUMENTS:
 *	const char *	format	- printf(3) style format string
 *	...			- arguments for the message
 *
 * RETURNS:
 * 	Nothing.
 */
a45 29
PRIVATE void
debug( const char * format, ... )
{
  va_list	args;
	

  va_start( args, format );

  fflush( stderr );
	
  fseek( stderr, 0L, SEEK_END );

  fprintf( stderr, "stack: (%d): ", getpid() );

  vfprintf( stderr, (char *)format, args );

  fputc( '\n', stderr );
	
  fflush( stderr );
	
  va_end( args );

  return;

} /* debug */

#endif /* DEBUG */


a69 2
  JTAGHalt();
  
d75 1
a75 1
      debug( "_stack_malloc: unable to find current stack chunk" );
d102 1
a102 1
      ptr = (unsigned long int *)AllocMem( num_words + sizeof (stack_chunk), &(_Task_->MemPool) );
d111 1
a111 1
	  debug( "warning - unable to allocate memory for a new stack chunk" );
d160 4
a163 1
  /* and return the address of RAM just below the chunk */
d165 1
a165 1
  return ((unsigned long int *)pchunk) - 1;
d189 1
a189 1
      debug( "warning - trying to free a NULL chunk" );
d191 1
a191 1
      return NULL;
d193 7
d207 6
a212 1
  
@


1.4
log
@fixed to save current stack chunk in thread savestate
@
text
@d8 3
a10 3
 * Version :	$Revision: 1.3 $
 * Date :	$Date: 1992/07/21 09:46:00 $
 * Id :		$Id: stack_c.c,v 1.3 1992/07/21 09:46:00 nickc Exp nickc $
d243 2
a244 2
  _Task_->stack_chunk = pchunk->prev;
  
@


1.3
log
@oops, missed out / from end of comment
@
text
@d8 3
a10 3
 * Version :	$Revision: 1.2 $
 * Date :	$Date: 1992/07/21 09:06:18 $
 * Id :		$Id: stack_c.c,v 1.2 1992/07/21 09:06:18 nickc Exp nickc $
d117 1
a117 1
  pcurrent_chunk = (stack_chunk *)(_Task_->stack_chunk);
d119 2
d205 3
a207 1
  /* install this new chunk in the task structure */
a208 2
  _Task_->stack_chunk = pchunk;
  
@


1.2
log
@moved stack_chunk structure into c40.h
@
text
@d8 3
a10 3
 * Version :	$Revision: 1.1 $
 * Date :	$Date: 1992/07/20 14:55:55 $
 * Id :		$Id: stack_c.c,v 1.1 1992/07/20 14:55:55 nickc Exp nickc $
d32 1
a32 1
/* constants *
@


1.1
log
@Initial revision
@
text
@d9 2
a10 2
 * Date :	$Date: 1992/04/07 15:29:37 $
 * Id :		$Id: stack.c,v 1.1 1992/04/07 15:29:37 nickc Exp nickc $
d23 1
a23 7
#ifndef STAND_ALONE
#define in_kernel
#include </hsrc/kernel/kernel.h>
#else
static void * 	chunk = NULL;
#endif

d29 1
a30 1
/* constants */
d32 2
a36 1
#define NUM_REGISTERS	3		/* number of registers saved in a stack chunk header */
a42 17
/*
 * XXX - WARNING - this structure must correlate exactly
 * to the one defined in stack.a
 */

typedef struct stack_chunk 
  {
    unsigned long int		link_register;		/* return address before chunk was made */
    unsigned long int		stack_end_pointer;	/* end of previous stack chunk		*/
    unsigned long int		stack_pointer;		/* stack pointer inside previous chunk  */
    struct stack_chunk *	prev;			/* link to previous stack chunk		*/    
    struct stack_chunk * 	next;			/* link to next stack chunk	 	*/
    unsigned long int		size;			/* size of this stack chunk in words	*/
  }
stack_chunk;


a116 3
#ifdef STAND_ALONE
  pcurrent_chunk = (stack_chunk *)chunk;
#else
a117 1
#endif
a148 3
#ifdef STAND_ALONE
      ptr = (unsigned long int *)Malloc( num_words + sizeof (stack_chunk) );
#else
a149 1
#endif
a159 1
#ifndef STAND_ALONE
a160 1
#endif
a204 3
#ifdef STAND_ALONE
  chunk = pchunk;  
#else
a205 1
#endif
a240 3
#ifdef STAND_ALONE
  chunk = pchunk->prev;  
#else
a241 1
#endif
@
