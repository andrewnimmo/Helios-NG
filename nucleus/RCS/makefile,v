head	1.40;
access;
symbols
	Helios_1_3_1:1.40
	Helios_C40_1_3_Official_Release:1.39
	Alenia_release:1.36
	Helios1_3:1.36
	C40_Field_Test_2:1.34
	C40_Field_Test_R1:1.30
	Helios13_beta:1.30
	Helios1_2_2:1.28
	Helios1_2_2Beta:1.28
	Helios1_2_1:1.28
	Helios1_2:1.18
	V1_2Beta0:1.8;
locks; strict;
comment	@# @;


1.40
date	93.08.06.12.43.12;	author bart;	state Exp;
branches;
next	1.39;

1.39
date	93.04.29.09.57.25;	author bart;	state Exp;
branches;
next	1.38;

1.38
date	93.04.01.17.07.52;	author nick;	state Exp;
branches;
next	1.37;

1.37
date	93.01.18.17.56.12;	author nick;	state Exp;
branches;
next	1.36;

1.36
date	92.11.03.14.46.49;	author martyn;	state Exp;
branches;
next	1.35;

1.35
date	92.10.19.11.06.13;	author al;	state Exp;
branches;
next	1.34;

1.34
date	92.09.17.16.12.18;	author paul;	state Exp;
branches;
next	1.33;

1.33
date	92.08.17.11.24.31;	author paul;	state Exp;
branches;
next	1.32;

1.32
date	92.08.14.18.07.47;	author paul;	state Exp;
branches;
next	1.31;

1.31
date	92.07.27.17.01.14;	author paul;	state Exp;
branches;
next	1.30;

1.30
date	92.06.12.10.24.03;	author nickc;	state Exp;
branches;
next	1.29;

1.29
date	92.02.26.17.08.58;	author paul;	state Exp;
branches;
next	1.28;

1.28
date	91.03.14.18.42.40;	author paul;	state Exp;
branches;
next	1.27;

1.27
date	91.03.10.21.23.46;	author paul;	state Exp;
branches;
next	1.26;

1.26
date	91.03.07.19.17.10;	author paul;	state Exp;
branches;
next	1.25;

1.25
date	91.03.07.18.10.40;	author martyn;	state Exp;
branches;
next	1.24;

1.24
date	91.03.05.18.47.27;	author paul;	state Exp;
branches;
next	1.23;

1.23
date	91.02.28.16.08.12;	author paul;	state Exp;
branches;
next	1.22;

1.22
date	91.02.19.11.04.13;	author nick;	state Exp;
branches;
next	1.21;

1.21
date	91.02.14.22.50.34;	author paul;	state Exp;
branches;
next	1.20;

1.20
date	91.02.14.15.18.07;	author paul;	state Exp;
branches;
next	1.19;

1.19
date	91.01.22.16.26.36;	author paul;	state Exp;
branches;
next	1.18;

1.18
date	90.11.26.19.14.56;	author nick;	state Exp;
branches;
next	1.17;

1.17
date	90.11.26.18.55.24;	author nick;	state Exp;
branches;
next	1.16;

1.16
date	90.11.05.20.55.36;	author paul;	state Exp;
branches;
next	1.15;

1.15
date	90.10.30.11.43.38;	author paul;	state Exp;
branches;
next	1.14;

1.14
date	90.10.23.19.31.56;	author paul;	state Exp;
branches;
next	1.13;

1.13
date	90.10.19.21.23.15;	author paul;	state Exp;
branches;
next	1.12;

1.12
date	90.10.19.20.37.26;	author paul;	state Exp;
branches;
next	1.11;

1.11
date	90.10.04.18.46.22;	author paul;	state Exp;
branches;
next	1.10;

1.10
date	90.10.02.15.45.24;	author nick;	state Exp;
branches;
next	1.9;

1.9
date	90.09.25.18.16.33;	author paul;	state Exp;
branches;
next	1.8;

1.8
date	90.09.18.12.46.15;	author nick;	state Exp;
branches;
next	1.7;

1.7
date	90.09.05.18.29.06;	author nick;	state Exp;
branches;
next	1.6;

1.6
date	90.09.05.15.26.21;	author nick;	state Exp;
branches;
next	1.5;

1.5
date	90.09.05.15.11.34;	author nick;	state Exp;
branches;
next	1.4;

1.4
date	90.09.05.13.10.52;	author nick;	state Exp;
branches;
next	1.3;

1.3
date	90.08.29.13.32.57;	author nick;	state Exp;
branches;
next	1.2;

1.2
date	90.08.28.13.59.46;	author nick;	state Exp;
branches;
next	1.1;

1.1
date	90.08.28.13.09.43;	author nick;	state Exp;
branches;
next	;


desc
@Nucleus makefile
@


1.40
log
@Sorted out stack checking options
@
text
@#-----------------------------------------------------------------------------
# Helios generic make system
#-----------------------------------------------------------------------------
# Helios generic component make rules for: Nucleus
#
# File: /HSRC/nucleus/makefile
#
# These are the host/processor independent rules and variables for this
# component of Helios. It is included by the processor specific makefile
# That may add to some of its functionality. You should only alter this
# makefile by using "ifneq ($(HPROC),YYY)" clauses for a specific processor.
#
# SccsId: %W% %G%
# RcsId: $Id: makefile,v 1.39 1993/04/29 09:57:25 bart Exp $
#		(C) Copyright 1990 Perihelion Software
#
# WARNING: assumes you are using GNUmake.
#-----------------------------------------------------------------------------

ifndef InProcMake
# This part of the makefile is run in the components generic source directory

# The variables HPROC, HHOST, HSRC, and HPROD should already be set by 
# your make script or environment, if not then we get local defaults from
# ../makeinc/DFLT.mak. Note that the following pathname cannot use $(HSRC).
ifndef HPROC
include ../makeinc/DFLT.mak
endif

.PHONY: notarget
notarget:
	@@$(MAKE) -C $(HPROC)

.DEFAULT:
	@@$(MAKE) -C $(HPROC) $@@

else
#-----------------------------------------------------------------------------
# This part of the makefile is always run in a processor specific subdirectory.

# Manditory variables for a component:
# name of this dir relative to $(HSRC)
COMPONENT = nucleus

# Manditory includes
include $(HSRC)/makeinc/$(HHOST).mak	# Default host system variables
include $(HSRC)/makeinc/$(HPROC).mak	# Default processor rules and vars.

# Manditory phoney targets
.PHONY: default clean Xdefault Xclean syslib.i syslib.def
# "default"    - should make this component in its proc subdir
# "install"    - copy the new component to $(HPROD) production directory
# "installdef" - If component is a library, make .def file and install in LIB
# "clean"      - remove all intermediate and executable files from proc subdir
# Phoney targets prefixed by X are for adding processor specific targets.
#
# Processor specific sources are held in the processor specific subdir.,
# generic ones in the directory above it.
HVPATH := $(HSRC)/$(COMPONENT)

ifdef RSRC
HVPATH := $(RSRC)/$(COMPONENT)/$(HPROC):$(HVPATH):$(RSRC)/$(COMPONENT)
endif

vpath %.c $(HVPATH)
vpath %.h $(HVPATH)
vpath %.a $(HVPATH)

#-----------------------------------------------------------------------------
# Generic component make rules and variables added below here

# Note all final generic targets here
TARGETS := servlib.def sstart.o s0.o procman.i loader.i servlib.i \
		SysLib newinit.i ram.i fifo.i null.i pipe.i alias.i

ifeq ($(HPROC),TRAN)
  TARGETS := $(TARGETS) nucleus syslib.sa nucleus.srv #rom.i
  ifdef SYSDEB
    TARGETS := $(TARGETS) nucleus.fs nucleus.ufs 
  endif
endif

ifeq ($(HPROC),ARM)
  TARGETS := $(TARGETS) nucleus
endif

ifeq ($(HPROC),C40)
  TARGETS := $(TARGETS) nucleus nucleus.sml
endif

default : $(TARGETS) Xdefault

install: installdef $(TARGETS) Xinstall
	$(CP) nucleus $(LIB)
	$(CP) ram.i $(LIB)/ram
	$(CP) null.i $(LIB)/null
ifeq ($(HPROC),TRAN)
	$(CP) nucleus.srv $(LIB)
 ifdef SYSDEB
	$(CP) nucleus.fs $(LIB)
	$(CP) nucleus.ufs $(LIB)
 endif
	$(CP) syslib.sa $(LIB)
endif
ifeq ($(HPROC),C40)
	$(CP) nucleus.sml $(LIB)
endif
	$(CP) fifo.i $(LIB)/fifo
	$(CP) pipe.i $(LIB)/pipe
	$(CP) newinit.i $(LIB)/init
	$(CP) alias.i $(LIB)/alias
ifeq ($(HLICENSEE),ABC)		# depreciated functionality - delete me soon
# assumes "lib/kernel is copied by kernel makefile
	sysstrip ../syslib/$(HPROC)/syslib.i -o$(LIB)/syslib
	sysstrip servlib.i -o$(LIB)/servlib
# assumes "lib/util" is copied by relevant "util" makefile
# assumes libraries are copied by relevant makefiles
	sysstrip procman.i -o$(LIB)/procman
	sysstrip loader.i -o$(LIB)/loader
	sysstrip window.i -o$(LIB)/window
	sysstrip rom.i -o$(LIB)/rom
	sysstrip ram.i -o$(LIB)/ram
	sysstrip null.i -o$(LIB)/null
	sysstrip helios.i -o$(LIB)/helios
endif
	$(TOUCH) install

installdef: $(LIB)/syslib.def $(LIB)/servlib.def $(LIB)/s0.o $(LIB)/sstart.o
	$(TOUCH) installdef

$(LIB)/syslib.def: ../syslib/$(HPROC)/syslib.def 
ifeq (HELIOS,$(findstring HELIOS,$(HHOST))) #csh default on Helios hosts
	(cmp $^ $@@ ; if ( $$status ) cp $^ $@@ )
else
	@@ if cmp $^ $@@; then echo "$^ not changed"; else $(CP) $^ $@@ ;fi
endif

$(LIB)/servlib.def: servlib.def
ifeq (HELIOS,$(findstring HELIOS,$(HHOST))) #csh default on Helios hosts
	(cmp $^ $@@ ; if ( $$status ) cp $^ $@@ )
else
	@@ if cmp $^ $@@; then echo "$^ not changed"; else $(CP) $^ $@@ ;fi
endif

# server startup code
$(LIB)/s0.o: s0.o
ifeq (HELIOS,$(findstring HELIOS,$(HHOST))) #csh default on Helios hosts
	(cmp s0.o $(LIB)/s0.o; if ( $$status ) cp s0.o $(LIB) )
else
	@@ if cmp s0.o $(LIB)/s0.o; then echo "s0.o not changed"; else $(CP) s0.o $(LIB) ;fi
endif

$(LIB)/sstart.o: sstart.o
ifeq (HELIOS,$(findstring HELIOS,$(HHOST))) #csh default on Helios hosts
	(cmp sstart.o $(LIB)/sstart.o; if ( $$status ) cp sstart.o $(LIB) )
else
	@@ if cmp sstart.o $(LIB)/sstart.o; then echo "sstart.o not changed"; else $(CP) sstart.o $(LIB) ;fi
endif


clean	: Xclean
	-$(RM) $(OBJECTS) $(TARGETS) $(XOBJECTS) $(XTARGETS) mkout \
		core ../mkout install installdef Xinstall
	$(MAKE) -C ../syslib/$(HPROC) clean

#-----------------------------------------------------------------------------
# for archive, backup and cleaning purposes,
# note all generic SOURCE and OBJECT files:

# Note all sources
SOURCES		= $(SOURCES.c) $(SOURCES.a) \
		   $(HEADERS.c) $(HEADERS.m) \
		   $(SOURCES.odd)

# Full set of object files - cheat a little - all possibles
OBJECTS		= $(SOURCES.c:.c=.p) $(SOURCES.a:.a=.p) \
		  $(SOURCES.c:.c=.o) $(SOURCES.a:.a=.o) \
		  $(SOURCES.c:.c=.si) $(SOURCES.c:.c=.sa) \
		  $(SOURCES.c:.c=.dl)

SOURCES.c 	=	alias.c fifo.c null.c pipe.c ram.c 		\
			newinit.c					\
			loader.c procman.c servlib.c			\
			sasyslib.c

# AMPP source files
SOURCES.a 	= 	modend.a 	\
			servstar.a 	\
			sasysasm.a	\
 			sstart.a

# C header files
HEADERS.c	=

# AMPP macro files
HEADERS.m	=

# Any other source files
SOURCES.odd	= makefile oldinit.c


#-----------------------------------------------------------------------------
# Other generic component variables:

# Set any flags required
# Possibles nucleus flags are: -DPMDEBUG -DPROTECTED -DSTACKCHECK -DSTACKEXTENSION

NCFLAGS := $(NCFLAGS) -DPROTECTED

ifdef SYSDEB
  NCFLAGS := $(NCFLAGS) -DPMDEBUG
endif

ifeq ($(HPROC),ARM)
  NCFLAGS := $(NCFLAGS) -DSTACKCHECK
else
  ifeq ($(HPROC),C40)
# -Zpw1 = static data < 64k optimisation
    NCFLAGS := $(NCFLAGS) -Zpw1 -DSTACKEXTENSION -DSTACKCHECK
  else
    ifeq ($(HPROC),TRAN)
      NCFLAGS := $(NCFLAGS) -ps1 -t4 -DSTACKCHECK
      LINKFLAGS := $(LINKFLAGS) -f
    endif
  endif
endif

# Note any library def files to be linked with
# in this case for the sstart.o file
LIBDEFS	:= $(LIB)/kernel.def ../syslib/$(HPROC)/syslib.def servlib.def $(LIB)/util.def

#-----------------------------------------------------------------------------
# Extra server compilation rules:

.SUFFIXES: .si .dl .sa

# Servers incorporated into the system image
ifeq ($(HPROC),TRAN)
%.si:%.c
	$(NC) $(NCFLAGS) -DINSYSTEMIMAGE $< -s$(TEMP)/$*.s
	$(ASM) $(ASMFLAGS) -o $*.si $(TEMP)/$*.s
	$(RMTEMP) $(TEMP)/$*.s
else
%.si:%.c
	$(NC) -o$*.si -c $(NCFLAGS) -DINSYSTEMIMAGE $<
endif

# Demand loaded servers
ifeq ($(HPROC),TRAN)
%.dl:%.c
	$(NC) $(NCFLAGS) -DDEMANDLOADED $< -s$(TEMP)/$*.s
	$(ASM) $(ASMFLAGS) -o $*.dl $(TEMP)/$*.s
	$(RMTEMP) $(TEMP)/$*.s
else
%.dl:%.c
	$(NC) -o$*.dl -c $(NCFLAGS) -DDEMANDLOADED $<
endif

# Stand alone servers
ifeq ($(HPROC),TRAN)
%.sa:%.c
	$(NC) $(NCFLAGS) -DSTANDALONE $< -s$(TEMP)/$*.s
	$(ASM) $(ASMFLAGS) -o $*.sa $(TEMP)/$*.s
	$(RMTEMP) $(TEMP)/$*.s
else
%.sa:%.c
	$(NC) -o$*.sa -c $(NCFLAGS) -DSTANDALONE $<
endif

#-----------------------------------------------------------------------------
# Generic targets and their dependencies:

# uncomment if you have compiler or makedepend generated dependencies
#include depends

SSTART = sstart.o

#-----------------------------------------------------------------------------
# Resident Modules
# These should be included in the system image in SLOT order

SYSLIBS 	:= $(KERNEL)/$(HPROC)/kernel.i ../syslib/$(HPROC)/syslib.i servlib.i \
		$(UTIL)/$(HPROC)/util.i 

SYSLIBS.SML 	:= $(KERNEL)/$(HPROC)/kernel.sml ../syslib/$(HPROC)/syslib.i servlib.i \
		$(UTIL)/$(HPROC)/util.i 


ifeq ($(HPROC),TRAN)
SYSLIBS		:= $(SYSLIBS) $(BOOT)
endif

ifeq ($(HPROC),C40)
SYSLIBS		:= $(SYSLIBS) $(BOOT)
SYSLIBS.SML	:= $(SYSLIBS.SML) $(BOOT)
endif

ifeq ($(HPROC),ARM)
#		no extra servers currently, and no bootstrap either
endif


# system tasks

SYSTASKS := procman.i loader.i

# Build the nucleus
nucleus : $(SYSLIBS) $(SYSTASKS)
	$(SYSBUILD) nucleus $(SYSLIBS) $(SYSTASKS)
ifeq ($(HPROC),TRAN)
  ifdef SYSDEB
	$(CP) nucleus /helios/lib/nucleus
  endif
endif

#-----------------------------------------------------------------------------
# Nucleus incorporating Shared Memory Link kernel

ifeq ($(HPROC),C40)
nucleus.sml : $(SYSLIBS.SML) $(SYSTASKS)
	$(SYSBUILD) nucleus.sml $(SYSLIBS.SML) $(SYSTASKS)
endif

#-----------------------------------------------------------------------------
# Nucleus incorporating HELIOS file system

FSFILES = $(ETC)/devinfo $(LIB)/raw.dev $(LIB)/fs rom.i

nucleus.fs : $(SYSLIBS) $(SYSTASKS) $(FSFILES)
	$(SYSBUILD) nucleus.fs $(SYSLIBS) $(SYSTASKS) $(FSFILES)


#-----------------------------------------------------------------------------
# Nucleus incorporating UNIX file system

UFSFILES = $(LIB)/he1000.d $(LIB)/ufs

nucleus.ufs : $(SYSLIBS) $(SYSTASKS) $(UFSFILES)
	$(SYSBUILD) nucleus.ufs $(SYSLIBS) $(SYSTASKS) $(UFSFILES)


#-----------------------------------------------------------------------------
# Nucleus incorporating the servtask

# Build the nucleus
nucleus.srv : $(SYSLIBS) $(SYSTASKS) $(LIB)/servtask.i
	$(SYSBUILD) nucleus.srv $(SYSLIBS) $(SYSTASKS) $(LIB)/servtask.i


#-----------------------------------------------------------------------------
# Nucleus servers

#loader and procman could have 20k stacks
procman.i : $(SSTART) procman.o
ifeq ($(HPROC),ARM)
	$(LINK) $(LINKFLAGS) -nProcMan -s4000 -h50000 $^ -o$@@
else
	$(LINK) $(LINKFLAGS) -nProcMan -s2000 -h40000 $^ -o$@@
endif

loader.i : $(SSTART) loader.o
ifeq ($(HPROC),ARM)
	$(LINK) $(LINKFLAGS) -nLoader -s4000 -h8000 $^ -o$@@
else
	$(LINK) $(LINKFLAGS) -nLoader -s2000 -h10000 $^ -o$@@
endif

newinit.i : $(SSTART) newinit.o
	$(LINK) $(LINKFLAGS) -nInit -s2000 -h6000 $^ -o$@@


#-----------------------------------------------------------------------------
# Defunct initialisation code.
# Procman now runs init (newinit.c) that loads initrc
# (Source now called oldinit.c)
#init.i : $(SSTART) init.o
#	$(LINK) $(LINKFLAGS) -nInit -s2000 -h6000 $^ -oinit.i

#initnet.i : init.c $(SSTART)
#	$(NC) $(NCFLAGS) -DNETWORK $< | $(ASM) -p -oinitnet.o
#	$(LINK) $(LINKFLAGS) -nInit -s2000 -h6000 $(SSTART) initnet.o -oinitnet.i


#-----------------------------------------------------------------------------
# General servers
#
# heap size set to < 2*buffer size so buffers are allocated from system &
# returned when not used.
#
# *.si = Server is incorporated into system image 
# *.dl = Demand loaded server - Name table entry already exists
# *.sa = Stand alone servers (run from shell)

# demand loaded or in system image servers

ram.i :	$(SSTART) ram.dl
	$(LINK) $(LINKFLAGS) -nRam -s2000 -h2000 $^ -o$@@

null.i : $(SSTART) null.dl
	$(LINK) $(LINKFLAGS) -nNull -s2000 -h2000 $^ -o$@@

ifeq ($(HPROC),TRAN)
# Standard rom server
  rom.i :	$(SSTART) rom.si files.si mkrom
	$(LINK) $(LINKFLAGS) -nRom -s2000 -h5000 $(SSTART) rom.si files.si -o$@@
	mkrom rom.i -a /helios/etc/devinfo

mkrom : mkrom.c
	$(HOSTCC) mkrom.c -o mkrom
endif


#-----------------------------------------------------------------------------
# demand loaded servers - nametable entry created by procman
# *.dl = Demand loaded server

fifo.i :	$(SSTART) fifo.dl
	$(LINK) $(LINKFLAGS) -nFifo -s2000 -h2000 $^ -o$@@

pipe.i :	$(SSTART) pipe.dl
	$(LINK) $(LINKFLAGS) -nPipe -s2000 -h2000 $^ -o$@@


#-----------------------------------------------------------------------------
# standalone servers - run from the shell

alias.i :	$(SSTART) alias.sa
	$(LINK) $(LINKFLAGS) -nAlias -s1000 -h2500 $^ -o$@@

ptest.i :	$(SSTART) ptest.sa
	$(LINK) $(LINKFLAGS) -nptest -s2000 -h4000 $^ -o$@@


#-----------------------------------------------------------------------------
# System Library	

SysLib:
		$(MAKE) -C ../syslib/$(HPROC)

../syslib/$(HPROC)/syslib.def: ../syslib/sysstart.a
		$(MAKE) -C ../syslib/$(HPROC) syslib.def

#-----------------------------------------------------------------------------
# Server Library

servlib.i:	servstar.p servlib.p modend.p \
		$(LIB)/kernel.def ../syslib/$(HPROC)/syslib.def $(LIB)/util.def
	$(LINK.LIBRARY) -nServLib $^ -o$@@

servlib.def:	servstar.a
	$(MAKE.DEF)


#-----------------------------------------------------------------------------
# Server startup code for all servers

ifeq ($(HPROC),TRAN)
# s0.o is server startup object code. sstart.o holds s0.o + lib resrefs
sstart.o : sstart.a $(LIBDEFS)
	$(AMPP) $(AMPPFLAGS) -o$(TEMP)/x -i$(MACRO)/ $(MACRO)/basic.m $< 
	$(ASM) -p $(TEMP)/x $(LIBDEFS) -o$@@

s0.o 	: sstart.a
	$(AMPP) $(AMPPFLAGS) -o$(TEMP)/x -i$(MACRO)/ $(MACRO)/basic.m $< 
	$(ASM) -p $(TEMP)/x -o$@@

else

s0.o : sstart.a
	$(AMPPASM)

sstart.o : s0.o $(LIBDEFS)
	cat $^ > sstart.o

endif


#-----------------------------------------------------------------------------
# Stand-Alone SysLib stub
#

syslib.sa: ../syslib/TRAN/sysstart.p sasysasm.p sasyslib.p $(LIB)/kernel.def $(LIB)/util.def modend.p
	$(LINK.LIBRARY) -nSysLib ../syslib/TRAN/sysstart.p sasysasm.p sasyslib.p modend.p \
	$(LIB)/kernel.def $(LIB)/util.def -o$@@
	$(CP) $@@ $(LIB)

memtst	: $(CSTART) memtst.o sysmem.o
	$(LINK.CPROGRAM)


#-----------------------------------------------------------------------------
endif #InProcMake	# This line must be at EOF
@


1.39
log
@Now installs nucleus.sml for C40 world
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.38 1993/04/01 17:07:52 nick Exp bart $
d206 1
a206 1
# Possibles nucleus flags are: -DPMDEBUG -DPROTECTED -DSTACKCHECK
d208 1
a208 1
NCFLAGS := $(NCFLAGS) -DPROTECTED -DSTACKCHECK
d215 1
a215 1
  NCFLAGS := $(NCFLAGS)
d219 1
a219 1
    NCFLAGS := $(NCFLAGS) -Zpw1
d222 1
a222 1
      NCFLAGS := $(NCFLAGS) -ps1 -t4
d358 1
a358 1
	$(LINK) $(LINKFLAGS) -nProcMan -s2000 -h60000 $^ -o$@@
@


1.38
log
@Rules added to build a shared memory link nucleus.
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.37 1993/01/18 17:56:12 nick Exp $
d104 3
@


1.37
log
@VPATH definitions fixed.
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.36 1992/11/03 14:46:49 martyn Exp nick $
d88 1
a88 1
  TARGETS := $(TARGETS) nucleus
d282 4
d292 1
d311 8
@


1.36
log
@mv servstart.a to servstar.a for DOS systems
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.35 1992/10/19 11:06:13 al Exp martyn $
d59 1
a59 1
VPATH := $(HSRC)/$(COMPONENT)
d62 1
a62 1
VPATH := $(RSRC)/$(COMPONENT)/$(HPROC):$(VPATH):$(RSRC)/$(COMPONENT)
d64 4
@


1.35
log
@Added nucleus.ufs
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.34 1992/09/17 16:12:18 paul Exp al $
d181 1
a181 1
			servstart.a 	\
d426 1
a426 1
servlib.i:	servstart.p servlib.p modend.p \
d430 1
a430 1
servlib.def:	servstart.a
@


1.34
log
@simplified for new arm port
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.33 1992/08/17 11:24:31 paul Exp $
d75 1
a75 1
    TARGETS := $(TARGETS) nucleus.fs 
d97 1
d305 1
a305 1
# Nucleus incorporating file system
d311 9
@


1.33
log
@removed cppflags
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.32 1992/08/14 18:07:47 paul Exp paul $
d78 1
d80 1
a80 1
  TARGETS := $(TARGETS) rom.i window.i helios.i
d82 1
a88 6
# Note:
# The ARM version allows a runtime building of the nucleus that enables
# individual parts of the nucleus to be patched by the contents of the
# patch flash EPROM. Therefore, "sysstrip" is used instead of "cp" when
# installing the objects that are normally included in the "nucleus" image file.

a89 1
ifneq ($(HPROC),ARM)
a92 1
endif
d104 1
a104 1
ifeq ($(HPROC),ARM)
d281 4
d286 1
a286 4
SYSLIBS		:= $(SYSLIBS) $(KERNEL)/$(HPROC)/ABClib.i \
		$(POSIX)/$(HPROC)/posix.i $(CLIB)/$(HPROC)/clib.i \
		$(FAULT)/$(HPROC)/fault.i $(FPLIB)/$(HPROC)/fplib.i \
		$(PATCHLIB)/$(HPROC)/patchlib.i
a288 3
ifeq ($(HPROC),C40)
SYSLIBS		:= $(SYSLIBS) $(BOOT)
endif
a293 8
ifeq ($(HPROC),ARM)
# If the order of these entries are changed, or new entries are added, the
# "genhdr" program should be updated to reflect these changes. The complete
# "sysbuild" entries are dependant on the "config.h" IVec defines.
SYSTASKS := $(SYSTASKS) window.i rom.i ram.i null.i helios.i
endif

ifneq ($(HPROC),ARM)	# ARM nucleus loaded dynamically during RESET
d297 2
a298 2
  ifeq ($(HPROC),TRAN)
    ifdef SYSDEB
a299 1
    endif
d301 1
a301 1
endif # ($(HPROC),ARM)
a337 3
ifeq ($(HPROC),ARM)
newinit.i : $(SSTART) newinit.o $(LIB)/abclib.def
else
a338 1
endif
d366 1
a366 8
ifeq ($(HPROC),ARM)
  ram.i : $(SSTART) ram.si $(LIB)/abclib.def
	$(LINK) $(LINKFLAGS) -nram -s2000 -h4000 $^ -o$@@

  null.i :	$(SSTART) null.si
	$(LINK) $(LINKFLAGS) -nNull -s2000 -h2000 $^ -o$@@
else
  ram.i :	$(SSTART) ram.dl
d369 1
a369 1
  null.i :	$(SSTART) null.dl
d372 1
@


1.32
log
@added little data pragma for C40
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.31 1992/07/27 17:01:14 paul Exp paul $
d238 1
a238 1
	$(NC) $(CPPFLAGS) $(NCFLAGS) -DINSYSTEMIMAGE $< -s$(TEMP)/$*.s
d249 1
a249 1
	$(NC) $(CPPFLAGS) $(NCFLAGS) -DDEMANDLOADED $< -s$(TEMP)/$*.s
d260 1
a260 1
	$(NC) $(CPPFLAGS) $(NCFLAGS) -DSTANDALONE $< -s$(TEMP)/$*.s
@


1.31
log
@enable stack checks in nucleus
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.30 1992/06/12 10:24:03 nickc Exp $
d216 2
a217 1
    NCFLAGS := $(NCFLAGS)
@


1.30
log
@tidied up if based rules
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.29 1992/02/26 17:08:58 paul Exp nickc $
d213 1
a213 1
  NCFLAGS := $(NCFLAGS) -Zps1
d216 1
a216 1
    NCFLAGS := $(NCFLAGS) -Zps1
@


1.29
log
@ initial support for C40
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.28 91/03/14 18:42:40 paul Exp $
d133 1
a133 1
	if cmp $^ $@@; then echo "$^ not changed"; else $(CP) $^ $@@ ;fi
d140 1
a140 1
	if cmp $^ $@@; then echo "$^ not changed"; else $(CP) $^ $@@ ;fi
d148 1
a148 1
	if cmp s0.o $(LIB)/s0.o; then echo "s0.o not changed"; else $(CP) s0.o $(LIB) ;fi
d155 1
a155 1
	if cmp sstart.o $(LIB)/sstart.o; then echo "sstart.o not changed"; else $(CP) sstart.o $(LIB) ;fi
@


1.28
log
@do sysbuild of kernel.i in kernel directory (ARM)
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.27 91/03/10 21:23:46 paul Exp $
d70 1
a70 2
		../syslib/$(HPROC)/syslib.i \
		newinit.i ram.i fifo.i null.i pipe.i alias.i
d73 4
a76 4
TARGETS := $(TARGETS) nucleus syslib.sa nucleus.srv #rom.i
 ifdef SYSDEB
  TARGETS := $(TARGETS) nucleus.fs 
 endif
d79 4
a82 1
TARGETS := $(TARGETS) rom.i window.i helios.i
d215 8
a222 6
 ifeq ($(HPROC),TRAN)
  NCFLAGS := $(NCFLAGS) -ps1 -t4
  LINKFLAGS := $(LINKFLAGS) -f
 else
  NCFLAGS := $(NCFLAGS) -ps1
 endif
d293 4
d312 2
a313 1
ifdef SYSDEB
d315 2
a316 1
endif
d433 2
a434 2
../syslib/$(HPROC)/syslib.i:
		$(MAKE) -C ../syslib/$(HPROC) syslib.i
d456 1
a456 1
	$(AMPP) -o$(TEMP)/x -i$(MACRO)/	$(MACRO)/basic.m $< 
d460 1
a460 1
	$(AMPP) -o$(TEMP)/x -i$(MACRO)/ $(MACRO)/basic.m $< 
@


1.27
log
@$(DEFINES) now included in $(NCFLAGS), + got rid of -DSYSDEB as this is now
automatically defined by ARM/TRAN.mak
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.26 91/03/07 19:17:10 paul Exp Locker: paul $
d109 1
a109 1
	sysstrip $(KERNEL)/$(HPROC)/kernel.i -o$(LIB)/kernel
@


1.26
log
@now build nucleus.srv (nucleus incorporating servtask server) in this
makefile (removed from servtask makefile)
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.25 91/03/07 18:10:40 martyn Exp Locker: paul $
d201 2
a202 2
# Other possibles are: -DPMDEBUG -DSYSDEB
DEFINES	:= $(DEFINES) -DPROTECTED -DSTACKCHECK
d204 2
a205 1
# Set any flags required
d207 1
a207 1
  DEFINES := $(DEFINES) -DPMDEBUG -DSYSDEB
d209 1
d233 1
a233 1
	$(NC) $(CPPFLAGS) $(NCFLAGS) -DINSYSTEMIMAGE $(DEFINES) $< -s$(TEMP)/$*.s
d238 1
a238 1
	$(NC) -o$*.si -c $(NCFLAGS) -DINSYSTEMIMAGE $(DEFINES) $<
d244 1
a244 1
	$(NC) $(CPPFLAGS) $(NCFLAGS) -DDEMANDLOADED $(DEFINES) $< -s$(TEMP)/$*.s
d249 1
a249 1
	$(NC) -o$*.dl -c $(NCFLAGS) -DDEMANDLOADED $(DEFINES) $<
d255 1
a255 1
	$(NC) $(CPPFLAGS) $(NCFLAGS) -DSTANDALONE $(DEFINES) $< -s$(TEMP)/$*.s
d260 1
a260 1
	$(NC) -o$*.sa -c $(NCFLAGS) -DSTANDALONE $(DEFINES) $<
@


1.25
log
@$(LIB)/sstart.o rule incorrectly written as S(LIB)/start.o
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.24 91/03/05 18:47:27 paul Exp $
d74 4
a77 1
TARGETS := $(TARGETS) nucleus #rom.i syslib.sa
d98 5
a102 2
#	$(CP) nucleus.fs $(LIB)
#	$(CP) syslib.sa $(LIB)
d314 9
@


1.24
log
@fixed install
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.23 91/02/28 16:08:12 paul Exp $
d143 1
a143 1
$(LIB)/start.o: start.o
@


1.23
log
@fixed up for rename of init.c to oldinit.c
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.22 91/02/19 11:04:13 nick Exp Locker: paul $
d69 2
a70 1
TARGETS := sstart.o s0.o procman.i loader.i servlib.i syslib.i \
d82 1
a82 1
# N.B.
d88 2
a89 2
install	: installdef $(TARGETS) Xinstall
ifeq ($(HPROC),TRAN)
a90 2
#	$(CP) nucleus.fs $(LIB)
#	$(CP) syslib.sa $(LIB)
d94 4
a97 2
	$(CP) sstart.o $(LIB)
	$(CP) s0.o $(LIB)
d118 1
a118 1
installdef: $(LIB)/syslib.def $(LIB)/servlib.def
d121 1
a121 1
$(LIB)/syslib.def : ../syslib/$(HPROC)/syslib.def 
d128 1
a128 1
$(LIB)/servlib.def : servlib.def
d135 16
d406 1
a406 1
syslib.i ../syslib/$(HPROC)/syslib.i:
d409 1
a409 1
syslib.def ../syslib/$(HPROC)/syslib.def: ../syslib/sysstart.a
d415 1
a415 1
servlib.i :	servstart.p servlib.p modend.p \
d419 1
a419 1
servlib.def :	servstart.a
d426 1
a426 1
ifeq ($(HPROC),ARM)
a427 6
s0.o : sstart.a
	$(AMPPASM)

sstart.o : s0.o $(LIBDEFS)
	cat $^ > sstart.o
else
d431 1
d435 9
d451 1
a451 1
syslib.sa : ../syslib/TRAN/sysstart.p sasysasm.p sasyslib.p $(LIB)/kernel.def $(LIB)/util.def modend.p
@


1.22
log
@PAB change to ARM build
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.21 91/02/14 22:50:34 paul Exp Locker: paul $
d172 1
a172 1
SOURCES.odd	= makefile
d321 1
a321 1

@


1.21
log
@support for systrips new -o option
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.20 91/02/14 15:18:07 paul Exp $
d104 1
a104 1
	sysstrip servlib.i $(LIB)/servlib
@


1.20
log
@got rid of -DNEWSIGNALS
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.19 91/01/22 16:26:36 paul Exp $
d84 1
a84 1
# patch flash EPROM. Therefore "sysstrip" is used instead of "cp" when
d102 2
a103 2
	sysstrip $(KERNEL)/$(HPROC)/kernel.i $(LIB)/kernel
	sysstrip ../syslib/$(HPROC)/syslib.i $(LIB)/syslib
d107 7
a113 7
	sysstrip procman.i $(LIB)/procman
	sysstrip loader.i $(LIB)/loader
	sysstrip window.i $(LIB)/window
	sysstrip rom.i $(LIB)/rom
	sysstrip ram.i $(LIB)/ram
	sysstrip null.i $(LIB)/null
	sysstrip helios.i $(LIB)/helios
@


1.19
log
@support added for runtime build of nucleus in ARM version to enable
individual nucleus items to be patched with the contents of the patch
flash EPROM.
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.18 90/11/26 19:14:56 nick Exp $
d179 1
a179 1
DEFINES	:= $(DEFINES) -DPROTECTED -DSTACKCHECK -DNEWSIGNALS
@


1.18
log
@stand-alone stuff fixed, ATW GEM system removed
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.17 90/11/26 18:55:24 nick Exp Locker: nick $
d69 1
a69 1
TARGETS := sstart.o s0.o procman.i loader.i servlib.i syslib.i nucleus \
d73 1
a73 1
TARGETS := $(TARGETS) #rom.i syslib.sa
d75 3
d81 6
d88 1
a89 1
ifeq ($(HPROC),TRAN)
d92 2
d101 13
a113 3
ifneq ($(HPROC),ARM)			# currently placed into nucleus
	$(CP) ram.i $(LIB)/ram
	$(CP) null.i $(LIB)/null
d258 1
a258 1
SYSLIBS		:= $(SYSLIBS) $(FPLIB)/$(HPROC)/fplib.i \
d260 2
a261 1
		$(FAULT)/$(HPROC)/fault.i $(KERNEL)/$(HPROC)/ABClib.i
d269 4
a272 1
SYSTASKS := $(SYSTASKS) window.i rom.i ram.i null.i hserver.i
d275 1
d282 1
d310 3
d314 1
d343 2
a344 2
  ram.i :	$(SSTART) ram.si
	$(LINK) $(LINKFLAGS) -nRam -s2000 -h2000 $^ -o$@@
@


1.17
log
@standalone stuff fixed for 1.2
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.16 90/11/05 20:55:36 paul Exp Locker: nick $
d253 1
a253 1
ifeq ($(HHOST),HELIOSTRAN)
a265 13
# Defunct ATW gem nucleus - @@@@@@ this definition looks screwed up - so what!

gem : $(SYSLIBS) control.i
	$(SYSBUILD) gem $(KERNEL)/$(HPROC)/kernel.i
		../syslib/$(HPROC)/syslib.i $(BOOT) $(CLIB)/$(HPROC)/clib.i \
		$(BOOT) control.i

# Control program for GEM system
control.i : control.o
	$(ASM) $(LINKFLAGS) -nControl -s2000 -h6000 $(LIB)/sstart.o control.o -ocontrol.i


#-----------------------------------------------------------------------------
d399 2
a400 2
syslib.sa : sysstart.p sasysasm.p sasyslib.p $(LIB)/kernel.def $(LIB)/util.def modend.p
	$(LINK.LIBRARY) -nSysLib sysstart.p sasysasm.p sasyslib.p modend.p \
@


1.16
log
@fixed s0.o sstart.o duplicate definitions problem.
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.15 90/10/30 11:43:38 paul Exp Locker: paul $
d412 1
a412 1
syslib.sa : sysstart.p sasysasm.p sasyslib.p $(KERNEL)/kernel.def $(UTILDEF) modend.p
d414 2
a415 1
	$(KERNEL)/kernel.def $(UTILDEF) -o$@@
@


1.15
log
@added ABCLib to ARM sys image
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.14 90/10/23 19:31:56 paul Exp $
d392 2
a393 2
# s0.o holds actual object sstart.o hold object + resrefs
  s0.o sstart.o : sstart.a $(LIBDEFS)
d395 3
a397 2
	mv sstart.o s0.o
	cat s0.o $(LIBDEFS) > sstart.o
@


1.14
log
@slight change to the way syslib is constructed
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.13 90/10/19 21:23:15 paul Exp $
d239 1
a239 1
		$(FAULT)/$(HPROC)/fault.i
@


1.13
log
@getting SOURCES.c/.a correct
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.12 90/10/19 20:37:26 paul Exp Locker: paul $
a67 2
SYSLIBI := ../syslib/$(HPROC)/syslib.i

d266 1
a266 1
# Defunct ATW gem nucleus
d269 3
a271 3
	$(SYSBUILD) gem $(KERNEL)/$(HPROC)/kernel.i syslib/$(HPROC)/syslib.i $(BOOT) \
		$(CLIB)/$(HPROC)/clib.i \
	$(BOOT) control.i
d371 1
a371 1
syslib.i SYSLIBI :
@


1.12
log
@correct SOURCES.c SOURCES.h
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.11 90/10/04 18:46:22 paul Exp $
a135 1
			rom.c mkrom.c					\
a141 1
			sysstart.a 	\
d144 1
a144 2
 			sstart.a	\
			files.a 
@


1.11
log
@NEWSIGNALS in arm version
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.10 90/10/02 15:45:24 nick Exp $
d138 1
a138 3
			loader.c procman.c select.c servlib.c		\
			socket.c sysdev.c sysexcep.c			\
			syslib.c sysmem.c syspipe.c 			\
@


1.10
log
@tidied, uses DFLT.mak for local defaults, RSRC for remote sources
@
text
@d14 1
a14 1
# RcsId: $Id$
d164 2
a165 2
# Other possibles are: -DPMDEBUG -DSYSDEB -DNEWSIGNAL
DEFINES	:= $(DEFINES) -DPROTECTED -DSTACKCHECK
d168 3
a175 4
  DEFINES := $(DEFINES) -DNEWSIGNALS
  ifdef SYSDEB
    DEFINES := $(DEFINES) -DPMDEBUG -DSYSDEB
  endif
@


1.9
log
@arm changes
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.7 90/09/05 18:29:06 nick Exp Locker: nick $
d23 6
a28 12
  # These variables should already be set by your make script or environment.
  ifndef HPROC
    HPROC = TRAN
  endif

  ifndef HHOST
    HHOST = ORION
  endif

  ifndef HSRC
    HSRC = /usr/perihelion/Helios
  endif
a29 4
  ifndef HPROD
    HPROD = $(HSRC)/slashhelios/$(HPROC)
  endif

d61 4
a67 1
# Note all final generic targets here
d70 1
d102 5
a106 1
	$(CP) $^ $(LIB)
d109 5
a113 1
	$(CP) $^ $(LIB)
a115 1
	$(MAKE) -C ../syslib/$(HPROC) clean
d118 1
a119 1

d164 1
a164 1
# Other possibles are: -DPMDEBUG -DSYSDEB -DNEWSIGNALS
a169 1
  DEFINES := $(DEFINES) -DPMDEBUG -DSYSDEB -DNEWSIGNALS
d173 4
a176 1
  DEFINES := $(DEFINES) -DPMDEBUG -DSYSDEB -DNEWSIGNALS
a378 2
#ifeq ($(HPROC),TRAN)
#syslib.i SYSLIBI :	syslib/*.c
d382 1
a382 1
syslib.def ../syslib/$(HPROC)/syslib.def :	syslib/sysstart.a
a383 10

#else
#syslib.p :	syspipe.c sysmem.c sysdev.c select.c socket.c

#syslib.i :	sysstart.p syslib.p modend.p $(LIB)/kernel.def $(LIB)/util.def
#	$(LINK.LIBRARY) -nSysLib $^ -o$@@

#syslib.def :	sysstart.a
#	$(MAKE.DEF)
#endif
@


1.8
log
@installdef targets now allow for empty $(LIB)
@
text
@d60 1
a60 1
.PHONY: default clean Xdefault Xclean
d75 1
a75 2
TARGETS := sstart.o s0.o procman.i loader.i servlib.i syslib.i nucleus newinit.i \
		ram.i fifo.i null.i pipe.i alias.i
d77 3
d107 1
a107 1
$(LIB)/syslib.def : syslib.def 
d114 1
d163 1
a163 1
# Other possibles are: -DPMDEBUG -DSYSDEB
d169 1
d182 1
a182 1
LIBDEFS	:= $(LIB)/kernel.def syslib.def servlib.def $(LIB)/util.def
d234 1
a234 1
SYSLIBS 	:= $(KERNEL)/$(HPROC)/kernel.i syslib.i servlib.i \
d274 1
a274 1
	$(SYSBUILD) gem $(KERNEL)/$(HPROC)/kernel.i syslib.i $(BOOT) \
d280 1
a280 1
	$(ASM) $(LINKOPTS) -nControl -s2000 -h6000 $(LIB)/sstart.o control.o -ocontrol.i
d376 3
a378 3
ifeq ($(HPROC),TRAN)
#.PHONY: syslib.i syslib.def
syslib.i :	syslib/*.c
d381 1
a381 1
syslib.def :	syslib/sysstart.a
d384 2
a385 5
else
syslib.p :	syspipe.c sysmem.c sysdev.c select.c socket.c

syslib.i :	sysstart.p syslib.p modend.p $(LIB)/kernel.def $(LIB)/util.def
	$(LINK.LIBRARY) -nSysLib $^ -o$@@
d387 6
a392 3
syslib.def :	sysstart.a
	$(MAKE.DEF)
endif
d398 1
a398 1
		$(LIB)/kernel.def syslib.def $(LIB)/util.def
d409 5
a413 8
# sstart.x holds actual object sstart.o hold object + resrefs
  sstart.o : sstart.a $(LIBDEFS)
	$(AMPP) -dhelios.arm 1 -i$(MACRO)/ \
		$(MACRO)/basic.m $< | tr '(' '[' | tr ')' ']' > $*.s
	$(AS) -o $*.t $*.s
	$(MUNGE) -o sstart.x $*.t
	cat sstart.x $(LIBDEFS) > $@@
	$(RM) $*.s $*.t $*.x
@


1.7
log
@Log removed
@
text
@d14 1
a14 1
# RcsId: $Id$
d102 7
a108 1
installdef: syslib.def servlib.def
a109 1
	$(TOUCH) installdef
@


1.6
log
@s0.o added to targets
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.5 90/09/05 15:11:34 nick Exp Locker: nick $
a15 8
#
# $Log:	makefile,v $
# Revision 1.5  90/09/05  15:11:34  nick
# nucleus only copied out to /lib on Helios hosts
# 
# Revision 1.4  90/09/05  13:10:52  nick
# *** empty log message ***
# 
@


1.5
log
@nucleus only copied out to /lib on Helios hosts
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.4 90/09/05 13:10:52 nick Exp Locker: nick $
d18 3
d83 1
a83 1
TARGETS := sstart.o procman.i loader.i servlib.i syslib.i nucleus newinit.i \
@


1.4
log
@*** empty log message ***
@
text
@d14 1
a14 1
# RcsId: $Id$
d17 4
a20 1
# $Log$
d254 1
d256 1
@


1.3
log
@rules for making s0.o added
@
text
@@


1.2
log
@copy out to /helios/lib made conditional
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.1 90/08/28 13:09:43 nick Exp Locker: nick $
d17 1
a17 4
# $Log:	makefile,v $
# Revision 1.1  90/08/28  13:09:43  nick
# Initial revision
# 
d93 1
a250 1
ifeq (HELIOS,$(findstring HELIOS,$(HHOST)))
a251 1
endif
d409 2
a410 3
  sstart.o : sstart.a $(LIBDEFS)
	$(AMPP) -o$(TEMP)/x -i$(MACRO)/ \
	$(MACRO)/basic.m $< 
d412 3
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
# RcsId: $Id$
d17 4
a20 1
# $Log$
d253 1
d255 1
@
