head	1.7;
access;
symbols
	Helios_1_3_1:1.7
	Helios_C40_1_3_Official_Release:1.7
	Alenia_release:1.7
	Helios1_3:1.6
	C40_Field_Test_2:1.6
	C40_Field_Test_R1:1.6
	Helios13_beta:1.6
	Helios1_2_2:1.4
	Helios1_2_2Beta:1.4
	Helios1_2_1:1.4
	Helios1_2:1.3
	V1_2Beta0:1.2;
locks; strict;
comment	@ * @;


1.7
date	92.11.23.16.42.42;	author nick;	state Exp;
branches;
next	1.6;

1.6
date	92.06.15.12.00.25;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	92.06.13.15.21.10;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	91.01.22.17.51.43;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	90.09.25.18.25.44;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	90.09.05.12.51.54;	author nick;	state Exp;
branches;
next	1.1;

1.1
date	90.08.28.12.06.43;	author nick;	state Exp;
branches;
next	;


desc
@System library device interface
@


1.7
log
@Converted to use MPtr's for access to the device code.
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--                     H E L I O S   N U C L E U S                      --
--                     ---------------------------                      --
--                                                                      --
--            Copyright (C) 1987,1990, Perihelion Software Ltd.         --
--                        All Rights Reserved.                          --
--                                                                      --
-- syslib/device.c							--
--                                                                      --
--	System Library, the common program interface to the operating   --
--	system.								--
--                                                                      --
--	Author:  NHG 16/8/87						--
--		 NHG 03/8/90						--
--                                                                      --
------------------------------------------------------------------------*/
/* SccsId:	 %W%	%G%	Copyright (C) 1987, Perihelion Software Ltd.*/
/* $Id: device.c,v 1.5 1992/06/13 15:21:10 nickc Exp paul $ */

#include "sys.h"

/* System library device support */

#include <device.h>

extern DCB *
OpenDevice(
	   string	name,
	   void *	info )
{
  Object *	o    = NULL;
  Object *	code = NULL;
  Stream *	s    = NULL;
  DCB *		dcb  = NULL;
  MPtr		dev;
  fncast 	openfn;
	
  /* if the device is opened with an absolute path name	*/
  /* always load the code.				*/

  if ( *name == c_dirchar ) o = Locate(NULL,name);
  else
    {
      Object *	lib;


      lib = Locate( NULL, "/loader" );
		
      o = Locate( lib, name );

      Close( (Stream *)lib );
      
      if ( o == NULL )
	{
	  lib = Locate( NULL, "/helios/lib" );
	  
	  o = Locate( lib, name );
	  
	  Close( (Stream *)lib );
	}
    }

  if ( o == NULL ) goto done;

  /* we now have a handle on the device code, load it */
  
  code = Load( NULL, o );
  
  if ( code == NULL ) goto done;
  
  /* open for execute, so we can find the code */
  
  s = Open( code, NULL, O_Execute );
  
  if ( s == NULL ) goto done;
  
  /* map code into a Device and check it */
  
  dev = (MPtr)(s->Server);
  
  if ( DeviceWord_(dev,Type) != T_Device ) goto done;

  /* call the open function in the device */

  openfn.mp = DeviceOpen_(dev);

  dcb = (DCB *)(*openfn.wfn)( dev, info );
    
  if ( dcb == NULL ) goto done;
  
  /* install the code stream into the DCB so it stay */
  
  dcb->Code = s;
  s = NULL;
  
done:
  if ( o    != NULL ) Close((Stream *)o);
  if ( code != NULL ) Close((Stream *)code);
  if ( s    != NULL ) Close(s);

  return dcb;
}

extern word CloseDevice(DCB *dcb)
{
	Stream *code = dcb->Code;
	word res = (dcb->Close)(dcb);
	Close(code);
	return res;
}

@


1.6
log
@fixed for std __proc names
@
text
@d36 1
a36 5
  Device *	dev;
#ifdef __C40
  void *	dptr;
  WordFnPtr	fptr;
#else
a37 1
#endif
d80 1
a80 1
  dev = (Device *)(s->Server);
d82 1
a82 1
  if ( dev->Type != T_Device ) goto done;
a84 3
  
#ifdef __C40
  dptr = RTOA(dev->Open);
d86 1
a86 1
  fptr = (WordFnPtr) _DataToFuncConvert( dptr );
d88 2
a89 8
  dcb = (DCB *)(*fptr)( dev, info );
#else
  openfn.cp = RTOA(dev->Open);
  
  dcb = (DCB *)(*openfn.wfn)(dev,info);

#endif /* __C40 */
  
@


1.5
log
@fixed to work on C40
@
text
@d19 1
a19 1
/* $Id: device.c,v 1.4 1991/01/22 17:51:43 paul Exp nickc $ */
d37 1
a37 1
#ifdef __HELIOSC40
d91 1
a91 1
#ifdef __HELIOSC40
d102 1
a102 1
#endif /* __HELIOSC40 */
@


1.4
log
@delete fncast union - now in helios.h
@
text
@d19 1
a19 1
/* $Id: device.c,v 1.3 90/09/25 18:25:44 paul Exp Locker: paul $ */
d27 4
a30 1
extern DCB *OpenDevice(string name, void *info)
d32 19
a50 14
	Object *o = NULL;
	Object *code = NULL;
	Stream *s = NULL;
	DCB *dcb = NULL;
	Device *dev;
	fncast openfn;
	
	/* if the device is opened with an absolute path name	*/
	/* always load the code.				*/
	
	if( *name == c_dirchar ) o = Locate(NULL,name);
	else
	{
		Object *lib;
a51 3
		lib = Locate(NULL,"/loader");
		
		o = Locate(lib,name);
d53 1
a53 1
		Close( (Stream *)lib );
d55 1
a55 3
		if( o == NULL )
		{
			lib = Locate(NULL,"/helios/lib");
d57 9
a65 4
			o = Locate(lib,name);

			Close( (Stream *)lib );
		}
d67 1
d69 1
a69 1
	if( o == NULL ) goto done;
d71 44
a114 5
	/* we now have a handle on the device code, load it */

	code = Load(NULL,o);

	if( code == NULL ) goto done;
d116 1
a116 31
	/* open for execute, so we can find the code */
	
	s = Open(code,NULL,O_Execute);

	if( s == NULL ) goto done;
	
	/* map code into a Device and check it */
	
	dev = (Device *)(s->Server);
	
	if( dev->Type != T_Device ) goto done;
	
	/* call the open function in the device */
	
	openfn.cp = RTOA(dev->Open);
	
	dcb = (DCB *)(*openfn.wfn)(dev,info);
	
	if( dcb == NULL ) goto done;
	
	/* install the code stream into the DCB so it stay */
	
	dcb->Code = s;
	s = NULL;
	
done:
	if( o != NULL ) Close((Stream *)o);
	if( code != NULL ) Close((Stream *)code);
	if( s != NULL ) Close(s);
	
	return dcb;
@


1.3
log
@arm changes
@
text
@d19 1
a19 1
/* $Id: device.c,v 1.2 90/09/05 12:51:54 nick Exp Locker: nick $ */
a23 10

/* Get around ANSI spec. disallowing casts of non fn objects to fn pointers */ 
typedef union fncast { /* HELIOSARM fix */
	word	w;
	word	*wp;
	char	*cp;
	void	*vp;
	VoidFnPtr vfn;
	WordFnPtr wfn;
} fncast;
@


1.2
log
@*** empty log message ***
@
text
@d19 1
a19 1
/* $Id$ */
d58 1
a58 1
		Close( lib );
d66 1
a66 1
			Close( lib );
d104 2
a105 2
	if( o != NULL ) Close(o);
	if( code != NULL ) Close(code);
@


1.1
log
@Initial revision
@
text
@d19 1
a19 5
/* $Id$
 *
 * $Log$
 *
 */
@
