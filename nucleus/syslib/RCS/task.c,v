head	1.19;
access;
symbols
	Helios_1_3_1:1.19
	Helios_C40_1_3_Official_Release:1.18
	Alenia_release:1.17
	Helios1_3:1.15
	C40_Field_Test_2:1.15
	C40_Field_Test_R1:1.14
	Helios13_beta:1.14
	Helios1_2_2:1.12
	Helios1_2_2Beta:1.11
	Helios1_2_1:1.9
	Helios1_2:1.5
	V1_2Beta0:1.3;
locks; strict;
comment	@ * @;


1.19
date	93.07.09.13.36.09;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	93.02.17.16.09.27;	author bart;	state Exp;
branches;
next	1.17;

1.17
date	92.11.20.18.13.01;	author nick;	state Exp;
branches;
next	1.16;

1.16
date	92.11.04.17.21.51;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	92.09.04.10.32.33;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	92.06.17.10.08.44;	author paul;	state Exp;
branches;
next	1.13;

1.13
date	92.05.01.16.51.59;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	91.08.22.15.13.59;	author bart;	state Exp;
branches;
next	1.11;

1.11
date	91.06.17.11.04.38;	author bart;	state Exp;
branches;
next	1.10;

1.10
date	91.06.03.09.30.28;	author nick;	state Exp;
branches;
next	1.9;

1.9
date	91.03.11.17.08.45;	author nick;	state Exp;
branches;
next	1.8;

1.8
date	91.02.14.15.17.01;	author paul;	state Exp;
branches;
next	1.7;

1.7
date	91.02.11.17.09.56;	author nick;	state Exp;
branches;
next	1.6;

1.6
date	91.02.07.16.02.56;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	90.11.01.15.41.00;	author nick;	state Exp;
branches;
next	1.4;

1.4
date	90.09.25.19.02.52;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	90.09.12.16.06.28;	author nick;	state Exp;
branches;
next	1.2;

1.2
date	90.09.05.12.56.47;	author nick;	state Exp;
branches;
next	1.1;

1.1
date	90.08.28.12.12.56;	author nick;	state Exp;
branches;
next	;


desc
@Task and program related things
@


1.19
log
@fixed conflicts with C++
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--                     H E L I O S   N U C L E U S                      --
--                     ---------------------------                      --
--                                                                      --
--            Copyright (C) 1987,1990, Perihelion Software Ltd.         --
--                        All Rights Reserved.                          --
--                                                                      --
-- syslib/task.c							--
--                                                                      --
--	Routines related to Task creation and manipulation.		--
--									--
--                                                                      --
--	Author:  NHG 16/8/87						--
--		 NHG 03/8/90						--
--                                                                      --
------------------------------------------------------------------------*/
/* SccsId:	 %W%	%G% Copyright (C) 1987, Perihelion Software Ltd.*/
/* $Id: task.c,v 1.18 1993/02/17 16:09:27 bart Exp nickc $ */

#define _in_task

#include "sys.h"

/*--------------------------------------------------------
-- Load							--
--							--
-- Load an image into the processor or TaskForceManager --
-- described by the loader object. If this argument is  --
-- NULL send request direct to the local Loader         --
-- 							--
--------------------------------------------------------*/

PUBLIC Object *Load(Object *loader, Object *obj)
{
	Object *o;
	bool local = loader == Null(Object);
	word isize = sizeof(LoadInfo) + (word)strlen(obj->Name) + 1;
	word e;
	
	LoadInfo *info;

#ifdef SYSDEB
	SysDebug(process)("Load(%O,%O)",loader,obj);
#endif

	if( (e = CheckObject(obj,C_Locate)) < 0 ) 
	{
		if( !local ) loader->Result2 = e;
		return NULL;
	}

	if( local ) loader = Locate(Null(Object),"/loader");
	elif( CheckObject(loader,C_Locate) != Err_Null ) return NULL;	

	info = (LoadInfo *)Malloc(isize);

	if( info == NULL )
	{
		obj->Result2 = EC_Error|SS_SysLib|EG_NoMemory;
		if( local ) Close((Stream *)loader);
		else loader->Result2 = obj->Result2;
		return NULL;
	}
	
	info->Cap = obj->Access;
	info->Matrix = -1;
	if( (closebits_(obj->Flags) & closebits_(Flags_Stream)) != 0 )
	{
		info->Pos = ((Stream *)obj)->Pos;
	}
	else info->Pos = 0;
	
	strcpy(info->Name,obj->Name);

	/* Ensure Special Function field set in FnRc  */
	/* This defines the particular type of Create */	
	loader->FnMod |= FF_LoadOnly;

	/* Set timeout to load timeout		      */
	loader->Timeout = LoadTimeout;
	
	o = Create(loader,NULL,0,isize,(byte *)info);

	if( o != Null(Object) ) o->Result2 = loader->Result2;

	if( local )
	{
		obj->Result2 = loader->Result2;
		Close((Stream *)loader);
	}
	
	Free(info);

	loader->FnMod &= ~FF_Mask;	/* clear subfunction	*/

	return o;
}

/*--------------------------------------------------------
-- Execute						--
--							--
-- Execute a task on the processor controlled by the    --
-- given Processor Manager. Or send Execute to the      --
-- the given TaskForceManager. If the control field is  --
-- NULL, send Execute tp the local Processor Manager.	--
-- 							--
--------------------------------------------------------*/

PUBLIC Object *Execute(Object *controller, Object *prog)
{
	Object *o;
	bool local = (controller == Null(Object));
	word namelen = (word)strlen(prog->Name) + 1;
	word isize = sizeof(TaskInfo) + namelen;
	word rc = Err_Null;
	TaskInfo *info;

#ifdef SYSDEB
	SysDebug(process)("Execute(%O,%O)",controller,prog);
#endif
	if( (rc = CheckObject(prog,C_Locate)) < 0 ) 
	{
#ifdef SYSDEB
	SysDebug(process)("Execute program %O invalid",prog);
#endif
		if( !local ) controller->Result2 = rc;
		return NULL;
	}

	if( local ) controller = Locate(Null(Object),"/tasks");
	elif( CheckObject(controller,C_Locate) != Err_Null ) return NULL;

	info = (TaskInfo *)Malloc(isize);

	if( info == NULL )
	{
		prog->Result2 = EC_Error|SS_SysLib|EG_NoMemory;
		if( local ) Close((Stream *)controller);
		else controller->Result2 = prog->Result2;
		return NULL;
	}

	info->Name = sizeof(TaskInfo);
	info->Cap = prog->Access;
	info->Matrix = -1;
	
	strcpy((char *)(info+1),prog->Name);

	/* Ensure Special Function field set in FnRc  */
	/* This defines the particular type of Create */	
	controller->FnMod |= FF_Execute;

	/* Set timeout to load timeout		      */
	controller->Timeout = LoadTimeout;

	o = Create(controller,NULL,Type_Task,isize,(byte *)info);

	rc = controller->Result2;
		/* BLV - used to be in wrong place */
	prog->Result2 = controller->Result2;
	
	if( local ) 
	{
		Close((Stream *)controller);
	}

	Free(info);

	controller->FnMod &= ~FF_Mask;		/* clear subfunction */

#ifdef SYSDEB
	SysDebug(process)("Execute: %x %O",rc, o);
#endif

	return o;
}

/*--------------------------------------------------------
-- SendEnv						--
-- GetEnv						--
--							--	
-- Environment/argument exchange protocol. Used by a	--
-- parent process to pass arguments and environment to	--
-- a child.						--
-- 							--
--------------------------------------------------------*/

PUBLIC word SendEnv(Port dest, Environ *env)
{
	MCB *m = Null(MCB);
	word argc = 0, envc = 0, objc = 0, strc = 0;
	word args = 0, envs = 0, objs = 0, strs = 0;
	string *argp;
	string *envp;
	Object **objp;
	Stream **strp;
	Port reply = NewPort();
	word e = Err_Null;
	word csize, dsize;
	Port dataport;
	bool newenv = true;

#ifdef SYSDEB
	SysDebug(process)("SendEnv(%x,%P)",dest,env);
#endif

	/* calculate size of argument data */
	argp = env->Argv;
	while( *argp != Null(char) )
	{
		argc++;
		args += (word)strlen(*argp) + 1;
		argp++;
	}
	args = wordlen(args);

	/* calculate size of environment data */
	envp = env->Envv;
	while( *envp != Null(char) )
	{
		envc++;
		envs += (word)strlen(*envp) + 1;
		envp++;
	}
	envs = wordlen(envs);

	/* and size of object data */
	objp = env->Objv;
	while( *objp != Null(Object) )
	{
		objc++;
		if( *objp != (Object *)MinInt )
		{
			objs += sizeof(ObjDesc) + (word)strlen((*objp)->Name);
			objs = wordlen(objs);
		}
		objp++;
	}

	/* and size of stream data */
	strp = env->Strv;
	while( *strp != Null(Stream) )
	{
		strc++;
		if( *strp != (Stream *)MinInt ) 
		{
			strs += sizeof(StrDesc) + (word)strlen((*strp)->Name);
			strs = wordlen(strs);
		}
		strp++;
	}

	/* we now know how much space we need for the message, allocate */
	/* a buffer							*/
	
	csize = argc+envc+objc+strc+4;
	dsize = args+envs+objs+strs;

	m = (MCB *)Malloc(sizeof(MCB)+csize*sizeof(word)+dsize);

	if( m == NULL ) 
	{
		e = EC_Error+SS_SysLib+EG_NoMemory+EO_Message;
		goto done;
	}

	m->Control = (word *)((word)m + sizeof(MCB));
	m->Data = (byte *)(m->Control+csize);

retry:

	/* New environment protocol is indicated by lsb of subfunction */
	InitMCB(m,MsgHdr_Flags_preserve,dest,reply,FC_Private|FG_SendEnv|1);

	MarshalWord(m,csize);
	MarshalWord(m,dsize);

	/* send off initial message of protocol & get ack	*/

	if((e = XchMsg(m,0)) < Err_Null ) goto done;

	/* Only use new environment if GetEnv set lsb of reply	*/
	/* This allows us to be compatible with old TFMs	*/
	
	newenv = e & 1;
	
	dataport = m->MsgHdr.Reply;

#ifdef SYSDEB
	SysDebug(process)("SendEnv: dataport %x newenv %d",dataport,newenv);
#endif

	InitMCB(m,0,dataport,reply,0);

	/* marshal the argument vector */
	argp = env->Argv;
	while( *argp != NULL )
	{
		/* MarshalString special cases empty strings	*/
		/* we do not want to do this here		*/
		if( **argp != '\0' ) MarshalString(m,*argp);
		else
		{
			word zero = 0;
			MarshalOffset(m);
			MarshalData(m,4,(byte *)&zero);
		}
		argp++;
		/* The following allows us to continue using the standard */
		/* marshalling routines on a control vector > 256	  */
		if( m->MsgHdr.ContSize > 200 )
		{ m->Control += m->MsgHdr.ContSize; m->MsgHdr.ContSize = 0; }
	}
	MarshalWord(m,-1);

	/* now marshal the environment vector */
	envp = env->Envv;
	while( *envp != Null(char) )
	{
		MarshalString(m,*envp);
		envp++;
		if( m->MsgHdr.ContSize > 200 )
		{ m->Control += m->MsgHdr.ContSize; m->MsgHdr.ContSize = 0; }
	}
	MarshalWord(m,-1);

	/* and the objects */
	objp = env->Objv;
	while( *objp != Null(Object) )
	{
		if( *objp != (Object *)MinInt ) MarshalObject(m,*objp);
		else MarshalWord(m,MinInt);
		objp++;
		if( m->MsgHdr.ContSize > 200 )
		{ m->Control += m->MsgHdr.ContSize; m->MsgHdr.ContSize = 0; }
	}
	MarshalWord(m,-1);

	/* and the streams */
	strp = env->Strv;
	while( *strp != Null(Stream) )
	{
		if( *strp != (Stream *)MinInt )
		{
			Stream **p = env->Strv;
			for(; p != strp; p++ ) if( *p == *strp ) break;
			if( p == strp ) MarshalStream(m, *strp);
			else MarshalWord(m,0xFFFF0000U|(word)(p-env->Strv));
		}
		else MarshalWord(m,MinInt);
		strp++;
		if( m->MsgHdr.ContSize > 200 )
		{ m->Control += m->MsgHdr.ContSize; m->MsgHdr.ContSize = 0; }
	}
	MarshalWord(m,-1);

	if( newenv )
	{
		/* the new environment protocol puts both vectors in the */
		/* data part of the message.				 */
		m->MsgHdr.DataSize += (unsigned short)(csize * sizeof(word));
		m->MsgHdr.ContSize = 0;
		m->Data = (byte *)((word)m + sizeof(MCB));
	}
	
	/* send the environment message & get ack */

	/* BLV - used to be OneSec * strs, but this caused overflow */
	m->Timeout = IOCTimeout + OneSec*strc;

	if((e = XchMsg(m,0)) < Err_Null ) goto retry;

#ifdef SYSDEB
	if( m->MsgHdr.Reply != NullPort ) SysDebug(error)("SendEnv: Non-Null Reply port %x",m->MsgHdr.Reply);
#endif
	if( m->MsgHdr.Reply != NullPort ) FreePort(m->MsgHdr.Reply);

	/* now close any streams with CloseOnSend bits set	*/
	strp = env->Strv;
	while( *strp != Null(Stream) )
	{
		if( (*strp != (Stream *)MinInt) && 
		    ((*strp)->Flags & Flags_CloseOnSend) ) 
		    {
		    	CloseStream(*strp);
		    	(*strp)->Type = Type_Pseudo;
		    }
		strp++;
	}

done:
	if( m != Null(MCB)) Free(m);
	FreePort(reply);
	return e;
}

PUBLIC word GetEnv(Port port, Environ *env)
{
	MCB  m;
	word envsize[2];
	Port reply;
	word *control;
	byte *data;
	word e = Err_Null;
	bool newenv = true;

#ifdef SYSDEB
	SysDebug(process)("GetEnv(%x)",env);
#endif

retry:
	m.MsgHdr.Dest = port;
	m.Control = envsize;
	m.Timeout = -1;

	if((e = GetMsg(&m)) < Err_Null ) goto done;

	newenv = e & 1;
	reply = m.MsgHdr.Reply;

#ifdef SYSDEB
	SysDebug(process)("GetEnv 1: replyport %x sizes %d %d newenv %d",reply,envsize[0],envsize[1],newenv);
#endif
	control = (word *)Malloc(envsize[0]*sizeof(word) + envsize[1]);

	if( control == Null(word) ) 
		e = EC_Error+SS_SysLib+EG_NoMemory+EO_Message;
	else e = 1;
	
	InitMCB(&m,0,reply,port,e);

	if((e = PutMsg(&m)) < Err_Null) goto done;

	if( control == Null(word) ) goto done;
		
	/* we are now ready for the environment message */

	m.MsgHdr.Dest = port;
	m.Control = control;
	data = (byte *)(control + envsize[0]);

	if( newenv ) m.Data = (byte *)control;
	else 	     m.Data = data;

	if((e = GetMsg(&m)) < Err_Null ) goto retry;

	reply = m.MsgHdr.Reply;
#ifdef SYSDEB
	SysDebug(process)("GetEnv 2: replyport %x",reply);
#endif

	/* now we can un-marshal the environment data */

	/* argv first */
	env->Argv = (string *)control;
	while( *control != -1 ) 
	{
		*control = (word)&data[*control];
		control++;
	}
	*control++ = NULL;

	/* now envv */
	env->Envv = (string *)control;
	while( *control != -1 )
	{
		*control = (word)&data[*control];
		control++;
	}
	*control++ = NULL;

	/* now objects */
	env->Objv = (Object **)control;
	while( *control != -1 )
	{
		if( *control != MinInt )
		{
			ObjDesc *o = (ObjDesc *)&data[*control];
			*control = (word)NewObject(o->Name,&o->Cap);
		}
		control++;
	}
	*control++ = NULL;
	
	/* and finally streams */
	env->Strv = (Stream **)control;
	while( *control != -1 )
	{
		if( *control != MinInt )
		{
			if( (*control&0xFFFF0000) == 0xFFFF0000 )
			{
				int ix = (int)(*control & 0x0000FFFF);
				*control = (word)(env->Strv[ix]);
			}
			else
			{
				StrDesc *s = (StrDesc *)&data[*control];
				*control = (word)NewStream(s->Name,&s->Cap,s->Mode);
				((Stream *)(*control))->Pos = s->Pos;
			}
		}
		control++;
	}
	*control++ = NULL;

	/* now reply to the sender */

	InitMCB(&m,0,reply,NullPort,e);

	PutMsg(&m);
done:

#ifdef SYSDEB
	SysDebug(process)("GetEnv: %E",e);
#endif

	return e;
}


/*--------------------------------------------------------
-- Exit							--
--							--
-- Terminate the task. Close streams, free resources,   --
-- and quit.						--
-- 							--
--------------------------------------------------------*/

PUBLIC void
Exit( WORD code )
{
	MCB m;

#ifdef SYSDEB
	SysDebug(process)("Exit(%x)",code);
#endif
	TidyUp();

	InitMCB( &m, MsgHdr_Flags_preserve, MyTask->IOCPort, NullPort,
		EC_Error | SS_SysLib | EG_Exception | EE_Kill );

	m.Control         = &code;
	m.MsgHdr.ContSize = 1;

	(void) PutMsg( &m );

	StopProcess();
}

/*--------------------------------------------------------
-- TidyUp						--
--							--
-- Close all object and stream structures.		--
-- 							--
--------------------------------------------------------*/

void TidyUp()
{
	bool	old_terminating;

	Wait(&StreamLock);	/* convenient semaphore	*/
	old_terminating	= Terminating;
	Terminating = true;
	Signal(&StreamLock);

	if (old_terminating) StopProcess();
	
#ifdef SYSDEB
	SysDebug(process)("TidyUp Objects");
#endif
	WalkList(&Objects,Close);
	
#ifdef SYSDEB
	SysDebug(process)("TidyUp Streams");
#endif	

	WalkList(&Streams,Close);

#ifdef SYSDEB
	SysDebug(process)("TidyUp Done");
#endif

}


/*--------------------------------------------------------
-- Alarm						--
--							--
-- Ask IOC to send us an alarm signal in the given	--
-- number of seconds.					--
--							--
--------------------------------------------------------*/

PUBLIC WORD Alarm(word secs)
{
	word rc = Err_Null;
	MCB *mcb;
	Port reply = NewPort();

	mcb = NewMsgBuf(0);

#ifdef SYSDEB
	SysDebug(process)("Alarm(%d)",secs);
#endif

	InitMCB(mcb,MsgHdr_Flags_preserve,
		MyTask->IOCPort,reply,FC_Private|FG_Alarm);

	MarshalWord(mcb,secs);

	if( (rc = XchMsg(mcb,0)) >= Err_Null ) rc = mcb->Control[0];

	FreePort(reply);
#ifdef SYSDEB
	SysDebug(process)("Alarm: %d secs left",rc);
	if( mcb->MsgHdr.Reply != NullPort ) SysDebug(error)("Alarm: Non-Null Reply port %x",mcb->MsgHdr.Reply);
#endif
	if( mcb->MsgHdr.Reply != NullPort ) FreePort(mcb->MsgHdr.Reply);

	FreeMsgBuf(mcb);

	return rc;
}

/*--------------------------------------------------------
-- SetSignalPort					--
--							--
-- Install port to which signals will be delivered as	--
-- messages.						--
--							--
--------------------------------------------------------*/

PUBLIC Port SetSignalPort(Port port)
{
	word rc = Err_Null;
	MCB *mcb = NewMsgBuf(0);
#ifndef __TRAN
	Port replyp = NewPort();
#endif

#ifdef SYSDEB
	SysDebug(process)("SetSignalPort(%x)",port);
#endif

#ifndef __TRAN
	InitMCB(mcb,MsgHdr_Flags_preserve,
		MyTask->IOCPort,replyp,FC_Private|FG_SetSignalPort);
	MarshalWord(mcb,port);
#else
	InitMCB(mcb,MsgHdr_Flags_preserve,
		MyTask->IOCPort,port,FC_Private|FG_SetSignalPort);
#endif

	rc = XchMsg(mcb,0);

#ifdef SYSDEB
	SysDebug(process)("SetSignalPort: %x",rc);
#endif
	port = mcb->MsgHdr.Reply;

	FreeMsgBuf(mcb);
#ifndef __TRAN
	FreePort(replyp);
#endif
	return port;
}


/*--------------------------------------------------------
-- TaskData						--
--							--
-- Get information relevant to this task.		--
-- Note: I was going to call this TaskInfo, but I 	--
-- already have a data structure with that name.	--
-- I suppose in theory this routine should apply to the --
-- IOC for these operations so we don't share memory.	--
-- 							--
--------------------------------------------------------*/

PUBLIC word TaskData(word code, void *value)
{
	word e = Err_Null;

	switch( code )
	{
	case TD_Program:
		*(MPtr *)value = MyTask->Program;
		break;

	case TD_Port:
		*(Port *)value = MyTask->Port;
		break;

	case TD_Parent:
		*(Port *)value = MyTask->Parent;
		break;

	case TD_HeapBase:
		*(byte **)value = MyTask->HeapBase;
		break;

	case TD_Flags:
		*(word *)value = MyTask->Flags;
		break;

	case TD_Pool:
		*(Pool **)value = &MyTask->MemPool;
		break;
		
	default:
		e = EC_Error|SS_SysLib|EG_Invalid;
	}

	return e;
}

/*--------------------------------------------------------
-- SetException						--
--							--
-- Set the tasks exception code and data.		--
--							--
-- In processors other than the transputer this is 	--
-- usually used for syncronous signals such as		--
-- SIGSEGV, SIGSTAK and SIGFPE. The handlers for these	--
-- basic hardware traps use CallException() to execute	--
-- the exception code setup here.			--
-- If the SignalPort has not been setup then this	--
-- exception code will also be forked to for		--
-- asyncronous signals as well.				--
-- SetException is usually called by the CLib startup	--
-- code.						--
-- 							--
--------------------------------------------------------*/

PUBLIC word SetException(WordFnPtr fn, byte *data, word datasize)
{
	byte *d = NULL;

	if (datasize > 0)
	{
		if ((d = (byte *)Malloc(datasize)) == NULL)
			return EC_Error|SS_SysLib|EG_NoMemory;
		else
			memcpy((byte *)d,data,(int)datasize);
	}

#ifdef SYSDEB
	SysDebug(process)("SetException(%x,%P,%d)",fn,data,datasize);
#endif

	MyTask->ExceptCode = (VoidFnPtr)fn;
	MyTask->ExceptData = d;

	return 0;
}

/*--------------------------------------------------------
-- SendSignal						--
--							--
-- Send an exception signal to a child task.		--
-- The stream is one returned from Opening the Object	--
-- returned from .					--
-- 							--
--------------------------------------------------------*/

PUBLIC word SendSignal(Stream *stream, word signal)
{
	word e = Err_Null;
	MCB m;
#ifdef SYSDEB
	SysDebug(process)("SendSignal(%S,%d)",stream,signal);
#endif

	if( (e = CheckStream(stream,C_ReOpen)) != Err_Null ) return e;

	Wait(&stream->Mutex);

	InitMCB(&m,MsgHdr_Flags_preserve,
		stream->Server,stream->Reply,FC_Private+FG_Signal|stream->FnMod);

	m.Control = &signal;
	m.MsgHdr.ContSize = 1;

	e = StreamMsg( &m, stream );

#ifdef SYSDEB
	SysDebug(process)("SendSignal: %E",e);
	
	if( m.MsgHdr.Reply != NullPort ) SysDebug(error)("SendSignal: Non-Null Reply port %x",m.MsgHdr.Reply);
#endif
	
 	if ( m.MsgHdr.Reply != NullPort )
		FreePort(m.MsgHdr.Reply);
	
	stream->Result2 = e;

	Signal(&stream->Mutex);

	return e;
}

/*--------------------------------------------------------
-- DefaultException					--
--							--
-- Default Exception handler, called from processor	--
-- manager. Simply performs an exit.			--
--							--
--------------------------------------------------------*/

PUBLIC word DefaultException(word reason, void *data)
{
	MCB m;
	word e;
#ifdef SYSDEB
	SysDebug(process)("DefaultException(%d,%P)",reason,data);
#endif
	TidyUp();

	InitMCB(&m,MsgHdr_Flags_preserve,MyTask->IOCPort,NullPort,
		EC_Error|SS_SysLib|EG_Exception|EE_Kill);

	e = 1;
	m.Control = &e;
	m.MsgHdr.ContSize = 1;

	e = PutMsg(&m);

	return 0;
	
	reason = reason;	/* keeps compiler happy */
	data = data;
}


/*--------------------------------------------------------
-- InitProgramInfo					--
-- GetProgramInfo					--
--							--
-- Program status protocol.				--
--							--
--------------------------------------------------------*/

static word InitProgramInfo1(Stream *stream, word mask );

PUBLIC word InitProgramInfo(Stream *stream, word mask )
{
	word e = Err_Null;
		
	if( (e = CheckStream(stream,C_ReOpen)) != Err_Null ) return e;

	Wait(&stream->Mutex);

	e = InitProgramInfo1(stream,mask);
	
	Signal(&stream->Mutex);
	
	return e;
}

static word InitProgramInfo1(Stream *stream, word mask )
{
	word tfsize = 0;
	word resbuf[2];		/* just below vsp threshold */
	word e = Err_Null;
	MCB m;

#ifdef SYSDEB
	SysDebug(process)("InitProgramInfo(%S,%x)",stream,mask);
#endif

	InitMCB(&m,MsgHdr_Flags_preserve,
		stream->Server,stream->Reply,FC_GSP+FG_ProgramInfo|stream->FnMod);

	resbuf[0] = mask;
	m.Control = resbuf;
	m.MsgHdr.ContSize = 1;

	if( (e = StreamMsg( &m, stream )) >= Err_Null )
		mask = resbuf[0],tfsize = resbuf[1];

	if( e < Err_Null ) stream->Result2 = e;
	else stream->Result2 = mask;
	
#ifdef SYSDEB
	SysDebug(process)("InitProgramInfo: %d mask/error %x port %x",tfsize,stream->Result2,stream->Reply);
	if( m.MsgHdr.Reply != NullPort ) SysDebug(error)("InitProgramInfo: Non-Null Reply port %x",m.MsgHdr.Reply);
#endif
	return tfsize;
}

PUBLIC word GetProgramInfo(Stream *stream, word *status_vec, word timeout)
{
	MCB m;
	word e;
#ifdef SYSDEB
	SysDebug(process)("GetProgramInfo(%S,%P,%d)",stream,status_vec,timeout);
#endif

	if( (e = CheckStream(stream,C_ReOpen)) != Err_Null ) return e;

	Wait(&stream->Mutex);

	InitMCB(&m,0,stream->Reply,0,0);
	m.Timeout = timeout;
	m.Control = status_vec;

	while( (e = GetMsg(&m)) < Err_Null )
	{
#ifdef SYSDEB
		SysDebug(error)("GetProgramInfo: GetMsg error %x",e);
#endif
		if( e == EK_Timeout ) break;
		if( InitProgramInfo1(stream, PS_Terminate) == 0) break;

		InitMCB(&m,0,stream->Reply,0,0);
		m.Timeout = timeout;
	}

#ifdef SYSDEB
	SysDebug(process)("GetProgramInfo %S: %E",stream,e);
	if( m.MsgHdr.Reply != NullPort ) SysDebug(error)("GetProgramInfo: Non-Null Reply port %x",m.MsgHdr.Reply);
#endif
	if( m.MsgHdr.Reply != NullPort ) FreePort(m.MsgHdr.Reply);
	Signal(&stream->Mutex);
	
	return e;
}

/* end of task.c */
@


1.18
log
@It was possible for multiple threads (e.g. main() and signal handler)
to invoke Exit() at the same time. This could have caused confusion.
The code now guarantees that only one thread will continue to the
TidyUp() stage.
@
text
@d19 1
a19 1
/* $Id: task.c,v 1.17 1992/11/20 18:13:01 nick Exp $ */
d56 1
a56 1
	info = Malloc(isize);
d743 1
a743 1
		if ((d = Malloc(datasize)) == NULL)
@


1.17
log
@MyTask->Program converted to MPtr.
@
text
@d19 1
a19 1
/* $Id: task.c,v 1.15 1992/09/04 10:32:33 nickc Exp nickc $ */
d561 1
d563 2
d566 1
d568 2
@


1.16
log
@minor cosmetic change
@
text
@d683 1
a683 1
		*(Program **)value = MyTask->Program;
@


1.15
log
@fixed compile time warnings
@
text
@d19 1
a19 1
/* $Id: task.c,v 1.14 1992/06/17 10:08:44 paul Exp nickc $ */
d535 1
a535 1
	word e;
a538 1

d541 2
a542 2
	InitMCB(&m,MsgHdr_Flags_preserve,MyTask->IOCPort,NullPort,
		EC_Error|SS_SysLib|EG_Exception|EE_Kill);
d544 1
a544 1
	m.Control = &code;
d547 1
a547 1
	e = PutMsg(&m);
@


1.14
log
@made signal handling generic
@
text
@d19 1
a19 1
/* $Id: task.c,v 1.13 1992/05/01 16:51:59 nickc Exp nickc $ */
d531 2
a532 2
PUBLIC void Exit(code)
WORD code;
@


1.13
log
@removed most compiler warnings
@
text
@d19 1
a19 1
/* $Id: task.c,v 1.12 1991/08/22 15:13:59 bart Exp nickc $ */
d634 1
a634 1
#ifdef __ARM
d642 1
a642 1
#ifdef __ARM
d659 1
a659 1
#ifdef __ARM
d782 1
a782 1
	
d785 1
d788 4
a791 1
	if( m.MsgHdr.Reply != NullPort ) FreePort(m.MsgHdr.Reply);
d793 1
d795 1
@


1.12
log
@Fixed major bug in SendEnv(). The timeout for the main message transaction
has to depend on the number of streams in the environment, so that SendEnv()
does not time out when starting up large processor farms. Unfortunately
it depended on ``strs'', the size of the stream data, typically between
several 100 bytes and upto 64K for big farms, rather than on ``strc'' which
is the count of the number of streams. Multiplying large sizes by OneSec
caused overflow, hence the message timeouts were negative and the
transaction failed.
@
text
@d19 1
a19 1
/* $Id: task.c,v 1.11 1991/06/17 11:04:38 bart Exp bart $ */
d38 1
a38 1
	word isize = sizeof(LoadInfo) + strlen(obj->Name) + 1;
d114 1
a114 1
	word namelen = strlen(prog->Name) + 1;
d213 1
a213 1
		args += strlen(*argp) + 1;
d223 1
a223 1
		envs += strlen(*envp) + 1;
d235 1
a235 1
			objs += sizeof(ObjDesc) + strlen((*objp)->Name);
d248 1
a248 1
			strs += sizeof(StrDesc) + strlen((*strp)->Name);
d349 1
a349 1
			else MarshalWord(m,0xFFFF0000|(p-env->Strv));
d362 1
a362 1
		m->MsgHdr.DataSize += csize * sizeof(word);
d494 1
a494 1
				int ix = *control & 0x0000FFFF;
d741 1
a741 1
			memcpy((byte *)d,data,datasize);
d750 2
d819 2
@


1.11
log
@Fixed bug in Execute() routine. The error code of the program was filled
in iff the program was executed locally. Hence TFM error codes were
always discarded.
@
text
@d19 1
a19 1
/* $Id: task.c,v 1.10 1991/06/03 09:30:28 nick Exp bart $ */
d369 2
a370 1
	m->Timeout = IOCTimeout + OneSec*strs;
@


1.10
log
@Timeout in SendEnv increased to depend on number of streams passed,
if a large number were passed, and all needed to be opened, it could
timeout before GetEnv had succeeded.
@
text
@d19 1
a19 1
/* $Id: task.c,v 1.9 1991/03/11 17:08:45 nick Exp nick $ */
d160 2
a164 1
		prog->Result2 = controller->Result2;
@


1.9
log
@New environment passing protocol implemented. This now has a limit of 64k
on the size of all data in the environment, eliminating the 255 item
limit. The implementation here is such that it will use the old protocol
with old TFMs and nuclei.
@
text
@d19 1
a19 1
/* $Id: task.c,v 1.8 91/02/14 15:17:01 paul Exp $ */
d367 2
@


1.8
log
@Cleaned up SetException for 0 sized data and made NEWSIGNALS std practice.
@
text
@d19 1
a19 1
/* $Id: task.c,v 1.7 91/02/11 17:09:56 nick Exp $ */
d201 1
a202 1

a270 1
	InitMCB(m,MsgHdr_Flags_preserve,dest,reply,FC_Private|FG_SendEnv);
d272 3
d282 5
d290 1
a290 1
	SysDebug(process)("SendEnv: dataport %x",dataport);
d309 4
d322 2
d334 2
d352 2
d357 9
a388 1
/*debug("SendEnv done %x",e);*/
d402 1
a403 1

d415 1
d419 1
a419 1
	SysDebug(process)("GetEnv 1: replyport %x sizes %d %d",reply,envsize[0],envsize[1]);
d425 1
d437 4
a440 1
	m.Data = data = (byte *)(control + envsize[0]);
@


1.7
log
@MCB reinitialized in GetProgramInfo on error, ReOpen may have changed reply
port.
@
text
@d19 1
a19 1
/* $Id: task.c,v 1.6 91/02/07 16:02:56 paul Exp $ */
a587 1
#ifdef NEWSIGNALS
a629 1
#endif
d684 11
d700 1
a700 1
	byte *d = Malloc(datasize);
d702 7
a708 1
	if( d == NULL ) return EC_Error|SS_SysLib|EG_NoMemory;
a709 2
	memcpy((byte *)d,data,datasize);

a715 1
	
a771 1

@


1.6
log
@SignalPort now passed in Control vector (ARM only for now)
@
text
@d19 1
a19 1
/* $Id: task.c,v 1.5 90/11/01 15:41:00 nick Exp $ */
d852 1
a852 1
		SysDebug(process)("GetProgramInfo: GetMsg error %x",e);
d856 3
@


1.5
log
@Load and Execute set object timeout to LoadTimeout for Create, they also
check that the object to be Loaded or Executed is valid.
SendEnv does not free CloseOnSend streams, only pseudo-izes them.
GetProgramInfo can now recover from errors.
@
text
@d19 1
a19 1
/* $Id: task.c,v 1.4 90/09/25 19:02:52 paul Exp $ */
d573 1
a573 1
	
d600 4
a603 1
	MCB *mcb;
a604 2
	mcb = NewMsgBuf(0);

d609 1
d611 4
d616 1
d626 3
a628 1

@


1.4
log
@a cast in time is worth 9 (ARM C compilers)
@
text
@d19 1
a19 1
/* $Id: task.c,v 1.3 90/09/12 16:06:28 nick Exp Locker: nick $ */
d39 2
a40 1

d47 6
d80 3
d97 1
a97 1
	return o;	
d122 9
d154 3
d354 5
a358 1
		    ((*strp)->Flags & Flags_CloseOnSend) ) Close(*strp);
d529 2
d776 2
d780 15
d799 1
a799 1
	
a803 4
	if( (e = CheckStream(stream,C_ReOpen)) != Err_Null ) return e;

	Wait(&stream->Mutex);

d816 1
a820 1
	Signal(&stream->Mutex);
d839 9
a847 2
		
	e = GetMsg(&m);	
d850 1
a850 1
	SysDebug(process)("GetProgramInfo: %E",e);
@


1.3
log
@special handling for empty argv strings added to SendEnv
@
text
@d19 1
a19 1
/* $Id$ */
d277 1
a277 1
			MarshalData(m,4,&zero);
@


1.2
log
@*** empty log message ***
@
text
@d268 1
a268 1
	while( *argp != Null(char) )
d270 9
a278 1
		MarshalString(m,*argp);
@


1.1
log
@Initial revision
@
text
@d19 1
a19 5
/* $Id$
 *
 * $Log$
 *
 */
@
