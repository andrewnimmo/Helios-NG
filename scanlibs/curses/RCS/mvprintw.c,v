head	1.3;
access;
symbols
	Helios_1_3_1:1.3
	Helios_C40_1_3_Official_Release:1.2
	Alenia_release:1.2
	Helios1_3:1.2
	C40_Field_Test_2:1.2
	C40_Field_Test_R1:1.2
	Helios13_beta:1.2
	Helios1_2_2:1.2
	Helios1_2_2Beta:1.2
	Helios1_2_1:1.1;
locks; strict;
comment	@ * @;


1.3
date	93.08.12.10.23.50;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	91.04.22.16.50.35;	author al;	state Exp;
branches;
next	1.1;

1.1
date	91.03.07.15.51.38;	author martyn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@fixed compile time warnings
@
text
@/*
 * Copyright (c) 1981 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#ifdef lint
static char sccsid[] = "@@(#)mvprintw.c	5.4 (Berkeley) 6/30/88";
#endif /* not lint */

# include	"curses.ext"
# ifdef __STDC__
# include	<stdarg.h>
# endif

/*
 * implement the mvprintw commands.  Due to the variable number of
 * arguments, they cannot be macros.  Sigh....
 *
 */
#ifdef __STDC__
int	mvprintw(int y, int x, char *fmt, ...)
#else
int mvprintw(y, x, fmt, args)
reg int		y, x;
char		*fmt;
int		args; 
#endif
{

	char	buf[512];
#ifdef __STDC__
	va_list	ap;
#endif

	if (move(y, x) != OK)
		return ERR;
# ifdef __STDC__
	va_start(ap,fmt);
	(void) vsprintf(buf, fmt, ap);
	va_end(ap);
# else
	(void) vsprintf(buf, fmt, &args);
# endif
	return waddstr(stdscr, buf);
}

#ifdef __STDC__
int	mvwprintw(WINDOW *win, int y, int x, char *fmt, ...)
#else
int mvwprintw(win, y, x, fmt, args)
reg WINDOW	*win;
reg int		y, x;
char		*fmt;
int		args;
#endif
{

	char	buf[512];
# ifdef __STDC__
	va_list	ap;
# endif

	if (move(y, x) != OK)
		return ERR;
# ifdef __STDC__
	va_start(ap,fmt);
	(void) vsprintf(buf, fmt, ap);
	va_end(ap);
# else
	(void) vsprintf(buf, fmt, &args);
# endif
	return waddstr(win, buf);
}
@


1.2
log
@Made to conform to ANSI standard
@
text
@d18 1
a18 1
#ifndef lint
@


1.1
log
@Initial revision
@
text
@d24 1
a24 1
# include	"stdarg.h"
d32 4
a35 2

mvprintw(y, x, fmt, args)
d38 3
a40 1
int		args; {
d59 4
a62 1
mvwprintw(win, y, x, fmt, args)
d66 3
a68 1
int		args; {
@
