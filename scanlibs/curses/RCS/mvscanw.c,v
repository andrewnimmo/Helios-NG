head	1.4;
access;
symbols
	Helios_1_3_1:1.4
	Helios_C40_1_3_Official_Release:1.3
	Alenia_release:1.3
	Helios1_3:1.3
	C40_Field_Test_2:1.3
	C40_Field_Test_R1:1.3
	Helios13_beta:1.3
	Helios1_2_2:1.3
	Helios1_2_2Beta:1.3
	Helios1_2_1:1.2;
locks; strict;
comment	@ * @;


1.4
date	93.08.12.10.23.37;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	91.04.22.16.50.35;	author al;	state Exp;
branches;
next	1.2;

1.2
date	91.03.11.12.59.44;	author al;	state Exp;
branches;
next	1.1;

1.1
date	91.03.07.15.51.39;	author martyn;	state Exp;
branches;
next	;


desc
@@


1.4
log
@fixed compile time warnings
@
text
@/*
 * Copyright (c) 1981 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#ifdef lint
static char sccsid[] = "@@(#)mvscanw.c	5.3 (Berkeley) 6/30/88";
#endif /* not lint */

# include	"curses.ext"
#ifdef __STDC__
#include <stdarg.h>
#endif

/*
 * implement the mvscanw commands.  Due to the variable number of
 * arguments, they cannot be macros.  Another sigh....
 *
 */

#ifdef __STDC__
int	mvscanw(int y, int x, char *fmt, ...)
#else
int	mvscanw(y, x, fmt, args)
reg int		y, x;
char		*fmt;
int		args;
#endif
{
#ifdef __STDC__
        va_list ap;
        int result;
        
        va_start(ap,fmt);
        result = move(y, x) == OK ? _sscans(stdscr, fmt, ap) : ERR;
        va_end(ap);
        return (result);
#else
	return move(y, x) == OK ? _sscans(stdscr, fmt, &args) : ERR;
#endif
}

#ifdef __STDC__
int	mvwscanw(WINDOW *win, int y, int x, char *fmt, ...)
#else
int	mvwscanw(win, y, x, fmt, args)
reg WINDOW	*win;
reg int		y, x;
char		*fmt;
int		args;
#endif
{
#ifdef __STDC__
        va_list ap;
        int result;

        va_start(ap,fmt);
        result = wmove(win, y, x) == OK ? _sscans(win, fmt, ap) : ERR;
        va_end(ap);
        return (result);
#else
	return wmove(win, y, x) == OK ? _sscans(win, fmt, &args) : ERR;
#endif
}
@


1.3
log
@Made to conform to ANSI standard
@
text
@d18 1
a18 1
#ifndef lint
@


1.2
log
@ANSI variable argument handling included
@
text
@d24 1
a24 1
#include "stdarg.h"
d33 4
a36 1
mvscanw(y, x, fmt, args)
d39 3
a41 1
int		args; {
d55 4
a58 1
mvwscanw(win, y, x, fmt, args)
d62 3
a64 1
int		args; {
@


1.1
log
@Initial revision
@
text
@d23 3
d37 9
a45 1

d47 1
d55 3
d59 5
d65 1
@
