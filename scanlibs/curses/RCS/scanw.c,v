head	1.7;
access;
symbols
	Helios_1_3_1:1.7
	Helios_C40_1_3_Official_Release:1.6
	Alenia_release:1.6
	Helios1_3:1.6
	C40_Field_Test_2:1.6
	C40_Field_Test_R1:1.6
	Helios13_beta:1.6
	Helios1_2_2:1.6
	Helios1_2_2Beta:1.6
	Helios1_2_1:1.4;
locks; strict;
comment	@ * @;


1.7
date	93.08.12.10.34.13;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	91.05.03.18.27.46;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	91.04.22.16.50.35;	author al;	state Exp;
branches;
next	1.4;

1.4
date	91.03.11.13.01.16;	author al;	state Exp;
branches;
next	1.3;

1.3
date	91.03.08.18.44.45;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	91.03.08.15.03.25;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	91.03.07.15.51.47;	author martyn;	state Exp;
branches;
next	;


desc
@@


1.7
log
@fixed compile time warnings
@
text
@/*
 * Copyright (c) 1981 Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 */

#ifdef lint
static char sccsid[] = "@@(#)scanw.c	5.3 (Berkeley) 6/30/88";
#endif /* not lint */

/*
 * scanw and friends
 *
 */

# include	"curses.ext"
# ifdef __STDC__
# include	<stdarg.h>
int  _sscans(WINDOW *win, char *fmt, ...);
# endif

#include <string.h> /* for strlen() */
		       
/*
 *	This routine implements a scanf on the standard screen.
 */
# ifdef __STDC__
int 	scanw(char *fmt, ...) {
        va_list ap;
	int nargs;

        va_start(ap,fmt);
	nargs = _sscans(stdscr, fmt, ap);
        va_end(ap);
	return (nargs);
}
# else
scanw(fmt, args)
char	*fmt;
int	args; {
	return _sscans(stdscr, fmt, &args);
}
# endif

/*
 *	This routine implements a scanf on the given window.
 */
 
#ifdef __STDC__
int	wscanw(WINDOW *win, char *fmt, ...) {
        va_list ap;
        int nargs;

        va_start(ap,fmt);
        nargs = _sscans(win, fmt, ap);
        va_end(ap);
        return (nargs);
}
#else
int wscanw(win, fmt, args)
WINDOW	*win;
char	*fmt;
int	args; {
	return _sscans(win, fmt, &args);
}
# endif

/*
 *	This routine actually executes the scanf from the window.
 *
 *	This is really a modified version of "sscanf".  As such,
 * it assumes that sscanf interfaces with the other scanf functions
 * in a certain way.  If this is not how your system works, you
 * will have to modify this routine to use the interface that your
 * "sscanf" uses.
 */
#ifdef __STDC__
int  _sscans(WINDOW *win, char *fmt, ...)
#else
int _sscans(win, fmt, args)
WINDOW	*win;
char	*fmt;
int	*args;
#endif
{
	char	buf[100];
	FILE	junk;
#ifdef __STDC__
        va_list ap;
        int nargs;
#endif

	junk._flag = _IOREAD|_IOSTRG;
	junk._base = junk._ptr = (unsigned char *)buf;
	if (wgetstr(win, buf) == ERR)
		return ERR;
	junk._icnt = strlen(buf);
	junk._ocnt = strlen(buf);
#ifdef __HELIOS
#ifdef __STDC__
        va_start(ap,fmt);
        nargs = fscanf(&junk, fmt, ap);
        va_end(ap);
        return (nargs);
#else
	return fscanf(&junk, fmt, args);
#endif
#else
#ifdef __STDC__
        va_start(ap,fmt);
        nargs = _doscan(&junk, fmt, ap);
        va_end(ap);
        return (nargs);
# else
	return _doscan(&junk, fmt, args);
#endif
#endif
}
@


1.6
log
@ansified!
@
text
@d18 1
a18 1
#ifndef lint
d33 2
@


1.5
log
@Made to conform to ANSI standard
@
text
@a94 4

#ifdef __HELIOS
	unsigned char	buf[100];
#else
a95 1
#endif
d103 1
a103 1
	junk._base = junk._ptr = buf;
@


1.4
log
@ANSI variable argument handling included
@
text
@d29 2
a30 1
# include	"stdarg.h"
d36 2
a37 4
scanw(fmt, args)
char	*fmt;
int	args; {
#ifdef __STDC__
d45 1
d47 3
d51 1
d53 1
a53 1
}
d57 1
a57 4
wscanw(win, fmt, args)
WINDOW	*win;
char	*fmt;
int	args; {
d59 1
d67 6
a72 1
# else
d74 1
d76 1
a76 1
}
d86 4
a89 1
_sscans(win, fmt, args)
d92 3
a94 1
int	*args; {
@


1.3
log
@bodge fix of scanw routines, they no longer require a non existent function.
Closer inspection reveals that variable argument handling probably doensn't
work at all for wscanw(), scanw() mvsacnw(), etc.
@
text
@d28 3
d38 3
d42 5
d48 1
d57 3
d61 5
d67 1
d89 4
d101 6
d108 1
d110 6
d117 1
@


1.2
log
@fixed to compile for ARM, access FILE structure sensibly and fix bad SetAttribute
@
text
@d75 3
d79 1
@


1.1
log
@Initial revision
@
text
@d62 3
d66 1
@
