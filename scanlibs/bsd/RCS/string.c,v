head	1.5;
access;
symbols
	Helios_1_3_1:1.5
	Helios_C40_1_3_Official_Release:1.5
	Alenia_release:1.5
	Helios1_3:1.5
	C40_Field_Test_2:1.5
	C40_Field_Test_R1:1.5
	Helios13_beta:1.5
	Helios1_2_2:1.4
	Helios1_2_2Beta:1.4
	Helios1_2_1:1.4
	Helios1_2:1.4
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.5
date	92.06.16.15.28.14;	author craig;	state Exp;
branches;
next	1.4;

1.4
date	90.11.21.18.39.16;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	90.11.16.16.43.14;	author nick;	state Exp;
branches;
next	1.2;

1.2
date	90.09.25.20.24.00;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.13.39.36;	author nick;	state Exp;
branches;
next	;


desc
@bcopy etc.
@


1.5
log
@Changed bcopy() - now calls memmove() instead of memcpy(). This fixes Bug
842 which stated that bcopy() could not cope with overlapping memory
blocks
@
text
@/* $Id: string.c,v 1.4 90/11/21 18:39:16 paul Exp $ */
#include <string.h>
#include <ctype.h>

#if 0 /* BUG 842 - bcopy() does not handle overlapping memory blocks */
extern void   bcopy(char *a,char *b,int c) { memcpy(b,a,c); }
#else
extern void   bcopy(char *a,char *b,int c) { memmove(b,a,c); }
#endif /* BUG 842 */
extern void   bzero(char *a,int c) { memset(a,0,c); }
extern int    bcmp(char *a,char *b,int c) { return memcmp(a,b,c); }
extern char * index(char *a,char b) { return strchr(a,b); }
extern char * rindex(char *a,char b) { return strrchr(a,b); }


extern int strcasecmp(char *a, char *b)
{
    for (;;)
    {   char c1 = *a++,c2 = *b++;
    	c1 = islower(c1)?toupper(c1):c1;
    	c2 = islower(c2)?toupper(c2):c2;
        if (c1 != c2) return c1 - c2;
        if (c1 == 0) return 0;     /* no need to check c2 */
    }
}

extern int strncasecmp(char *a, char *b, int n)
{
    while( n-- > 0 )
    {   char c1 = *a++,c2 = *b++;
    	c1 = islower(c1)?toupper(c1):c1;
    	c2 = islower(c2)?toupper(c2):c2;
        if (c1 != c2) return c1 - c2;
        if (c1 == 0) return 0;     /* no need to check c2 */
    }
    return 0;	
}

@


1.4
log
@corrected to void return values from bcopy and bzero
@
text
@d1 1
a1 1
/* $Id: string.c,v 1.3 90/11/16 16:43:14 nick Exp $ */
d5 1
d7 3
@


1.3
log
@bcopy and bzero now return void
@
text
@d1 1
a1 1
/* $Id: string.c,v 1.2 90/09/25 20:24:00 paul Exp Locker: nick $ */
d5 2
a6 2
extern void   bcopy(char *a,char *b,int c) { return memcpy(b,a,c); }
extern void   bzero(char *a,int c) { return memset(a,0,c); }
@


1.2
log
@arm changes, plus fix to index and rindex spec.
@
text
@d1 1
a1 1
/* $Id: string.c,v 1.1 90/09/05 13:39:36 nick Exp $ */
d5 2
a6 2
extern char * bcopy(char *a,char *b,int c) { return memcpy(b,a,c); }
extern char * bzero(char *a,int c) { return memset(a,0,c); }
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $Id$ */
d8 2
a9 2
extern char * index(char *a,char *b) { return strchr(a,b); }
extern char * rindex(char *a,char *b) { return strrchr(a,b); }
@
