head	1.2;
access;
symbols
	Helios_1_3_1:1.2
	Helios_C40_1_3_Official_Release:1.2
	Alenia_release:1.1
	Helios1_3:1.1
	C40_Field_Test_2:1.1
	C40_Field_Test_R1:1.1
	Helios13_beta:1.1
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1
	Helios1_2:1.1
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.2
date	93.04.20.08.38.18;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.13.37.24;	author nick;	state Exp;
branches;
next	;


desc
@inet_network()
@


1.2
log
@removed compile time warnings
@
text
@/* $Id: inetnet.c,v 1.1 1990/09/05 13:37:24 nick Exp nickc $ */
/*LINTLIBRARY*/

#include <sys/types.h>
#include <ctype.h>


/*
 * Internet network address interpretation routine.
 * The library routines call this routine to interpret
 * network numbers.
 */
u_long
inet_network(register char * cp )
{
register u_long val, base, n;
register char c;
u_long parts[4], *pp = parts;
register int i;

again:
	val = 0; base = 10;
	if (*cp == '0')
		base = 8, cp++;
	if (*cp == 'x' || *cp == 'X')
		base = 16, cp++;
	while ( (c = *cp) != '\0' ) {
		if (isdigit(c)) {
			val = (val * base) + ((u_long)c - '0');
			cp++;
			continue;
		}
		if (base == 16 && isxdigit(c)) {
			val = (val << 4) + ((u_long)c + 10 - (islower(c) ? 'a' : 'A'));
			cp++;
			continue;
		}
		break;
	}
	if (*cp == '.') {
		if (pp >= parts + 4)
			return (-1);
		*pp++ = val, cp++;
		goto again;
	}
	if (*cp && !isspace(*cp))
		return (-1);
	*pp++ = val;
	n = pp - parts;
	if (n > 4)
		return (-1);
	for (val = 0, i = 0; i < n; i++) {
		val <<= 8;
		val |= parts[i] & 0xff;
	}
	return (val);
}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 1
/* $Id$ */
d14 1
a14 2
inet_network(cp)
register char *cp;
d29 1
a29 1
			val = (val * base) + (c - '0');
d34 1
a34 1
			val = (val << 4) + (c + 10 - (islower(c) ? 'a' : 'A'));
@
