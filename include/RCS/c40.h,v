head	1.27;
access;
symbols
	Helios_1_3_1:1.27
	Helios_C40_1_3_Official_Release:1.25
	Helios-C40:1.25
	Alenia_release:1.25
	Helios1_3:1.17
	C40_Field_Test_2:1.17
	C40_Field_Test_R1:1.8
	Helios13_beta:1.6;
locks; strict;
comment	@ * @;


1.27
date	93.08.06.15.01.03;	author nickc;	state Exp;
branches;
next	1.26;

1.26
date	93.08.05.14.16.59;	author nickc;	state Exp;
branches;
next	1.25;

1.25
date	92.12.04.16.41.56;	author nickc;	state Exp;
branches;
next	1.24;

1.24
date	92.12.04.15.38.34;	author nickc;	state Exp;
branches;
next	1.23;

1.23
date	92.12.03.16.48.51;	author paul;	state Exp;
branches;
next	1.22;

1.22
date	92.12.02.15.34.42;	author nickc;	state Exp;
branches;
next	1.21;

1.21
date	92.11.25.11.41.19;	author nick;	state Exp;
branches;
next	1.20;

1.20
date	92.11.18.14.51.56;	author paul;	state Exp;
branches;
next	1.19;

1.19
date	92.11.12.17.18.21;	author paul;	state Exp;
branches;
next	1.18;

1.18
date	92.11.11.15.25.41;	author nickc;	state Exp;
branches;
next	1.17;

1.17
date	92.09.24.16.08.32;	author paul;	state Exp;
branches;
next	1.16;

1.16
date	92.09.24.15.52.52;	author paul;	state Exp;
branches;
next	1.15;

1.15
date	92.09.23.09.02.35;	author paul;	state Exp;
branches;
next	1.14;

1.14
date	92.09.03.09.12.37;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	92.08.18.09.58.11;	author paul;	state Exp;
branches;
next	1.12;

1.12
date	92.07.31.15.54.47;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	92.07.27.15.48.04;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	92.07.27.15.00.39;	author paul;	state Exp;
branches;
next	1.9;

1.9
date	92.07.21.09.04.35;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	92.06.30.20.16.05;	author paul;	state Exp;
branches;
next	1.7;

1.7
date	92.06.29.19.10.56;	author paul;	state Exp;
branches;
next	1.6;

1.6
date	92.06.26.17.48.52;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	92.06.03.16.44.11;	author paul;	state Exp;
branches;
next	1.4;

1.4
date	92.05.14.11.57.02;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	92.04.24.08.37.46;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	92.04.12.19.55.38;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	91.12.11.17.16.01;	author paul;	state Exp;
branches;
next	;


desc
@c40 specific manifests
,
@


1.27
log
@increase stack giard size to 96 words
@
text
@/*
 * File:	c40.h
 * Subsystem:	Helios/C40 implementation
 * Author:	P.A.Beskeen
 * Date:	Nov '91
 *
 * Description: 'C40 specific Helios manifests
 *
 *
 * RcsId: $Id: c40.h,v 1.26 1993/08/05 14:16:59 nickc Exp nickc $
 *
 * (C) Copyright 1991, 1992 Perihelion Software Ltd.
 *    All RIghts Reserved.
 * 
 */


#ifndef __c40_h
#define __c40_h

#include <helios.h>

/* Define 'C40 interrupt manifests */
/* NMI, IIOF0-3 and TINIT1 can be used */
#define	InterruptVectors	6

/* define 'vector' number passed via SetEvent */
#define INTR_NMI		0
#define INTR_IIOF0		1
#define INTR_IIOF1		2
#define INTR_IIOF2		3
#define INTR_IIOF3		4
#define INTR_TINT1		5


/* 'C40 Procedure Call Standard (PCS) manifests */

/* The number of arguments passed in registers as defined by the 'C40 PCS */
#define PCS_ARGREGS	4

/* The number of bytes held as a stack overflow area. The true end of the */
/* stack is pointed to by the user stack end register + PCSSTACKGUARD     */
#define PCS_STACKGUARD	(96 * sizeof(word))
/* It has been experimentally determined that 64 (the old value) is
 * insufficient, since some kernel routines (which do not stack check) need
 * more than 64 words of stack.  TaskInit() is an example.
 */

/* Notes what type of user stack is used by the PCS */
#define PCS_FULLDECENDING


/* 'C40 specific structures */

#ifdef ALLOCDMA

/* DMA request structure, held on Root.DMAReqQ */

typedef struct DMAReq
  {
    struct DMAReq *	next;
    word		endtime;
    SaveState *		state;
    word		link;		/* -1 if not a link DMA request */
    word		flags;		/* DMA_Tx / DMA_Rx denotes split mode */
    word		rc;
  }
DMAReq;

#define DMA_Tx	1		/* Requesting primary split mode channel */
#define DMA_Rx	2		/* Requesting auxillary split mode channel */

/* DMA Allocation structure, held on Root.DMAFreeQ */

typedef struct DMAFree
  {
    struct DMAFree *	next;
    word		DMAEng;
  }
DMAFree;

#endif /* ALLOCDMA */


/* This structure defines the contents of the TIM-40 IDROM. The IDROM */
/* characterises the C40 system Helios is running on. If the board has */
/* no built-in IDROM a pseudo one is constructed and sent by the I/O Server. */
/* For more information see the TIM-40 specification */

typedef struct IDROM
  {
    word	SIZE;		/* self inclusive size of this block */

    short	MAN_ID;		/* TIM-40 module manufacturers ID */
    byte	CPU_ID;		/* CPU type (00 = C40) */
    byte	CPU_CLK;	/* CPU cycle time (60ns = 59) */

    short	MODEL_NO;	/* TIM-40 module model number */
    byte	REV_LVL;	/* module revision level */
    byte	RESERVED;	/* currently unused (align to word boundary) */

    word	GBASE0;		/* address base of global bus strobe 0 */
    word	GBASE1;		/* address base of global bus strobe 1 */
    word	LBASE0;		/* address base of local bus strobe 0 */
    word	LBASE1;		/* address base of local bus strobe 1 */

				/* sizes are in words */
    word	GSIZE0;		/* size of memory on global bus strobe 0 */
    word	GSIZE1;		/* size of memory on global bus strobe 1 */
    word	LSIZE0;		/* size of memory on local bus strobe 0 */
    word	LSIZE1;		/* size of memory on local bus strobe a */

    word	FSIZE;		/* size of fast ram pool (inc. on-chip RAM) */

	/* Each of the following bytes contains two nibbles, one for */
	/* strobe 0 and one for strobe 1. The nibbles define how many cycles */
	/* it takes to read a word from that strobes associated memory. */
    byte	WAIT_G;		/* within page on global bus */
    byte	WAIT_L;		/* within page on local bus */
    byte	PWAIT_G;	/* outside page on global bus */
    byte	PWAIT_L;	/* outside page on local bus */

    word	TIMER0_PERIOD;	/* period time for 1ms interval on timer 0 */
    word	TIMER1_PERIOD;	/* period for DRAM refresh timer (optional) */
    short	TIMER0_CTRL;	/* contents set TCLK0 to access RAM not IDROM */
    short	TIMER1_CTRL;	/* sets up timer to refresh DRAM (optional) */

    word	GBCR;		/* global bus control register */
    word	LBCR;		/* local bus control register */

    word	AINIT_SIZE;	/* total size of auto-initialisation data */
  }
IDROM;

/* Initialisation Block conatins size, address to load to and data to load. */
/* B_SIZE of zero ends the IDROM load sequence.				    */

typedef struct IDROMBLOCK
  {
    word	B_SIZE;				/* size of data block */
    word	B_ADDR;				/* address to data @@ */
    word	B_DATASTART[ 1 ];		/* data block */
  }
IDROMBLOCK;


typedef struct stack_chunk
  {
    struct stack_chunk * 	next;			/* link to next stack chunk	 	   */
    struct stack_chunk *	prev;			/* link to previous stack chunk		   */    
    unsigned long int		link_register;		/* return address before chunk was made    */
    unsigned long int		stack_end_pointer;	/* end of previous stack chunk		   */
    unsigned long int		stack_pointer;		/* stack pointer inside previous chunk     */
    unsigned long int		size;			/* word size of stack chunk without header */
  }
stack_chunk;


/* C40 specific functions */

/* Convert a Helios C byte address pointer to a 'C40 CPU word pointer. */
/* Note that this may loose some byte selection information. */
/* Same as _DataToFuncConvert(), but returns word address as a word type. */

word C40WordAddress(void *Cptr);


/* Convert a 'C40 CPU word pointer to a Helios C byte address pointer. */
/* Returns 0 if address cannot be converted. */
/* Same as _FuncToDataConvert(), but can be passed any pointer type. */

void *C40CAddress(MPtr Wordptr);


IDROM *		GetIDROM( void );	/* Return pointer to IDROM struct. */


/* C40 specific debug support */
int		_backtrace( char * name, int frame );
					/* Puts name of function whose frame */
					/* pointer is 'frame' into 'name',   */
					/* and returns the frame pointer of  */
					/* the parent of that function.      */

int		_stack_size( void );	/* Returns number of words remaining */
					/* in the current stack chunk.       */

void		JTAGHalt( void );	/* Causes an emulator halt. */


/* inline assembler support */
int		_word( word opcode );	/* Inserts an opcode into the code. */

#ifndef NOP
#define NOP()	_word( 0x0c800000 )	/* For example: a NOP instruction. */
#endif

/* Support for copying between C byte addresses and C40 word addresses */

/* Get word of data from a word address. */
word MP_GetWord(MPtr addr, word wordoffset);

/* Put a word of data to a word address. */
void MP_PutWord(MPtr addr, word wordoffset, word data);

/* Copy data from a word address to a byte address. */
void MP_GetData(void *dstbytepointer, MPtr addr, word wordoffset,
	word numwords);

/* Copy data from a byte address to a word address. */
void MP_PutData(MPtr addr, word wordoffset, void *srcbytepointer,
	word wordcount);


/* Shared memory interlocking support */

/* Lock shared memory and read an integer. */
word MP_ReadLock(MPtr lockaddr);

/* Lock shared memory and read a single precision FP number. */
float MP_ReadFPLock(MPtr lockaddr);

/* Write an integer and unlock shared memory. */
void MP_WriteUnlock(MPtr lockaddr, word data);

/* Write a single precison FP number and unlock shared memory. */
void MP_WriteFPUnlock(MPtr lockaddr, float data);

/* Signal a word addressed counting semaphore (spin lock) in shared memory. */
word MP_Signal(MPtr countaddr);

/* Wait on a word addressed counting semaphore (spin lock) in shared memory. */
word MP_BusyWait(MPtr countaddr);


#ifdef ALLOCDMA
word   		AllocDMA( word timeout );
void		FreeDMA(  word DMAEng );
#endif


#endif /* end of __C40_h */
@


1.26
log
@reorganised stack_chunk structure so that it looks like a Node
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.25 1992/12/04 16:41:56 nickc Exp nickc $
d42 6
a47 2
/* stack is pointed to by the user stack end register + PCSSTACKGUARD */
#define PCS_STACKGUARD	(64 * sizeof(word))
@


1.25
log
@removed backtrace() prototype
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.24 1992/12/04 15:38:34 nickc Exp nickc $
d145 2
a149 2
    struct stack_chunk *	prev;			/* link to previous stack chunk		   */    
    struct stack_chunk * 	next;			/* link to next stack chunk	 	   */
@


1.24
log
@removed _GetAddressBase() _SetAddressBase() (not needed by users)
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.23 1992/12/03 16:48:51 paul Exp nickc $
a174 1
void		backtrace( void );	/* Prints stack backtrace.*/
@


1.23
log
@changed names of all WP_ functions to MP_
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.22 1992/12/02 15:34:42 nickc Exp paul $
a237 6

/* Get the current value of the Address Base Register (IR0)		*/
MPtr _GetAddrBase( void );

/* Set the current value of the Address Base Register (IR0)		*/
void _SetAddrBase( MPtr addrbase );
@


1.22
log
@prevented mutliple defintions of NOP macro
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.21 1992/11/25 11:41:19 nick Exp nickc $
d168 1
a168 1
void *C40CAddress(word Wordptr);
d195 1
a195 1
/* support for copying between C byte addresses and C40 word addresses */
d198 1
a198 1
word WP_GetWord(word addr, word wordoffset);
d201 1
a201 1
void WP_PutWord(word addr, word wordoffset, word data);
d204 2
a205 2
void WP_GetData(char *dstbytepointer, word addr, word wordoffset,
		word numwords);
d208 2
a209 2
void WP_PutData(word addr, word wordoffset, char *srcbytepointer,
		word wordcount);
d215 1
a215 1
word WP_ReadLock(word lockaddr);
d218 1
a218 1
float WP_ReadFPLock(word lockaddr);
d221 1
a221 1
void WP_WriteUnlock(word lockaddr, word data);
d224 1
a224 1
void WP_WriteFPUnlock(word lockaddr, float data);
d227 1
a227 1
word WP_Signal(word countaddr);
d230 1
a230 1
word WP_BusyWait(word countaddr);
@


1.21
log
@Added prototypes for _GetAddressBase() and _SetAddressBase().
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.20 1992/11/18 14:51:56 paul Exp nick $
d191 1
d193 1
a193 1

@


1.20
log
@updated parameter types passed to WP_ functions
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.19 1992/11/12 17:18:21 paul Exp $
d237 6
@


1.19
log
@converted C40CAddress/C40WordAddress macros to function calls
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.17 1992/09/24 16:08:32 paul Exp $
a154 4
/* pointer type for C40 word addresses */
typedef word wordptr;


d197 1
a197 1
word WP_GetWord(wordptr addr, word wordoffset);
d200 1
a200 1
void WP_PutWord(wordptr addr, word wordoffset, word data);
d203 1
a203 1
void WP_GetData(char *dstbytepointer, wordptr addr, word wordoffset,
d207 1
a207 1
void WP_PutData(wordptr addr, word wordoffset, char *srcbytepointer,
d214 1
a214 1
word WP_ReadLock(wordptr lockaddr);
d217 1
a217 1
float WP_ReadFPLock(wordptr lockaddr);
d220 1
a220 1
void WP_WriteUnlock(wordptr lockaddr, word data);
d223 1
a223 1
void WP_WriteFPUnlock(wordptr lockaddr, float data);
d226 1
a226 1
word WP_Signal(wordptr countaddr);
d229 1
a229 1
word WP_BusyWait(wordptr countaddr);
@


1.18
log
@fixed typo
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.17 1992/09/24 16:08:32 paul Exp nickc $
d162 2
a163 2
/* This may loose some byte selection information, and it also assumes the */
/* address base is zero. See also See also _DataToFuncConvert() */
d165 1
a165 1
#define C40WordAddress(Cptr)	((word)(Cptr) >> 2)
a166 3
/* Convert a 'C40 CPU word pointer to a Helios C byte address pointer */
/* Points to first byte of word. Assumes byte address base of zero */
/* See also _FuncToDataConvert(). */
d168 3
a170 1
#define C40CAddress(Wordptr)	((char *)((word)(Wordptr) << 2))
d172 1
d174 1
d179 1
a179 1
void		back_trace( void );	/* Prints stack backtrace.*/
@


1.17
log
@added wordptr typedef
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.16 1992/09/24 15:52:52 paul Exp $
d178 1
a178 1
void		backtrace( void );	/* Prints stack backtrace.*/
@


1.16
log
@added byte/word address copy fn proto.s and shared mem interlock fns.
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.15 1992/09/23 09:02:35 paul Exp $
d35 1
d154 3
@


1.15
log
@added NMI to the interrupt handler
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.14 1992/09/03 09:12:37 nickc Exp paul $
d155 5
a159 4
/* Convert a Helios C byte address pointer to a 'C40 CPU word pointer */
/* - this may loose some byte selection information */
/* @@@@@@ Have to convert these routines to take account of the C base */
/* pointer (IR0) if we change it to a non zero value */
d164 2
a165 1
/* Points to first byte of word */
d167 1
a167 1
#define C40CAddress(Wptr)	((char *)((word)(Wptr) << 2))
d170 1
a170 1
/* C40 specific functions */
a171 1
IDROM *		GetIDROM( void );	/* Return pointer to IDROM struct. */
d173 1
d186 2
d191 38
@


1.14
log
@fixed declaration of _word()
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.13 1992/08/18 09:58:11 paul Exp nickc $
d24 2
a25 2
/* IIOF0-3 and TINIT1 can be used */
#define	InterruptVectors	0x5
d28 6
a33 5
#define INTR_IIOF0		0
#define INTR_IIOF1		1
#define INTR_IIOF2		2
#define INTR_IIOF3		3
#define INTR_TINT1		4
@


1.13
log
@added interrupt vector numbers
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.12 1992/07/31 15:54:47 nickc Exp $
d183 1
a183 1
void		_word( word opcode );	/* Inserts an opcode into the code. */
@


1.12
log
@improved comment
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.11 1992/07/27 15:48:04 nickc Exp nickc $
d24 2
a25 1
#define	InterruptVectors	0x2c
d27 6
@


1.11
log
@removed extraneous new-line
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.10 1992/07/27 15:00:39 paul Exp nickc $
d136 6
a141 6
    unsigned long int		link_register;		/* return address before chunk was made */
    unsigned long int		stack_end_pointer;	/* end of previous stack chunk		*/
    unsigned long int		stack_pointer;		/* stack pointer inside previous chunk  */
    struct stack_chunk *	prev;			/* link to previous stack chunk		*/    
    struct stack_chunk * 	next;			/* link to next stack chunk	 	*/
    unsigned long int		size;			/* size of this stack chunk in words	*/
@


1.10
log
@added backtrace, etc fn protos
/.
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.9 1992/07/21 09:04:35 nickc Exp paul $
d12 2
a13 1
 * (C) Copyright 1992 Perihelion Software Ltd.
d46 2
a47 1
typedef struct DMAReq {
d54 1
a54 1
}
d62 2
a63 1
typedef struct DMAFree {
d66 1
a66 1
}
d77 2
a78 1
typedef struct IDROM {
d119 2
a120 1
} IDROM;
d125 2
a126 1
typedef struct IDROMBLOCK {
d130 2
a131 1
} IDROMBLOCK;
d134 2
a135 1
typedef struct stack_chunk {
d142 2
a143 1
} stack_chunk;
d157 1
a157 2
#define C40CAddress(Wptr)
	((char *)((word)(Wptr) << 2))
d162 1
a162 1
IDROM *	GetIDROM(void);			/* Return pointer to IDROM struct. */
d164 6
a169 5
void backtrace(void);			/* Prints stack backtrace.*/
int _backtrace(char *name, int frame);	/* Puts name of function whose frame */
					/* pointer is 'frame' into 'name', */
					/* and returns the frame pointer of */
					/* the parent of that function. */
d171 2
a172 2
int _stack_size(void);			/* Returns number of words remaining */
					/* in the current stack chunk. */
d174 1
a174 1
void  JTAGHalt(void);			/* Causes an emulator halt. */
d176 1
d178 1
a178 1
void _word(word opcode);		/* Inserts an opcode into the code. */
a179 1
#define NOP()	_word(0x0c800000)	/* For example: a NOP instruction. */
a180 1

d182 2
a183 2
word   AllocDMA(word timeout);
void   FreeDMA(word DMAEng);
@


1.9
log
@added stack_chunk structure
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.8 1992/06/30 20:16:05 paul Exp nickc $
d12 1
a12 1
 * (C) Copyright 1991 Perihelion Software Ltd.
a13 23
 * RcsLog: $Log: c40.h,v $
 * Revision 1.8  1992/06/30  20:16:05  paul
 * corrected size of interrupt vectors
 *
 * Revision 1.7  1992/06/29  19:10:56  paul
 * removed kdebug proto (put in kernel/C40/gexec.h)
 *
 * Revision 1.6  1992/06/26  17:48:52  paul
 * added idrom structure and access function
 *
 * Revision 1.5  1992/06/03  16:44:11  paul
 * added inline opcode NOP example
 *
 * Revision 1.4  1992/05/14  11:57:02  paul
 * added _word() inline opcode pseudo function's prototype
 *
 * Revision 1.3  1992/04/24  08:37:46  paul
 * changed C40CAddress macro to return a char *
 *
 * Revision 1.2  1992/04/12  19:55:38  paul
 * added alloc dma structures
 *
 *
d16 1
d45 1
a45 2
typedef struct DMAReq
  {
d52 1
a52 1
  }
d60 1
a60 2
typedef struct DMAFree
  {
d63 1
a63 1
  }
d74 1
a74 2
typedef struct IDROM
  {
d115 1
a115 2
  }
IDROM;
d120 1
a120 2
typedef struct IDROMBLOCK
  {
d124 1
a124 2
  }
IDROMBLOCK;
d127 1
a127 2
typedef struct stack_chunk 
  {
d134 1
a134 2
  }
stack_chunk;
d148 2
a149 1
#define C40CAddress(Wptr)	((char *)((word)(Wptr) << 2))
d154 15
a168 2
IDROM *	GetIDROM( void );		/* return pointer to saved IDROM structure (read only) */
void	_word( word opcode );		/* inserts an opcode into the code */
d170 1
a170 1
#define NOP()	_word( 0x0c800000 )	/* for example: a Nop instruction */
d174 2
a175 2
word   AllocDMA( word timeout );
void   FreeDMA(  word DMAEng );
a177 1
void  JTAGHalt(	void );			/* To cause an emulator halt use JTAGHalt() */
@


1.8
log
@corrected size of interrupt vectors
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.7 1992/06/29 19:10:56 paul Exp $
d15 3
d64 1
a65 8
typedef struct DMAReq {
	struct DMAReq	*next;
	word		endtime;
	SaveState	*state;
	word		link;		/* -1 if not a link DMA request */
	word		flags;		/* DMA_Tx / DMA_Rx denotes split mode */
	word		rc;
} DMAReq;
d67 11
d82 9
a90 5
typedef struct DMAFree {
	struct DMAFree	*next;
	word		DMAEng;
} DMAFree;
#endif
d98 16
a113 15
typedef struct IDROM {
	word	SIZE;		/* self inclusive size of this block */

	short	MAN_ID;		/* TIM-40 module manufacturers ID */
	byte	CPU_ID;		/* CPU type (00 = C40) */
	byte	CPU_CLK;	/* CPU cycle time (60ns = 59) */

	short	MODEL_NO;	/* TIM-40 module model number */
	byte	REV_LVL;	/* module revision level */
	byte	RESERVED;	/* currently unused (align to word boundary) */

	word	GBASE0;		/* address base of global bus strobe 0 */
	word	GBASE1;		/* address base of global bus strobe 1 */
	word	LBASE0;		/* address base of local bus strobe 0 */
	word	LBASE1;		/* address base of local bus strobe 1 */
d116 4
a119 4
	word	GSIZE0;		/* size of memory on global bus strobe 0 */
	word	GSIZE1;		/* size of memory on global bus strobe 1 */
	word	LSIZE0;		/* size of memory on local bus strobe 0 */
	word	LSIZE1;		/* size of memory on local bus strobe a */
d121 1
a121 1
	word	FSIZE;		/* size of fast ram pool (inc. on-chip RAM) */
d126 16
a141 9
	byte	WAIT_G;		/* within page on global bus */
	byte	WAIT_L;		/* within page on local bus */
	byte	PWAIT_G;	/* outside page on global bus */
	byte	PWAIT_L;	/* outside page on local bus */

	word	TIMER0_PERIOD;	/* period time for 1ms interval on timer 0 */
	word	TIMER1_PERIOD;	/* period for DRAM refresh timer (optional) */
	short	TIMER0_CTRL;	/* contents set TCLK0 to access RAM not IDROM */
	short	TIMER1_CTRL;	/* sets up timer to refresh DRAM (optional) */
a142 6
	word	GBCR;		/* global bus control register */
	word	LBCR;		/* local bus control register */

	word	AINIT_SIZE;	/* total size of auto-initialisation data */
} IDROM;

d146 19
a164 5
typedef struct IDROMBLOCK {
	word	B_SIZE;				/* size of data block */
	word	B_ADDR;				/* address to data @@ */
	word	B_DATASTART[1];			/* data block */
} IDROMBLOCK;
a166 2
/* return pointer to saved IDROM structure (read only) */
IDROM *GetIDROM(void);
a167 1

d172 1
d177 1
d183 2
a184 1
void _word(word opcode);		/* inserts an opcode into the code */
d186 1
a186 1
#define NOP()	_word(0x0c800000)	/* for example: a Nop instruction */
d190 2
a191 2
word AllocDMA(word timeout);
void FreeDMA(word DMAEng);
d194 1
a194 4
/* To cause an emulator halt use JTAGHalt() */
void JTAGHalt(void);


@


1.7
log
@removed kdebug proto (put in kernel/C40/gexec.h)
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.6 1992/06/26 17:48:52 paul Exp paul $
d15 3
d42 1
a42 1
#define	InterruptVectors	40
@


1.6
log
@added idrom structure and access function
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.5 1992/06/03 16:44:11 paul Exp $
d15 3
a167 7
/* Temporary debug functions */
#ifdef SYSDEB
void _KDebug(const char *str, ... );
# define KDebug(x)	_KDebug x
#else
# define KDebug(x)
#endif
@


1.5
log
@added inline opcode NOP example
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.4 1992/05/14 11:57:02 paul Exp $
d15 3
d75 63
d161 4
a167 1
void JTAGHalt(void);
@


1.4
log
@added _word() inline opcode pseudo function's prototype
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.3 1992/04/24 08:37:46 paul Exp $
d15 3
d85 4
a88 2
/* inserts an inline opcode into the code */
void _word(word opcode);
@


1.3
log
@changed C40CAddress macro to return a char *
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.2 1992/04/12 19:55:38 paul Exp $
d15 3
d81 3
@


1.2
log
@added alloc dma structures
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.1 1991/12/11 17:16:01 paul Exp $
d14 3
a16 1
 * RcsLog: $Log$
d18 1
d74 1
a74 1
#define C40CAddress(Wptr)	((word)(Wptr) << 2)
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
 * RcsId: $Id: c40.h,v 1.1 1991/12/03 11:49:44 paul Exp $
d14 1
a14 3
 * RcsLog: $Log: c40.h,v $
 * Revision 1.1  1991/12/03  11:49:44  paul
 * Initial revision
a15 1
 *
d23 1
a23 1
/* Define C40 interrupt manifests */
d40 23
d73 16
a88 1
#endif /* __c40_h */
d90 1
@
