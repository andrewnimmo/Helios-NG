head	1.16;
access;
symbols
	Helios_1_3_1:1.16
	Helios_C40_1_3_Official_Release:1.15
	Helios-C40:1.15
	Alenia_release:1.15
	Helios1_3:1.13
	C40_Field_Test_2:1.13
	C40_Field_Test_R1:1.12
	Helios13_beta:1.12
	Helios1_2_2:1.11
	Helios1_2_2Beta:1.11
	Helios1_2_1:1.11
	Helios1_2:1.7
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.16
date	93.08.05.17.03.19;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	92.11.25.10.19.21;	author nick;	state Exp;
branches;
next	1.14;

1.14
date	92.11.20.18.06.41;	author nick;	state Exp;
branches;
next	1.13;

1.13
date	92.09.14.11.09.26;	author paul;	state Exp;
branches;
next	1.12;

1.12
date	91.12.11.16.18.39;	author paul;	state Exp;
branches;
next	1.11;

1.11
date	91.03.12.00.31.17;	author paul;	state Exp;
branches;
next	1.10;

1.10
date	91.02.15.20.44.05;	author paul;	state Exp;
branches;
next	1.9;

1.9
date	91.01.22.15.48.53;	author paul;	state Exp;
branches;
next	1.8;

1.8
date	90.12.07.11.30.20;	author paul;	state Exp;
branches;
next	1.7;

1.7
date	90.11.26.19.18.37;	author paul;	state Exp;
branches;
next	1.6;

1.6
date	90.11.21.16.04.47;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	90.11.19.23.08.51;	author paul;	state Exp;
branches;
next	1.4;

1.4
date	90.11.19.17.20.26;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	90.11.06.16.30.02;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	90.11.05.20.52.45;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.11.06.49;	author nick;	state Exp;
branches;
next	;


desc
@@


1.16
log
@improved comment
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--                     H E L I O S   N U C L E U S                      --
--                     ---------------------------                      --
--                                                                      --
--             Copyright (C) 1987, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- memory.h								--
--                                                                      --
--	Kernel memory primitives					--
--                                                                      --
--	Author:  NHG 16/8/87						--
--                                                                      --
------------------------------------------------------------------------*/
/* SccsId: %W% %G% Copyright (C) 1987, Perihelion Software Ltd.		*/
/* RcsId: $Id: memory.h,v 1.15 1992/11/25 10:19:21 nick Exp nickc $ */

#ifndef __memory_h
#define __memory_h

#ifndef __helios_h
# include <helios.h>
#endif

#include <queue.h>

/* Memory block header */

typedef struct Memory {
	Node		Node;		/* node in current pool		*/
	WORD		Size;		/* block size + alloc bits	*/
	struct Pool	*Pool;		/* pointer to owning pool	*/
} Memory;

#define Memory_Size_BitMask	0xF	/* mask for alloc bits		*/
#define Memory_Size_BwdBit	0x2	/* alloc state of predecessor	*/
#define Memory_Size_FwdBit	0x1	/* alloc state of this block	*/
#define Memory_Size_Carrier	0x4	/* marks a RAM carrier		*/
#define Memory_Size_Reloc	0x8	/* marks relocatable block	*/

/* Memory pool structure */
typedef struct Pool {
	Node		Node;		/* queuing node			*/
	List		Memory;		/* list of blocks owned		*/
	WORD		Blocks;		/* number of blocks in pool	*/
	WORD		Size;		/* total size of pool		*/
	WORD		Max;		/* initial size of pool		*/
} Pool;

#ifdef __MI
typedef struct MIInfo {
	bool		MIWriteProtect;	/* True if memory is WP'ed	*/
	word		**MITable;	/* Memory Indirect(ion) table	*/
	word		MIFreeSlots;	/* Free slots in MI table	*/
	word		MITableSize;	/* Total slots in MI Table	*/
	Pool		*FreePool;	/* Allocate from this free pool */
	Pool		*DstPool;	/* Into this pool		*/
} MIInfo;

typedef word	Handle;
#endif

/* Memory allocation procedures */

PUBLIC void InitPool(Pool *);
PUBLIC void *AllocMem(WORD , Pool *);
PUBLIC word FreeMem(void *);
PUBLIC void FreeMemStop(void *);
PUBLIC void FreePool(Pool *);
PUBLIC bool InPool(void *addr, Pool *pool);

#if defined(__ARM) || defined(__C40)
PUBLIC void *LowAllocMem(word size, Pool *);
PUBLIC bool ReAllocMem(word newsize, void *addr);
PUBLIC word StatMem(word *totalsize, word *totalfree, word *largestfree, word *percfree);
#endif

#ifdef __ABC
/* Support for memory cards */
PUBLIC Pool *BuildPool(byte *base, word size, bool scavenge);
PUBLIC word RRDPoolInit(MIInfo *mi, Memory *magicbase, Memory *magictop);
/* Memory Indirect (relocatable block) operations */
PUBLIC void MIInit(MIInfo *mi, Pool *free, Pool *dst);
PUBLIC Handle MIAlloc(MIInfo *mi, WORD size);
PUBLIC void MIFree(MIInfo *mi, Handle handle);
PUBLIC void MICompact(MIInfo *mi);
PUBLIC void *MILock(MIInfo *mi, Handle handle);
PUBLIC void MIUnLock(MIInfo *mi, Handle handle);
PUBLIC bool MITrim(MIInfo *mi, Handle handle, word amount);
#endif

/* RAM Carrier. This is used to describe a block of memory where the	*/
/* memory is managed in a "hands-off" manner. This is used for precious	*/
/* memory like On-Chip RAM in the Tranny and C40, or for memory which is*/
/* outside the C address range, like the global memory on a C40.	*/

typedef struct Carrier {
	MPtr		Addr;		/* address of RAM block		*/
	word		Size;		/* size of block in WORDS on C40 in bytes otherwise */
	word		Type;		/* type of RAM			*/
} Carrier;

PUBLIC Carrier *AllocFast(word, Pool *);

PUBLIC Carrier *AllocSpecial(word size, word type, Pool *dest);

#define RAMType_Speed		0x01	/* RAM speed property		*/
#define	RAMType_Dynamic		0x00	/* Slower dynamic RAM		*/
#define	RAMType_Static		0x01	/* Fast on-chip or static RAM	*/

#define RAMType_Addressing	0x02	/* RAM addressability		*/
#define	RAMType_Direct		0x00	/* Directly addressable	from C	*/
#define RAMType_Indirect	0x02	/* Machine addressable only	*/

#define RAMType_Location	0x04	/* RAM location			*/
#define RAMType_Local		0x00	/* Local processor Bus		*/
#define RAMType_Global		0x04	/* Global processor Bus		*/

#define RAMTypeIndex(x)		((x)&0x7)

#endif


/* -- End of memory.h */
@


1.15
log
@RAMType codes reorganised a little.
@
text
@d17 1
a17 1
/* RcsId: $Id: memory.h,v 1.14 1992/11/20 18:06:41 nick Exp nick $ */
d100 1
a100 1
	word		Size;		/* size of block		*/
@


1.14
log
@Fast bit converted to a Carrier bit. Carriers now have an MPtr as the
RAM address, and an additional Type field showing what kind of RAM it
is. Various RAM types defined.
@
text
@d17 1
a17 1
/* RcsId: $Id: memory.h,v 1.13 1992/09/14 11:09:26 paul Exp $ */
d108 11
a118 6
#define	RAMType_Dynamic		0x010	/* Slower dynamic RAM		*/
#define	RAMType_Static		0x021	/* Fast on-chip or static RAM	*/
#define	RAMType_Direct		0x040	/* Directly addressable	from C	*/
#define RAMType_Indirect	0x082	/* Machine addressable only	*/
#define RAMType_Local		0x100	/* Local processor Bus		*/
#define RAMType_Global		0x204	/* Global processor Bus		*/
@


1.13
log
@updated for ARM
@
text
@d17 1
a17 1
/* RcsId: $Id: memory.h,v 1.12 1991/12/11 16:18:39 paul Exp $ */
d36 5
a40 5
#define Memory_Size_BitMask	15	/* mask for alloc bits		*/
#define Memory_Size_BwdBit	2	/* alloc state of predecessor	*/
#define Memory_Size_FwdBit	1	/* alloc state of this block	*/
#define Memory_Size_Fast	4	/* marks fast ram carrier	*/
#define Memory_Size_Reloc	8	/* marks relocatable block	*/
d93 4
a96 2
#if defined (__TRAN) || defined (__C40)
/* Fast Ram carrier */
d99 1
a99 1
	byte		*Addr;		/* address of fast ram block	*/
d101 1
d105 11
a115 1
#endif
@


1.12
log
@added support for c40
@
text
@d17 1
a17 1
/* RcsId: $Id: memory.h,v 1.11 91/03/12 00:31:17 paul Exp $ */
d72 1
d78 2
a79 1
#ifdef __CARD
a82 2
#endif
#ifdef __MI
d93 1
a93 1
#if defined(__ARM) || defined (__TRAN) || defined (__C40)
d105 1
@


1.11
log
@added support for MI WriteProtected areas (ARM)
@
text
@d17 1
a17 1
/* RcsId: $Id: memory.h,v 1.10 91/02/15 20:44:05 paul Exp $ */
d72 1
a72 1
#ifdef __ARM
d93 1
a93 1
#if defined(__ARM) || defined (__TRAN)
@


1.10
log
@added statmem fn proto for ARM
@
text
@d17 1
a17 1
/* RcsId: $Id: memory.h,v 1.9 91/01/22 15:48:53 paul Exp $ */
d53 1
@


1.9
log
@added support for relocatable memory system and insertable card memory
for arm version
@
text
@d17 1
a17 1
/* RcsId: $Id: memory.h,v 1.8 90/12/07 11:30:20 paul Exp $ */
d72 3
a74 2
PUBLIC void *LowAllocMem(WORD size, Pool *);
PUBLIC bool ReAllocMem(WORD newsize, void *addr);
@


1.8
log
@changed RMM/RM to MI prefix to differenciate from Barts RMlib stuff.
@
text
@d17 1
a17 1
/* RcsId: $Id: memory.h,v 1.7 90/11/26 19:18:37 paul Exp Locker: paul $ */
d51 12
d71 1
a71 1
#ifdef __HELIOSARM
a73 9
# ifdef __MI
typedef word	Handle;
PUBLIC Handle MIAlloc(WORD size, Pool *src, Pool *dst);
PUBLIC void MIFree(Handle handle);
PUBLIC void MICompact(Pool *pool);
PUBLIC void *MILock(Handle handle);
PUBLIC void MIUnLock(Handle handle);
PUBLIC bool MITrim(Handle handle, word amount);
# endif
d75 15
d91 1
a91 1
#ifndef __HELIOSARM
@


1.7
log
@added RMM functions (ARM)
@
text
@d17 1
a17 1
/* RcsId: $Id: memory.h,v 1.6 90/11/21 16:04:47 paul Exp $ */
d62 1
a62 1
# ifdef __RMM
d64 6
a69 6
PUBLIC Handle RMAlloc(WORD size, Pool *src, Pool *dst);
PUBLIC void RMFree(Handle handle);
PUBLIC void RMCompact(Pool *pool);
PUBLIC void *RMLock(Handle handle);
PUBLIC void RMUnLock(Handle handle);
PUBLIC bool RMTrim(Handle handle, word amount);
@


1.6
log
@removed TrimAllocMem
@
text
@d17 1
a17 1
/* RcsId: $Id: memory.h,v 1.5 90/11/19 23:08:51 paul Exp $ */
d63 3
a65 2
PUBLIC word RMAlloc(WORD size, Pool *src, Pool *dst);
PUBLIC void RMFree(word handle);
d67 3
a69 3
PUBLIC void *RMLock(word handle);
PUBLIC void RMUnLock(word handle);
PUBLIC bool RMTrim(word handle, word amount);
@


1.5
log
@changed RMM/RRD #ifdef to __RMM/__RRD for safety
@
text
@d17 1
a17 1
/* RcsId: $Id: memory.h,v 1.4 90/11/19 17:20:26 paul Exp $ */
a61 1
PUBLIC void *TrimAllocMem(WORD newsize, void *block);
@


1.4
log
@added Memory_Size_Reloc to set of alloc flags
@
text
@d17 1
a17 1
/* RcsId: $Id: memory.h,v 1.3 90/11/06 16:30:02 paul Exp Locker: paul $ */
d62 9
@


1.3
log
@revised ReAllocMem proto.
@
text
@d17 1
a17 1
/* RcsId: $Id: memory.h,v 1.2 90/11/05 20:52:45 paul Exp $ */
d40 1
d74 1
a74 1
	
@


1.2
log
@added lowalloc and reallocmem proto's
@
text
@d17 1
a17 1
/* RcsId: $Id$ */
d60 1
a60 1
PUBLIC void *ReAllocMem(WORD newsize, void *addr);
@


1.1
log
@Initial revision
@
text
@d16 2
a17 1
/* SccsId: %W%	%G% Copyright (C) 1987, Perihelion Software Ltd.	*/
d53 1
a53 1
PUBLIC void *AllocMem(WORD, Pool *);
d58 4
@
