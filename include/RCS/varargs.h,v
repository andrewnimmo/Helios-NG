head	1.2;
access;
symbols
	Helios_1_3_1:1.2
	Helios_C40_1_3_Official_Release:1.2
	Helios-C40:1.2
	Alenia_release:1.2
	Helios1_3:1.2
	C40_Field_Test_2:1.2
	C40_Field_Test_R1:1.2
	Helios13_beta:1.2
	Helios1_2_2:1.2
	Helios1_2_2Beta:1.2
	Helios1_2_1:1.2
	Helios1_2:1.2
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.2
date	90.09.26.18.46.49;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.11.07.38;	author nick;	state Exp;
branches;
next	;


desc
@@


1.2
log
@arm changes for 1.2 and new arm C compiler
@
text
@/* varargs.h: UNIX compatible variadic argument handling	*/
/*								*/
/* NOTE: This file is NOT compatible with stdarg.h		*/
/* %W% %G% (C) Copyright 1990, Perihelion Software Ltd.		*/
/* RcsId: $Id$ */

#ifdef __stdarg_h
# error "Cannot use BSD and ANSI variable arg handling at the same time"
#endif

#ifndef __varargs_h
#define __varargs_h

#ifdef __HELIOSARM
/* N.B. <stdio.h> is required to declare vfprintf() without defining      */
/* va_list.  Clearly the type __va_list there must keep in step.          */
typedef char *va_list[1];       /* see <stdio.h> */
#else
# ifndef __va_list_defined
typedef char *va_list[1];       /* see <stdio.h> */
# define __va_list_defined
# endif
#endif

#define va_alist __va_alist, ...

#define va_dcl long __va_alist;

#ifdef __HELIOSARM

# define __alignof(type) \
   ((char *)&(((struct{char __member1; \
                       ___type type __member2;}*) 0)->__member2) - \
    (char *)0)
#define __alignuptotype(ptr,type) \
   ((char *)((int)(ptr) + (__alignof(type)-1) & ~(__alignof(type)-1)))

#define va_arg(ap,type) \
   (___assert((___typeof(___type type) & 0x481) == 0, \
              "Illegal type used with va_arg"), \
   *(___type type *)((*(ap)=__alignuptotype(*(ap),type)+sizeof(___type type))-\
                     sizeof(___type type)))

#else /* Transputer C version */

#define va_arg(ap,type) (sizeof(type) < sizeof(int) ? \
   (type)*(int *)((*(ap)+=sizeof(int))-sizeof(int)) : \
   *(type *)((*(ap)+=sizeof(type))-sizeof(type)))

#endif /*__HELIOSARM*/

#define va_start(ap) ((void)(*(ap) = (char *)&(__va_alist)))

#define va_end(ap) ((void)(*(ap) = (char *)-256))

#endif


/* end of varargs.h */
@


1.1
log
@Initial revision
@
text
@a1 1
/* %W% %G% (C) Copyright 1990, Perihelion Software Ltd.		*/
d4 2
a5 1
/* $Id$ */
d14 1
a14 1
#if defined(__HELIOSARM) && defined(ARMC2)
a30 1
# if defined(ARMC2)
a34 7
# else
# define __alignof(type) \
   ((char *)&(((struct{char __member1; \
                       __type type __member2;}*) 0)->__member2) - \
    (char *)0)
# endif /*ARMC2*/

d38 3
a40 4
extern void *__va_illegal_arg(void);
# if defined(ARMC2)
# define va_arg(ap,type) (sizeof(type) < sizeof(int) ? \
   *(___type type *)__va_illegal_arg() : \
a42 6
# else
# define va_arg(ap,type) (sizeof(type) < sizeof(int) ? \
   *(__type type *)__va_illegal_arg() : \
   *(__type type *)((*(ap)=__alignuptotype(*(ap),type)+sizeof(__type type))-\
                     sizeof(__type type)))
# endif /*ARMC2*/
a54 1

@
