head	1.4;
access;
symbols
	Helios_1_3_1:1.4
	Helios_C40_1_3_Official_Release:1.4
	Helios-C40:1.4
	Alenia_release:1.4
	Helios1_3:1.4
	C40_Field_Test_2:1.4
	C40_Field_Test_R1:1.4
	Helios13_beta:1.4
	Helios1_2_2:1.3
	Helios1_2_2Beta:1.3
	Helios1_2_1:1.2
	Helios1_2:1.2
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.4
date	92.06.01.09.47.18;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	91.04.12.12.50.31;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	90.10.02.18.46.03;	author nick;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.11.07.07;	author nick;	state Exp;
branches;
next	;


desc
@@


1.4
log
@add prototypes for C40
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--                     H E L I O S   N U C L E U S                      --
--                     ---------------------------                      --
--                                                                      --
--             Copyright (C) 1987, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- sem.h								--
--                                                                      --
--	Kernel semaphore support					--
--                                                                      --
--	Author:  NHG 16/8/87						--
--                                                                      --
------------------------------------------------------------------------*/
/* SccsId: %W%	%G% Copyright (C) 1987, Perihelion Software Ltd.	*/
/* $Id: sem.h,v 1.3 1991/04/12 12:50:31 paul Exp $ */

#ifndef __sem_h
#define __sem_h

#ifndef __helios_h
#include <helios.h>
#endif

/* Semaphore structure */

#ifndef _ID_
#define _ID_
struct Id { word secret; };	/* secret to kernel			*/
#endif

typedef struct Semaphore {
        word		Count;		/* semaphore counter		*/
        struct Id	*Head;		/* head of process list		*/
        struct Id	*Tail;		/* tail of process list		*/
} Semaphore;


/* Kernel support routines */

PUBLIC void InitSemaphore(Semaphore *, word);
PUBLIC void Wait(Semaphore *);
PUBLIC bool TestWait(Semaphore *);
PUBLIC void Signal(Semaphore *);
PUBLIC void SignalStop(Semaphore *);
PUBLIC word TestSemaphore(Semaphore *);

#ifndef __TRAN
 PUBLIC void HardenedWait(Semaphore *);
 PUBLIC void HardenedSignal(Semaphore *);
 PUBLIC bool TimedWait(Semaphore *sem, word timeout);
#endif

#endif


/* -- End of sem.h */

@


1.3
log
@added TimedWait() semaphore operation (ARM only)
@
text
@d17 1
a17 1
/* $Id: sem.h,v 1.2 1990/10/02 18:46:03 nick Exp paul $ */
d49 1
a49 1
#ifdef __ARM
d56 1
@


1.2
log
@prototype for TestWait added
@
text
@d17 1
a17 1
/* $Id$ */
d49 4
a52 3
#ifdef __HELIOSARM
PUBLIC void HardenedWait(Semaphore *);
PUBLIC void HardenedSignal(Semaphore *);
@


1.1
log
@Initial revision
@
text
@d44 1
@
