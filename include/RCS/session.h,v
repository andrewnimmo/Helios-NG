head	1.3;
access;
symbols
	Helios_1_3_1:1.3
	Helios_C40_1_3_Official_Release:1.3
	Helios-C40:1.3
	Alenia_release:1.3
	Helios1_3:1.3
	C40_Field_Test_2:1.3
	C40_Field_Test_R1:1.3
	Helios13_beta:1.3
	Helios1_2_2:1.2
	Helios1_2_2Beta:1.2
	Helios1_2_1:1.2
	Helios1_2:1.2
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.3
date	92.06.21.12.01.23;	author bart;	state Exp;
branches;
next	1.2;

1.2
date	90.10.09.11.15.34;	author nick;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.11.07.10;	author nick;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Update for version 1.3
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--           H E L I O S   N E T W O R K I N G   S O F T W A R E	--
--           ---------------------------------------------------	--
--                                                                      --
--             Copyright (C) 1990, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- session.h								--
--                                                                      --
--	Header file defining the interface to the Session Manager	--
--                                                                      --
--	Author:  BLV 9/7/90						--
--                                                                      --
------------------------------------------------------------------------*/

/* $Header: /users/bart/hsrc/network/RCS/session.h,v 1.4 1992/01/15 11:04:39 bart Exp $ */

#ifndef __session_h
#define __session_h

#ifndef __helios_h
#include <helios.h>
#endif

#ifndef __protect_h
#include <protect.h>
#endif

#ifndef __gsp_h
#include <gsp.h>
#endif

#ifndef __servlib_h
#include <servlib.h>
#endif

/**
*** This structure is used as the Info vector for RmRegisterWindow().
*** This is implemented as:
*** Create("/sm/Windows", "pc.window.console", Type_Device, , WindowInfo)
**/
typedef	struct	RmWindowInfo {
	RPTR		UserName;	/* Default user name or -1	*/
	WORD		Flags;		/* in window Stream structure	*/
	WORD		Pos;		/* ditto			*/
	Capability	WindowCap;	/* ditto			*/
	RPTR		WindowName;	/* from Stream structure	*/
		/* It is necessary to inherit this from the environment */
	Capability	WindowServerCap;/* so that it can passed on to	*/
	RPTR		WindowServerName;/* the tfm			*/
} RmWindowInfo;

/**
*** This structure can be read back from the Session Manager to find out
*** which window a user used to log in.
**/
typedef struct	RmLoginWindow {
	Capability	Cap;
	char		WindowName[1];
} RmLoginWindow;

/**
*** This structure is passed to the Session Manager when attempting to
*** create a new session. Essentially the call is:
*** Create("/sm", <user>, Type_Session, , Info)
*** Obviously the Session Manager needs to know the user name, and a password
*** for validation. There is some question as to whether or not the password
*** should be encrypted. Less obviously the Session Manager needs to have
*** details of the login window so that other users can access it.
**/
typedef struct RmLoginInfo {
	char		UserName[NameMax];
	char		Password[NameMax];
	Capability	Cap;	/* For the window */
	char		WindowName[1];
} RmLoginInfo;

/**
*** A successful session Create() returns an object which can be
*** Open()'ed and read to give details of the session. These details
*** are read into a Malloc()'ed buffer, and the appropriate bits
*** are extracted. N.B. some of the information like User ID is
*** totally redundant but is sent anyway.
**/

typedef struct	RmSessionInfo {
	char		UserName[NameMax];
	int		Uid;
	int		Gid;
	char		Comment[NameMax];
	Object		*TFM;	
	Object		*CurrentDirectory;
	Object		*Program;
} RmSessionInfo;

/**
*** The actual data sent for the above structure is shown below. Note that
*** a capability is sent even for the default program. This allows
*** special user id's such as powerdown which can invoke programs not
*** generally accessible.
**/
typedef struct RmSessionAux {
	char		UserName[NameMax];
	int		Uid;
	int		Gid;
	char		Comment[NameMax];
	Capability	TFMCap;
	RPTR		TFMName;
	Capability	CurrentDirCap;
	RPTR		CurrentDirName;
	Capability	ProgramCap;
	RPTR		ProgramName;
} RmSessionAux;

	/* Flag set for the  /sm/UserDatabase object */
#define RmFlags_PasswordChecking	0x10000000

extern bool	RmTestSessionManager(void);
extern Object	*RmGetSessionManager(void);
extern bool	RmTestPasswordsRequired(void);
extern bool	RmRegisterWindow(Object *, Stream *, char *, WORD *);
extern Object	*RmCreateSession(char *username, char *password, 
				 Stream *, WORD *);
extern bool	RmGetCapabilities(Object *, RmSessionInfo *, WORD *);
extern bool	RmTestInteractiveSession(Object *Session);
extern Stream	*RmGetWindow(Object *Session, WORD *error);
extern bool	RmGetNames(char *UserName, char *SessionName);
extern Object	*RmGetTfm(void);
extern void	RmAbortSession(Object *Session);

#endif
@


1.2
log
@totally new version from Bart
@
text
@a15 1
/* $Id$ */
d17 2
a115 16
/**
*** Data structure for Type_Session. This needs to contain various
*** extra bits of information. This is used within the Session Manager.
**/
typedef struct SessionNode {
	ObjNode		ObjNode;
	Stream		*Window;
	char		UserName[NameMax];
	int		Uid;
	int		Gid;
	char		Comment[NameMax];
	Object		*TFM;
	Object		*CurrentDirectory;
	Object		*Program;
} SessionNode;

d130 1
@


1.1
log
@Initial revision
@
text
@d1 15
a15 11
/*----------------------------------------------------------------------------
--                                                                          --
--                         H E L I O S                                      --
--                         -----------                                      --
--                                                                          --
--             Copyright (C) 1987, Perihelion Software Ltd.                 --
--                        All Rights Reserved.                              --
--                                                                          --
--                                                                          --
--                                                                          --
----------------------------------------------------------------------------*/
a16 96
/*----------------------------------------------------------------------------
-- SUBSYSTEM NAME: NETWORK MANAGEMENT                                       --
--                                                                          --
-- TASK FORCE:  Session Manager                                             --
--                                                                          --
-- Header File For Session Management					    --
--                                                                          --
-- FILENAME: session.h                                                      --
--                                                                          --
-- AUTHOR: C.H.R.G                                                          --
--                                                                          --
-- DATE: 22:01:89                                                           --
--                                                                          --
----------------------------------------------------------------------------*/


/* User Data File Information */

#define   USERDATA_FILE "/helios/etc/passwd"




/* Session manager server names */

#define	  SM_NAME  "/sm"
#define	  SESSION  "/sm/users"
#define   USERDATA "/sm/userdata"



/* Private Error Message Functions */

/* Object Error Codes	*/

#define   ER_UserName	0x000000001	/* User Name		*/
#define   ER_Passwd	0x000000002	/* Password		*/
#define   ER_MaxUsers	0x000000003	/* Too many users	*/


typedef struct SessionInfo {
	char	TtyName[2*NameMax];/* terminal Identity		*/
	word	Duration;	/* required  Session duration 	*/
	word	RootDomain;	/* Could be used to set up a 	*/
				/* root domain for this session	*/
				
	char	UserName[NameMax];/* Username			*/
	char	Password[NameMax];/* User password		*/
	
} SessionInfo;




/* Session Environment */

typedef struct SessionEnv {
	
	Environ	Env;
	char	*Argv[10];
	char	*Envv[10];
	Object	*Objv[32];
	Stream  *Strv[32];
	
} SessionEnv;


/* Standard Offsets in Environment vector for various Shell variables */

#define  O_USER		0
#define  O_COMMENT	1
#define  O_HOME		2
#define  O_SHELL	3
#define  O_PATH		4
#define  O_TERM		5
#define  O_CONSOLE	6
#define  O_NULL		7




/* User Database Structure */

typedef struct UserData {
	
	char	UserName[NameMax];
	char	Password[NameMax];
	word	Uid;
	word	Gid;
	string	Comment;
	string  HomeDir;
	string	*ShellArgv;
	Object *RootAccess;
	word	RootDomain;
	Date	Duration;
} UserData;
d18 2
d21 124
d146 1
a146 1

@
