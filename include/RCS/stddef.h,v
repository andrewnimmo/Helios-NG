head	1.6;
access;
symbols
	Helios_1_3_1:1.6
	Helios_C40_1_3_Official_Release:1.6
	Helios-C40:1.6
	Alenia_release:1.6
	Helios1_3:1.5
	C40_Field_Test_2:1.5
	C40_Field_Test_R1:1.3
	Helios13_beta:1.3
	Helios1_2_2:1.2
	Helios1_2_2Beta:1.2
	Helios1_2_1:1.1
	Helios1_2:1.1
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.6
date	92.11.20.18.10.29;	author nick;	state Exp;
branches;
next	1.5;

1.5
date	92.08.12.13.18.39;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	92.08.12.11.08.48;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	92.06.01.09.46.48;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	91.06.20.18.01.33;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.11.07.18;	author nick;	state Exp;
branches;
next	;


desc
@@


1.6
log
@offsetof undefined if defined before this header.
@
text
@/* stddef.h: ANSI draft (X3J11 Oct 86) library header, section 4.1.4 */
/* Copyright (C) A.C. Norman and A. Mycroft */
/* version 0.01 - SccsId: %W% %G% */
/* $Id: stddef.h,v 1.4 1992/08/12 11:08:48 nickc Exp nickc $ */

#ifndef __stddef_h
# define __stddef_h

typedef int ptrdiff_t;		/* the signed integral type of the result of subtracting two pointers. */
#ifndef __STDC__
#   define ptrdiff_t int   	/* ANSI bans this -- delete unless pcc wants.   */
#endif

# if !defined size_t && !defined __size_t
   typedef unsigned int size_t;	/* the unsigned integral type of the result of the sizeof operator. */
#  define __size_t 1		/* cf stdlib.h */
# endif

#ifndef __wchar_t
# define __wchar_t 1
  typedef int wchar_t;                         /* also in <stdlib.h> */
   /*
    * An integral type whose range of values can represent distinct codes for
    * all members of the largest extended character set specified among the
    * supported locales; the null character shall have the code value zero and
    * each member of the basic character set shall have a code value when used
    * as the lone character in an integer character constant.
    */
#endif

#ifndef NULL  /* this hack is so that <stdio.h> can also define it */
#  define NULL 0
# endif

#ifdef offsetof /* replace any current offsetof() with the one defined here */
#undef offsetof
#endif

/* for compatibility - should really read: ifndef __TRAN */
# if defined(__ARM) || defined(__C40)
#  define offsetof(type, member) \
    ((size_t)((char *)&(((___type type *)0)->member) - (char *)0))
   /*
    * expands to an integral constant expression that has type size_t, the
    * value of which is the offset in bytes, from the beginning of a structure
    * designated by type, of the member designated by the identifier (if the
    * specified member is a bit-field, the behaviour is undefined).
    */
# else
#  define offsetof(type, member) ((char *)&(((type *)0)->member) - (char *)0)
# endif

#endif

/* end of stddef.h */
@


1.5
log
@fixing stupid size_t definitions
@
text
@d35 4
@


1.4
log
@updated to match latest Norcroft sources
@
text
@d4 1
a4 1
/* $Id: stddef.h,v 1.3 1992/06/01 09:46:48 paul Exp nickc $ */
d14 1
a14 2
# ifndef size_t
#  define size_t unsigned int   /* others (e.g. <stdio.h>) define */
d16 1
@


1.3
log
@correct version of offsetof for C40
@
text
@d4 1
a4 1
/* $Id: stddef.h,v 1.2 1991/06/20 18:01:33 paul Exp $ */
d9 5
a13 1
# define ptrdiff_t int
d16 1
d18 14
a31 1
# ifndef NULL  /* this hack is so that <stdio.h> can also define it */
@


1.2
log
@added correct code for ARM version
@
text
@d4 1
a4 1
/* $Id: stddef.h,v 1.1 90/09/05 11:07:18 nick Exp $ */
d17 2
a18 1
# ifdef __ARM	/* for compatibility - should really read: ifndef __TRAN */
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
/* $Id$ */
d7 1
a7 1
#define __stddef_h
d9 2
a10 2
#define ptrdiff_t int
#ifndef size_t
d12 4
a15 4
#endif
#ifndef NULL  /* this hack is so that <stdio.h> can also define it */
#define NULL 0
#endif
d17 12
a28 1
#define offsetof(type, member) ((char *)&(((type *)0)->member) - (char *)0)
@
