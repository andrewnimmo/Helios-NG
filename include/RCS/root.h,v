head	1.29;
access;
symbols
	Helios_1_3_1:1.29
	Helios_C40_1_3_Official_Release:1.25
	Helios-C40:1.25
	Alenia_release:1.25
	Helios1_3:1.22
	C40_Field_Test_2:1.22
	C40_Field_Test_R1:1.19
	Helios13_beta:1.19
	Helios1_2_2:1.17
	Helios1_2_2Beta:1.16
	Helios1_2_1:1.16
	Helios1_2:1.10
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.29
date	93.08.17.11.33.29;	author bart;	state Exp;
branches;
next	1.28;

1.28
date	93.07.27.13.59.18;	author paul;	state Exp;
branches;
next	1.27;

1.27
date	93.06.16.08.46.51;	author paul;	state Exp;
branches;
next	1.26;

1.26
date	93.05.18.10.47.03;	author bart;	state Exp;
branches;
next	1.25;

1.25
date	92.12.02.15.54.54;	author nickc;	state Exp;
branches;
next	1.24;

1.24
date	92.11.20.18.09.46;	author nick;	state Exp;
branches;
next	1.23;

1.23
date	92.11.18.14.53.14;	author paul;	state Exp;
branches;
next	1.22;

1.22
date	92.09.25.11.01.42;	author paul;	state Exp;
branches;
next	1.21;

1.21
date	92.09.17.16.19.40;	author paul;	state Exp;
branches;
next	1.20;

1.20
date	92.08.05.10.50.04;	author paul;	state Exp;
branches;
next	1.19;

1.19
date	92.06.26.17.50.16;	author paul;	state Exp;
branches;
next	1.18;

1.18
date	92.04.12.19.56.20;	author paul;	state Exp;
branches;
next	1.17;

1.17
date	91.10.11.16.27.20;	author paul;	state Exp;
branches;
next	1.16;

1.16
date	91.03.20.13.00.43;	author paul;	state Exp;
branches;
next	1.15;

1.15
date	91.03.14.18.31.11;	author paul;	state Exp;
branches;
next	1.14;

1.14
date	91.03.10.23.03.12;	author paul;	state Exp;
branches;
next	1.13;

1.13
date	91.02.21.11.00.05;	author paul;	state Exp;
branches;
next	1.12;

1.12
date	91.01.22.15.48.10;	author paul;	state Exp;
branches;
next	1.11;

1.11
date	90.12.07.11.30.55;	author paul;	state Exp;
branches;
next	1.10;

1.10
date	90.12.03.20.20.35;	author paul;	state Exp;
branches;
next	1.9;

1.9
date	90.11.21.16.05.15;	author paul;	state Exp;
branches;
next	1.8;

1.8
date	90.11.19.23.09.28;	author paul;	state Exp;
branches;
next	1.7;

1.7
date	90.11.19.18.53.05;	author paul;	state Exp;
branches;
next	1.6;

1.6
date	90.11.09.19.23.46;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	90.11.01.13.47.07;	author nick;	state Exp;
branches;
next	1.4;

1.4
date	90.10.10.16.44.30;	author nick;	state Exp;
branches;
next	1.3;

1.3
date	90.10.04.17.36.28;	author nick;	state Exp;
branches;
next	1.2;

1.2
date	90.09.26.17.30.43;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.11.07.05;	author nick;	state Exp;
branches;
next	;


desc
@@


1.29
log
@Root_Flags_Cacheoff MUST be defined for all processors, or you will upset
the networking software.
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--                     H E L I O S   N U C L E U S                      --
--                     ---------------------------                      --
--                                                                      --
--             Copyright (C) 1987, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- root.h								--
--                                                                      --
--	Root data structure						--
--                                                                      --
--	Author:  NHG 16/8/87						--
--                                                                      --
------------------------------------------------------------------------*/
/* SccsId: %W% 	%G% Copyright (C) 1987, Perihelion Software Ltd.	*/
/* RcsId: $Id: root.h,v 1.28 1993/07/27 13:59:18 paul Exp bart $ */

#ifndef __root_h
#define __root_h

#ifndef __helios_h
# include <helios.h>
#endif

#include <queue.h>
#include <memory.h>
#include <link.h>
#include <sem.h>

#ifndef in_kernel
struct PTE { word secret; };		/* keep secret outside kernel	*/
#endif

#ifdef __ARM
# include <arm.h>	/* for "[Interrupt|User]Vectors" sizes	*/
#endif
#ifdef __C40
# include <c40.h>
#endif

typedef struct RootStruct {
        word    	ATWFlags;	/* used to fix bugs in ATW h/w	*/
        struct PTE	**PortTable;    /* pointer to port table	*/
        word    	PTSize;         /* number of ports in table	*/
        word    	PTFreeq;        /* port table free queue	*/
	LinkInfo	**Links;	/* pointer to link table	*/
	Pool		SysPool;	/* allocated system memory	*/
	Pool		*FreePool;	/* free memory list		*/
	word		Incarnation;	/* our incarnation number	*/
	List		BufferPool;	/* pending delivery buffer pool	*/
	word		BuffPoolSize;	/* number of free slots in pool	*/
	word		LoadAverage;	/* low pri load average		*/
	word		Latency;	/* hi pri scheduling latency	*/
	word		*TraceVec;	/* pointer to trace vector	*/
#ifdef __TRAN
	List		EventList;	/* list of event routines	*/
#else					/* ditto for each vector	*/
	List		EventList[InterruptVectors];
# ifdef __ABC				/* lists of user event handlers */
	List		UserEventList[UserVectors];
# endif
#endif
	/* Event count only counts interrupts passed on to user handlers. */
	word		EventCount;	/* number of events seen	*/
	word		Time;		/* current system time (secs)	*/
	Pool		FastPool;	/* fast memory pool		*/
	word		MaxLatency;	/* maximum latency		*/
	Semaphore	IODebugLock;	/* lock for all IOdebugs	*/
	word		MachineType;	/* processor type code		*/
	word		BufferCount;	/* number of kernel buffers used*/
	word		MaxBuffers;	/* max number of buffers allowed*/
	word		Timer;		/* system timer value (MHz)	*/
	/* Errors are currently only used for transputers error line.	*/
	word		Errors;		/* number of errors seen	*/
	word		LocalMsgs;	/* local message traffic	*/
	word		BufferedMsgs;	/* messages buffered by kernel	*/
	word		Flags;		/* system flags			*/
	Pool		*LoaderPool;	/* pointer to loader pool	*/
	word		*Configuration;	/* pointer to config structure	*/
	word		*ErrorCodes;	/* array of kernel error codes	*/
	Port		IODebugPort;	/* intercept on IOdebug messages*/
	word		GCControl;	/* control of port garbage collector */
#ifndef __TRAN
	byte		IODBuffer[80];	/* static buffer for IOdebug()s	*/
	word		IODBufPos;	/* Position in buffer		*/
#endif
#ifdef __SMT
	word		*cpi;		/* SMT code pointer index	*/
	word		cpislots;	/* number of slots in cpi	*/
	Semaphore	cpi_op;		/* atomic ops on cpi		*/
#endif
#ifdef __ABC
# ifdef __MI
	MIInfo		*MISysMem;	/* Memory Indirect(ion) table 	*/
# endif
# ifdef __RRD
	word		RRDScavenged;	/* Number of blocks found	*/
	Pool		*RRDPool;	/* Robust Ram Disk pool		*/
# endif
#endif
#ifdef __C40
# ifdef ALLOCDMA
	DMAReq		*DMAReqQhead;	/* outstanding DMA engine alloc req */
	DMAReq		*DMAReqQtail;	/* outstanding DMA engine alloc req */
	DMAFree		*DMAFreeQhead;	/* first free DMA engine in DMAFreeQ */
	DMAFree		DMAFreeQ[6];	/* alloc list of free DMA engines */
# endif
#endif

/* Spare slots to be used when adding new fields to the root structure.
 * If the root structure grows beyond this size, then all the (shared
 * memory) bootstraps that download the config structure. will have to
 * be re-assembled, and distributed with the new nucleus.
 */

#if 1
	Pool		**SpecialPools;	/* pools for fast/global etc. RAM */
#else
	word		spare1;
#endif
#if defined(__ARM) && defined(__VY86PID)
	/* VLSI PID INTC interrupt mask is write only so its contents */
	/* should always be read from here and written here and to INTC. */
	word		IRQM_softcopy;
#else
	word		spare2;
#endif
	word		spare3;
	word		spare4;
	word		spare5;
	word		spare6;
	word		spare7;
	word		spare8;
} RootStruct;

/* flags set in Flags word (init from config.Flags)			*/

#define Root_Flags_rootnode	0x00000001	/* set if rootnode */
#define Root_Flags_special	0x00000002	/* set if special nucleus */
#define Root_Flags_ROM		0x00000004	/* set if ROMm'ed nucleus */
#define Root_Flags_xoffed	0x00000100	/* set if links xoffed	*/
# define Root_Flags_CacheOff	0x00000200	/* Dont enable cache */


MPtr GetNucleusBase(void);
RootStruct *GetRootBase(void);

#if (defined(__ARM) || defined(__C40)) && ! defined(in_kernel)
/* Use macros internally in the kernel */
# define GetSysBase() ((MPtr)GetNucleusBase())
# define GetRoot() (GetRootBase())
#endif
#ifdef __TRAN
/* For the transputer version we cannot afford the luxury of procedure	*/
/* calls to do this.							*/
# define GetSysBase() ((MPtr)0x80001000)
# define GetRoot() ((RootStruct *)((word)GetSysBase()+(word)(*(word *)GetSysBase())))
#endif

/* Processor Statistics structure returned by ServerInfo of /tasks */

typedef struct ProcStats {
	word	Type;			/* processor type		*/
	word	Load;			/* usec/process av. cpu usage	*/
	word	Latency;		/* average interrupt latency	*/
	word	MaxLatency;		/* max interrupt latency seen	*/
	word	MemMax;			/* memory available on processor*/
	word	MemFree;		/* amount currently free	*/
	word	LocalTraffic;		/* bytes sent in local messages	*/
	word	Buffered;		/* data buffered by kernel	*/
	word	Errors;			/* number of errors raised	*/
	word	Events;			/* number of events		*/
	word	NLinks;			/* number of links following	*/
	struct {
		LinkConf	Conf;	/* link configuration		*/
		word		In;	/* bytes transmitted thru link	*/
		word		Out;	/* bytes received through link	*/
		word		Lost;	/* messages lost or sunk	*/
	} Link[4 /* NLinks */];		/* for each link		*/
	char	Name[Variable];		/* current network name		*/
					/* note that the exact position */
					/* of the Name field depends on	*/
					/* the value of NLinks.		*/
} ProcStats;

#endif /* __root_h */


/* -- End of root.h */

@


1.28
log
@merged in ARM changes
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.27 1993/06/16 08:46:51 paul Exp paul $ */
a142 1
#ifdef __C40
d144 1
a144 1
#endif
@


1.27
log
@corrected GetRootBase prototype.
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.26 1993/05/18 10:47:03 bart Exp $ */
d64 1
d74 1
a109 1
	Pool		**SpecialPools;	/* pools for fast/global etc. RAM */
d111 5
a115 8
/*	word		spare1;		/ * Spare slots to be used when adding */
	word		spare2;		/* new fields to the root structure. */
	word		spare3;		/* If the root structure grows beyond */
	word		spare4;		/* this size, then all the (shared */
	word		spare5;		/* memory) bootstraps that download */
	word		spare6;		/* the config structure. will have to */
	word		spare7;		/* be re-assembled, and distributed */
	word		spare8;		/* with the new nucleus. */
d117 18
d139 3
a141 3
#define Root_Flags_rootnode	0x00000001	/* set if this is rootnode */
#define Root_Flags_special	0x00000002	/* set if this is special nucleus */
#define Root_Flags_ROM		0x00000004	/* set if this is ROMm'ed nucleus */
d143 3
a145 1
#define Root_Flags_CacheOff	0x00000200	/* Dont enable cache */
@


1.26
log
@One of the flags was only defined when compiling for C40. This upset
the Network Server
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.25 1992/12/02 15:54:54 nickc Exp bart $ */
d130 1
a130 1
word *GetRootBase(void);
d135 1
a135 1
# define GetRoot() ((RootStruct *)GetRootBase())
@


1.25
log
@removed Idle and StdPriProcs
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.24 1992/11/20 18:09:46 nick Exp nickc $ */
d127 1
a127 4
#ifdef __C40
# define Root_Flags_CacheOff	0x00000200	/* Dont enable cache */
/* @@@@@@ will add flags to force code/data/nucleus to local/global busses */
#endif
@


1.24
log
@Return types of GetNucleusBase() and GetSysBase() converted to MPtr's.
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.21 1992/09/17 16:19:40 paul Exp $ */
a84 2
	word		Idle;		/* % of time processor is idle	*/
	word		StdPriProcs;	/* No. of StandardPri processes	*/
@


1.23
log
@added spare fields in root structure under instruction of NickG
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.22 1992/09/25 11:01:42 paul Exp $ */
d110 3
a112 1
	word		spare1;		/* Spare slots to be used when adding */
d120 1
d134 1
a134 6
#ifdef __C40
word GetNucleusBase(void); /* returns word address */
#else
word *GetNucleusBase(void);
#endif

d139 1
a139 1
# define GetSysBase() GetNucleusBase()
d145 2
a146 2
# define GetSysBase() ((word *)0x80001000)
# define GetRoot() ((RootStruct *)((word)GetSysBase()+(word)(*GetSysBase())))
d179 1
@


1.22
log
@updated for new ARM port
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.21 1992/09/17 16:19:40 paul Exp $ */
d110 8
d131 3
d135 2
d141 1
a141 1
# define GetSysBase() ((word *)GetNucleusBase())
@


1.21
log
@updated for new ARM port
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.20 1992/08/05 10:50:04 paul Exp $ */
d126 1
a126 5
#ifdef __ARM
# define GetSysBase() ((word *)GetNucleusBase())
# define GetRoot() ((RootStruct *)GetRootBase())
#endif
#if defined(__C40) && ! defined(in_kernel)
@


1.20
log
@removed stupid C rem word for % operator
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.19 1992/06/26 17:50:16 paul Exp $ */
d36 1
a36 1
# include <arm/manifest.h>	/* for "[Interrupt|User]Vectors" sizes	*/
a37 1

d60 1
a60 1
# ifdef __ARM				/* lists of user event handlers */
d93 1
a93 1
#ifdef __ARM
@


1.19
log
@added cacheoff flag to root flags
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.18 1992/04/12 19:56:20 paul Exp $ */
a103 1
	unsigned int	Rem;		/* remainder for NCC support fns */
@


1.18
log
@c40 support added
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.17 1991/10/11 16:27:20 paul Exp $ */
d120 4
@


1.17
log
@SMT -> __SMT
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.16 1991/03/20 13:00:43 paul Exp paul $ */
d36 1
a36 1
# include <abcARM/manifest.h>	/* for "[Interrupt|User]Vectors" sizes	*/
d39 4
d83 1
a83 1
#ifdef __ARM
d88 2
a89 1
# ifdef __SMT
d93 2
a94 1
# endif
d103 9
a120 1

d124 10
a133 4
#ifndef __TRAN
#define GetSysBase() ((word *)GetNucleusBase())
#define GetRoot() ((RootStruct *)GetRootBase())
#else
d136 2
a137 2
#define GetSysBase() ((word *)0x80001000)
#define GetRoot() ((RootStruct *)((word)GetSysBase()+(word)(*GetSysBase())))
d166 2
a167 1
#endif
@


1.16
log
@root.h now includes abcARM/manifests to fix the size of the user+interrupt
Event list arry.
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.15 91/03/14 18:31:11 paul Exp $ */
d84 1
a84 1
# ifdef SMT
@


1.15
log
@added generic processor vectored interrupt event handling
added ARM user event support
tided up organisation a little
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.14 91/03/10 23:03:12 paul Exp $ */
d36 1
a36 2
# define InterruptVectors 14
# define UserVectors 3
@


1.14
log
@changed rrdpool and sysmiinfo to pointers (ARM)
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.13 91/02/21 11:00:05 paul Exp $ */
d35 5
d54 1
d56 6
d78 2
d81 2
a96 7
	byte		IODBuffer[80];	/* static buffer for IOdebug()s	*/
	word		IODBufPos;	/* Position in buffer		*/
#endif
	Port		IODebugPort;	/* intercept on IOdebug messages*/
	word		GCControl;	/* control of port garbage collector */
#ifdef __ARM
	List		ShutdownList ;	/* list of shutdown routines	*/
@


1.13
log
@support for powerfail event list (ARM)
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.12 91/01/22 15:48:10 paul Exp $ */
d75 1
a75 1
	MIInfo		MISysMem;	/* Memory Indirect(ion) table 	*/
d79 1
a79 1
	Pool		RRDPool;	/* Robust Ram Disk pool		*/
@


1.12
log
@added support for robust ram disk and relocatable memory system into root
struct
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.11 90/12/07 11:30:55 paul Exp $ */
d54 1
a54 1
	Semaphore	IODebugLock;	/* lock for all IOdebugs	*/	
d86 3
@


1.11
log
@changed RMM/RM to MI prefix to differenciate from Barts RMlib stuff.
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.10 90/12/03 20:20:35 paul Exp Locker: paul $ */
d66 1
a66 1
#ifdef __HELIOSARM
d75 3
a77 4
	word		**MITable;	/* Memory Indirect(ion) table	*/
	word		MIFreeSlots;	/* Free slots in MI table	*/
	word		MITableSize;	/* Total slots in MI Table	*/
#  ifdef __RRD
a79 1
#  endif
@


1.10
log
@added note of blocks scavenged from memory at reset
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.9 90/11/21 16:05:15 paul Exp $ */
d74 4
a77 4
# ifdef __RMM
	word		**RMTable;	/* RMM indirection table	*/
	word		RMFreeSlots;	/* Free slots in RMM table	*/
	word		RMTableSize;	/* Total slots in RMM Table	*/
@


1.9
log
@added buffer for new faster IOdebug()'s
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.8 90/11/19 23:09:28 paul Exp Locker: paul $ */
d79 1
@


1.8
log
@changed RMM/RRD #ifdef to __RMM/__RRD for safety
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.7 90/11/19 18:53:05 paul Exp Locker: paul $ */
d82 2
@


1.7
log
@changed names of RMM variables in root struct
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.6 90/11/09 19:23:46 paul Exp $ */
d74 2
a75 2
# ifdef RMM
	word		*RMTable;	/* RMM indirection table	*/
d78 1
a78 1
#  ifdef RRD
@


1.6
log
@added support for ARM robust ram disk and relocatable memory manager
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.5 90/11/01 13:47:07 nick Exp $ */
d75 3
a77 3
	word		*RMMTable;	/* RMM indirection table	*/
	word		RMMFreeSlots;	/* Free slots in RMM table	*/
	word		RMMTableSize;	/* Total slots in RMM Table	*/
@


1.5
log
@rl
GCControl added
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.4 90/10/10 16:44:30 nick Exp Locker: nick $ */
d73 8
@


1.4
log
@IODebugPort was put in wrong place!!
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.3 90/10/04 17:36:28 nick Exp Locker: nick $ */
d76 1
d109 1
a109 1
	word	LocalTraffic;		/* bytes send in local messages	*/
@


1.3
log
@CODES option test removed, IODebugPort added
@
text
@d17 1
a17 1
/* RcsId: $Id: root.h,v 1.2 90/09/26 17:30:43 paul Exp Locker: nick $ */
d74 1
a75 1
#endif
@


1.2
log
@arm integration with 1.2 changes
@
text
@d17 1
a17 1
/* RcsId: $Id$ */
a64 1
#ifdef CODES
a65 1
#endif
d74 1
@


1.1
log
@Initial revision
@
text
@d17 1
d71 5
a75 1
	Pool		*LoaderPool;	/* pointer to loader pool	*/
@
