head	1.6;
access;
symbols
	Helios_1_3_1:1.6
	Helios_C40_1_3_Official_Release:1.4
	Helios-C40:1.4
	Alenia_release:1.4
	Helios1_3:1.3
	C40_Field_Test_2:1.3
	C40_Field_Test_R1:1.1
	Helios13_beta:1.1
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1
	Helios1_2:1.1
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.6
date	93.08.18.16.19.50;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	93.08.05.14.18.08;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	92.11.20.18.11.02;	author nick;	state Exp;
branches;
next	1.3;

1.3
date	92.07.21.18.36.03;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	92.07.20.10.14.49;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.11.07.31;	author nick;	state Exp;
branches;
next	;


desc
@@


1.6
log
@fixed for C++ compilation on Xputer
@
text
@ /*------------------------------------------------------------------------
--                                                                      --
--                     H E L I O S   N U C L E U S                      --
--                     ---------------------------                      --
--                                                                      --
--             Copyright (C) 1987, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- task.h								--
--                                                                      --
--	Kernel task support.						--
--                                                                      --
--	Author:  NHG 16/8/87						--
--                                                                      --
------------------------------------------------------------------------*/
/* SccsId: %W% %G% Copyright (C) 1987, Perihelion Software Ltd.	*/
/* $Id: task.h,v 1.5 1993/08/05 14:18:08 nickc Exp $ */


#ifndef __task_h
#define __task_h

#ifndef __helios_h
#include <helios.h>
#endif

#include <queue.h>
#include <message.h>
#include <memory.h>
#include <module.h>
#ifdef __C40
#include <sem.h>
#endif


/* Task structure */

struct Task 
{
	Node		Node;		/* queueing node		*/
	MPtr		Program;	/* pointer to program structure	*/
	Pool		MemPool;	/* task private memory pool	*/
#ifdef __cplusplus
	uword		Port;		/* initial message port		*/
	uword		Parent;		/* parent's message port	*/
	uword		IOCPort;	/* tasks IOC port		*/
#else
	Port		Port;		/* initial message port		*/
	Port		Parent;		/* parent's message port	*/
	Port		IOCPort;	/* tasks IOC port		*/
#endif
	word		Flags;		/* Flags field			*/
	VoidFnPtr	ExceptCode;	/* exception routine		*/
	byte		*ExceptData;	/* data for same		*/
	byte		*HeapBase;	/* base of heap			*/
	word		*ModTab;	/* pointer to task module table */
#ifdef __in_procman
	struct TaskEntry *TaskEntry;	/* pointer to procman control struct */
#else
	word		TaskEntry;	/* to avoid making TaskEntry public */
#endif
#ifdef __C40
	Semaphore	StackLock;	/* Lock on the StackChunks list */
	List		StackChunks;	/* List of free stack chunks    */
#endif
};

#ifndef __cplusplus
typedef struct Task Task;
#endif

/* Bits in flag word */

#define Task_Flags_ioc		1	/* SysLib Debugging...	*/
#define Task_Flags_stream	2
#define Task_Flags_memory	4
#define Task_Flags_error	8
#define Task_Flags_process	16
#define Task_Flags_pipe		32
#define Task_Flags_info		64
#define Task_Flags_meminfo	128
#define Task_Flags_fork		256
#define Task_Flags_servlib	512

#define Task_Flags_fixmem	0x01000000	/* no heap expansion	*/

/* Kernel procedures */

extern word TaskInit(Task *);
extern void CallException(Task *,word);
extern word *InitProcess(word *stack, VoidFnPtr entry, VoidFnPtr exit, word *display, word nargs);
extern void StartProcess(word *p, word pri);
extern void StopProcess(void);
extern word MachineType(void);

/* External variables */
 
extern Task *MyTask;	/* set by C startup */

#endif

/* -- End of tasks.h */

@


1.5
log
@added stack chunk fields to Task structure
@
text
@d1 1
a1 1
/*------------------------------------------------------------------------
d17 1
a17 1
/* $Id: task.h,v 1.4 1992/11/20 18:11:02 nick Exp nickc $ */
d38 2
a39 1
typedef struct Task {
d43 5
d51 1
d66 5
a70 1
} Task;
d97 1
a97 1

@


1.4
log
@Program field of Task structure converted to an MPtr.
@
text
@d17 1
a17 1
/* $Id: task.h,v 1.3 1992/07/21 18:36:03 paul Exp $ */
d31 4
d54 4
@


1.3
log
@removed nickc's changes
@
text
@d17 1
a17 1
/* $Id: task.h,v 1.1 1990/09/05 11:07:31 nick Exp $ */
d19 1
d36 1
a36 1
	Program		*Program;	/* pointer to program structure	*/
d84 1
@


1.2
log
@added stack_chunk to end of task structure for C40 environment
@
text
@d17 1
a17 1
/* $Id: task.h,v 1.1 1990/09/05 11:07:31 nick Exp nickc $ */
d35 1
a35 1
	Program	*	Program;	/* pointer to program structure	*/
d42 3
a44 3
	byte *		ExceptData;	/* data for same		*/
	byte *		HeapBase;	/* base of heap			*/
	word *		ModTab;		/* pointer to task module table */
a49 3
#ifdef __C40
	void * 		stack_chunk;	/* header of current chunk 	*/
#endif
d69 6
a74 6
extern word	TaskInit( Task * );
extern void	CallException( Task *, word );
extern word *	InitProcess( word * stack, VoidFnPtr entry, VoidFnPtr exit, word * display, word nargs );
extern void	StartProcess( word * p, word pri );
extern void	StopProcess( void );
extern word	MachineType( void );
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
/* $Id$ */
d35 1
a35 1
	Program		*Program;	/* pointer to program structure	*/
d42 3
a44 3
	byte		*ExceptData;	/* data for same		*/
	byte		*HeapBase;	/* base of heap			*/
	word		*ModTab;	/* pointer to task module table */
d50 3
d72 6
a77 6
extern word TaskInit(Task *);
extern void CallException(Task *,word);
extern word *InitProcess(word *stack, VoidFnPtr entry, VoidFnPtr exit, word *display, word nargs);
extern void StartProcess(word *p, word pri);
extern void StopProcess(void);
extern word MachineType(void);
@
