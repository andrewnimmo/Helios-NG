head	1.4;
access;
symbols
	Helios_1_3_1:1.4
	Helios_C40_1_3_Official_Release:1.4
	Helios-C40:1.4
	Alenia_release:1.4
	Helios1_3:1.4
	C40_Field_Test_2:1.4
	C40_Field_Test_R1:1.1
	Helios13_beta:1.1
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1
	Helios1_2:1.1
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.4
date	92.08.13.13.11.55;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	92.08.12.15.45.07;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	92.08.12.11.10.57;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.11.06.17;	author nick;	state Exp;
branches;
next	;


desc
@@


1.4
log
@c40 _ctype is array not pointer
@
text
@/* ctype.h: ANSI draft (X3J11 Oct 86) library header, section 4.3 */
/* Copyright (C) A.C. Norman and A. Mycroft */
/* version 0.02 - SccsId: %W% %G% */
/* $Id: ctype.h,v 1.3 1992/08/12 15:45:07 nickc Exp $ */

#ifndef __ctype_h
#define __ctype_h

/* N.B. - keep in step with <ctype.c> */

#define __S 1            /* whitespace           */
#define __P 2            /* punctuation          */
#define __B 4            /* blank                */
#define __L 8            /* lower case letter    */
#define __U 16           /* upper case letter    */
#define __N 32           /* (decimal) digit      */
#define __C 64           /* control chars        */
#define __X 128          /* A-F and a-f          */

#ifdef __C40
extern unsigned char 	_ctype[ 256 ];
#else
extern unsigned char *	_ctype;
#endif

#    define isalnum(c) (_ctype[ c ] & (__U + __L + __N))
extern int (isalnum)(int c);
#    define isalpha(c) (_ctype[ c ] & (__U + __L))
extern int (isalpha)(int c);
#    define iscntrl(c) (_ctype[ c ] & __C)
extern int (iscntrl)(int c);
#    define isdigit(c) (_ctype[ c ] & __N)
extern int (isdigit)(int c);
#    define isgraph(c) (_ctype[ c ] & (__L + __U + __N + __P))
extern int (isgraph)(int c);
#    define islower(c) (_ctype[ c ] & __L)
extern int (islower)(int c);
#    define isprint(c) (_ctype[ c ] & (__L + __U + __N + __P + __B))
extern int (isprint)(int c);
#    define ispunct(c) (_ctype[ c ] & __P)
extern int (ispunct)(int c);
#    define isspace(c) (_ctype[ c ] & __S)
extern int (isspace)(int c);
#    define isupper(c) (_ctype[ c ] & __U)
extern int (isupper)(int c);
#    define isxdigit(c) (_ctype[ c ] & (__N + __X))
extern int (isxdigit)(int c);

extern int tolower( int c );
extern int toupper( int c );

#endif

/* end of ctype.h */
@


1.3
log
@updated to conform to latest Norcroft sources
@
text
@d4 1
a4 1
/* $Id: ctype.h,v 1.2 1992/08/12 11:10:57 nickc Exp nickc $ */
d20 2
a21 4
#if 0	/* not POSIX */

extern unsigned char 	_ctype[ 256 ];  /* BLV - 256 used to be missing, giving a warning */

a22 1

a23 1

@


1.2
log
@fixed so that iscntrl uses __C not 0
@
text
@d3 2
a4 2
/* version 0.01 - SccsId: %W% %G% */
/* $Id: ctype.h,v 1.1 1990/09/05 11:06:17 nick Exp nickc $ */
d17 1
a17 1
#define __C 64           /* underscore           */
d22 2
a23 2
extern unsigned char _ctype[ 256 ];  /* BLV - 256 used to be missing, giving a 
                                      warning */
d26 1
a26 1
extern unsigned char *_ctype;
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
/* $Id$ */
d20 1
a20 1
#if 0
d22 1
a22 1
extern unsigned char _ctype[256];  /* BLV - 256 used to be missing, giving a 
d30 1
a30 1
#    define isalnum(c) (_ctype[c] & (__U+__L+__N))
d32 1
a32 1
#    define isalpha(c) (_ctype[c] & (__U+__L))
d34 1
a34 1
#    define iscntrl(c) (!(_ctype[c] & (__P+__B+__L+__U+__N)))
d36 1
a36 1
#    define isdigit(c) (_ctype[c] & __N)
d38 1
a38 1
#    define isgraph(c) (_ctype[c] & (__L+__U+__N+__P))
d40 1
a40 1
#    define islower(c) (_ctype[c] & __L)
d42 1
a42 1
#    define isprint(c) (_ctype[c] & (__L+__U+__N+__P+__B))
d44 1
a44 1
#    define ispunct(c) (_ctype[c] & __P)
d46 1
a46 1
#    define isspace(c) (_ctype[c] & __S)
d48 1
a48 1
#    define isupper(c) (_ctype[c] & __U)
d50 1
a50 1
#    define isxdigit(c) (_ctype[c] & (__N+__X))
d53 2
a54 2
extern int tolower(int c);
extern int toupper(int c);
@
