head	1.20;
access;
symbols
	Helios_1_3_1:1.20
	Helios_C40_1_3_Official_Release:1.18
	Helios-C40:1.18
	Alenia_release:1.18
	Helios1_3:1.10
	C40_Field_Test_2:1.10
	C40_Field_Test_R1:1.9
	Helios13_beta:1.9
	Helios1_2_2:1.5
	Helios1_2_2Beta:1.5
	Helios1_2_1:1.4
	Helios1_2:1.1
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.20
date	93.09.02.14.45.17;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	93.07.19.13.46.59;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	92.12.07.09.30.06;	author nickc;	state Exp;
branches;
next	1.17;

1.17
date	92.12.04.16.41.47;	author nickc;	state Exp;
branches;
next	1.16;

1.16
date	92.12.03.16.48.51;	author paul;	state Exp;
branches;
next	1.15;

1.15
date	92.12.02.14.49.54;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	92.11.25.13.18.26;	author nick;	state Exp;
branches;
next	1.13;

1.13
date	92.11.23.16.45.06;	author nick;	state Exp;
branches;
next	1.12;

1.12
date	92.11.20.18.03.22;	author nick;	state Exp;
branches;
next	1.11;

1.11
date	92.11.18.14.52.58;	author paul;	state Exp;
branches;
next	1.10;

1.10
date	92.07.28.16.11.31;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	92.06.15.12.05.33;	author paul;	state Exp;
branches;
next	1.8;

1.8
date	92.06.12.09.42.42;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	92.02.18.16.29.19;	author paul;	state Exp;
branches;
next	1.6;

1.6
date	91.12.02.15.35.20;	author martyn;	state Exp;
branches;
next	1.5;

1.5
date	91.05.03.21.38.40;	author paul;	state Exp;
branches;
next	1.4;

1.4
date	91.03.01.18.43.38;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	91.02.26.15.02.07;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	91.01.22.15.47.09;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.11.06.37;	author nick;	state Exp;
branches;
next	;


desc
@@


1.20
log
@fixed subtle bug in CtoM_() for non-C40 machines.  This fixes a bug in 'mem'
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--                     H E L I O S   N U C L E U S                      --
--                     ---------------------------                      --
--                                                                      --
--             Copyright (C) 1987, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- helios.h								--
--                                                                      --
--	General purpose header. Defines basic types and some useful	--
--	macros.								--
--                                                                      --
--	Author:  NHG 16/8/87						--
--                                                                      --
------------------------------------------------------------------------*/
/* SccsId: %W%	%G% Copyright (C) 1987, Perihelion Software Ltd.	*/
/* $Id: helios.h,v 1.19 1993/07/19 13:46:59 nickc Exp nickc $ */

#ifndef __helios_h
#define __helios_h

/* standard type definitions */
typedef  long 		word    ;       /* a machine word, 32 bits      */
#ifndef  WORD
#define  WORD           word            /* a synonym			*/
#endif
#ifndef  INT
#define	 INT		word	 	/* another synonym		*/
#endif

typedef  unsigned long  uword   ;       /* a machine word, 32 bits      */
#ifndef  UWORD
#define  UWORD		uword		/* synonym			*/
#endif

typedef  short 		SHORT	;	/* a 16 bit word 		*/
typedef  unsigned short USHORT	;	/* an unsigned 16 bit value	*/

typedef  char           byte    ;       /* a byte, used in place of char*/
#ifndef  BYTE
#define  BYTE		byte		/* a synonym			*/
#endif

typedef  unsigned char  ubyte   ;       /* an unsigned byte             */
#ifndef  UBYTE
#define  UBYTE		ubyte		/* a synonym			*/
#endif

typedef  word		bool	;	/* boolean value		*/

typedef  char		*string ;	/* character string pointer	*/
#ifndef STRING
#define STRING		string		/* synonym			*/
#endif

typedef  void		(*VoidFnPtr)();	/* pointer to void function	*/
typedef  word		(*WordFnPtr)();	/* pointer to word function	*/

#ifdef __TRAN
typedef  word		Channel	;	/* a transputer channel		*/
#else
typedef  word		Channel	;	/* generic id of h/w channel	*/
#endif

#ifdef in_kernel
typedef	 word		Code	;	/* Function/Result code		*/
#endif

typedef  char 		*APTR   ;       /* a machine pointer            */
typedef  word           RPTR    ;       /* a self relative pointer      */


/* On some systems the machine pointer is not the same as a C pointer.	*/

#ifndef __C40

/* On anything other than a C40, Machine and C pointers are the same.	*/
/* Define all the macros so that code will work on all systems.		*/

typedef	char		*MPtr	;	/* Machine Pointer		*/

#define MWord_(mp,offset)		(*((word *)((mp)+(offset))))
#define SetMWord_(mp,offset,val)	((*((word *)((mp)+(offset)))) = val)
#define MData_(dest,mp,offset,size)	memcpy(dest,(char *)((mp)+(offset)),size)
#define SetMData_(mp,offset,src,size)	memcpy((char *)((mp)+(offset)),src,size)
#define MToFn_(mp)			(mp)
#define MRTOA_(mp)			((MPtr)((mp)+*(word *)(mp)))
#define MInc_(mp,n) 			((MPtr)((mp)+(n)))
#define NullMPtr			NULL
#define MNull_(x)			((x)==NullMPtr)
#define MtoC_(x)			(x)
#define CtoM_(x)			((MPtr) (x))

#else

/* The C40 is a WORD addressed machine. C pointers are BYTE addresses.	*/

typedef	uword		MPtr	;	/* Machine Pointer		*/

#define MWord_(mp,offset) 		MP_GetWord(mp,(offset)/4)
#define SetMWord_(mp,offset,val)	MP_PutWord(mp,(offset)/4,val)
#define MData_(dest,mp,offset,size)	MP_GetData(dest,mp,(offset)/4,(size)/4)
#define SetMData_(mp,offset,src,size)	MP_PutData(mp,(offset)/4,src,(size)/4)
#define MToFn_(mp) 			(mp)
#define MRTOA_(mp) 			((MPtr)(mp+(MWord_(mp,0)/4)))
#define MInc_(mp,n) 			((MPtr)(mp+((n)/4)))
#define NullMPtr			0
#define MNull_(x)			((x)==NullMPtr)

#define MtoC_(x)			C40CAddress(x)
#define CtoM_(x)			C40WordAddress(x)

#endif

/* Get around ANSI spec. disallowing casts of non fn objects to fn pointers */ 

#ifdef __C40
/*
 * XXX - NC - 12/6/92
 *
 * You cannot do this on the C40, as function and data pointers
 * are completely different.  If you must cast between them then
 * use these functions ...
 */

extern VoidFnPtr	_DataToFuncConvert( void * );
extern void *		_FuncToDataConvert( VoidFnPtr );

#endif

typedef union fncast
{
    word	w;
    word *	wp;
    void *	vp;
    char *	cp;
    VoidFnPtr	vfn;
    WordFnPtr	wfn;
    MPtr	mp;
} fncast;


#define PUBLIC				/* an exported symbol		*/
#define PRIVATE		static		/* an unexported symbol		*/
#define FORWARD				/* forward proc reference	*/

/* Syntactic enrichment...						*/

#define forever		for (;;)
#define unless( x )	if (!(x))
#define until(  x )	while (!(x))
#define elif(   x )	else if (x)

#ifndef TRUE
#define TRUE		1
#define FALSE		0
#endif
#define true		1
#define false		0

#define Variable	1		/* indicates variably sized vectors */
					/* in structure definitions	    */

#define RTOA(x) ((APTR)((word)&(x) + (x)))	/* convert RPTR to APTR */
#define ATOR(x) ((RPTR)((x) - (word)&(x)))	/* convert APTR to RPTR	*/

#define MinInt          0x80000000l
#define MaxInt		0x7fffffffl

#ifdef T800
#define MemStart	(MinInt + 0x70)
#endif
#ifdef T414
#define MemStart	(MinInt + 0x48)
#endif

#ifndef NULL
#define NULL		0
#endif

#define New(_type)	(_type *)Malloc(sizeof(_type))	/* allocate a struct on heap */

#define wordlen(x)	(((x) + 3) & ~3)		/* assumes 32 bit words */

#define Null(_type)	((_type *)NULL)		/* Null pointer to type _type */

#define OneSec		1000000L		/* one second in micro-seconds	   */
#define OneCentisec	10000L			/* one centisecond in micro-seconds */
#define OneMillisec	1000L			/* one millisecond in micro-seconds */

/* Helios system parameters */

#define NameMax		32		/* maximum size of name component */
#define c_dirchar	'/'		/* directory seperator		  */
#define c_matchar	':'		/* matrix row seperator		  */

/* Debugging */

#if defined(SUN4)
void IOdebug();
#else
void		IOdebug( const char *fmt,... );
void		back_trace( void );		/* Prints stack backtrace using IOdebug() */
char *		procname( VoidFnPtr );		/* Prints name of function pointed to or name of parent */ 
#endif

#define print(x) IOdebug( #x " = %x (%d)",x,x);
#define CHECK(x) if(*(word *)(x) != 0 )IOdebug("CHECK %x -> %x",x,*(word *)(x));

#endif

#ifdef __C40
#include <c40.h>	/* because of MtoC and CtoM macros */
#endif

/* -- End of helios.h */

@


1.19
log
@added cast in CtoM_() so that result is an MPtr
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.18 1992/12/07 09:30:06 nickc Exp nickc $ */
d93 1
a93 1
#define CtoM_(x)			((MPtr) x)
@


1.18
log
@added prototypes for _backjtrace() and procname()
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.17 1992/12/04 16:41:47 nickc Exp nickc $ */
d93 1
a93 1
#define CtoM_(x)			(x)
@


1.17
log
@added back_trace prototype
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.16 1992/12/03 16:48:51 paul Exp nickc $ */
a202 1
void		back_trace( void );		/* Prints stack backtrace.*/
d204 2
@


1.16
log
@changed names of all WP_ functions to MP_
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.15 1992/12/02 14:49:54 nickc Exp paul $ */
d203 2
a204 1
void IOdebug(const char *fmt,...);
@


1.15
log
@added inclusion of c40.h
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.14 1992/11/25 13:18:26 nick Exp nickc $ */
d101 4
a104 4
#define MWord_(mp,offset) 		WP_GetWord(mp,(offset)/4)
#define SetMWord_(mp,offset,val)	WP_PutWord(mp,(offset)/4,val)
#define MData_(dest,mp,offset,size)	WP_GetData(dest,mp,(offset)/4,(size)/4)
#define SetMData_(mp,offset,src,size)	WP_PutData(mp,(offset)/4,src,(size)/4)
@


1.14
log
@Cosmetic changes.
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.13 1992/11/23 16:45:06 nick Exp nick $ */
d110 1
d211 3
@


1.13
log
@MPtr field added to fncast union.
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.10 1992/07/28 16:11:31 nickc Exp $ */
d83 7
a89 7
#define MWord_(cp,offset)		(*((word *)((cp)+(offset))))
#define SetMWord_(cp,offset,val)	((*((word *)((cp)+(offset)))) = val)
#define MData_(dest,cp,offset,size)	memcpy(dest,(char *)((cp)+(offset)),size)
#define SetMData_(cp,offset,src,size)	memcpy((char *)((cp)+(offset)),src,size)
#define MToFn_(cp)			(cp)
#define MRTOA_(cp)			((MPtr)((cp)+*(word *)(cp)))
#define MInc_(cp,n) 			((MPtr)((cp)+(n)))
d101 7
a107 7
#define MWord_(cp,offset) 		WP_GetWord(cp,(offset)/4)
#define SetMWord_(cp,offset,val)	WP_PutWord(cp,(offset)/4,val)
#define MData_(dest,cp,offset,size)	WP_GetData(dest,cp,(offset)/4,(size)/4)
#define SetMData_(cp,offset,src,size)	WP_PutData(cp,(offset)/4,src,(size)/4)
#define MToFn_(cp) 			(cp)
#define MRTOA_(cp) 			((MPtr)(cp+(MWord_(cp,0)/4)))
#define MInc_(cp,n) 			((MPtr)(cp+((n)/4)))
@


1.12
log
@MPtr typedefs and macros added.
@
text
@d139 1
@


1.11
log
@added MPtr typedef
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.10 1992/07/28 16:11:31 nickc Exp nickc $ */
d73 40
a112 3
#ifdef __C40
/* pointer type for machine addresses (C40 word addresses) */
typedef word MPtr;
a114 1

d129 1
a129 1
#else
d132 1
a132 1
  {
d139 1
a139 2
  }
fncast;
a140 1
#endif /* __C40 */
d211 1
@


1.10
log
@protected #defines and changed true and false to not be longs
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.9 1992/06/15 12:05:33 paul Exp nickc $ */
d72 6
@


1.9
log
@fixed to use std __proc names
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.8 1992/06/12 09:42:42 nickc Exp paul $ */
d25 1
d27 2
d30 1
d33 1
d35 1
d41 1
d43 1
d46 1
d48 1
d53 1
d55 1
d72 1
d89 10
a98 8
typedef union fncast {
	word	w;
	word	*wp;
	void	*vp;
	char	*cp;
	VoidFnPtr vfn;
	WordFnPtr wfn;
} fncast;
d108 4
a111 4
#define forever		for(;;)
#define unless(x)	if(!(x))
#define until(x)	while(!(x))
#define elif(x)		else if(x)
d114 2
a115 2
#define TRUE		1l
#define FALSE		0l
d117 2
a118 2
#define true		1l
#define false		0l
d123 2
a124 2
#define RTOA(x) ((APTR)((word)&(x)+(x)))	/* convert RPTR to APTR */
#define ATOR(x) ((RPTR)((x)-(word)&(x)))	/* convert APTR to RPTR	*/
d130 1
a130 1
#define MemStart	(MinInt+0x70)
d133 1
a133 1
#define MemStart	(MinInt+0x48)
d140 1
a140 1
#define New(_type)	(_type *)Malloc(sizeof(_type)) /* allocate a struct on heap */
d142 1
a142 1
#define wordlen(x)	(((x)+3) & ~3)		/* assumes 32 bit words */
d146 3
a148 3
#define OneSec		1000000l		/* one second in micro-seconds	   */
#define OneCentisec	10000l			/* one centisecond in micro-seconds */
#define OneMillisec	1000l			/* one millisecond in micro-seconds */
@


1.8
log
@removed declaration of fncast union for C40, as this does not work
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.7 1992/02/18 16:29:19 paul Exp nickc $ */
d62 1
a62 1
#ifdef __HELIOSC40
d85 1
a85 1
#endif /* __HELIOSC40 */
@


1.7
log
@comment on Channel use
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.6 1991/12/02 15:35:20 martyn Exp $ */
d60 1
d62 14
a75 1
/* Get around ANSI spec. disallowing casts of non fn objects to fn pointers */ 
d84 2
@


1.6
log
@finally removed ORION
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.5 1991/05/03 21:38:40 paul Exp martyn $ */
d48 1
d50 3
d137 1
@


1.5
log
@added values for millisecs and centisecs
,.
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.4 91/03/01 18:43:38 paul Exp $ */
d123 1
a123 1
#if defined(ORION) || defined(SUN4)
@


1.4
log
@updated to work with SUN host systems
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.3 91/02/26 15:02:07 paul Exp $ */
d112 2
@


1.3
log
@removed ARM/TRAN differences in typedef of word and uword
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.2 91/01/22 15:47:09 paul Exp Locker: paul $ */
d121 1
a121 1
#ifdef ORION
@


1.2
log
@added fncast union to allow casts of non fn objects to fn pointers
@
text
@d18 1
a18 1
/* $Id: helios.h,v 1.1 90/09/05 11:06:37 nick Exp Locker: nick $ */
a23 3
#ifdef __ARM
typedef  int		word    ;       /* a machine word, 32 bits      */
#else
a24 1
#endif
a27 3
#ifdef __ARM
typedef  unsigned int	uword   ;       /* a machine word, 32 bits      */
#else
a28 1
#endif
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
/* $Id$ */
d24 3
a26 1

d28 1
d32 3
d36 1
d64 10
@
