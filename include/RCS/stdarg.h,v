head	1.6;
access;
symbols
	Helios_1_3_1:1.6
	Helios_C40_1_3_Official_Release:1.6
	Helios-C40:1.6
	Alenia_release:1.6
	Helios1_3:1.6
	C40_Field_Test_2:1.6
	C40_Field_Test_R1:1.6
	Helios13_beta:1.6
	Helios1_2_2:1.2
	Helios1_2_2Beta:1.2
	Helios1_2_1:1.2
	Helios1_2:1.2
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.6
date	92.06.15.12.05.05;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	92.03.24.14.47.35;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	92.03.24.14.36.43;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	92.03.20.10.30.07;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	90.09.26.18.46.29;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.11.07.16;	author nick;	state Exp;
branches;
next	;


desc
@@


1.6
log
@fixed to use std __proc names
@
text
@/* stdarg.h: ANSI draft (X3J11 Oct 86) library header, section 4.8 */
/* Copyright (C) A.C. Norman and A. Mycroft */
/* version 0.01 + 0.02a - SccsId: %W% %G% */
/* RcsId: $Id: stdarg.h,v 1.5 1992/03/24 14:47:35 nickc Exp paul $ */

#ifdef __varargs_h
# error "Cannot use BSD and ANSI variable arg handling at the same time"
#endif

#ifndef __stdarg_h
#define __stdarg_h

#if defined __ARM || defined __C40
/* N.B. <stdio.h> is required to declare vfprintf() without defining      */
/* va_list.  Clearly the type __va_list there must keep in step.          */
typedef char *va_list[1];       /* see <stdio.h> */
#else
# ifndef __va_list_defined
typedef char *va_list[1];       /* see <stdio.h> */
# define __va_list_defined
# endif
#endif
   /*
    * an array type suitable for holding information needed by the macro va_arg
    * and the function va_end. The called function shall declare a variable
    * (referred to as ap) having type va_list. The variable ap may be passed as
    * an argument to another function.
    * Note: va_list is an array type so that when an object of that type
    * is passed as an argument it gets passed by reference.
    */

#if defined __ARM || defined __C40
/* Note that ___type is a syntactic item a bit like the type qualifiers    */
/* 'static', 'register', 'const' etc except that it has no effect! Its    */
/* purpose is to indicate when a type is being introduced and thus        */
/* help (a bit) when the user gets the args to va_arg the wrong way round */

# define __alignof(type) \
   ((char *)&(((struct{char __member1; \
                       ___type type __member2;}*) 0)->__member2) - \
    (char *)0)
#define __alignuptotype(ptr,type) \
   ((char *)((int)(ptr) + (__alignof(type)-1) & ~(__alignof(type)-1)))


#define va_start(ap,parmN) \
   (___assert((___typeof(parmN) & 0x481) == 0, \
              "Illegal type of 2nd argument to va_start"), \
    (void)(*(ap) = (char *)&(parmN) + sizeof(parmN)))
   /*
    * The va_start macro shall be executed before any access to the unnamed
    * arguments. The parameter ap points to an object that has type va_list.
    * The va_start macro initialises ap for subsequent use by va_arg and
    * va_end. The parameter parmN is the identifier of the rightmost parameter
    * in the variable parameter list in the function definition (the one just
    * before the , ...). If the parameter parmN is declared with the register
    * storage class the behaviour is undefined (Norcroft C gives diagnostic).
    * parmN shall not be affected by default argument conversions (Norcroft
    * C gives a diagnostic and would (July 1990) generate 'wrong' code).
    * Returns: no value.
    */

#define va_arg(ap,type) \
   (___assert((___typeof(___type type) & 0x481) == 0, \
              "Illegal type used with va_arg"), \
   *(___type type *)((*(ap)=__alignuptotype(*(ap),type)+sizeof(___type type))-\
                     sizeof(___type type)))
   /*
    * The va_arg macro expands to an expression that has the type and value of
    * the next argument in the call. The parameter ap shall be the same as the
    * va_list ap initialised by va_start. Each invocation of va_arg modifies
    * ap so that successive arguments are returned in turn. The parameter
    * 'type' is a type name such that the type of a pointer to an object that
    * has the specified type can be obtained simply by postfixing a * to
    * 'type'. If 'type' disagrees with the type of the actual next argument
    * (as promoted according to the default argument promotions), the behaviour
    * is undefined.
    * Returns: The first invocation of the va_arg macro after that of the
    *          va_start macro returns the value of the argument after that
    *          specified by parmN. Successive invocations return the values of
    *          the remaining arguments in succession.
    * Note: care is taken in va_arg so that illegal things like va_arg(ap,char)
    * which may seem natural but are illegal are caught. The special Norcroft
    * C keywords ___assert and ___typeof are used to do this: these keywords
    * are not intended for use by ordinary users.
    */

   /*
    * Note for the C40.  Since the stack pointer is always word aligned,
    * and since arguments for varargs functions are always stored on the
    * stack, and since we do not need to double align the stack pointer
    * when retrieving doubles, ther is no need to align the 'ap' value
    * before accessing an argument.
    *
    * However - if you remove the alignuptype code above the compiler will
    * end up producing LESS efficient code !!!  No I do not know why, but
    * I am going to leave things as they are for the moment.
    */

#else /* Transputer C version */

#define va_start(ap,parmN) ((void)(*(ap) = (char *)&(parmN) + sizeof(parmN)))
   /*
    * The va_start macro shall be executed before any access to the unnamed
    * arguments. The parameter ap points to an object that has type va_list.
    * The va_start macro initialises ap for subsequent use by va_arg and
    * va_end. The parameter parmN is the identifier of the rightmost parameter
    * in the variable parameter list in the function definition (the one just
    * before the , ...). If the parameter parmN is declared with the register
    * storage class the behaviour is undefined.
    * Returns: no value.
    */

/* care is taken in va_arg so that illegal things like va_arg(ap,char)
   which may seem natural but are illegal are patched up.  Note that
   va_arg(ap,float) is wrong but cannot be patched up at the C macro level. */
#define va_arg(ap,type) (sizeof(type) < sizeof(int) ? \
   (type)*(int *)((*(ap)+=sizeof(int))-sizeof(int)) : \
   *(type *)((*(ap)+=sizeof(type))-sizeof(type)))

#endif /*__ARM  || __C40 */

#define va_end(ap) ((void)(*(ap) = (char *)-256))
   /*
    * The va_end macro facilitates a normal return from the function whose
    * variable argument list was referenced by the expension of va_start that
    * initialised the va_list ap. If the va_end macro is not invoked before
    * the return, the behaviour is undefined.
    * Returns: no value.
    * Note: this macro is careful to avoid compiler warning messages and uses
    * a -ve address to ensure address trap.
    */

#endif

/* end of stdarg.h */
@


1.5
log
@removed major effect of previous delta
@
text
@d4 1
a4 1
/* RcsId: $Id: stdarg.h,v 1.2 90/09/26 18:46:29 paul Exp $ */
d13 1
a13 1
#if defined __HELIOSARM || defined __HELIOSC40
d32 1
a32 1
#if defined __HELIOSARM || defined __HELIOSC40
d121 1
a121 1
#endif /*__HELIOSARM  || __HELIOSC40 */
@


1.4
log
@slightly improved va_arg()
@
text
@a62 2
#if defined __HELIOSC40

a65 7
   *(___type type *)((*(ap) += sizeof(___type type))-\
                     sizeof(___type type)))
#else

#define va_arg(ap,type) \
   (___assert((___typeof(___type type) & 0x481) == 0, \
              "Illegal type used with va_arg"), \
a67 1
#endif
d94 4
@


1.3
log
@fixed stdarg bits for C40
@
text
@d13 1
a13 1
#if defined(__ARM) || defined(__C40)
d32 1
a32 1
#if defined(__ARM) || defined(__C40)
d63 2
d68 7
d77 1
d98 8
d127 1
a127 1
#endif /* __ARM || __C40 */
a140 1

@


1.2
log
@arm changes for 1.2 and new arm C compiler
@
text
@d4 1
a4 1
/* RcsId: $Id$ */
d13 1
a13 1
#ifdef __HELIOSARM
d32 1
a32 1
#ifdef __HELIOSARM
d109 1
a109 1
#endif /*__HELIOSARM*/
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
/* $Id$ */
d13 1
a13 1
#if defined(__HELIOSARM) && defined(ARMC2)
a32 1
# if defined(ARMC2)
a33 3
# else
/* Note that __type is a syntactic item a bit like the type qualifiers    */
# endif
a37 1
# if defined(ARMC2)
a41 7
# else
# define __alignof(type) \
   ((char *)&(((struct{char __member1; \
                       __type type __member2;}*) 0)->__member2) - \
    (char *)0)
# endif /*ARMC2*/

d45 21
a65 4
extern void *__va_illegal_arg(void);
# if defined(ARMC2)
# define va_arg(ap,type) (sizeof(type) < sizeof(int) ? \
   *(___type type *)__va_illegal_arg() : \
a67 5
# else
# define va_arg(ap,type) (sizeof(type) < sizeof(int) ? \
   *(__type type *)__va_illegal_arg() : \
   *(__type type *)((*(ap)=__alignuptotype(*(ap),type)+sizeof(__type type))-\
                     sizeof(__type type)))
d83 3
a85 2
    * which may seem natural but are illegal are caught. va_arg(ap,float) is
    * wrong but cannot be patched up at the C macro level.
d87 1
a87 1
# endif /*ARMC2*/
a89 9
/* care is taken in va_arg so that illegal things like va_arg(ap,char)
   which may seem natural but are illegal are patched up.  Note that
   va_arg(ap,float) is wrong but cannot be patched up at the C macro level. */
#define va_arg(ap,type) (sizeof(type) < sizeof(int) ? \
   (type)*(int *)((*(ap)+=sizeof(int))-sizeof(int)) : \
   *(type *)((*(ap)+=sizeof(type))-sizeof(type)))

#endif /*__HELIOSARM*/

d101 9
@
