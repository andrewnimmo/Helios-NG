head	1.4;
access;
symbols
	Helios_1_3_1:1.4
	Helios_C40_1_3_Official_Release:1.3
	Helios-C40:1.3
	Alenia_release:1.3
	Helios1_3:1.3
	C40_Field_Test_2:1.3
	C40_Field_Test_R1:1.1
	Helios13_beta:1.1
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1
	Helios1_2:1.1
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.4
date	93.05.25.18.56.13;	author bart;	state Exp;
branches;
next	1.3;

1.3
date	92.08.19.10.20.59;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	92.08.12.15.42.04;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.11.04.54;	author nick;	state Exp;
branches;
next	;


desc
@ANSI assertions
@


1.4
log
@Previous change had left an unclosed comment
@
text
@/* assert.h: ANSI draft (X3J11 Oct 86) library header, section 4.2 */
/* Copyright (C) A.C. Norman and A. Mycroft */
/* version 0.01 - SccsId: %W% %G% */
/* $Id: assert.h,v 1.3 1992/08/19 10:20:59 nickc Exp bart $ */

/*
 * The assert macro puts diagnostics into programs. When it is executed,
 * if its argument expression is false, it writes information about the
 * call that failed (including the text of the argument, the name of the
 * source file, and the source line number - the latter are respectively
 * the values of the preprocessing macros __FILE__ and __LINE__) on the
 * standard error stream. It then calls the abort function.
 * If its argument expression is true, the assert macro returns no value.
 */

/*
 * Note that <assert.h> may be included more that once in a program with
 * different setting of NDEBUG. Hence the slightly unusual first-time
 * only flag.
 */

#ifndef __assert_h
# define __assert_h
  extern void _assert_fail( char *, char *, int );
#else
# undef assert
#endif /* __assert_h */

#ifdef NDEBUG
/* ANSI require the following silly expansion:
 *  (bans (f() ? assert(e) : assert(e')) for no good reason).
 */
# ifdef assert
# undef assert
# endif

# define assert( ignore ) ((void)0)
#else
/* Syntactially MUST be done with a conditional expression -
 *  consider "if(1) assert(1); else ..."
 */
# ifdef assert
# undef assert
# endif

# define assert( e ) ((e) ? (void)0 : _assert_fail( #e, __FILE__, __LINE__ ))
#endif /* NDEBUG */


/* end of assert.h */
@


1.3
log
@fixed #endif conspiracy
@
text
@d4 1
a4 1
/* $Id: assert.h,v 1.2 1992/08/12 15:42:04 nickc Exp nickc $ */
d47 1
a47 1
#endif /* NDEBUG
@


1.2
log
@updated to conform to latest NNorcroft release
@
text
@d4 1
a4 1
/* $Id: assert.h,v 1.1 1990/09/05 11:04:54 nick Exp nickc $ */
d23 2
a24 2
#  define __assert_h
   extern void _assert_fail( char *, char *, int );
d26 2
a27 2
#  undef assert
#endif
d33 5
a37 1
#  define assert( ignore ) ((void)0)
d42 6
a47 2
#  define assert( e ) ((e) ? (void)0 : _assert_fail( #e, __FILE__, __LINE__ ))
#endif
a48 1
#endif
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
/* $Id$ */
d6 16
d23 5
a27 1
#define __assert_h
d31 3
a33 3
   (bans (f() ? assert(e) : assert(e')) for no good reason).
*/
#  define assert(ignore)
d36 3
a38 5
   consider "if(1) assert(1); else ..."
*/
extern void _assert_fail(char *, char *, int);
#  define assert(e) \
     ((e) ? (void)0 : _assert_fail(#e, __FILE__, __LINE__))
@
