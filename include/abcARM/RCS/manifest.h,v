head     1.2;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.2
date     91.03.14.16.43.48;  author paul;  state Exp;
branches ;
next     1.1;

1.1
date     91.01.22.15.24.11;  author paul;  state Exp;
branches ;
next     ;


desc
@misc constants for ABC systems
@


1.2
log
@added interrupt and user vector numbers
.,
@
text
@/*> manifest/h <*/
/*----------------------------------------------------------------------*/
/*									*/
/*				manifest.h				*/
/*				----------				*/
/* Copyright (c) 1990, Active Book Company, Cambridge, United Kingdom.	*/
/*									*/
/* Useful Executive manifests.						*/
/*									*/
/*----------------------------------------------------------------------*/

#ifndef __manifest_h
#define __manifest_h

/*----------------------------------------------------------------------*/
/* These are the timer tick values used when incrementing the software
 * timers. **NOTE** The software timer should NEVER be incremented in
 * steps other than "TickSize". If it is, process scheduling errors
 * will start to appear at random intervals.
 */

#define TickChunk       (1000)	     /* # of micro-seconds in a milli-second */
#define TickSize        (0x00002700) /* # of micro-seconds in a centi-second */
                            /* should = (10 * TickChunk)    gives 16us error */

/* This should give around 30centi-seconds per process slice */
#define TicksPerSlice   (0x00007500) /* (30 * TickChunk)    gives 30us error */

/* The above values should only ever be used for process timing. The
 * errors are introduced to make the numbers easier to deal with (ie.
 * 8bit shifted ARM constants). A proper Real-Time-Clock (RTC) device
 * should be used for "USER" timing (probably to the resolution of a
 * second).
 */
/*----------------------------------------------------------------------*/
/* The lo-pri priority numbers are logically numbered from 1 (since 0 is
 * system hi-priority).
 */

#define log2_numpris	(3)	/* # of bits required to describe priority */
#define NumberPris	(1 << log2_numpris)

/*----------------------------------------------------------------------*/
/* ROM FileSystem locations */

/* This information should be tied into the "hardware" information from the
 * correct header file. (TO BE DONE)
 */

#define loc_internal		(0x00)	/* "internal" system ROM */
#define loc_CARD1		(0x01)	/* External (CARD slot 1) ROM */
#define loc_internalFlash	(0xFF)	/* "internal" FlashEPROM */

#define loc_limit	(loc_CARD1)	/* maximum # of available CARD slots */

/*---------------------------------------------------------------------------*/
/* Interrupt source (vector) numbers used by kernel event handling functions */
/* Number of sources (InterruptVectors) defined in root.h                    */

#define INT_CRX 0	/* CODEC receive data latch full */
#define INT_CTX 1	/* CODEC transmit data latch empty */
#define INT_MRX 2	/* MicroLink receive data latch full */
#define INT_MTX 3	/* MicroLink transmit data latch empty */
#define INT_EXA 4	/* External request A */
#define INT_EXB 5	/* External request B */
#define INT_EXC 6	/* External request C */
#define INT_EXD 7	/* External request D */
#define INT_TIM 8	/* Timer interrupt */
#define INT_LCD 9	/* LCD vertical sync. */
#define INT_MBK 10	/* MicroLink receive BREAK condition */
#define INT_DB1 11	/* DMA channel 1 buffer service */
#define INT_DB2 12	/* DMA channel 2 buffer service */
#define INT_DB3 13	/* DMA channel 3 buffer service */
#define INT_POR 14	/* Power On Reset (write to "CLOCK_regs" clears) */


/*-----------------------------------------------------------------------*/
/* User event vectors. Number of vectors (UserVectors) defined in root.h */

#define UVec_MemoryLow	0
#define UVec_PowerDown	1
#define UVec_CardInOut	2


/*----------------------------------------------------------------------*/
#endif

/*> EOF manifest.h <*/
@


1.1
log
@Initial revision
@
text
@d56 3
a58 1
/*----------------------------------------------------------------------*/
d60 15
a74 1
#endif /* __manifest_h */
d76 9
d86 2
@
