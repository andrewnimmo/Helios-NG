head     1.1;
branch   ;
access   ;
symbols  ;
locks    ; strict;
comment  @@;


1.1
date     90.09.26.17.28.14;  author paul;  state Exp;
branches ;
next     ;


desc
@@



1.1
log
@Initial revision
@
text
@--------------------------------------------------------------------------
--                                                                      --
--                      H E L I O S   K E R N E L                       --
--                      -------------------------                       --
--                                                                      --
--             Copyright (C) 1987, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- library.m								--
--                                                                      --
--	Resident library definition macros.				--
--	Must be kept in step with module.m				--
--                                                                      --
--      Author: NHG 28-July-87						--
--                                                                      --
--	SCCS Id: %W% %G%						--
--------------------------------------------------------------------------

_report ['include library.m]
_def 'library.m_flag 1

include basic.m

_defq 'Resident['resident.body]
[
	_test _defp 'make.def
	[ _report '[Making library definition file] ]
	[ _report '[Making library declaration file] ]
	
	_defq 'res_name Unknown.Name
	_defq 'res_slot Unknown.Slot
	_defq 'res_version Unknown.Version

	_defq 'name['arg] [_def 'res_name arg]
	_defq 'slot['arg] [_def 'res_slot arg]
	_defq 'version['arg] [_def 'res_version arg]

	resident.body

	_undef 'name
	_undef 'slot
	_undef 'version

]

-- if make.def is defined, generate a file which can be assembled to
-- a .def file.
_if _defp 'make.def
[
	_defq 'uses['libname]
	[
		ref	libname$.library
	]

	-- static just defines external labels
	_defq 'static['initcode]
	[
		align
		module	res_slot
		global	res_name$.library
res_name$.library:
		word	#60f260f2
		word	52
		blkb	31,"res_name" byte 0
		word	modnum
		word	res_version
		word	0

		_defq 'extern [ _def '_extern 1 ] -- make following item external
		_defq 'func['name]		  -- define function
		[
			data _$name 1 
			_if _defp '_extern [global _$name _undef '_extern]
		]
		_defq 'word['name]		-- define word
		[
			data _$name 1
			_if _defp '_extern [global _$name _undef '_extern]
		]
		_defq 'struct['type 'name]	-- define structure
		[
			data _$name _div _eval[_eval[type$.sizeof]] 4
			_if _defp '_extern [global _$name _undef '_extern]
		]
		_defq 'vec['size 'name]		-- define vector of bytes
		[
			data _$name _div size 4
			_if _defp '_extern [global _$name _undef '_extern]
		]
		_defq 'initfunc['name]		-- init function pointer
		[]
		_defq 'redefine['name]		-- redefine external procedure
		[]
		_defq 'initptr['name]		-- initialise a pointer to data in code
		[]
		_defq 'inittab['name 'size]	-- copy a table from code to data space
		[]
		_defq 'initword['name 'value]		-- initialise a word to a value
		[]
		_defq 'initptrtab['name 'items 'stride]	-- init a table of ptrs to strings
		[]
		_defq 'code['code_body]			-- general assembly code
		[]
		initcode
		_undef 'extern
		_undef 'func
		_undef 'word
		_undef 'struct
		_undef 'vec
		_undef 'initfunc
		_undef 'redefine
		_undef 'initptr
		_undef 'inittab
		_undef 'initword
		_undef 'initptrtab
		_undef 'code
	]

	-- no stubs
	_defq 'stubs['body]
	[ ]

	-- no data
	_defq 'LibData['body]
	[]

]

_if _not _defp 'make.def
[

	_defq 'uses['libname]
	[
		ref	libname$.library
	]

	_defq 'static['initcode]
	[
        	align
	        module  res_slot
		global	res_name$.library
res_name$.library:
	.ModStart:
        	word    #60f160f1
	        word    .ModEnd-.ModStart
        	blkb    31,"res_name" byte 0
	        word    modnum
		word	res_version
	        word    .MaxData
        	init

		_defq 'extern [ _def '_extern 1 ] -- make following item external
		_defq 'func['name]		  -- define function
		[
			data _$name 1 
			_if _defp '_extern [global _$name _undef '_extern]
		]
		_defq 'word['name]		-- define word
		[
			data _$name 1
			_if _defp '_extern [global _$name _undef '_extern]
		]
		_defq 'struct['type 'name]	-- define structure
		[
			data _$name _div _eval[_eval[type$.sizeof]] 4
			_if _defp '_extern [global _$name _undef '_extern]
		]
		_defq 'vec['size 'name]		-- define vector of bytes
		[
			data _$name _div size 4
			_if _defp '_extern [global _$name _undef '_extern]
		]
		_defq 'initfunc['name]		-- init function pointer
		[
			ldc .$name - 2 ldpi
			ldl 0 stnl _$name
		]
		_defq 'redefine['name]		-- redefine external procedure
		[
			ldc .$name - 2 ldpi
			ldl 2
			ldnl @@_$name
			stnl _$name
		]
		_defq 'initptr['name]		-- initialise a pointer to data in code
		[
			ldc .$name - 2 ldpi
			ldl 0 stnl _$name
		]
		_defq 'inittab['name 'size]	-- copy a table from code to data space
		[
			ldc .$name - 2 ldpi
			ldl 0 ldnlp _$name
			ldc size
			move
		]
		_defq 'initword['name 'value]		-- initialise a word to a value
		[
			ldc value
			ldl 0 stnl _$name
		]
		_defq 'initptrtab['name 'items 'stride]	-- init a table of ptrs to strings
		[
			ajw -1
			ldc 0 stl 0
			while[cne [ldl 0] [ldc items] ]
			[
				ldl 0 ldc stride mul		-- offset of next item
				ldc .$name - 2 ldpi		-- base of string table
				bsub				-- address of item
				ldl 0				-- index in table
				ldl 1 ldnlp _$name		-- base of ptr table
				wsub				-- address of item
				stnl 0				-- store it
				ldl 0 adc 1 stl 0		-- inc index
			]
			ajw 1
		]
		_defq 'code['code_body]			-- general assembly code
		[
			code_body
		]
		align
		init
		ajw -1
		ldl 2 ldnl modnum stl 0
		ldl 3
		eqc 0
		cj  ..INIT.0
		initcode
	..INIT.0:
		ajw 1
		ret
		_undef 'extern
		_undef 'func
		_undef 'word
		_undef 'struct
		_undef 'vec
		_undef 'initfunc
		_undef 'redefine
		_undef 'initptr
		_undef 'inittab
		_undef 'initword
		_undef 'initptrtab
		_undef 'code
]

-- This macro just allows stubs for particular procedures to
-- be generated without any calling code.

	_defq 'stubs['body]
	[
		_defq 'stub['name]
		[
			_def '_call_stub
			[				-- stack a stub for this procedure
				'_if '_not '_defp ['']name$.stubflag
				[			-- only generate if not one already done
			.$name:
				ldl 1
				ldnl 0
				ldnl @@_$name
				ldnl _$name
				gcall
				'_defq name$.stubflag 1	-- flag that a stub has been generated
				]
			]
		]
	
		body
		_genstubs
		_undef 'stub
	]

	_defq '_genstubs
	[
		_if _defp '_call_stub		-- any to do ?
		[
			_call_stub		-- generate a stub
			_undef '_call_stub	-- and pop it off stack
			_genstubs		-- this is a recursive macro !!
		]
	]

	-- static initialisation data, plus any code which may be added
	-- in the form of procedures.
	_defq 'LibData['body]
	[
		body
	]
]

-- End of library.m
@
