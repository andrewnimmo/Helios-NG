head	1.11;
access;
symbols;
locks; strict;


1.11
date	93.08.05.17.06.06;	author paul;	state Exp;
branches;
next	1.10;

1.10
date	92.12.08.08.55.47;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	92.12.07.19.26.43;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	92.12.03.11.40.44;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	92.09.17.16.20.51;	author paul;	state Exp;
branches;
next	1.6;

1.6
date	92.08.12.16.12.15;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	92.07.01.09.01.43;	author paul;	state Exp;
branches;
next	1.4;

1.4
date	92.07.01.01.38.37;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	92.07.01.01.18.52;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	92.06.10.15.31.49;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	90.09.26.17.28.06;	author paul;	state Exp;
branches;
next	;


desc
@@


1.11
log
@integrated with ARM version
@
text
@--------------------------------------------------------------------------
--                                                                      --
--                      H E L I O S   K E R N E L                       --
--                      -------------------------                       --
--                                                                      --
--             Copyright (C) 1987 - 1993, Perihelion Software Ltd.      --
--                        All Rights Reserved.                          --
--                                                                      --
-- module.m                                                             --
--                                                                      --
--      Module definition macros                                        --
--	Keep in step with library.m					--
--                                                                      --
--      Author:  NHG 08-July-87						--
--      Updates: PAB June 89 for Helios/ARM                             --
--		 PAB 15/8/90 ARM Split module table			--
--		 PAB December 91 for Helios/C40				--
--                                                                      --
--	SCCS Id: %W% %G%						--
--------------------------------------------------------------------------

_report ['include module.m]
_def 'module.m_flag 1

_if _defp 'helios.C40 [
	include c40.m
	include c40mtab.m
]
include structs.m


struct Module [
	word		Type		-- module type = T.Module
	word		Size		-- size of module in bytes
	vec	32	Name		-- module name
	word		Id		-- module table index
	word		Version		-- version number of this module
	word		MaxData		-- highest data offset (>= 0)
	word		Init		-- root of init chain
	_if _defp '__SMT
	[	word	MaxCodeP]
]

struct ResRef [
	word		Type		-- T.ResRef
	word		Size		-- = ResRef.sizeof
	vec	32	Name		-- name of module required
	word		Id		-- module table index
	word		Version		-- version number of module required
	word		Module		-- pointer to module, installed by loader
]

_test _defp 'helios.TRAN [
	_def    T.Program               [#60f060f0]
	_def    T.Module                [#60f160f1]
	_def    T.ResRef                [#60f260f2]
	_def    T.Proc                  [#60f360f3]
	_def    T.Code                  [#60f460f4]
	_def    T.Stack                 [#60f560f5]
	_def    T.Static                [#60f660f6]
	_def	T.ProcInfo		[#60f760f7]
	_def	T.Device		[#60f860f8]
][
	_def    T.Program               [0x60f060f0]
	_def    T.Module                [0x60f160f1]
	_def    T.ResRef                [0x60f260f2]
	_def    T.Proc                  [0x60f360f3]
	_def    T.Code                  [0x60f460f4]
	_def    T.Stack                 [0x60f560f5]
	_def    T.Static                [0x60f660f6]
	_def	T.ProcInfo		[0x60f760f7]
	_def	T.Device		[0x60f860f8]
]

_defq 'StartModule['name 'id 'version]
[
        align
        module  id
.ModStart:
        word    T.Module
	_test _defp 'helios.TRAN [
		word    .ModEnd-.ModStart
	][
		word modsize
	]
	blkb    31, "name"
	byte 0

	word	modnum
	word	version
	_test _defp 'helios.TRAN [
		word	.MaxData
	][
		word	datasymb(.MaxData)
	]
        init
	_if _defp '__SMT
		[word	codesymb(.MaxCodeP)]
]

_defq 'StartProgram['name 'id 'version]
[
        align
        module  id
.ModStart:
        word    T.Program
	_test _defp 'helios.TRAN [
		word    .ModEnd-.ModStart
	][
		word modsize
	]
        blkb    31, "name"
	byte 0

	word	modnum
	word	version
	_test _defp 'helios.TRAN
		[word    .MaxData]
		[word	datasymb(.MaxData)]
        init
	_if _defp '__SMT
		[word	codesymb(.MaxCodeP)]
]

_defq ResRef['name 'id 'version]
[
	align
	module	id
	word	T.ResRef
	word	ResRef.sizeof
	blkb    31, "name" byte 0
	word	modnum
	word	version
	word	0
]

_defq 'Function['name]
[
	_if _defp 'SYSDEB [
		_test _defp 'helios.TRAN [
			align
			'word T.Proc, name
			'byte "name", 0
			.$name$:
			name$:
		][
			align
		__procname_$name$:
			'byte	"$name$", 0
			align
			_test _defp 'helios.C40 [
			      'word 	0xff000000 | - __procname_$name * 4
			][
			      'word 	0xff000000 | - __procname_$name
			]
			export	.$name$
		]
	]
	.$name$:
	name$:
]

_defq 'procsym['name]
[
	_test _defp 'helios.TRAN [
		align
		'word T.Proc, name
		'byte "name", 0
	][
		align
	__procname_$name$:
		'byte	"$name$", 0
		align
		_test _defp 'helios.C40 [
			'word 	0xff000000 | - __procname_$name * 4
		][
			'word 	0xff000000 | - __procname_$name
		]
	]
]

_defq 'codesym['name]
[
	_test _defp 'helios.TRAN [
		align
		'word T.Code, name
		byte "name",0
	][
		align
		'word T.Code, labelref( name )
		byte "name", 0
	]
]

_defq 'stacksym['name 'offset]
[
        align
	'word T.Stack, offset
	byte "name", 0
]

_defq 'staticsym['name]
[
	_test _defp 'helios.TRAN [
		align
		'word T.Static, name
		byte "name", 0
	][
		align
		'word T.Static, labelref( name )
		byte "name", 0
	]
]

_defq  'EndModule
[
	_test _defp 'helios.TRAN [
		data .MaxData 0
	][
		data .MaxData, 0
	]
	_if _defp '__SMT [
		codetable .MaxCodeP
	]
	align		-- force end to word boundary
.ModEnd:
	_if _not _defp 'helios.TRAN [
		end
	]
]


-- Module static data definition and initialisation.

_defq static['initcode]
[
	-- ***********************************************************
	-- These macros are ALMOST identical to the ones defined
	-- in library.m. Be aware of this and update both in concert.
	-- Note also that they differ slightly in that the transputer
	-- versions of module.m also implement data access macros,
	-- initfunc macro and initcode tail that shouldn't find their
	-- way into the library.m file.
	-- ***********************************************************

	-- Cut Here -- module.m -- Cut Here -- module.m -- Cut Here --

	_defq 'extern [ _def '_extern 1 ] -- make following item external
	_defq 'func['name]		  -- define function
	[
		_test _defp '__SMT [
			codetable _$name
		][
			_test _defp 'helios.TRAN [
				data _$name 1
			][
				data _$name, 4
			]
		]
		_if _defp '_extern [
			global [_$name]
			_undef '_extern
		]
		_test _defp 'helios.arm	[
			-- r2 points to static data area
			-- in SMT r4 points to code pointer table
			ldr	ip, (pc,_addressof_$name)
			add	ip, pc, ip
			b	_passaddr_$name
		_addressof_$name:
			int	labelref(.$name)
		_passaddr_$name:
			patchinstr(patcharmdt, codesymb(_$name),
				str ip, (r4, #0))
		][
			_test _defp 'helios.C40	[
				-- only initialise on code pass
				-- cmpi	2, R_A1
				-- bne	no_codeinit_$name

				-- New table based code pointer table initialisation:
				-- Generate a macro (which gets pushed on the macro stack)
				-- that inserts the offset of the function.  When this
				-- macro is evaluated (in _gencodetable) it creates an
				-- entry in the _FuncTable array.

				_def '_codetableentry
				[
					int shift(-2, labelref(.$name))
				]

				-- old version follows ...
				--
				-- ldabs32 [.$name] R_ADDR3	-- addr of name
				--
				-- ldi	R_ADDR2, R_ATMP
				--
				-- NB/ must use 16 bits as RmLib has > 255 functions
				-- patchinstr(PATCHC40MASK16ADD,
				--	shift(-2, codesymb(_$name)),
				--	addi	0, R_ATMP)
				--	sti	R_ADDR3, *R_ATMP
				--
				-- no_codeinit_$name:
			][
				-- transputer code
				ldc .$name-2 ldpi ldl 0 stnl _$name
			]
		]
	]
	_defq 'word['name]		-- define word
	[
		_test _defp 'helios.TRAN
			[data _$name 1]
			[data [_$name], 4]
		_if _defp '_extern [global [_$name] _undef '_extern]
		_if _defp 'helios.TRAN [
			-- !!! do not add data access macro to library.m !!!
			_def name [ldl '_add '_stackinc '_ModTab ldnl 0
			ldnl modtab '[_acctype$nl$_ptrtype] _$ext_name]
		]
	]
	_defq 'struct['type 'name]	-- define structure
	[
		_test _defp 'helios.TRAN
			[data _$name _div _eval[_eval[type$.sizeof]] 4]
			[data [_$name], [_eval[_eval[type$.sizeof]]]]
		_if _defp '_extern [global [_$name] _undef '_extern]
		_if _defp 'helios.TRAN [
			-- !!! do not add data access macro to library.m !!!
			_def name [ldl '_add '_stackinc '_ModTab ldnl 0
			ldnl modtab ldnlp _$ext_name]
		]
	]
	_defq 'vec['sizexxx namexxx]		-- define vector of bytes
	[
		_test _defp 'helios.TRAN
			[data _$namexxx _div sizexxx 4]
			[data [_$namexxx], sizexxx]
		_if _defp '_extern [global [_$namexxx] _undef '_extern]
		_if _defp 'helios.TRAN [
			-- !!! do not add data access macro to library.m !!!
			_def name [ldl '_add '_stackinc '_ModTab ldnl 0
			ldnl modtab ldnlp _$ext_name]
		]
	]
	_defq 'redefine['name]		-- redefine external procedure
	[
		_test _defp 'helios.TRAN [
			ldc .$name - 2 ldpi
			ldl 2		-- what is here?
			ldnl @@_$name
			stnl _$name
		][
			_report['Error: 'redefine 'must 'not 'be 'used 'in 'this 'implementation 'of 'Helios]
		]
	]
	_defq 'initptr['name]		-- initialise a pointer to data in code
	[
		_test _defp 'helios.arm	[
			-- r2 points to static data area
			ldr	ip,(pc, _addressofD_$name)
			add	ip, pc, ip
			b	_passDaddr_$name
		_addressofD_$name:
			int	labelref(.$name)
		_passDaddr_$name:
			patchinstr(patcharmdt, datasymb(_$name),
				str ip, (r2, #0))
		][
			_test _defp 'helios.C40 [
				-- only initialise on first data pass
				-- cmpi	0, R_A1
				-- bne	no_dataptrinit_$name

				ldabs32_unsafe [.$name] R_ADDR3	-- addr of name
					
				C40CAddress R_ADDR3

				-- addr of name into its data offset
				patchinstr(PATCHC40MASK8ADD,
					shift(-2, datasymb(_$name)),
					sti R_ADDR3, *+R_ADDR1(0))
					
				-- no_dataptrinit_$name:
			][
				-- transputer code
				ldc .$name - 2 ldpi  -- why the -2? (pipeline?)
				ldl 0 stnl _$name
			]
		]
	]
	_defq 'inittab['name 'size]	-- copy a table from code to data space
	[
		_test _defp 'helios.arm	[
			-- !!! data must be word aligned and word multiple sized
			-- get address of source into ip
			ldr	ip, (pc, _addressofT_$name)
			add	ip, pc, ip
			b	_passTaddr_$name
		_addressofT_$name:
			int	labelref(.$name)
		_passTaddr_$name:

			-- get address of target into r3
			-- hopefully addressability works out ok
			-- r2 points at our static area
			patchinstr(patcharmdp, datasymb(_$name),
				add	r3, r2, #0)

			-- hopefully addressability works out ok
			-- else use ldr r1,#size -- code const in pool
			mov	r1,#size

			_inittab_loop_$name:
				-- copy size .name to _name
				ldr	r0,(ip),#4
				str	r0,(r3),#4
				subs	r1,r1,#4
			bgt _inittab_loop_$name
		][
			_test _defp 'helios.C40 [
				-- data must be word aligned
				-- and word multiple sized
				-- size is specified in bytes, so / 4

				-- only initialise on first data pass
				-- cmpi	0, R_A1
				-- bne	no_tabinit_$name

				-- addr of src name
				ldabs32_unsafe [.$name] R_ADDR3
					
				-- addr of dst name
				StaticDataAddress name R_ADDR4

				-- copy code data to statc data
				ldi	(size >> 2) - 1, rc
				rptb	end_loop_$name
					ldi	*R_ADDR3++(1), R_T2
				end_loop_$name:	sti	R_T2, *R_ADDR4++(1)
				-- no_tabinit_$name:
			][
				-- transputer code
				ldc .$name - 2 ldpi
				ldl 0 ldnlp _$name
				ldc size
				move
			]
		]
	]
	_defq 'initword['name 'value]		-- initialise a word to a value
	[
		_test _defp 'helios.arm	[
				ldr ip, _initword_$name
				b _passby_iw_$name
			_initword_$name:
				int value
			_passby_iw_$name:
				patchinstr(patcharmdt, datasymb(_$name),
					str ip,(r2,#0))
		][
			_test _defp 'helios.C40 [
				-- 		only initialise on first data pass
				-- cmpi	0, R_A1
				-- bne	no_wordinit_$name

				ldi32	value, R_T1

				--		get addr of name in static data
				StaticDataAddress name R_ATMP

				--		dump value into it
				sti	R_T1, *R_ATMP

				-- no_wordinit_$name:
			][
				-- transputer code
				ldc value
				ldl 0 stnl _$name
			]
		]
	]
	_defq 'initptrtab['name 'items 'stride]	-- init a table of ptrs to strings
	[
		_test _defp 'helios.arm	[
			-- get address of source into ip
			-- r2 points to static data area
			ldr	ip, (pc, _addressofP_$name)
			add	ip, pc, ip
			b	_passPaddr_$name
		_addressofP_$name:
			int	labelref(.$name)
		_passPaddr_$name:

			-- get address of target into r3
			-- hopefully addressability works out ok
			-- r2 points at our static area
			patchinstr(patcharmdp, datasymb(_$name),
				add	r3, r2, #0)

			-- hopefully addressability works out ok
			-- else use ldr r1,#items -- code const in pool
			mov	r1, #items

		_initptrtab_loop_$name:
			-- put ptr to source in target
			str	ip, (r3), #4	-- post inc to next
			add	ip, ip, #stride 	-- add stride to source
			subs	r1, r1, #1
			bgt	_initptrtab_loop_$name
		][
			_test _defp 'helios.C40 [
				-- data must be word aligned

				-- 		only initialise on first data pass
				-- cmpi	0, R_A1
				-- bne	no_ptrtabinit_$name

				-- 		addr of src name
				ldabs32_unsafe [.$name] R_ADDR3
					
				-- 		addr of dst name
				StaticDataAddress name R_ADDR4

				-- copy code data to statc data
				ldi	items - 1, rc
				rptb	end2loop_$name
					sti	R_ADDR3, *R_ADDR4++(1)
				end2loop_$name:	addi	stride, R_ADDR3
				-- no_ptrtabinit_$name:
			][
				-- transputer code
				ajw -1
				ldc 0 stl 0
				while[cne [ldl 0] [ldc items] ]
				[
					ldl 0 ldc stride mul		-- offset of next item
					ldc .$name - 2 ldpi		-- base of string table
					bsub				-- address of item
					ldl 0				-- index in table
					ldl 1 ldnlp _$name		-- base of ptr table
					wsub				-- address of item
					stnl 0				-- store it
					ldl 0 adc 1 stl 0		-- inc index
				]
				ajw 1
			]
		]
	]
	-- only initfunc isn't defined by library.m
	_defq 'initfunc['name]		  -- initialize function
	[ -- functionally the same as initptr macro
		_test _defp 'helios.arm	[
			-- r2 points to static data area
			-- in SMT r4 points to code pointer table
			ldr	ip, (pc, _addressofF_$name)
			add	ip, pc, ip
			b	_passFaddr_$name
		_addressofF_$name:
			int	labelref(.$name)
		_passFaddr_$name:
			patchinstr(patch_armdt, codesymb(_$name),
				str ip, (r4, #0))
		][
			_test _defp 'helios.TRAN [
				ldc .$name-2 ldpi ldl 0 stnl _$name
			][
				-- C40
				-- 		only initialise on code pass
				-- cmpi	2, R_A1
				-- bne	no_codeinit_$name

				-- New table based code pointer table initialisation:
				-- Generate a macro (which gets pushed on the macro stack)
				-- that inserts the offset of the function.  When this
				-- macro is evaluated (in _gencodetable) it creates an
				-- entry in the _FuncTable array.

				_def '_codetableentry
				[
					int shift(-2, labelref(.$name))
				]

				-- 	old version follows
				--
				-- ldabs32 [.$name] R_ADDR3	-- addr of name
				--	
				-- 	addr of name into its codetab offset
				-- patchinstr(PATCHC40MASK8ADD,
				--	shift(-2, codesymb(_$name)),
				--	sti R_ADDR3, *+R_ADDR2(0))
				-- no_codeinit_$name:
			]
		]
	]
	_defq 'code['code_body]			-- general assembly code
	[
		code_body
	]

	_defq '_gencodetable
	[
		_if _defp '_codetableentry 	-- any to do ?
		[				--   
			_codetableentry		-- expand entry
			_undef '_codetableentry	-- and pop it off stack
			_gencodetable		-- this is a recursive macro !!
		]
	]

	align
	init

	_test _defp 'helios.arm	[
		-- start of initialisation code
		-- dp reg holds module table base pointer

		_if _defp 'AUTOLIB [
			-- only initialise code pointer tables
			-- C code should initialise data
			cmp r0,#2
			movnes pc,lr
		]
		-- PCS style call
	        mov     ip,sp
       		stmfd   sp!,{a1,a2,a3,a4,v1,fp,ip,lk,pc}
       		sub     fp,ip,#04

		-- r2 points to our static data
		patchinstr(patcharmdt, shift (3, modnum),
			ldr r2,(dp,#0))
		-- r4 points to our code pointer table
		patchinstr(patcharmdt, shift (3, modnum),
			ldr r4,(dp,#4))

		-- initialisation code gets expanded here
		initcode

		-- PCS style return
		ldmea fp,{a2,a3,a4,v1,fp,sp,pc}^
	][
		_test _defp 'helios.C40 [
			-- prefix to init code
			-- assumes R_MT == module table
			-- r0 = initialisation pass argument
			--	2 = init code
			--	0 = first data pass
			--	1 = second data pass
			-- should only init data on 0/1 and code on 2

			-- check for stage 2 initialisation
			CMPI	2, R_A1

			Beq	_MCodeTableInit


			-- R_ADDR1 = base of modules static data area
			patchinstr(PATCHC40MASK8ADD,
				shift(1, modnum),
				ldi	*+R_MT(0), R_ADDR1)

			C40WordAddress R_ADDR1

			-- preserve the return address

			LDI	R_LR,	R_FT2

			initcode

			-- postfix to initcode
			b	R_FT2		-- return

			_MCodeTableInit:

			_test _defp '_codetableentry
			[
				-- R_ADDR1 == address base of modules code table
				patchinstr(PATCHC40MASK8ADD,
					shift(1, modnum),
					ldi	*+R_MT(1), R_ADDR1)
					ldabs16 [_FuncTableEnd] R_ADDR2 -- get hold of address of end of table
				B	_Loop1Start		-- jump into middle of loop

				_Loop1:				-- start of loop
				ADDI	 R_ADDR2, R_TMP1	-- add address of field to contents of field
				STI	 R_TMP1, *R_ADDR1++(1)	-- store in module's code table
				_Loop1Start:			-- middle of loop
				LDI *'-'-R_ADDR2, R_TMP1	-- get value out of table of function offsets
				Bne	_Loop1	    		-- continue until 0 entry found
				B	 R_LR			-- return				

				_FuncTable:			-- start of function offset table
					int 0			-- NULL entry in table indicates end of table
					_gencodetable		-- generate a table of function offsets
				_FuncTableEnd:			-- end of function offset table
			]
			[
				B	R_LR
			]
		][
			-- transputer code
			-- !!! do not add this code to library.m !!!
			ajw -1
			ldl 2 ldnl modnum stl 0
			_set '_ModTab 2
			initcode
			ajw 1
			ret
		]
	]

	_undef 'extern
	_undef 'func
	_undef 'word
	_undef 'struct
	_undef 'vec
	_undef 'redefine
	_undef 'initptr
	_undef 'inittab
	_undef 'initword
	_undef 'initptrtab
	_undef 'initfunc
	_undef 'code
]

		-- Cut Here -- Cut Here -- Cut Here -- Cut Here -- Cut Here --


-- End of module.m
@


1.10
log
@arbitary fix for duplicate label names
@
text
@d6 1
a6 1
--             Copyright (C) 1987 - 1992, Perihelion Software Ltd.      --
d153 1
a153 1
			      ][
d155 2
a156 1
			      ]
d267 3
a269 3
			ldr ip,(pc,#4)
			add ip,pc,ip
			b _passaddr_$name
d271 1
a271 1
			int labelref(.$name)
d274 1
a274 1
				str ip,(r4,#0))
d362 3
a364 3
			ldr ip,(pc,#4)
			add ip,pc,ip
			b _passDaddr_$name
d366 1
a366 1
			int labelref(.$name)
d369 1
a369 1
				str ip,(r2,#0))
d398 3
a400 3
			ldr ip,(pc,#4)
			add ip,pc,ip
			b _passTaddr_$name
d402 1
a402 1
			int labelref(.$name)
d409 1
a409 1
				add	r3,r2,#0)
d489 3
a491 3
			ldr ip,(pc,#4)
			add ip,pc,ip
			b _passPaddr_$name
d493 1
a493 1
			int labelref(.$name)
d500 1
a500 1
				add	r3,r2,#0)
d504 1
a504 1
			mov	r1,#items
d508 4
a511 4
			str	ip,(r3),#4	-- post inc to next
			add	ip,ip,#stride 	-- add stride to source
			subs	r1,r1	,#1
			bgt _initptrtab_loop_$name
d557 3
a559 3
			ldr ip,(pc,#4)
			add ip,pc,ip
			b _passFaddr_$name
d561 1
a561 1
			int labelref(.$name)
d564 1
a564 1
				str ip,(r4,#0))
@


1.9
log
@improved code table init macros (again)
@
text
@d654 1
a654 1
			Beq	_CodeTableInit
d673 1
a673 1
			_CodeTableInit:
@


1.8
log
@fixed Function macro to omit function name insertion if not beuilding a debugging world
@
text
@d6 1
a6 1
--             Copyright (C) 1987, Perihelion Software Ltd.             --
d277 2
a278 2
				cmpi	2, R_A1
				bne	no_codeinit_$name
d280 24
a303 7
				ldabs32 [.$name] R_ADDR3	-- addr of name
					
				-- addr of name into its codetab offset
				patchinstr(PATCHC40MASK8ADD,
					shift(-2, codesymb(_$name)),
					sti R_ADDR3, *+R_ADDR2(0))
			no_codeinit_$name:
d372 2
a373 2
				cmpi	0, R_A1
				bne	no_dataptrinit_$name
d375 1
a375 1
				ldabs32 [.$name] R_ADDR3	-- addr of name
d377 2
d383 2
a384 1
			no_dataptrinit_$name:
d427 2
a428 2
				cmpi	0, R_A1
				bne	no_tabinit_$name
d431 1
a431 1
				ldabs32 [.$name] R_ADDR3
d440 2
a441 2
			end_loop_$name:	sti	R_T2, *R_ADDR4++(1)
			no_tabinit_$name:
d463 3
a465 3
				-- only initialise on first data pass
				cmpi	0, R_A1
				bne	no_wordinit_$name
d468 2
a469 1
				-- get addr of name in static data
d471 2
a472 1
				-- dump value into it
d474 2
a475 1
			no_wordinit_$name:
d515 3
a517 3
				-- only initialise on first data pass
				cmpi	0, R_A1
				bne	no_ptrtabinit_$name
d519 2
a520 2
				-- addr of src name
				ldabs32 [.$name] R_ADDR3
d522 1
a522 1
				-- addr of dst name
d529 2
a530 2
			end2loop_$name:	addi	stride, R_ADDR3
			no_ptrtabinit_$name:
d569 14
a582 3
				-- only initialise on code pass
				cmpi	2, R_A1
				bne	no_codeinit_$name
d584 9
a592 7
				ldabs32 [.$name] R_ADDR3	-- addr of name
					
				-- addr of name into its codetab offset
				patchinstr(PATCHC40MASK8ADD,
					shift(-2, codesymb(_$name)),
					sti R_ADDR3, *+R_ADDR2(0))
			no_codeinit_$name:
d601 10
d651 6
a660 1
				C40WordAddress R_ADDR1
d662 5
a666 4
			-- R_ADDR2 == address base of modules code table
			patchinstr(PATCHC40MASK8ADD,
				shift(1, modnum),
				ldi	*+R_MT(1), R_ADDR2)
d671 29
a699 1
			b	R_LR		-- return
@


1.7
log
@updated for new arm gasm assembler format
@
text
@d139 7
a145 13
	_test _defp 'helios.TRAN [
		align
		'word T.Proc, name
		'byte "name", 0
	.$name$:
	name$:
	][
		align
	__procname_$name$:
		'byte	"$name$", 0
		align
		_test _defp 'helios.C40 [
			'word 	0xff000000 | - __procname_$name * 4
d147 9
a155 1
			'word 	0xff000000 | - __procname_$name
d157 1
a159 1
	]
@


1.6
log
@fixed syntac of postinc
@
text
@d84 1
a84 3
		_test _defp 'helios.arm
			[.patch_word [imagesize]]
			[word modsize]
d86 4
a89 10
	_test _defp 'helios.arm	[
		.asciz "name"
		.space 32 - _strsize name - 1
	][
	        blkb    31, "name"
		byte 0
	]
	_test _defp 'helios.arm
		[.patch_word [modnum]]
		[word	modnum]
d92 1
a92 1
		word .MaxData
d94 1
a94 3
		_test _defp 'helios.arm
			[.patch_word [datasymb .MaxData]]
			[word datasymb(.MaxData)]
d97 2
a98 5
	_if _defp '__SMT [
		_test _defp 'helios.arm
			[.patch_word [codesymb .MaxCodeP]]
			[word	codesymb(.MaxCodeP)]
	]
d110 1
a110 3
		_test _defp 'helios.arm
			[.patch_word [imagesize]]
			[word modsize]
d112 4
a115 10
	_test _defp 'helios.arm	[
		.asciz "name"
		.space 32 - _strsize name - 1
	][
	        blkb    31, "name"
		byte 0
	]
	_test _defp 'helios.arm
		[.patch_word [modnum]]
		[word	modnum]
d117 3
a119 7
	_test _defp 'helios.arm [
		.patch_word [datasymb .MaxData]
	][
		_test _defp 'helios.TRAN
			[word    .MaxData]
			[word	datasymb(.MaxData)]
	]
d121 2
a122 5
	_if _defp '__SMT [
		_test _defp 'helios.arm
			[.patch_word [codesymb .MaxCodeP]]
			[word	codesymb(.MaxCodeP)]
	]
d131 2
a132 11
	_test _defp 'helios.arm	[
		.asciz "name"
		.space 32 - _strsize name - 1
	][
	        blkb    31, "name" byte 0
	]
	_test _defp 'helios.arm [
		.patch_word [modnum]
	][
		word	modnum
	]
a136 4
_if _defp 'helios.arm [
	_set '.NprocsymN 1
]

d150 5
a154 1
		'word 	0xff000000 | - __procname_$name * 4
d162 5
a166 1
	_test _defp 'helios.arm [
d168 2
a169 4
		word T.Proc
		.patch_word[labelref name]
	Xfoo$.NprocsymN:
		.asciz "name"
d171 2
a172 8
		-- strictly PCS also requires 0xff in top byte
		.patch_word[labelref [Xfoo$.NprocsymN]]	-- Acorn pcs compat.
		_set '.NprocsymN _add .NprocsymN 1
	][
		_test _defp 'helios.TRAN [
			align
			'word T.Proc, name
			'byte "name", 0
d174 1
a174 5
			align
		__procname_$name$:
			'byte	"name", 0
			align
			'word 	0xff000000 | - __procname_$name * 4
d181 1
a181 1
	_test _defp 'helios.arm [
d183 2
a184 3
		word T.Code
		.patch_word[labelref name]
		asciz "name"
d186 3
a188 9
		_test _defp 'helios.TRAN [
			align
			'word T.Code, name
			byte "name",0
		][
			align
			'word T.Code, labelref( name )
			byte "name", 0
		]
d194 3
a196 10
	_test _defp 'helios.arm [
		align
		word T.Stack
		.patch_word[labelref name]
		asciz "name"
	][
	        align
		'word T.Stack, offset
		byte "name", 0
	]
d201 1
a201 1
	_test _defp 'helios.arm [
d203 2
a204 3
		word T.Static
		.patch_word[labelref name]
		asciz "name"
d206 3
a208 9
		_test _defp 'helios.TRAN [
			align
			'word T.Static, name
			byte "name", 0
		][
			align
			'word T.Static, labelref( name )
			byte "name", 0
		]
d214 5
a218 3
	_test _or _defp 'helios.TRAN _defp 'helios.arm
		[data .MaxData 0]
		[data .MaxData, 0]
d224 1
a224 1
	_test _not _or _defp 'helios.TRAN _defp 'helios.arm [
d268 1
a268 1
			.patch_word [labelref [.$name]]
d270 2
a271 7
			_test _defp '__SMT [
				.patch_armdt [codesymb [_$name]]
				str ip,(r4,#0)
			][
				.patch_armdt [datasymb [_$name]]
				str ip,(r2,#0)
			]
d346 1
a346 1
			.patch_word [labelref [.$name]]
d348 2
a349 2
			.patch_armdt [datasymb [_$name]]
			str ip,(r2,#0)
d379 1
a379 1
			.patch_word [labelref [.$name]]
a382 1
			.patch_armdp [datasymb [_$name]]
d384 3
a386 1
			add	r3,r2,#0 -- r2 points at our static area
d396 1
a396 1
			subs	r1,r1,#4
d432 7
a438 3
			ldr ip,#value		-- code const in pool
			.patch_armdt [datasymb [_$name]]
			str ip,(r2,#0)
d467 1
a467 1
			.patch_word [labelref [.$name]]
a470 1
			.patch_armdp [datasymb [_$name]]
d472 3
a474 1
			add	r3,r2,#0 -- r2 points at our static area
d535 1
a535 1
			.patch_word [labelref [.$name]]
d537 2
a538 7
			_test _defp '__SMT [
				.patch_armdt [codesymb [_$name]]
				str ip,(r4,#0)
			][
				.patch_armdt [datasymb [_$name]]
				str ip,(r2,#0)
			]
d581 6
a586 13
		_test _defp '__SMT [
			-- macro below is equivalent to: .patch_armdt [shift [3 modnum]]
			.patch_armdt [mod3taboff]
			ldr r2,(dp,#0)		-- r2 points to our static data
			.patch_armdt [mod3taboff]
			ldr r4,(dp,#4)		-- r4 points to our code pointer table
		][
			-- below should be fixed so we use:
			-- .patch_armdt [shift [2 modnum]]
			-- .patch_armdt [datamodule [res_name$.library]] -- old
			.patch_armdt [modtaboff] -- equiv to [shift [2 modnum]]
			ldr r2,(dp,#0)		-- r2 points to our static data
		]
a592 2

		.pool
@


1.5
log
@added new include
@
text
@d485 2
a486 2
					ldi	*R_ADDR3(1)++, R_T2
			end_loop_$name:	sti	R_T2, *R_ADDR4(1)++
d566 1
a566 1
					sti	R_ADDR3, *R_ADDR4(1)++
@


1.4
log
@force assembly end after EndModule
@
text
@d25 4
a28 2
_if _defp 'helios.C40
	[include c40.m]
d30 1
@


1.3
log
@added Function macro
@
text
@d285 3
@


1.2
log
@updated for C40
@
text
@d175 19
@


1.1
log
@Initial revision
@
text
@d17 1
d25 2
d37 1
a37 1
	_if _defp 'SMT.arm
d50 11
a60 2
_test _defp 'helios.arm
[
a70 11
[
	_def    T.Program               [#60f060f0]
	_def    T.Module                [#60f160f1]
	_def    T.ResRef                [#60f260f2]
	_def    T.Proc                  [#60f360f3]
	_def    T.Code                  [#60f460f4]
	_def    T.Stack                 [#60f560f5]
	_def    T.Static                [#60f660f6]
	_def	T.ProcInfo		[#60f760f7]
	_def	T.Device		[#60f860f8]
]
d78 14
a91 1
        word    .ModEnd-.ModStart
d93 32
a124 1
	[
d127 3
a130 1
	[        blkb    31,"name" byte 0]
d135 7
a141 3
	_test _defp 'helios.arm
		[.patch_word [datasymb .MaxData]]
		[word    .MaxData]
d143 5
a147 3
	_if _defp 'SMT.arm
		[.patch_word [codesymb .MaxCodeP]]

d156 1
a156 2
	_test _defp 'helios.arm
	[
d159 7
a166 4
	[        blkb    31,"name" byte 0]
	_test _defp 'helios.arm
		[.patch_word [modnum]]
		[word	modnum]
d171 3
a173 4
	_if _defp 'helios.arm
       	[
		_set '.NprocsymN 1
	]
d177 1
a177 2
	_test _defp 'helios.arm
       	[
d187 12
a199 1
        [align 'word T.Proc,name byte "name",0]
d204 1
a204 2
	_test _defp 'helios.arm
       	[
d209 10
a219 1
        [align 'word T.Code,name byte "name",0]
d224 1
a224 2
	_test _defp 'helios.arm
       	[
d229 4
a233 1
        align 'word T.Stack,offset byte "name",0
d238 1
a238 2
	_test _defp 'helios.arm
       	[
d243 12
d256 7
d264 2
a265 1
	[align 'word T.Static,name byte "name",0]
d268 1
d273 10
a282 1
-- library.m equivalent macros (KEEP IN STEP!):
d287 2
a288 5
		_test _defp 'helios.arm
		[
			_test _defp 'SMT.arm
			[	codetable [_$name]]
			[	data [_$name] 4]
d290 5
a294 1
			data _$name 1
d296 1
a296 2
		_if _defp '_extern
		[
d300 1
a300 2
		_test _defp 'helios.arm
		[
d309 1
a309 2
			_test _defp 'SMT.arm
			[
d317 16
a332 1
			ldc .$name-2 ldpi ldl 0 stnl _$name
d337 1
a337 2
		_test _defp 'helios.arm
			[data [_$name] 4]
d339 1
d341 4
a344 3
		_if _not _defp 'helios.arm
		[
		_def name [ldl '_add '_stackinc '_ModTab ldnl 0 ldnl modtab '[_acctype$nl$_ptrtype] _$ext_name]
d349 1
a349 2
		_test _defp 'helios.arm
			[data [_$name] [_eval[_eval[type$.sizeof]]]]
d351 1
d353 4
a356 3
		_if _not _defp 'helios.arm
		[
		_def name [ldl '_add '_stackinc '_ModTab ldnl 0 ldnl modtab ldnlp _$ext_name]
d361 1
a361 2
		_test _defp 'helios.arm
			[data [_$namexxx] sizexxx]
d363 1
d365 4
a368 27
		_if _not _defp 'helios.arm
		[
			_def name [ldl '_add '_stackinc '_ModTab ldnl 0 ldnl modtab ldnlp _$ext_name]
		]
	]
	_defq 'initfunc['name]		  -- initialize function
	[ -- functionally the same as initptr macro
		_test _defp 'helios.arm
		[
			-- r2 points to static data area
			-- in SMT r4 points to code pointer table
			ldr ip,(pc,#4)
			add ip,pc,ip
			b _passFaddr_$name
		_addressofF_$name:
			.patch_word [labelref [.$name]]
		_passFaddr_$name:
			_test _defp 'SMT.arm
			[
				.patch_armdt [codesymb [_$name]]
				str ip,(r4,#0)
			][
				.patch_armdt [datasymb [_$name]]
				str ip,(r2,#0)
			]
		][
			ldc .$name-2 ldpi ldl 0 stnl _$name
a370 1

d373 1
a373 5
		_test _defp 'helios.arm
		[
			_report['Error: 'redefine 'must 'not 'be 'used 'in 'Helios/ARM 'version]
		]
		[
d378 2
d384 1
a384 2
		_test _defp 'helios.arm
		[
d394 18
a412 4
		[
			ldc .$name - 2 ldpi  -- why the -2? (pipeline?)
			ldl 0 stnl _$name
		]
d416 1
a416 2
		_test _defp 'helios.arm
		[
d441 29
a470 6
		[
			ldc .$name - 2 ldpi
			ldl 0 ldnlp _$name
			ldc size
			move
		]
d474 1
a474 2
		_test _defp 'helios.arm
		[
d478 17
a494 4
		]
		[
			ldc value
			ldl 0 stnl _$name
d499 1
a499 2
		_test _defp 'helios.arm
		[
d524 37
d562 36
a597 13
		[
			ajw -1
			ldc 0 stl 0
			while[cne [ldl 0] [ldc items] ]
			[
				ldl 0 ldc stride mul		-- offset of next item
				ldc .$name - 2 ldpi		-- base of string table
				bsub				-- address of item
				ldl 0				-- index in table
				ldl 1 ldnlp _$name		-- base of ptr table
				wsub				-- address of item
				stnl 0				-- store it
				ldl 0 adc 1 stl 0		-- inc index
a598 1
			ajw 1
d609 1
a609 2
	_test _defp 'helios.arm
	[
d613 1
a613 2
		_if _defp 'AUTOLIB
		[
d624 1
a624 2
		_test _defp 'SMT.arm
		[
d645 35
a679 8
	]
	[
		ajw -1
		ldl 2 ldnl modnum stl 0
		_set '_ModTab 2
		initcode
		ajw 1
		ret
a686 1
	_undef 'initfunc
d692 1
a693 1

d696 1
a696 5
_defq  'EndModule
[
	data .MaxData 0
	_if _defp 'SMT.arm
	[	codetable .MaxCodeP]
a697 3
	align		-- force end to word boundary
.ModEnd:
]
@
