head	1.16;
access;
symbols;
locks; strict;
comment	@# @;


1.16
date	93.08.06.14.59.15;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	93.07.29.15.02.39;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	92.12.04.14.52.25;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	92.11.18.17.02.38;	author paul;	state Exp;
branches;
next	1.12;

1.12
date	92.09.23.09.06.29;	author paul;	state Exp;
branches;
next	1.11;

1.11
date	92.09.15.10.10.34;	author paul;	state Exp;
branches;
next	1.10;

1.10
date	92.07.01.10.00.34;	author paul;	state Exp;
branches;
next	1.9;

1.9
date	92.07.01.02.16.16;	author paul;	state Exp;
branches;
next	1.8;

1.8
date	92.06.30.20.21.06;	author paul;	state Exp;
branches;
next	1.7;

1.7
date	92.06.30.20.16.28;	author paul;	state Exp;
branches;
next	1.6;

1.6
date	92.06.10.15.32.31;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	92.03.20.18.08.32;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	92.03.20.18.06.45;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	92.02.28.12.07.51;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	92.02.28.11.57.46;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	91.12.11.16.19.44;	author paul;	state Exp;
branches;
next	;


desc
@c40 general and register manifests
@


1.16
log
@changed stack guard to 100 words
@
text
@_def	'C40SPBUG 1	-- @@@@@@ define while we build for TMX mask
_def	'C40STIKBUG 1	-- @@@@@@ define while we build for TMX mask

-- File:	c40.m
-- Subsystem:	'C40 Helios AMPP macros
-- Author:	Nick Clifton, Paul Beskeen
-- Date:	Dec '91
--
-- Description: `C40 general and register manifests
--
--
-- RcsId: $Id: c40.m,v 1.15 1993/07/29 15:02:39 nickc Exp nickc $
--
-- (C) Copyright 1992 Perihelion Software Ltd.


_report ['include c40.m]
_def 'c40.m_flag 1


-------------------------------------------------------------------------------
-- Helios C Procedure Call Standard (PCS) register aliases
--
-- The following register aliases must agree with those defined in
-- cc350/c40/target.h and <cpustate.h>

_def 'R_A1		R0
_def 'R_A2		R1  	-- second argument register
_def 'R_A3		R2	-- third  argument register
_def 'R_A4		R3	-- fourth argument register

_def 'R_V1		DP	-- variable registers
_def 'R_V2		BK
_def 'R_V3		R8
_def 'R_V4		R9

_def 'R_T1		R10	-- temporary regs

_def 'R_TMP1		RS	-- back-end temporary regs
_def 'R_TMP2		RE
_def 'R_TMP3		RC

_def 'R_ATMP		AR5	-- temporary backend address reg

_def 'R_LR		R11	-- link register

_def 'R_ADDR1		AR0	-- address registers
_def 'R_ADDR2		AR1
_def 'R_ADDR3		AR2
_def 'R_ADDR4		AR3

_test _defp 'PCS_3
[ -- new PCS
_def 'R_A1result	R0
_def 'R_INTresult	R0
_def 'R_FLTresult	R4
_def 'R_FA1		R4	-- first  fp arg reg
_def 'R_FA2		R5	-- second fp arg reg
_def 'R_FV1		R6	-- first  fp variable reg
_def 'R_FV2		R7	-- seconf fp variable reg
]
[ -- old PCS
_def 'R_A1result	R0
_def 'R_FA1		R0
_def 'R_FA2		R2	-- second fp arg reg
_def 'R_FV1		R4	-- fp variable regs
_def 'R_FV2		R5
_def 'R_FT1		R6	-- floating point temporary
_def 'R_FT2		R7	-- floating point temporary
] -- old PCS

_def 'R_MT		AR4	-- module table pointer
_def 'R_USP		AR6	-- user stack pointer
_def 'R_FP		AR7	-- frame pointer
_def 'R_BASE		IR0	-- byte address base
_def 'R_USE		IR1	-- user stack stack end pointer
_def 'R_SE		IR1	-- synonym R_USE
_def 'R_SSP		SP	-- system stack pointer
_def 'R_ST		ST	-- status register


-- 'C40 Procedure Call Standard (PCS) manifests

-- The number of arguments passed in registers as defined by the 'C40 PCS
_test _defp 'PCS_3
[
_def 'PCS_INTARGREGS	4
_def 'PCS_FLTARGREGS	4
]
[
_def 'PCS_ARGREGS	4
]

-- The number of bytes held as a stack overflow area. The true end of the
-- stack is pointed to by the user stack end register + PCSSTACKGUARD
-- NB/ This value MUST correspond with its namesake in include/c40.h
_def 'PCS_STACKGUARD	384   -- 96 * 4

-- Notes what type of user stack is used by the PCS.
_def 'PCS_FULLDECENDING	1


-------------------------------------------------------------------------------
-- Definitions for status register bits
--
--	To set bits x and y use:
--		OR	ST_X | ST_Y, ST
--
--	To reset bits x and y use:
--		ANDN	ST_X | ST_Y, ST

_def 'ST_C		1
_def 'ST_V		[(1 << 1)]
_def 'ST_Z		[(1 << 2)]
_def 'ST_N		[(1 << 3)]
_def 'ST_UF		[(1 << 4)]
_def 'ST_LV		[(1 << 5)]
_def 'ST_LUF		[(1 << 6)]
_def 'ST_OVM		[(1 << 7)]
_def 'ST_RM		[(1 << 8)]
_def 'ST_PCF		[(1 << 9)]
_def 'ST_CF		[(1 << 10)]
_def 'ST_CE		[(1 << 11)]
_def 'ST_CC		[(1 << 12)]
_def 'ST_GIE		[(1 << 13)]
_def 'ST_PGIE		[(1 << 14)]
_def 'ST_SET_COND	[(1 << 15)]
_def 'ST_ANALYSIS	[(1 << 16)]


-- Simple ST reg macros

_def 'AllIntsOff
[
	andn	ST_GIE, ST
]

_def 'AllIntsOn
[
	or	ST_GIE, ST
]


-------------------------------------------------------------------------------
-- Definitions for the Internal Interrupt Enable (IIE) register

-- Timer interrupt enables
--
-- Set = enable interrupt.
_def 'IIE_ETINT0		1
_def 'IIE_ETINT1		[(1 << 31)]

-- Bit seperation between ports
_def 'IIE_NEXTPORT	4

-- Input buffer full interrupt enable
--
-- Set = enable interrupt.
_def 'IIE_EICFULL0	[(1 << 1)]
_def 'IIE_EICFULL1	[(1 << 5)]
_def 'IIE_EICFULL2	[(1 << 9)]
_def 'IIE_EICFULL3	[(1 << 13)]
_def 'IIE_EICFULL4	[(1 << 17)]
_def 'IIE_EICFULL5	[(1 << 21)]

-- Input buffer ready interrupt enable
--
-- Set = enable interrupt.
_def 'IIE_EICRDY0	[(1 << 2)]
_def 'IIE_EICRDY1	[(1 << 6)]
_def 'IIE_EICRDY2	[(1 << 10)]
_def 'IIE_EICRDY3	[(1 << 14)]
_def 'IIE_EICRDY4	[(1 << 18)]
_def 'IIE_EICRDY5	[(1 << 22)]

-- Output buffer ready interrupt enable
--
-- Set = enable interrupt.
_def 'IIE_EOCRDY0	[(1 << 3)]
_def 'IIE_EOCRDY1	[(1 << 7)]
_def 'IIE_EOCRDY2	[(1 << 11)]
_def 'IIE_EOCRDY3	[(1 << 15)]
_def 'IIE_EOCRDY4	[(1 << 19)]
_def 'IIE_EOCRDY5	[(1 << 23)]

-- Output buffer empty interrupt enable
--
-- Set = enable interrupt.
_def 'IIE_EOCEMPTY0	[(1 << 4)]
_def 'IIE_EOCEMPTY1	[(1 << 8)]
_def 'IIE_EOCEMPTY2	[(1 << 12)]
_def 'IIE_EOCEMPTY3	[(1 << 16)]
_def 'IIE_EOCEMPTY4	[(1 << 20)]
_def 'IIE_EOCEMPTY5	[(1 << 24)]

-- DMA coprocessor channel interrupt enable
--
-- Set = enable interrupt.
_def 'IIE_EDMAINT0	[(1 << 25)]
_def 'IIE_EDMAINT1	[(1 << 26)]
_def 'IIE_EDMAINT2	[(1 << 27)]
_def 'IIE_EDMAINT3	[(1 << 28)]
_def 'IIE_EDMAINT4	[(1 << 29)]
_def 'IIE_EDMAINT5	[(1 << 30)]


-------------------------------------------------------------------------------
-- Definitions for the Internal / External Interrupt Flag (IIF) register

-- Define external pins (IIOF0-3) as interrupts or I/O pins
--
-- Set = interrupt, reset = I/O pin.
_def 'IIF_FUNC0		1
_def 'IIF_FUNC1		[(1 << 4)]
_def 'IIF_FUNC2		[(1 << 8)]
_def 'IIF_FUNC3		[(1 << 12)]

-- Define sub type of external pins (IIOF0-3)
--
-- If interrupt pin: Set = level triggered, Reset = edge triggered.
-- If I/O pin: Set = output, Reset = input.
_def 'IIF_TYPE0		[(1 << 1)]
_def 'IIF_TYPE1		[(1 << 5)]
_def 'IIF_TYPE2		[(1 << 9)]
_def 'IIF_TYPE3		[(1 << 13)]

-- Define flags for external pins (IIOF0-3)
--
-- If interrupt pin: set = interrupt asserted, reset = interrupt not asserted.
-- Writing zero to bit clears interrupt.
-- If input pin:  Reading returns the value of the pin. The pin is read only.
-- If output pin: The bit is the value on the pin and is read / write.
_def 'IIF_FLAG0		[(1 << 2)]
_def 'IIF_FLAG1		[(1 << 6)]
_def 'IIF_FLAG2		[(1 << 10)]
_def 'IIF_FLAG3		[(1 << 14)]

-- Interrupt enable for external pins (IIOF0-3)
--
-- If interrupt pin: Set = interrupt enabled, Reset = interrupt disabled.
-- No effect if not set as interrupt pin.
_def 'IIF_EIIOF0		[(1 << 3)]
_def 'IIF_EIIOF1		[(1 << 7)]
_def 'IIF_EIIOF2		[(1 << 11)]
_def 'IIF_EIIOF3		[(1 << 15)]

-- NMI flag
--
-- Set if NMI asserted, reset if not asserted.
_def 'IIF_NMI		[(1 << 16)]

-- Timer interrupt flags
--
-- Set if timer interrupt asserted, reset if not asserted.
-- Writing zero to bit clears interrupt.
_def 'IIF_TINT0		[(1 << 24)]
_def 'IIF_TINT1		[(1 << 31)]

-- DMA coprocessor channel interrupt flags
--
-- Set = channel interrupt asserted, reset = not asserted.
-- Writing 0 to bit clears the interrupt.
_def 'IIF_EDMAINT0	[(1 << 25)]
_def 'IIF_EDMAINT1	[(1 << 26)]
_def 'IIF_EDMAINT2	[(1 << 27)]
_def 'IIF_EDMAINT3	[(1 << 28)]
_def 'IIF_EDMAINT4	[(1 << 29)]
_def 'IIF_EDMAINT5	[(1 << 30)]


-------------------------------------------------------------------------------
-- Byte / Word pointer conversions

-- Convert a Helios C byte address pointer to a 'C40 CPU word pointer
-- All C (byte) addresses can be converted to word addresses, but may loose
-- some byte selection information in the conversion. This loss is not checked
-- for.

_defq 'C40WordAddress['CptrReg] [
	lsh	-2, CptrReg
	addi	R_BASE, CptrReg
]

-- Convert a 'C40 CPU word pointer to a Helios C byte address pointer.
-- Points to first byte of word. Note that this function does NOT check if
-- the conversion is actually possible. i.e. that the current address base
-- (IR0) is in the same address range quadrant as the word address.

_defq 'C40CAddress['WptrReg] [
	subi	R_BASE, WptrReg
	lsh	2, WptrReg
]


-------------------------------------------------------------------------------
-- Macros for Loading 32bit constants and
-- absolute addresses of labels into registers.

-- Load the absolute address of label into an address register.
-- Label can be up to 2GW away.
-- Address register must not be R_ATMP, plus R_ATMP gets corrupted.

_def 'ldabs32['label 'Areg] [
	ldi	R_LR, R_ATMP			-- save link reg
	laj	_absaddr_'$label + 1		-- jump past data word
		nop				-- get around LAJ bug
		ldi	R_LR, Areg
		addi	*Areg, Areg		-- absaddr + *absaddr
_absaddr_'$label:
	int	shift(-2, labelref(label))
	ldi	R_ATMP, R_LR			-- restore link reg
]

--
-- This macro is just like 'ldabs32 except that
-- it does not corrupt R_ATMP, but it does corrupt R_LR
--
_def 'ldabs32_unsafe['label 'Areg]
[
	laj	_absaddr_'$label + 1		-- jump past data word
		nop				-- get around LAJ bug
		ldi	R_LR, Areg
		addi	*Areg, Areg		-- absaddr + *absaddr
_absaddr_'$label:
	int	shift(-2, labelref(label))
]


-- Load the absolute address of label into a register.
-- Label can be +/- 128kb away.
-- Corrupts R_ATMP.

_def 'ldabs16['label 'reg] [
	ldi	R_LR, R_ATMP			-- save link reg
	laj	4
		nop				-- get around LAJ bug
		patchinstr(PATCHC40MASK16ADD,
			shift(-2, labelref(label)),
			addi	-2, R_LR)	-- add . + label
		ldi	R_LR, reg
	ldi	R_ATMP, R_LR			-- restore link reg
]

-- Load the absolute address of label into a register.
-- Label can be +/- 128kb away.
-- Corrupts R_LR

_def 'ldabs['label 'reg] [
	nop
	laj	4
		nop				-- get around LAJ bug
		patchinstr(PATCHC40MASK16ADD,
			shift(-2, labelref(label)),
			addi	-2, R_LR)	-- add . + label
		ldi	R_LR, reg
]


-- Load a 32bit constant into a register

_def 'ldi32['const 'reg] [
	ldhi	(((const) >> 16) & 0xffff), reg
	or	((const) & 0xffff), reg
]


-------------------------------------------------------------------------------
-- Misc Definitions


-- Define 'C40 interrupt manifests
-- IIOF0-3 and TINIT1 can be used
_def InterruptVectors	6


-- define 'vector' number passed via SetEvent
_def INTR_NMI		0
_def INTR_IIOF0		1
_def INTR_IIOF1		2
_def INTR_IIOF2		3
_def INTR_IIOF3		4
_def INTR_TINT1		5


_if _not _defp 'NULL [
	_def 'NULL	0
	_def 'FALSE	0
	_def 'TRUE	1
]


-- end of c40.m
@


1.15
log
@added PCS_3 definitions
@
text
@d12 1
a12 1
-- RcsId: $Id: c40.m,v 1.14 1992/12/04 14:52:25 nickc Exp nickc $
d96 2
a97 1
_def 'PCS_STACKGUARD	256
@


1.14
log
@added ldabs32_unsafe which does not preserve R_LR
@
text
@d12 1
a12 1
-- RcsId: $Id: c40.m,v 1.13 1992/11/18 17:02:38 paul Exp nickc $
a27 2
_def 'R_A1result	R0
_def 'R_FA1		R0
a29 1
_def 'R_FA2		R2	-- second fp arg reg
a32 1
_def 'R_FV1		R4	-- fp variable regs
a34 1
_def 'R_FV2		R5
a37 2
_def 'R_FT1		R6	-- floating point temporary
_def 'R_FT2		R7	-- floating point temporary
d52 20
d85 6
d92 1
@


1.13
log
@fixed up C40C/WordAddress macros to use IR0 properly
@
text
@d12 1
a12 1
-- RcsId: $Id: c40.m,v 1.12 1992/09/23 09:06:29 paul Exp $
d291 14
@


1.12
log
@added NMI to the list of interrupt vectors supported
@
text
@d12 1
a12 1
-- RcsId: $Id: c40.m,v 1.11 1992/09/15 10:10:34 paul Exp $
d254 3
a256 3
-- - this may loose some byte selection information.
-- @@@@@@ Have to convert these routines to take account of the C base
-- pointer (IR0) if we change it to a non zero value.
d258 1
a258 2
_def 'C40WordAddress['CptrReg]
[
d260 1
d264 3
a266 1
-- Points to first byte of word.
d268 2
a269 2
_def 'C40CAddress['WptrReg]
[
@


1.11
log
@added interrupt vector definitions
@
text
@d12 1
a12 1
-- RcsId: $Id: c40.m,v 1.10 1992/07/01 10:00:34 paul Exp $
d336 1
a336 1
_def InterruptVectors	0x5
d340 6
a345 5
_def INTR_IIOF0		0
_def INTR_IIOF1		1
_def INTR_IIOF2		2
_def INTR_IIOF3		3
_def INTR_TINT1		4
@


1.10
log
@removed temporary include
@
text
@d12 1
a12 1
-- RcsId: $Id: c40.m,v 1.9 1992/07/01 02:16:16 paul Exp $
a332 2
-- Number of interrupt vectors
_def 'InterruptVectors 43
d334 13
a351 1

@


1.9
log
@separated out module table access mocros into c40mtab.m
@
text
@d12 1
a12 1
-- RcsId: $Id: c40.m,v 1.8 1992/06/30 20:21:06 paul Exp $
d20 1
a342 1
include c40mtab.m	-- @@@@@@ tmp include
a343 1
	
@


1.8
log
@added LDABS macro
@
text
@d12 1
a12 1
-- RcsId: $Id: c40.m,v 1.7 1992/06/30 20:16:28 paul Exp paul $
d14 1
a14 1
-- (C) Copyright 1991 Perihelion Software Ltd.
a19 1

a79 318
-- Number of interrupt vectors
_def 'InterruptVectors 43

-------------------------------------------------------------------------------
-- Byte / Word pointer conversions

-- Convert a Helios C byte address pointer to a 'C40 CPU word pointer
-- - this may loose some byte selection information.
-- @@@@@@ Have to convert these routines to take account of the C base
-- pointer (IR0) if we change it to a non zero value.

_def 'C40WordAddress['CptrReg]
[
	lsh	-2, CptrReg
]

-- Convert a 'C40 CPU word pointer to a Helios C byte address pointer.
-- Points to first byte of word.

_def 'C40CAddress['WptrReg]
[
	lsh	2, WptrReg
]


-------------------------------------------------------------------------------
-- Macros for Loading 32bit constants and
-- absolute addresses of labels into registers.

-- Load the absolute address of label into an address register.
-- Label can be up to 2GW away.
-- Address register must not be R_ATMP, plus R_ATMP gets corrupted.

_def 'ldabs32['label 'Areg] [
	ldi	R_LR, R_ATMP			-- save link reg
	laj	_absaddr_'$label + 1		-- jump past data word
		nop				-- get around LAJ bug
		ldi	R_LR, Areg
		addi	*Areg, Areg		-- absaddr + *absaddr
_absaddr_'$label:
	int	shift(-2, labelref(label))
	ldi	R_ATMP, R_LR			-- restore link reg
]


-- Load the absolute address of label into a register.
-- Label can be +/- 128kb away.
-- Corrupts R_ATMP.

_def 'ldabs16['label 'reg] [
	ldi	R_LR, R_ATMP			-- save link reg
	laj	4
		nop				-- get around LAJ bug
		patchinstr(PATCHC40MASK16ADD,
			shift(-2, labelref(label)),
			addi	-2, R_LR)	-- add . + label
		ldi	R_LR, reg
	ldi	R_ATMP, R_LR			-- restore link reg
]

-- Load the absolute address of label into a register.
-- Label can be +/- 128kb away.
-- Corrupts R_LR

_def 'ldabs['label 'reg] [
	nop
	laj	4
		nop				-- get around LAJ bug
		patchinstr(PATCHC40MASK16ADD,
			shift(-2, labelref(label)),
			addi	-2, R_LR)	-- add . + label
		ldi	R_LR, reg
]


-- Load a 32bit constant into a register

_def 'ldi32['const 'reg] [
	ldhi	(((const) >> 16) & 0xffff), reg
	or	((const) & 0xffff), reg
]


-------------------------------------------------------------------------------
-- Module Table access macros
-- These macros assume a PCS complient environment

-- Call 'codelabel' function through the module table
-- This will work for codetable's of up to 255 entries and module slot numbers
-- of up to 255.

_def 'ExternCall['codelabel] [
	-- get codetable pointer for module containing `codelabel()'
	patchinstr(PATCHC40MASK8ADD,
		shift(-2, datamodule(_'$codelabel)),
		ldi	*+R_MT(0), R_ATMP)
	-- get pointer to codelabel() from codetable
	patchinstr(PATCHC40MASK8ADD,
		shift(-2, codesymb(_'$codelabel)),
		ldi	*+R_ATMP(0), R_ATMP)
	-- jump to fn()
	laju	R_ATMP
		nop
		nop
		nop
]

-- Delayed version of above - next three instructions executed before call
_def 'ExternCallDelayed['codelabel] [
	-- get codetable pointer for module containing `codelabel()'
	patchinstr(PATCHC40MASK8ADD,
		shift(-2, datamodule(_'$codelabel)),
		ldi	*+R_MT(0), R_ATMP)
	-- get pointer to codelabel() from codetable
	patchinstr(PATCHC40MASK8ADD,
		shift(-2, codesymb(_'$codelabel)),
		ldi	*+R_ATMP(0), R_ATMP)
	-- jump to fn()
	laju	R_ATMP
]


-- Branch to 'codelabel' function through the module table.
-- This will work for codetables of up to 64k entries (big enough I think)
-- and module slot numbers up to the same size (more than big enough I think).

_def 'ExternBigCall['codelabel] [
	patchinstr(PATCHC40DATAMODULE1,
		shift(-2, datamodule(_'$codelabel)),
		ldi	R_MT, R_ATMP)
	patchinstr(PATCHC40DATAMODULE2,
		shift(-2, codesymb(_'$codelabel)),
		addi	1, R_ATMP)
	patchinstr(PATCHC40DATAMODULE3,
		modnum, 
		ldi	*R_ATMP, R_ATMP)
	patchinstr(PATCHC40DATAMODULE4,
		modnum, 
		addi	0, R_ATMP)
	patchinstr(PATCHC40DATAMODULE5,
		modnum, 
		laju	R_ATMP)
			nop
			nop
			nop
]

-- delayed version of above - next three instructions executed before call
_def 'ExternBigCallDelayed['codelabel] [
	patchinstr(PATCHC40DATAMODULE1,
		shift(-2, datamodule(_'$codelabel)),
		ldi	R_MT, R_ATMP)
	patchinstr(PATCHC40DATAMODULE2,
		shift(-2, codesymb(_'$codelabel)),
		addi	1, R_ATMP)
	patchinstr(PATCHC40DATAMODULE3,
		modnum, 
		ldi	*R_ATMP, R_ATMP)
	patchinstr(PATCHC40DATAMODULE4,
		modnum, 
		addi	0, R_ATMP)
	patchinstr(PATCHC40DATAMODULE5,
		modnum, 
		laju	R_ATMP)
]


-- Branch to 'codelabel' function through the module table
-- This will work for codetable's of up to 255 entries and module slot numbers
-- of up to 255.

_def 'ExternBranch['codelabel] [
	-- get codetable pointer for module containing `codelabel()'
	patchinstr(PATCHC40MASK8ADD,
		shift(-2, datamodule(_'$codelabel)),
		ldi	*+R_MT(0), R_ATMP)
	-- get pointer to codelabel() from codetable
	patchinstr(PATCHC40MASK8ADD,
		shift(-2, codesymb(_'$codelabel)),
		ldi	*+R_ATMP(0), R_ATMP)
	-- jump to fn()
	b	R_ATMP
]

-- Branch to 'codelabel' function through the module table.
-- This will work for codetables of up to 64k entries (big enough I think)
-- and module slot numbers up to the same size (more than big enough I think).

_def 'ExternBigBranch['codelabel] [
	patchinstr(PATCHC40DATAMODULE1,
		shift(-2, datamodule(_'$codelabel)),
		ldi	R_MT, R_ATMP)
	patchinstr(PATCHC40DATAMODULE2,
		shift(-2, codesymb(_'$codelabel)),
		addi	1, R_ATMP)
	patchinstr(PATCHC40DATAMODULE3,
		modnum, 
		ldi	*R_ATMP, R_ATMP)
	patchinstr(PATCHC40DATAMODULE4,
		modnum, 
		addi	0, R_ATMP)
	patchinstr(PATCHC40DATAMODULE5,
		modnum, 
		bu	R_ATMP)
	b	R_ATMP
]


-- Get hold of pointer to `codelabel' function from modtab codetable and place
-- it into the address register `Areg'.
-- This will work for codetable's of up to 255 entries and module slot numbers
-- of up to 255.

_def 'GetFunctionPointer['codelabel 'Areg] [
	-- get codetable pointer for module containing `codelabel()'
	patchinstr(PATCHC40MASK8ADD,
		shift(-2, datamodule(_'$codelabel)),
		ldi	*+R_MT(0), Areg)
	-- get pointer to codelabel() from codetable
	patchinstr(PATCHC40MASK8ADD,
		shift(-2, codesymb(_'$codelabel)),
		ldi	*+Areg(0), Areg)
]

-- Get pointer to the 'datalabel' data item in its module's static data area and
-- place it into `reg'. This macro can cope with up to 256KB sized static data
-- areas, but the modules slot id must be less than 256.

_def 'StaticDataAddress['datalabel 'reg] [
	-- get pointer to module containing `datalabel' static data area
	patchinstr(PATCHC40MASK8ADD,
		shift(-2, datamodule(_'$datalabel)),
		ldi	*+R_MT(0), reg)
	C40WordAddress reg
	-- get pointer to `datalabel' in static data area
	patchinstr(PATCHC40MASK16ADD,
		shift(-2, datasymb(_'$datalabel)),
		addi	0, reg)
]

-- Get value of `datalabel' item of word data from module's static data area into
-- an address register. This macro can ONLY cope with up to 1KB sized static data
-- areas, and the modules slot id must be less than 256.

_def 'GetStaticDataWord['datalabel 'Areg] [
	-- get pointer to module containing `datalabel' static data area
	patchinstr(PATCHC40MASK8ADD,
		shift(-2, datamodule(_'$datalabel)),
		ldi	*+R_MT(0), Areg)
		C40WordAddress Areg
	-- get pointer to `datalabel' in static data area
	-- and get data from it
	patchinstr(PATCHC40MASK8ADD,
		shift(-2, datasymb(_'$datalabel)),
		ldi	*+Areg(0), Areg)
]

-- Put `reg' registers contents into `datalabel' item of word data in its module's
-- static data area. This macro can ONLY cope with up to 1KB sized static data
-- areas, and the modules slot id must be less than 256.
-- It also corrupts the R_ATMP register which is left holding the address of the
-- start of the static data area for that module.

_def 'PutStaticDataWord['reg 'datalabel] [
	-- get pointer to module containing `datalabel' static data area
	patchinstr(PATCHC40MASK8ADD,
		shift(-2, datamodule(_'$datalabel)),
		ldi	*+R_MT(0), R_ATMP)
		C40WordAddress R_ATMP
	-- get pointer to `datalabel' in static data area
	-- and put data from `reg' into it
	patchinstr(PATCHC40MASK8ADD,
		shift(-2, datasymb(_'$datalabel)),
		sti	reg, *+R_ATMP(0))
]


-------------------------------------------------------------------------------
-- Internal Stub calls
-- Call to internal label that could just be a stub to an external call.


-- Call  'codelabel' function through stub (stubs are always prefixed with '.')
-- The stub may be +/- 128k away.

_def 'StubCall['codelabel] [
	patchinstr(PATCHC40MASK24ADD,
		shift(-2, labelref(.'$codelabel)),
		laj	0)
	nop
	nop
	nop
]

-- delayed version of above - next three instructions executed before call
_def 'StubCallDelayed['codelabel] [
	patchinstr(PATCHC40MASK24ADD,
		shift(-2, labelref(.'$codelabel)),
		laj	0)
]

-- direct branches to stubs, forcing any return to return directly to our caller
_def 'StubBranch['codelabel] [
	patchinstr(PATCHC40MASK16ADD,
		shift(-2, labelref(.'$codelabel)),
		b	0)
	nop
	nop
	nop
]

-- delayed version of above - next three instructions executed before call
_def 'StubBranchDelayed['codelabel] [
	patchinstr(PATCHC40MASK16ADD,
		shift(-2, labelref(.'$codelabel)),
		bud	0)
]

d250 80
d332 3
d341 2
@


1.7
log
@added size of interrupt vectors
@
text
@d12 1
a12 1
-- RcsId: $Id: c40.m,v 1.6 1992/06/10 15:32:31 paul Exp $
d139 14
@


1.6
log
@added stub calls
@
text
@d12 1
a12 1
-- RcsId: $Id: c40.m,v 1.5 1992/03/20 18:08:32 nickc Exp $
d81 2
@


1.5
log
@changed to reflect latest register allocation scheme
@
text
@d1 3
d12 1
a12 1
-- RcsId: $Id: c40.m,v 1.4 1992/03/20 18:06:45 paul Exp nickc $
d298 1
a298 1
		C40WordAddress reg
d339 42
@


1.4
log
@many fixes to c40 macros
@
text
@d9 1
a9 1
-- RcsId: $Id: c40.m,v 1.3 1992/02/28 12:07:51 nickc Exp $
d32 1
a32 1
_def 'R_V1		R4	-- variable registers
d34 8
a41 11
_def 'R_V2		R5
_def 'R_V3		R6
_def 'R_FV2		R6
_def 'R_V4		R7
_def 'R_V5		BK
_def 'R_V6		DP

_def 'R_T1		R8	-- temporary regs
_def 'R_FT1		R8	-- floating point temporary
_def 'R_T2		R9	-- saved by caller
_def 'R_T3		R10
@


1.3
log
@removed R_T4, R_T5, added R_V5, R_V6, R_FT1
@
text
@d9 1
a9 1
-- RcsId: $Id: c40.m,v 1.2 1992/02/28 11:57:46 paul Exp nickc $
d134 1
a134 1
			addi	-3, R_LR)	-- add . + label
d152 80
d256 1
a256 1
		ldi	ar4, ar5)
d259 1
a259 1
		addi	1, ar5)
d262 1
a262 1
		ldi	*ar5, ar5)
d265 1
a265 1
		addi	0, ar5)
d268 2
a269 2
		bu	ar5)
	bu	ar5
d272 1
d298 1
d314 1
d333 1
@


1.2
log
@added many new macros
@
text
@d9 1
a9 1
-- RcsId: $Id: c40.m,v 1.1 1991/12/11 16:19:44 paul Exp $
d38 2
d42 1
a44 2
_def 'R_T4		BK
_def 'R_T5		DP
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
-- RcsId: $Id$
a11 3
-- 
-- RcsLog: $Log$
--
d18 1
d40 1
a40 1
_def 'R_T2		R9
d42 2
a43 2

_def 'R_LR		R11	-- link register
d48 5
a52 2
_def 'R_IP		BK  	-- temporary
_def 'R_DP		DP	-- data page pointer
a55 1
_def 'R_DS		AR2 -- ???
a58 1
_def 'R_ATMP		AR5	-- temporary address reg
d64 2
a65 1
_def 'R_SSP		sp	-- system stack pointer
d68 1
a68 1
/* 'C40 Procedure Call Standard (PCS) manifests */
d70 1
a70 1
/* The number of arguments passed in registers as defined by the 'C40 PCS */
d73 2
a74 2
/* The number of bytes held as a stack overflow area. The true end of the */
/* stack is pointed to by the user stack end register + PCSSTACKGUARD */
d77 1
a77 1
/* Notes what type of user stack is used by the PCS */
d81 8
a88 4
/* Convert a Helios C byte address pointer to a 'C40 CPU word pointer */
/* - this may loose some byte selection information */
/* @@@@@@ Have to convert these routines to take account of the C base */
/* pointer (IR0) if we change it to a non zero value */
d94 3
a96 2
/* Convert a 'C40 CPU word pointer to a Helios C byte address pointer */
/* Points to first byte of word */
d103 155
d298 1
d361 1
d425 3
a427 1
-- Misc definitions
d433 1
@
