head	1.9;
access;
symbols;
locks
	tony:1.9; strict;
comment	@ * @;


1.9
date	94.04.19.09.28.23;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	94.04.18.15.06.48;	author tony;	state Exp;
branches;
next	1.7;

1.7
date	94.01.31.13.52.11;	author tony;	state Exp;
branches;
next	1.6;

1.6
date	93.12.15.17.10.54;	author tony;	state Exp;
branches;
next	1.5;

1.5
date	93.12.15.17.09.21;	author tony;	state Exp;
branches;
next	1.4;

1.4
date	93.12.15.17.05.18;	author tony;	state Exp;
branches;
next	1.3;

1.3
date	93.12.15.16.46.56;	author tony;	state Exp;
branches;
next	1.2;

1.2
date	93.12.15.12.25.48;	author tony;	state Exp;
branches;
next	1.1;

1.1
date	93.12.15.11.45.46;	author tony;	state Exp;
branches;
next	;


desc
@Functions to check the boot strap binary code.  Currently just checks
the value of the first program.
@


1.9
log
@added suppression of check_bootstrap() for ARM processors
@
text
@
/*
 *		BOOTSTRAP FILE CHECKING FUNCTIONS
 */

#include <stdio.h>

#include "defs.h"
#include "externs.h"

#define CONFIG_STRING	"Bootstrap Config Structure"

FILE *	BootStrapFp;

int move_to_configstruct (FILE *	fp,
			  char *	search_string)
{
	int	c;
	int	s = 0;

	while ((c = getc (fp)) != EOF)
	{
		if (c == search_string[s])
		{
			s++;
		}
		else
		{
			s = 0;
		}

		if (search_string[s] == '\0')
		{
			/* align file pointer to longword boundary */
			while (ftell (fp) % 4)
				c = getc (fp);

			return TRUE;
		}
	}

	return FALSE;
}

int move_to_first_program (FILE *	fp)
{
	/*
	 * Skip over 5 words (20 bytes), and the next word should
	 * be the value for the first program.
	 */
	int	i;

	for (i = 0; i < 20; i++)
	{
		if (getc (fp) == EOF)	return FALSE;
	}

	return TRUE;
}

void check_bootstrap ()
{
	word	first_program;

	sysbuild_info ("Checking bootstrap file");

	if (!strcmp( ConfigData.processor, "ARM" ))	/* ARM has no bootstrap */
	  return;
	
	if (ConfigData.bootstrap[0] == '\0' || ConfigData.first_program == -1)
	{
		/* No Bootstrap file to check */
	  
		sysbuild_warning ("Unable to check bootstrap file");

		return;
	}

	if ((BootStrapFp = fopen (ConfigData.bootstrap, "rb")) == NULL)
	{
		sysbuild_warning ("Failed to open bootstrap file %s for checking",
					ConfigData.bootstrap);

		return;
	}

	if (move_to_configstruct (BootStrapFp, CONFIG_STRING) == FALSE)
	{
		sysbuild_warning ("Failed to find config structure in %s",
					ConfigData.bootstrap);

		fclose (BootStrapFp);
		BootStrapFp = NULL;

		return;
	}

	if (move_to_first_program (BootStrapFp) == FALSE)
	{
		sysbuild_warning ("Premature EOF in bootstrap file %s",
					ConfigData.bootstrap);

		fclose (BootStrapFp);
		BootStrapFp = NULL;

		return;
	}

	if (fread (&first_program, 1, sizeof (word), BootStrapFp) != sizeof (word))
	{
		sysbuild_warning ("Failed to read data for first program");

		fclose (BootStrapFp);
		BootStrapFp = NULL;

		return;
	}

	sysbuild_debug ("\tFirst program in bootstrap = 0x%08lx", first_program);

	if (ConfigData.swap_bytes)
	{
		first_program = swap (first_program);
	}

	if (first_program != ConfigData.first_program)
	{
		sysbuild_warning ("Invalid first program in bootstrap file");
	}
	else
	{
		sysbuild_info ("\tValid first program in bootstrap file");
	}

	fclose (BootStrapFp);
	BootStrapFp = NULL;
}
@


1.8
log
@*** empty log message ***
@
text
@d67 3
d73 1
a73 1

@


1.7
log
@*** empty log message ***
@
text
@a60 12
word swap_bytes (word	m)
{
	word	n = 0;

	n |= ((m & 0xff000000) >> 24);
	n |= ((m & 0x00ff0000) >> 8);
	n |= ((m & 0x0000ff00) << 8);
	n |= ((m & 0x000000ff) << 24);

	return n;
}

d120 1
a120 1
		first_program = swap_bytes (first_program);
@


1.6
log
@More fiddling with messages
@
text
@d61 1
a61 1
int swap_bytes (int	m)
d63 1
a63 1
	int	n = 0;
@


1.5
log
@Minor fiddling with debug, info and warning messages
@
text
@d137 1
a137 1
		sysbuild_warning ("\tInvalid first program in bootstrap file");
@


1.4
log
@Fixed bootstrap checking code - after reading config string, align
to longword boundary
@
text
@d128 1
a128 1
	sysbuild_info ("First program in bootstrap = 0x%08lx", first_program);
d137 1
a137 1
		sysbuild_warning ("First program in bootstrap does not match nucleus");
d141 1
a141 1
		sysbuild_info ("Valid first program in bootstrap file");
@


1.3
log
@Added swapping of the number read when required.
@
text
@d34 4
d128 2
d138 4
@


1.2
log
@If first_program is -1 - don't check
@
text
@d47 1
d49 1
a49 7
	int	c;
	int	n_bytes = 20;

	while (n_bytes-- && getc (fp) != EOF)
		;

	if (n_bytes != 0)
d51 1
a51 2
		/* EOF before finding first program */
		return FALSE;
d57 12
d73 2
d79 2
d122 5
@


1.1
log
@Initial revision
@
text
@d41 1
a41 1
int move_to_firstprog (FILE *	fp)
d65 1
a65 1
	word	firstprog;
d67 1
a67 1
	if (ConfigData.bootstrap[0] == '\0')
d88 1
d93 1
a93 1
	if (move_to_firstprog (BootStrapFp) == FALSE)
d99 1
d104 1
a104 1
	if (fread (&firstprog, 1, sizeof (word), BootStrapFp) != sizeof (word))
d109 1
d114 1
a114 1
	if (firstprog != ConfigData.firstprog)
d120 1
@
