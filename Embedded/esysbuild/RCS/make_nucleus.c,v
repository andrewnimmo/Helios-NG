head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	94.04.19.09.44.27;	author tony;	state Exp;
branches;
next	1.7;

1.7
date	94.04.18.15.16.23;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	94.04.18.15.05.44;	author tony;	state Exp;
branches;
next	1.5;

1.5
date	94.01.31.13.53.11;	author tony;	state Exp;
branches;
next	1.4;

1.4
date	93.12.15.16.41.07;	author tony;	state Exp;
branches;
next	1.3;

1.3
date	93.12.13.16.33.32;	author tony;	state Exp;
branches;
next	1.2;

1.2
date	93.12.13.11.53.58;	author tony;	state Exp;
branches;
next	1.1;

1.1
date	93.12.13.11.43.55;	author tony;	state Exp;
branches;
next	;


desc
@Functions to handle the writing of files to the image buffer, keeping
the offsets and vector table correct
@


1.8
log
@If errors are disabled and gaps found in the vector table
the program now pads the vector table with -1.
If an empty string is found, add_module () places -1 in the
vector table and continues.
@
text
@
/*
 *		NUCLEUS CREATION FUNCTIONS
 */

#include <stdio.h>
#include <module.h>

#include "defs.h"
#include "externs.h"

FILE *	ModFp = NULL;

#ifdef IBMPC
ubyte *	lmalloc ();
#endif

/* if not odd, swap () defined as a macro in defs.h */
word swap (word	x)
{
	if (ConfigData.swap_bytes)
	{
		word	r = 0;

		r |= ((x >> 24) & 0xff);
		r |= ((x >> 16) & 0xff) << 8;
		r |= ((x >> 8) & 0xff) << 16;
		r |= (x & 0xff) << 24;

		return r;
	}
	else
		return x;
}

void add_module (char *	module)
{
	word	mod_hdr[3];	/* ImageHdr really */

	int	cnt;

	word	mod_size;	/* size of module from header */

	ubyte *	mod_start = ImagePtr;	/* where the module starts */

	int	mod_offset = ImageSize;	/* used for info only */

	sysbuild_debug ("adding module %s", module);

	if (*module == '\0')
	{
		/*
		 * If we made it this far with an empty module,
		 * place a dummy pointer in the vector table.
		 */
		VectorPtr[ModuleNumber++] = -1;

		return;
	}

#if defined (SUN4) || defined (R140)
	if ((ModFp = fopen (module, "r")) == NULL)
#else
	if ((ModFp = fopen (module, "rb")) == NULL)
#endif
	{
		sysbuild_error ("Failed to open module %s\n", module);

		return;
	}

	if ((cnt = fread (mod_hdr, 1, 12, ModFp)) != 12)
	{
		sysbuild_error ("Failed to read module file (%s) header", module);

		fclose (ModFp);

		return;
	}

	mod_size = swap (mod_hdr[2]);	

	sysbuild_debug ("mod_size = %d (0x%lx), ImageSize = %d (0x%lx)",
				mod_size, mod_size, ImageSize, ImageSize);
	
	file_to_image (ModFp, (int) mod_size, module);

	sysbuild_info ("%s - ", module);
	sysbuild_info ("\t\toffset: 0x%08lx;\tsize: 0x%08lx", 
					mod_offset, mod_size);

	/* Align to next word boundary */
	align_image ();

	/* Patch vector table pointers */
	patch_vector (mod_start);

	fclose (ModFp);
	ModFp = NULL;
}

void make_nucleus ()
{
#ifdef OLD
	module_files_ptr	p;
#endif
	int	i;

	/* Initialise the image buffer, etc */
	init_image ();

	/* Add the files into the nucleus ... */

#ifdef OLD
	add_module (ConfigData.kernel);
	add_module (ConfigData.syslib);
	add_module (ConfigData.servlib);
	add_module (ConfigData.utillib);
	add_module (ConfigData.boot);
	add_module (ConfigData.procman);
	add_module (ConfigData.loader);

	/* add extra files */
	for (p = ConfigData.files_head; p != NULL; p = p -> next)
	{
		add_module (p -> modfile_name);
	}

	add_module (ConfigData.romserv);
#endif
	for (i = 0; i < MODULE_SLOTS && ConfigData.modules[i] != NULL; i++)
	{
		add_module (ConfigData.modules[i]);
	}

	add_romdisk ();

	/* Patch size and terminating NULL */
	VectorPtr[0] 		= swap (ImageSize);
	VectorPtr[ModuleNumber]	= 0L;
}
@


1.7
log
@fixed compile time warnings
@
text
@d52 6
d133 1
a133 8
		if (ConfigData.modules[i][0] == '\0')
		{
			sysbuild_error ("Empty slot found at %d", i + 1);
		}
		else
		{
			add_module (ConfigData.modules[i]);
		}
@


1.6
log
@unknown changes
@
text
@d80 1
a80 1
	file_to_image (ModFp, mod_size, module);
@


1.5
log
@*** empty log message ***
@
text
@a17 1
#ifdef BYTE_SEX_ODD
d21 3
a23 1
	word	r = 0;
d25 4
a28 4
	r |= ((x >> 24) & 0xff);
	r |= ((x >> 16) & 0xff) << 8;
	r |= ((x >> 8) & 0xff) << 16;
	r |= (x & 0xff) << 24;
d30 4
a33 1
	return r;
a34 1
#endif
@


1.4
log
@Changed the order in which modules are added to the nucleus.
First - kernel, syslib, servlib, ..., procman, loader
Second - modules specified with the module keyword
Third - romdisk server
Fourth - rom disk file
@
text
@d45 1
a45 1
	sysbuild_debug ("add_module (%s)", module);
d59 2
d66 4
d95 1
d97 2
d105 1
d121 12
@


1.3
log
@Fixed info message in add_module () - was giving the wrong output
@
text
@a103 2
	add_module (ConfigData.romserv);

d109 2
@


1.2
log
@Changed "module.h" to <module.h>
@
text
@d43 2
d74 2
a75 2
	sysbuild_info ("\t\toffset: 0x%08lx;\tsize:0x%08lx", 
					ImageSize, mod_size);
@


1.1
log
@Initial revision
@
text
@d7 1
a7 2

#include "module.h"
@
