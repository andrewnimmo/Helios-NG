head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	94.05.16.10.00.36;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	94.04.18.15.07.49;	author tony;	state Exp;
branches;
next	1.6;

1.6
date	94.01.31.13.52.11;	author tony;	state Exp;
branches;
next	1.5;

1.5
date	93.12.22.09.55.18;	author tony;	state Exp;
branches;
next	1.4;

1.4
date	93.12.15.16.48.11;	author tony;	state Exp;
branches;
next	1.3;

1.3
date	93.12.15.12.26.20;	author tony;	state Exp;
branches;
next	1.2;

1.2
date	93.12.15.10.11.05;	author tony;	state Exp;
branches;
next	1.1;

1.1
date	93.12.13.11.47.01;	author tony;	state Exp;
branches;
next	;


desc
@structure definitions and macro definitions general to everything
@


1.8
log
@added folding
@
text
@#ifndef __DEFS_H__
#define __DEFS_H__	1

/*
 * Definitions for the Helios (ROM) system builder
 *
 * Copyright (c) 1994 Perihelion Distributed Software Ltd.
 *
 * RCS Id: $Id$
 */

/*{{{  Constants */

#ifndef TRUE
# define TRUE	1
# define FALSE	0
#endif

/* How to recognize a ROM disk - defined in module.h in releases later than 1.3.1 */
#ifndef T_RomDisk
# define	T_RomDisk	0x60fb60fbl
#endif

#if defined(IBMPC) || defined(__HELIOS)
# define MEMSIZE 50000L		/* 50k max nucleus size */
#else
# define MEMSIZE 300000L	/* 300k max nucleus */
#endif

#define DEFAULT_NUCLEUS_FILE	"nucleus"
#define	DEFAULT_CONFIG_FILE	"nucleus.con"
#define DEFAULT_ROMDISK_ROOT	"helios"
#define DEFAULT_ROMDISK_FILE 	"romdisk.fil"
#define DEFAULT_PROCESSOR	"ARM"
#define DEFAULT_NUCLEUS_DIR	"."

#define NAME_LEN_MAX		256
#define KEYWORD_MAX		32

#define SYSBUILD_OLD		2
#define SYSBUILD_OK		1
#define SYSBUILD_FAIL		0

#define SYSBUILDERR_BADOPT	1
#define SYSBUILDERR_FAIL	2


/*
 *		KEYWORDS
 */

#define T_PROCESSOR	"processor"

#define T_NUCLEUS_DIR	"nucleus_dir"

#define T_KERNEL	"kernel"
#define T_SYSLIB	"syslib"
#define T_SERVLIB	"servlib"
#define T_UTILLIB	"utillib"
#define T_BOOT		"boot"
#define T_PROCMAN	"procman"
#define T_LOADER	"loader"
#define T_CLIB		"Clib"
#define T_POSIXLIB	"POSIXlib"

#define T_ROMSERV	"romdisk_server"
#define T_ROMDISK_FILE	"romdisk_file"
#define T_ROMDISK_DIR	"romdisk_directory"
#define T_ROMDISK_ROOT	"romdisk_root"
#define T_ROMDISK_WRITE "romdisk_writefile" /* write a separate romdisk file */

#define T_BOOTSTRAP		"rombootstrap"
#define T_BOOTSTRAP_SEPARATE	"bootstrap_separate"

#define T_MODULE	"module"

#define T_IMAGE_SIZE	"image_size"

#define T_FIRST_PROGRAM	"first_program"

#ifdef JUST_TESTING
#define T_SWAP_BYTES	"swap_bytes"
#endif

/*}}}*/
/*{{{  Macros */

#define strequ_(s1,s2)		(strcmp (s1, s2) == 0)
#define strnequ_(s1,s2,n)	(strncmp (s1, s2, n) == 0)

/*}}}*/
/*{{{  Types */

#ifndef WORD
typedef long		word;
typedef char *		string;
typedef unsigned char	ubyte;
#endif

/*
 *		STRUCTURE DEFINITIONS
 */

typedef struct
  {
    char	module_name[ NAME_LEN_MAX ];
    int		module_slot;
  }
module_data;

/*
 * struct parse_str:
 *	Used to hold information retrieved from the config file.
 */
struct parse_str
  {
    struct parse_str *	next;

    char		keyword_name[KEYWORD_MAX];
    
    int			keyword_def;
    
    union
      {
	char		string_val[NAME_LEN_MAX];
	int		int_val;
	char		char_val;
	module_data	module_val;
      }
    value;

    int			value_type;	/* codes defined below */
};

#define NO_VAL		0
#define STRING_VAL	1
#define INT_VAL		2
#define CHAR_VAL	3
#define MODULE_VAL	4

#define string_val_(p)	((p -> value).string_val)
#define int_val_(p)	((p -> value).int_val)
#define char_val_(p)	((p -> value).char_val)
#define module_val_(p)	((p -> value).module_val)
#define module_name_(p)	(module_val_(p).module_name)
#define module_slot_(p)	(module_val_(p).module_slot)

typedef struct parse_str	parse_elem;
typedef struct parse_str *	parse_ptr;


/*
 * struct module_files_str:
 *	Used to set up a linked list of files to be included in the nucleus.
 */

struct module_files_str
  {
    struct module_files_str *	next;

    char	modfile_name[NAME_LEN_MAX];
  };

typedef struct module_files_str *	module_files_ptr;


/*
 * config_str:
 *	Holds nucleus configuration information.
 */

#define MODULE_SLOTS	64
struct config_str
  {	
    char	config_file[NAME_LEN_MAX];

    char	processor[8];	/* TRAN, C40, ARM */

	/* nucleus file name */
    char	nucleus[NAME_LEN_MAX];

    char	nucleus_dir[NAME_LEN_MAX];	/* used to replace "~" in file names */

	/*
	 * Array of modules in the nucleus -
	 *
	 *	1	kernel
	 *	2	syslib
	 *	3	servlib
	 *	4	utillib
	 *	5	remote booter
	 *	6	procman
	 *	7	loader
	 *	8	C library
	 *	9	POSIX library
	 */
	
	/*
	 * For information only, we set the corresponding bit in
	 * loaded to 1 if the above modules are explicitly defined
	 */
    long	loaded;

    char *	modules[MODULE_SLOTS];

	/* rom server and rom disk information */

    char	romdisk_file[NAME_LEN_MAX];
    char	romdisk_dir[NAME_LEN_MAX];
    char	romdisk_root[NAME_LEN_MAX];
    char	romdisk_write;

	/* bootstrap binary file */
    char	bootstrap[NAME_LEN_MAX];
    int		bootstrap_separate;	/* don't concatenate bootstrap and nucleus */

	/* other changeable bits and pieces */

    long	memory_size;

	/* calculated bits */
    int		vector_table_size;

    int		first_program;
    int		swap_bytes;	/* Set if the boot strap file is a different
				   sex to the host machine */
};

/*}}}*/

#endif /* __DEFS_H__ */
@


1.7
log
@*** empty log message ***
@
text
@a0 1

d5 5
a9 1
 *		MACRO DEFINITIONS & TYPEDEFS
d12 2
a18 3
#define strequ_(s1,s2)		(strcmp (s1, s2) == 0)
#define strnequ_(s1,s2,n)	(strncmp (s1, s2, n) == 0)

a23 6
#ifndef WORD
typedef long		word;
typedef char *		string;
typedef unsigned char	ubyte;
#endif

d37 2
a38 2
#define NAME_LEN_MAX	256
#define KEYWORD_MAX	32
d40 1
d47 53
d105 5
a109 4
{
	char	module_name[NAME_LEN_MAX];
	int	module_slot;
} module_data;
d116 2
a117 2
{
	struct parse_str *	next;
d119 12
a130 1
	char	keyword_name[KEYWORD_MAX];
d132 2
a133 1
	int	keyword_def;
a134 9
	union
	{
		char		string_val[NAME_LEN_MAX];
		int		int_val;
		char		char_val;
		module_data	module_val;
	} value;
	int	value_type;	/* codes defined below */
};
d158 2
a159 2
{
	struct module_files_str *	next;
d161 2
a162 2
	char	modfile_name[NAME_LEN_MAX];
};
d174 2
a175 2
{	
	char	config_file[NAME_LEN_MAX];
d177 1
a177 1
	char	processor[8];	/* TRAN, C40, ARM */
d180 1
a180 1
	char	nucleus[NAME_LEN_MAX];
d182 1
a182 1
	char	nucleus_dir[NAME_LEN_MAX];	/* used to replace "~" in file names */
d202 1
a202 1
	long	loaded;
d204 1
a204 1
	char *	modules[MODULE_SLOTS];
d208 4
a211 4
	char	romdisk_file[NAME_LEN_MAX];
	char	romdisk_dir[NAME_LEN_MAX];
	char	romdisk_root[NAME_LEN_MAX];
	char	romdisk_write;
d214 2
a215 2
	char	bootstrap[NAME_LEN_MAX];
	int	bootstrap_separate;	/* don't concatenate bootstrap and nucleus */
d219 1
a219 1
	long	memory_size;
d222 1
a222 1
	int	vector_table_size;
d224 2
a225 2
	int	first_program;
	int	swap_bytes;	/* Set if the boot strap file is a different
d229 1
a229 36
/*
 *		KEYWORDS
 */

#define T_PROCESSOR	"processor"

#define T_NUCLEUS_DIR	"nucleus_dir"

#define T_KERNEL	"kernel"
#define T_SYSLIB	"syslib"
#define T_SERVLIB	"servlib"
#define T_UTILLIB	"utillib"
#define T_BOOT		"boot"
#define T_PROCMAN	"procman"
#define T_LOADER	"loader"
#define T_CLIB		"Clib"
#define T_POSIXLIB	"POSIXlib"

#define T_ROMSERV	"romdisk_server"
#define T_ROMDISK_FILE	"romdisk_file"
#define T_ROMDISK_DIR	"romdisk_directory"
#define T_ROMDISK_ROOT	"romdisk_root"
#define T_ROMDISK_WRITE "romdisk_writefile" /* write a separate romdisk file */

#define T_BOOTSTRAP		"rombootstrap"
#define T_BOOTSTRAP_SEPARATE	"bootstrap_separate"

#define T_MODULE	"module"

#define T_IMAGE_SIZE	"image_size"

#define T_FIRST_PROGRAM	"first_program"

#ifdef JUST_TESTING
#define T_SWAP_BYTES	"swap_bytes"
#endif
@


1.6
log
@*** empty log message ***
@
text
@d17 3
a19 2
#ifndef BYTE_SEX_ODD
# define swap(x)	(x)
d36 4
a39 1
#define DEFAULT_ROMDISK_DIR	"helios"
d41 1
a41 1
#define NAME_LEN_MAX	64
d123 2
d128 2
d161 1
d179 4
d195 1
a195 1
#define T_ROMDISK_DIR	"romdisk_dir"
d199 2
a200 1
#define T_BOOTSTRAP	"rombootstrap"
d204 1
a204 1
#define T_MEMORY_SIZE	"memory_size"
d207 2
d210 1
@


1.5
log
@Minor name changes in defined default values.
Changed T_ROMDISK_WRITE to "romdisk_writefile"
Changed T_BOOTSTRAP to "rombootstrap"
Added keywords T_CLIB and T_POSIXLIB
@
text
@d35 1
a36 1

d50 6
d70 4
a73 3
		char	string_val[NAME_LEN_MAX];
		int	int_val;
		char	char_val;
d81 1
d86 3
d114 1
d119 1
a119 1
	/* final nucleus file name */
d122 19
a140 1
	/* (normally) required files */
d142 1
a142 7
	char	kernel[NAME_LEN_MAX];	/* always required */
	char	syslib[NAME_LEN_MAX];
	char	servlib[NAME_LEN_MAX];
	char	utillib[NAME_LEN_MAX];
	char	boot[NAME_LEN_MAX];
	char	procman[NAME_LEN_MAX];
	char	loader[NAME_LEN_MAX];
a145 1
	char	romserv[NAME_LEN_MAX];
a153 4
	/* pointer to other files to be added to the nucleus */
	module_files_ptr	files_head;
	module_files_ptr *	files_tail;

d169 1
@


1.4
log
@Added swap_bytes keyword and component in config structure
@
text
@d28 1
a28 1
# define MEMSIZE 500000L	/* 500k max nucleus size */
d30 1
a30 1
# define MEMSIZE 1000000L	/* 1Mb max nucleus */
d33 1
a33 1
#define DEFAULT_NUCLEUS		"nucleus"
a149 2
#define T_NUCLEUS	"nucleus"

d157 2
d164 1
a164 1
#define T_ROMDISK_WRITE "romdisk_write"	  /* write a separate romdisk file */
d166 1
a166 1
#define T_BOOTSTRAP	"bootstrap"
@


1.3
log
@Added first_program to ConfigData
@
text
@d143 2
d173 1
a173 1

@


1.2
log
@Changed type of mem_size in ConfigData struct from int to long
@
text
@d142 1
d169 2
@


1.1
log
@Initial revision
@
text
@d137 1
a137 1
	int	memory_size;
@
