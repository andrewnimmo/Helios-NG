head	1.6;
access;
symbols
	Helios_1_3_1:1.6
	Helios_C40_1_3_Official_Release:1.6
	Alenia_release:1.6
	C40_Field_Test_2:1.6
	C40_Field_Test_R1:1.3;
locks; strict;
comment	@ * @;


1.6
date	92.10.14.14.54.14;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	92.08.04.18.32.56;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	92.08.04.13.13.33;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	92.03.25.14.10.31;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	92.03.17.18.16.22;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	92.02.26.09.49.42;	author nickc;	state Exp;
branches;
next	;


desc
@@


1.6
log
@changed to use Norcroft sources instead of TI sources
@
text
@/*
 * math.c - run time support for C maths functions
 *
 * The code in this file is based on two sources,
 *
 * 'math.c' 	from Codemist
 * 'rts.src'	from Texas Instruments
 *
 * Integration into a C40 environment was performed by
 * Nick Clifton
 *
 * The source from the Texas Insturment's run time support
 * library is used with permission, provided that the source
 * is not redistributed to third parties.
 *
 * math.c: ANSI draft (X3J11 May 86) library code, section D.5
 *
 * Copyright (C) A.C. Norman and A. Mycroft
 * version 0.04b
 *
 * Copyright (c) 1991 Texas Instruments Incorporated
 *
 * Copyright (c) 1992 Perihelion Software Limited.
 *	All Rights Reserved.
 *
 * RCS Id: $Id: math.c,v 1.5 1992/08/04 18:32:56 nickc Exp nickc $
 */

#include "fplib.h"
#include <limits.h>
#include <errno.h>

/* the macro HUGE_VAL must be defined before <math.h> is included since  */
/* <math.h> declares _huge_val extern if HUGE_VAL is not defined.        */

#ifndef __HELIOS
#ifndef HUGE_VAL
#define HUGE_VAL _huge_val
#endif
#endif

#include <math.h>                          /* for forward references */

/* functions defined in maths.a */

extern double 	modf( double number, double * iptr );
extern double	_invert( double number );

#define TWO_SQRT3 0.26794919243112270647
#define SQRTTHREE 1.73205080756887729353
#define TWOINVPI  0.63661977236758134308
#define INVLOGe2  1.4426950408889634074
#define LOGe3by2  0.549306144334054846
#define SQRTWO	  1.4142135623730950
#define INVSPI	  0.31830988618379067154
#define HALFPI	  1.57079632679489661923
#define LOGe2	  0.6931471805599453094172321
#define MAXX	  88.72283906        		/* ln(HUGE_VAL)                          */
#define MAXH	  89.41598624	     		/* ln(HUGE_VAL) + ln(2)                  */
#define ASP1	 -0.27516555290596e1
#define ASP2	  0.29058762374859e1
#define ASP3	 -0.59450144193246
#define ASQ0	 -0.16509933202424e2
#define ASQ1	  0.24864728969164e2
#define ASQ2	 -0.10333867072113e2

#define EXP0	  0.24999999999992
#define EXP1	  0.59504254977591e-2
#define EXQ0	  0.5
#define EXQ1	  0.53567517645222e-1
#define EXQ2	  0.29729363682238e-3

#define C3	  0.693359375
#define C4	 -2.121944400546905827679e-4

#define PI	  3.14159265358979323846

#define _exp_arg_limit            709.78271289338397
#define _exp_negative_arg_limit  -708.39641853226408
#define _sqrt_half                  0.70710678118654752440
#define _pi_2                       1.57079632679489661923
#define _pi_3                       1.04719755119659774615
#define _pi_6                       0.52359877559829887038

/*
 * XXX - be sure to keep these functions in step with those in clib/fpprintf.c
 */

double
frexp(
      double	d,
      int *	lvn )
{
  fp_number d1;

  
  if (d == 0.0)
    {
      *lvn = 0;

      return d;
    }

  d1.d = d;
  
  *lvn = d1.i.x + 1;

  d1.i.x = -1;

  return d1.d;
}

double
ldexp(
      double	d,
      int	n )
{
  fp_number 	d1;
  int 		nx;


  if (d == 0.0)
    return d;        			/* special case                      */
  
  d1.d = d;

  nx = (int) d1.i.x + n;

  if (nx > 0x7f)
    {
      if (d1.i.s)
	{
	  nx     = 0x7f;                 /* overflow yields largest negative */
	  d1.i.m = 0x0U;
	}
      else
	{
	  nx     = 0x7f;                 /* overflow yields largest positive */
	  d1.i.m = 0x7fffffffU;
	}
    }
  else if (nx < -128)
    {
      return 0.0;  			/* deal with underflow               */
    }
  else if (nx == -128 && d1.i.s == 0 && d1.i.m == 0)
    {
      nx     = 0x7f;                 	/* avoid return of 0.0 by accident   */
      d1.i.m = 0x0U;
    }
  
  d1.i.x = nx;

  return (d1.d);
}


static double
_sincos(
	double	x,
	double	y,
	int 	sign,
	int 	coscase )
{
  int n;
  double xn, f, g, r;


  if (y >= 1.0e9)     /* fail if argument is overlarge                 */
    {
      errno = EDOM;
      return -HUGE_VAL;
    }

  n = (int) ((y + _pi_2) / PI);
  xn = (double) n;

  if ((n & 1) != 0) sign = -sign;
  if (coscase) xn = xn - 0.5;

  f = +(x - xn*3.1416015625) + xn*8.908910206761537356617e-6;

  /* I expect that the absolute value of f is less than pi/2 here          */
  
  if (fabs(f) >= 1.e-10)
    {
#define _sincos_r1  -0.16666666666666665052
#define _sincos_r2   0.83333333333331650315e-2
#define _sincos_r3  -0.19841269841201840457e-3
#define _sincos_r4   0.27557319210152756119e-5
#define _sincos_r5  -0.25052106798274584544e-7
#define _sincos_r6   0.16058936490371589114e-9
#define _sincos_r7  -0.76429178068910467734e-12
#define _sincos_r8   0.27204790957888846175e-14

      g = f * f;
      
      r = ((((((((_sincos_r8) * g + _sincos_r7) * g + _sincos_r6) * g +
	          _sincos_r5) * g + _sincos_r4) * g + _sincos_r3) * g +
                  _sincos_r2) * g + _sincos_r1) * g;
      f += f * r;
    };

  if (sign < 0)
    return -f;
  else
    return f;

} /* _sincos */


double
sin( double x )
{
  if (x < 0.0)
    return _sincos( -x, -x, -1, 0 );
  else
    return _sincos( x, x, 1, 0 );

} /* sin */


double
cos( double x )
{
  if (x < 0.0)
    return _sincos( -x, HALFPI - x, 1, 1 );
  else
    return _sincos( x, HALFPI + x, 1, 1 );

} /* cos */


double
exp( double x )
{
  int n;
  double xn, g, z, gp, q, r;


  if (x > _exp_arg_limit)
    {
      errno = ERANGE;
      return HUGE_VAL;
    }

  if (x < _exp_negative_arg_limit)
    return 0.0;

  if (fabs(x) < 1.e-20)
    return 1.0;
  
  /* In C the cast (int)x truncates towards zero. Here I want to round.    */

  n = (int)((x >= 0 ? 0.5 : -0.5) + 1.44266950408889634074 * x);

  xn = (double)n;

  g = +(x - xn * 0.693359375) - xn * (-2.1219444005469058277e-4);
  
  z = g * g;
  
#define  _exp_p0  0.249999999999999993
#define  _exp_p1  0.694360001511792852e-2
#define  _exp_p2  0.165203300268279130e-4
#define  _exp_q0  0.500000000000000000
#define  _exp_q1  0.555538666969001188e-1
#define  _exp_q2  0.495862884905441294e-3
  
  gp = ((_exp_p2 * z + _exp_p1) * z + _exp_p0) * g;
  q  =  (_exp_q2 * z + _exp_q1) * z + _exp_q0;
  r  = 0.5 + gp / (q - gp);

  return ldexp( r, n + 1 );
  
} /* exp */


double
log( double x )
{
  int 		n;
  double	f;
  double	znum;
  double	zden;
  double	z;
  double	w;
  double	r;
  double	xn;


  if (x <= 0.0)
    {
      errno = (x == 0.0) ? ERANGE : EDOM;
      
      return (-HUGE_VAL);
    }

  f = frexp( x, &n );

#define _sqrt_half 0.70710678118654752440
  
  if (f > _sqrt_half)
    {
      znum = +(f - 0.5) - 0.5;
      zden = f * 0.5 + 0.5;
    }
  else
    {
      n -= 1;

      znum = f - 0.5;
      zden = znum * 0.5 + 0.5;
    }

  z = znum / zden;

  w = z * z;

#define _log_a0 -0.64124943423745581147e2
#define _log_a1  0.16383943563021534222e2
#define _log_a2 -0.78956112887491257267e0
#define _log_b0 -0.76949932108494879777e3
#define _log_b1  0.31203222091924532844e3
#define _log_b2 -0.35667977739034646171e2

  r = w * ( ((_log_a2 * w + _log_a1) * w + _log_a0) /
	   (((w + _log_b2) * w + _log_b1) * w + _log_b0) );

  r = z + z * r;

  xn = (double)n;

  return +(xn * (-2.121944400546905827679e-4) + r) + xn * (355.0 / 512.0);

} /* log */


double
log10( double x )
{
  return log( x ) * 0.43429448190325182765;  /* log10(e) */

} /* log10 */


double
sqrt( double x )
{
  extern double _sqrt( double );
  double	a;
  int		i;
  

  
  if (x <= 0.0)
    {
      if (x < 0.0)
	{
	  errno = EDOM;
	  return -HUGE_VAL;
	}
      
      return 0.0;
    }

  /* use C40 hardware for our initial guess */
  
  a = _sqrt( x );

  /* use Newton-Raphson to improve our answer */
  
  for (i = 4; i--;)
    {
      a = (a + (x / a)) / 2.0;	  
    }

  return a;      
  
} /* sqrt */



static double
_tancot(
	double	x,
	int 	iflag )
{
  double 	xn;
  double	f;
  double	g;
  double	xnum;
  double	xden;
  int 		n;



  if (x < 0.0)
    {
      if (x <= -1.0e9)     /* fail if argument is overlarge                 */
	{
	  errno = EDOM;
	  
	  return -HUGE_VAL;
	}
      
      n = (int) (x * TWOINVPI - 0.5);  /* since (int) -1.5 = -1.0 */
    }
  else
    {
      if (x >= 1.0e9)     /* fail if argument is overlarge                 */
	{
	  errno = EDOM;
	  
	  return -HUGE_VAL;
	}
      
      n = (int) (x * TWOINVPI + 0.5);
    }

  xn = (double) n;

  f = +(x - xn * 1.57080078125) + xn * 4.454455103380768678308e-6;

  if (fabs( f ) > 1.e-10)
    {
	g = f * f;

#define _tan_p1 -0.13338350006421960681
#define _tan_p2  0.34248878235890589960e-2
#define _tan_p3 -0.17861707342254426711e-4
#define _tan_q0  1.00000000000000000000
#define _tan_q1 -0.46671683339755294240
#define _tan_q2  0.25663832289440112864e-1
#define _tan_q3 -0.31181531907010027307e-3
#define _tan_q4  0.49819433993786512270e-6
        xnum = ((_tan_p3  * g + _tan_p2) * g + _tan_p1) * g * f + f;
        xden = (((_tan_q4 * g + _tan_q3) * g + _tan_q2) * g + _tan_q1) * g + _tan_q0;
    }
  else
    {
      xnum = f;
      xden = 1.0;
    }

  if (iflag)
    {
      if ((n & 1) == 0)
	return xden / xnum;
      else
	return - xnum / xden;
    }
  else
    {
      if ((n & 1) == 0)
	return xnum / xden;
      else
	return - xden / xnum;
    }

} /* _tancot */


double
tan( double x )
{
  return _tancot( x, 0 );

} /* tan */


double
_cot( double x )      /* Not specified by ANSI hence the funny name */
{
  if (fabs( x ) < 1.0 / HUGE_VAL)
    {
      errno = ERANGE;

      if (x < 0.0)
	return -HUGE_VAL;
      else
	return HUGE_VAL;
    }

  return _tancot( x, 1 );

} /* _cot */


double
atan( double x )
{
  int n;
  double f;
  const static double a[4] = { 0.0, _pi_6, _pi_2, _pi_3 };


  f = fabs(x);

  if (f > 1.0)
    {
      f = _invert( f );
      n = 2;
    }
  else
    n = 0;
  
#define _two_minus_root_three 0.26794919243112270647
#define _sqrt_three           1.73205080756887729353
#define _sqrt_three_minus_one 0.73205080756887729353

  if (f > _two_minus_root_three)
    {
      f = (+(+(_sqrt_three_minus_one*f - 0.5) - 0.5) + f) / (_sqrt_three + f);
      n++;
    }

  if (fabs(f) > 1.e-10)
    {
      double g = f * f;
      double r;

      
#define _atan_p0    -0.13688768894191926929e2
#define _atan_p1    -0.20505855195861651981e2
#define _atan_p2    -0.84946240351320683534e1
#define _atan_p3    -0.83758299368150059274
#define _atan_q0     0.41066306682575781263e2
#define _atan_q1     0.86157349597130242515e2
#define _atan_q2     0.59578436142597344465e2
#define _atan_q3     0.15024001160028576121e2
      
      r = ((((_atan_p3  * g + _atan_p2) * g + _atan_p1) * g + _atan_p0) * g) /
      ((((g + _atan_q3) * g + _atan_q2) * g + _atan_q1) * g + _atan_q0);
      f = f + f * r;
    }

  if (n > 1)
    f = -f;
  
  f = f + a[ n ];
  
  if (x < 0)
    return -f;
  else
    return f;
  
} /* atan */


double
asin( double x )
{
  double 	p;
  double	q;
  double	g;
  double	y;
  double 	i;


  if ((y = fabs( x )) > 0.5)
    {
      if (y > 1.0)
	{
	  errno = EDOM;

	  return 0.0;
	}

      i = 0.78539816339744830962;
      g = (1.0 - y) * 0.5;	
      y = -2.0 * sqrt( g );
    }
  else
    {
      i = 0.0;
      g = y * y;
    }

  p = ((ASP3 * g + ASP2) * g + ASP1) * g;
  q = ((g + ASQ2) * g + ASQ1) * g + ASQ0;

  return (x < 0) ? (-((i + y + y * p / q) + i))
                   : ((i + y + y * p / q) + i);
} /* asin */


double
acos( double x )
{
  double 	b;
  double 	c;
  double 	p;
  double	q;
  double	g;
  double	y;

  
  if ((y = fabs( x )) > 0.5)
    {
      if (y > 1.0)
	{
	  errno = EDOM;
	
	  return 0.0;
	}

      b = 1.57079632679489661923;
      c = 0.0;
      g = (1.0 - y) * 0.5;
      y = -2.0 * sqrt( g );
    }
  else
    {
      g = y * y;
      b = 0.78539816339744830962;
      c = 0.78539816339744830962;
    }
  
  p = ((ASP3 * g + ASP2) * g + ASP1) * g;
  q = ((g + ASQ2) * g + ASQ1) * g + ASQ0;

  return (x < 0) ? ((b + y + y * p / q) + b)
		 : ((c - y - y * p / q) + c);
} /* acos */


/* calculates x raised to the power y */

double
pow(
    double	x,
    double	y )
{
  int 		sign = 0, m, p, i, mdash, pdash;
  double	g, r, z, v, u1, u2;

  /* The table a1[] contains properly rounded values for 2**(i/16), and    */
  /* a2[] contains differences between the true values of 2**(i/16) and    */
  /* the a1[] values for odd i.                                            */

  const static double a1[ 17 ] =
    {
      /* It is painfully important that the following 17 floating point        */
      /* numbers are read in to yield the quantities shown on the right.       */
      1.0,                    /* 3ff00000:00000000 */
      0.9576032806985737,     /* 3feea4af:a2a490da */
      0.91700404320467121,    /* 3fed5818:dcfba487 */
      0.87812608018664973,    /* 3fec199b:dd85529c */
      0.8408964152537145,     /* 3feae89f:995ad3ad */
      0.80524516597462714,    /* 3fe9c491:82a3f090 */
      0.77110541270397037,    /* 3fe8ace5:422aa0db */
      0.73841307296974967,    /* 3fe7a114:73eb0187 */
      0.70710678118654757,    /* 3fe6a09e:667f3bcd */
      0.67712777346844632,    /* 3fe5ab07:dd485429 */
      0.64841977732550482,    /* 3fe4bfda:d5362a27 */
      0.620928906036742,      /* 3fe3dea6:4c123422 */
      0.59460355750136051,    /* 3fe306fe:0a31b715 */
      0.56939431737834578,    /* 3fe2387a:6e756238 */
      0.54525386633262884,    /* 3fe172b8:3c7d517b */
      0.52213689121370688,    /* 3fe0b558:6cf9890f */
      0.5                     /* 3fe00000:00000000 */
      };
  
  const static double a2[ 8 ] =
    {
      -5.3099730280915798e-17,
       1.4800703477186887e-17,
       1.2353596284702225e-17,
      -1.7419972784343138e-17,
       3.8504741898901863e-17,
       2.3290137959059465e-17,
       4.4563878092065126e-17,
       4.2759448527536718e-17
       };

  if (y == 1.0)
    return x;

  if (x <= 0.0)
    {
      int ny;

      if (x == 0.0)
        {
	  if (y <= 0.0)
            {
	      errno = EDOM;
	      return -HUGE_VAL;
            }
	  return 0.0;
        }

      if (y < (double)INT_MIN ||
	  y > (double)INT_MAX ||
	  (double)(ny = (int)y) != y)
        {
	  errno = EDOM;
	  return -HUGE_VAL;
        }

      /* Here y is an integer and x is negative.                               */
      
      x = -x;
      sign = (ny & 1);
    }

  if (y == 2.0 && x < 1.e20)
    return x * x;  /* special case.             */
  
  g = frexp( x, &m );
  p = 0;

  if (g <= a1[ 8 ]) p = 8;
  if (g <= a1[p+4]) p += 4;
  if (g <= a1[p+2]) p += 2;
  
  z = (+(g - a1[ p + 1 ]) - a2[ p / 2 ]) / (0.5 * g + 0.5 * a1[ p + 1 ]);
  
  /* Expect abs(z) <= 0.044 here */

  v = z * z;

#define _pow_p1 0.83333333333333211405e-1
#define _pow_p2 0.12500000000503799174e-1
#define _pow_p3 0.22321421285924258967e-2
#define _pow_p4 0.43445775672163119635e-3

  r = (((_pow_p4 * v + _pow_p3) * v + _pow_p2) * v + _pow_p1) * v * z;

#define _pow_k 0.44269504088896340736
  
  r = r + _pow_k * r;

  u2 = +(r + z * _pow_k) + z;

#define _reduce( v ) ((double)(int)(16.0 * (v)) * 0.0625)

  p = 16 * m - p - 1;
  
  u1 = (double)p * 0.0625;
  
    {
      double y1 = _reduce( y );
      double y2 = y - y1;
      double w  = u2 * y + u1 * y2;
      double w1 = _reduce( w );
      double w2 = w - w1;
      int    iw1;

      
      w   = w1 + u1 * y1;
      w1  = _reduce( w );
      w2  = w2 + +(w - w1);
      w   = _reduce( w2 );
      iw1 = (int)(16.0 * (w1 + w));
      w2  = w2 - w;
      
      /* The following values have been determined experimentally, but their  */
      /* values are not very critical.                                        */
      
#  define _negative_pow_limit -16352

      if (iw1 < _negative_pow_limit)
        {
	  errno = ERANGE;         /* Underflow certain                 */
	  return 0.0;
        }

      if (w2 > 0.0)
        {
	  iw1 += 1;
	  w2  -= 0.0625;
        }

      if (iw1 < 0) i = 0;
      else i = 1;

      mdash = iw1 / 16 + i;
      pdash = 16 * mdash - iw1;
      
#define _pow_q1 0.69314718055994529629
#define _pow_q2 0.24022650695909537056
#define _pow_q3 0.55504108664085595326e-1
#define _pow_q4 0.96181290595172416964e-2
#define _pow_q5 0.13333541313585784703e-2
#define _pow_q6 0.15400290440989764601e-3
#define _pow_q7 0.14928852680595608186e-4

      z = ((((((_pow_q7  * w2 + _pow_q6) * w2 + _pow_q5) * w2 +
	        _pow_q4) * w2 + _pow_q3) * w2 + _pow_q2) * w2 + _pow_q1) * w2;
      z = a1[ pdash ] + a1[ pdash ] * z;
      
      z = frexp( z, &m );

      mdash += m;

      if (mdash >= 0x7ff-0x3fe)
        {
	  errno = ERANGE;
	  
	  if (sign)
	    r = -HUGE_VAL;
	  else
	    r = HUGE_VAL;
        }
      else if (mdash <= -0x3fe)
        {
	  errno = ERANGE;
	  r = 0.0;
        }
      else
        {
	  r = ldexp( z, mdash );

	  if (sign)
	    r = -r;
        }
    }

  return r;

} /* pow */


double
atan2(
      double	y,
      double	x )
{
  if ((x == 0.0) && (y == 0.0))
    {
      errno = EDOM;
      return -HUGE_VAL;
    }

  if (fabs( x ) < fabs( y ))
    {
      if (fabs( x / y ) < 1.0e-20)
        {
	  if (y < 0.0)
	    return - HALFPI;
	  else
	    return HALFPI;
        }
    }

  y = atan( y / x );

  if (x < 0.0)
    {
      if (y > 0.0)
	y -= PI;
      else
	y += PI;
    }

  return y;

} /* atan2 */


double
fabs( double x )
{
  if (x < 0.0)
    return -x;
  else
    return x;

} /* fabs */


double
sinh( double x )
{
  int 		sign;
  double	y;


  if (x < 0.0)
    {
      y    = -x;
      sign = 1;
    }
  else
    {
      y    = x;
      sign = 0;
    }
  
  if (y > 1.0)
    {
/* _sinh_lnv is REQUIRED to read in as a number with the lower part of   */
/* its floating point representation zero.                               */
#define    _sinh_lnv     0.69316101074218750000          /* ln(v)        */
#define    _sinh_vm2     0.24999308500451499336          /* 1/v^2        */
#define    _sinh_v2m1    0.13830277879601902638e-4       /* (v/2) - 1    */
      double	w;
      

      w = y - _sinh_lnv;
      
      if (w > _exp_arg_limit)
        {
	  errno = ERANGE;

	  if (sign)
	    return -HUGE_VAL;
	  else
	    return HUGE_VAL;
        }

      w = exp( w );   /* should not overflow!                            */

      if (w < 1.0e10)
	w -= _sinh_vm2 / w;

      w += _sinh_v2m1 * w;

      if (sign)
	return -w;
      else
	return w;
    }
  else if (y <= 1.0e-10)
    {
      return x;
    }
  else
    {
#define _sinh_p0    -0.35181283430177117881e6
#define _sinh_p1    -0.11563521196851768270e5
#define _sinh_p2    -0.16375798202630751372e3
#define _sinh_p3    -0.78966127417357099479e0
#define _sinh_q0    -0.21108770058106271242e7
#define _sinh_q1     0.36162723109421836460e5
#define _sinh_q2    -0.27773523119650701667e3
#define _sinh_q3     1.0

      double	g = x * x;
      double	r;

      /* Use a (minimax) rational approximation. See Cody & Waite.     */

      r = ((((_sinh_p3 * g + _sinh_p2) * g + _sinh_p1) * g + _sinh_p0) * g) /
	              (((g + _sinh_q2) * g + _sinh_q1) * g + _sinh_q0);
      
      return x + x * r;
    }

} /* sinh */


double
cosh( double x )
{
  if (x < 0.0) x = -x;
  
  if (x > 1.0)
    {
      x = x - _sinh_lnv;

      if (x > _exp_arg_limit)
        {
	  errno = ERANGE;
	  return HUGE_VAL;
        }

      x = exp( x );   /* the range check above ensures that this does not overflow. */
      
      if (x < 1.0e10) x = x + _sinh_vm2 / x;
      
      /* This very final line might JUST overflow even though the call */
      /* to exp is safe and even though _exp_arg_limit is conservative */

      return x + _sinh_v2m1 * x;
    }

  /* This second part is satisfactory, even though it is simple!           */

  x = exp( x );

  return 0.5 * (x + _invert( x ));
  
} /* cosh */


double
tanh( double x )
{
  double	g;
  int		sign;
  
  
  if (x < 0.0)
    {
      if (x < -27.0)
	return -1.0;
      
      x = -x, sign = 1;
    }
  else
    {
      if (x > 27.0)
	return 1.0;         /* here exp(2x) dominates 1.0        */
      
      sign = 0;
    }

  if (x > LOGe3by2)
    {
      x = 2.0 / (exp( 2.0 * x ) + 1.0);
      
      return sign ? (x - 1.0) : (1.0 - x);
    }
  
  g = x * x;

#define _tanh_p0    -0.16134119023996228053e4
#define _tanh_p1    -0.99225929672236083313e2
#define _tanh_p2    -0.96437492777225469787e0
#define _tanh_q0     0.48402357071988688686e4
#define _tanh_q1     0.22337720718962312926e4
#define _tanh_q2     0.11274474380534949335e3
#define _tanh_q3     1.0

  g = (((_tanh_p2 * g + _tanh_p1) * g + _tanh_p0) * g) /
    (((g + _tanh_q2) * g + _tanh_q1) * g + _tanh_q0);
  
  g = x + x * g;
  
  return sign ? -g : g;
  
} /* tanh */


/* floating point remainder of (x/y) for integral quotient. Remainder    */
/* has same sign as x.                                                   */

double
fmod(
     double	x,
     double	y )
{
  double	q;
  double	r;

  
  if (y == 0.0)
    {
      errno = EDOM;
      return -HUGE_VAL;
    }

  if (x == 0.0)
    return 0.0;

  if (y < 0.0)
    y = -y;

  (void) modf( x / y, &q );

  r = x - q * y;
  
  /* The next few lines are an ultra-cautious scheme to ensure that the    */
  /* result is less than fabs(y) in value and that it has the sign of x.   */
  
  if (x > 0.0)
    {
      while (r >= y)
	r -= y;
      
      while (r <  0.0)
	r += y;
    }
  else
    {
      while (r <= -y)
	r += y;
      
      while (r >  0.0)
	r -= y;
    }

  return r;
  
} /* fabs */


/* round d down to an integer towards minus infinity.                    */

double
floor( double d )
{
  double y; 


  return (modf( d, &y ) < 0 ? y - 1.0 : y);
  
} /* floor */

/* round d up to an integer towards plus infinity.                       */

double
ceil( double d )
{
  double y; 


  return (modf( d, &y ) > 0 ? y + 1.0 : y);
  
} /* ceil */

/* end of math.c */
@


1.5
log
@fixed sqrt()
@
text
@d26 1
a26 1
 * RCS Id: $Id: math.c,v 1.4 1992/08/04 13:13:33 nickc Exp nickc $
a32 2
#pragma soft_fp_divide

d66 1
a66 4
#define ATP0	 -0.144008344874e1
#define ATP1	 -0.720026848898
#define ATQ0	  0.432025038919e1
#define ATQ1	  0.475222584599e1
d72 1
a72 15
#define SHP0	  0.10622288837151e4
#define SHP1	  0.31359756456058e2
#define SHP2	  0.34364140358506
#define SHQ0	  0.63733733021822e4
#define SHQ1	 -0.13051012509199e3
#define TAP1	 -0.1113614403566
#define TAP2	  0.1075154738488e-2
#define TAQ1	 -0.4446947720281
#define TAQ2	  0.1597339213300e-1
#define THP0	 -0.21063958000245e2
#define THP1	 -0.93363475652401
#define THQ0	  0.63191874015582e2
#define THQ1	  0.28077653470471e2
#define C1	  3.140625
#define C2	  9.67653589793e-4
d75 1
a75 17
#define C5	  1.5703125
#define C6	  4.83826794897e-4
#define L1	  2.885390072738
#define L3	  0.961800762286
#define L5	  0.576584342056
#define L7	  0.434259751292
#define R1	 -0.1666666660883
#define R2	  0.8333330720556e-2
#define R3	 -0.1984083282313e-3
#define R4	  0.2752397106775e-5
#define R5	 -0.2386834640601e-7
#define T1	  0.6931471019
#define T2	  0.2402279975
#define T3	  0.05549288453
#define T4	  0.009656843287
#define T5	  0.001266912225
#define T6	  0.0002082045327
d78 10
a87 2
#define _exp_arg_limit 709.78271289338397
#define _sqrt_half     0.70710678118654752440
d106 1
a106 1
  *lvn = d1.i.x;
d108 1
a108 1
  d1.i.x = 0;
d165 3
a167 5
  double	xn;
  double	f;
  double	g;
  int 		n;
  
a171 1

d175 2
a176 1
  n  = (int) ((y + HALFPI) * INVSPI);
d178 2
a179 4
  if (coscase)
    xn = (double) n - 0.5;
  else
    xn = (double) n;
d181 1
a181 2
  if (n & 1)
    sign = -sign;
d183 12
a194 1
  f = +(x - xn * 3.1416015625) + xn * 8.90891020676e-6;
a195 2
  if (fabs( f ) >= 1.e-10)
    {
d197 6
a202 2
 
      g = ((((R5 * g + R4) * g + R3) * g + R2) * g + R1) * g;
d204 4
a207 4
      f = f + f * g;
    }
  
  return (sign < 0) ? -f : f;
d237 2
a238 3
  double 	a;
  double	b;
  int 		n;
d241 1
a241 1
  if (x > MAXX)
a243 1

d247 7
a253 4
  if (x < 0.0)
    n = (int) (x * INVLOGe2 - 0.5);    /* since (int) -1.5 = -1.0 */
  else
    n = (int) (x * INVLOGe2 + 0.5);
d255 1
a255 1
  a  = (x - n * C3) - n * C4;
d257 1
a257 1
  b  = a * a;
d259 14
a272 2
  a = (EXP1 * b + EXP0) * a;
  b = (EXQ2 * b + EXQ1) * b + EXQ0;
d274 1
a274 1
  return ldexp( 0.5 + a / (b - a), n + 1 );
a422 2
/*  f = (x - xn * C5) - xn * C6; */

d493 3
a495 6
  double 	g, p, q, a;
  int		sign;
  int	  	t;
  

  sign = (x < 0.0);
a496 4
  if ((x = fabs( x )) > 1.0)
    {
      x = _invert( x );	
      t = 1;	                         /* negate partial result */
d498 1
a498 3
      if (x > TWO_SQRT3)
        {
          x = (x * SQRTTHREE - 1.0) / (SQRTTHREE + x); 
d500 1
a500 8
          a = 1.047197805;
        }
      else
        {
          a = 1.570796371;
        }
    }
  else if (x > TWO_SQRT3)
d502 2
a503 3
      x = (x * SQRTTHREE - 1.0) / (SQRTTHREE + x); 
      t = 0;
      a = 0.5235987905;
d506 7
d514 2
a515 2
      t = 0;
      a = 0.0;
d518 4
a521 1
  g = x * x;
d523 14
a536 2
  p = (ATP1 * g + ATP0) * g;
  q = (g + ATQ1) * g + ATQ0;
d538 2
a539 1
  g = (p / q) * x + x;
d541 4
a544 11
  if (sign)
    {
      if (t)
	{
	  return g - a;
	}
      else
	{
	  return -(a + g);
	}      
    }
d546 1
a546 10
    {
      if (t)
	{
	  return (a - g);
	}
      else
	{
	  return (g + a);
	}
    }
d635 2
a636 4
  double	x2;
  int		n;
  int		z;
  int 		sign = 0;
d638 38
d678 1
a678 1
    return (x);
d680 1
a680 1
  if (x == 0.0)
d682 16
a697 2
      if (y < 0.0)
	{
a698 1

d700 1
a700 1
	}
d702 1
a702 2
      if (y == 0.0)
	return 1.0;
d704 2
a705 1
      return 0.0;
d708 1
a708 4
  if (y == 0.0)
    return 1.0;

  if (y == 2.0 && x < 1.e18)
d711 2
a712 16
  if (x < 0.0)
    {
      z = (int) y;

      if ((y - z) != 0.0)
	{
	  errno = EDOM;
	  
	  return 0.0;
	}
      
      x = -x;
      
      if (z & 1 != 0)
	sign = 1;
    }
d714 3
a716 1
  x = 2.0 * frexp( x, &n );
d718 1
a718 1
  --n;
d720 12
a731 1
  x  = (x - SQRTWO) / (x + SQRTWO);
d733 7
a739 3
  x2 = x * x;
  
  x = ((((L7 * x2 + L5) * x2 + L3) * x2 + L1) * x + 0.5);
d741 1
a741 1
  x += n;
a742 4
  x *= y;
  n  = (int)x;
  
  if ((x -= n) < 0)
d744 75
a818 2
      x += 1.0;
      n -= 1;
a819 5
  
  x = ((((((T6 * x + T5) * x + T4) * x + T3)
	       * x + T2) * x + T1) * x + 1.0);
  
  x = ldexp( x, n );
d821 1
a821 1
  return (sign) ? -x : x;
d948 1
a948 1

d958 5
a962 8
  double 	a;
  double	b;
  double	g;
  double	z;
  double	p;
  double	q;
  double	r;
  int 		n;
d964 5
d970 6
a975 2
  if (x < 0.0)
    x = -x;
d977 1
a977 5
  if (x > MAXH)
    {
      errno = ERANGE;
      
      return (HUGE_VAL);
d980 1
a980 6
  if (x < 0)
    n = (int) (x * INVLOGe2 - 0.5);       /* since (int) -1.5 = -1.0 */
  else
    n = (int) (x * INVLOGe2 + 0.5);

  g  = (x - n * C3) - n * C4;
d982 1
a982 1
  z  = g * g;
d984 1
a984 10
  p = (EXP1 * z + EXP0) * g;
  q = (EXQ2 * z + EXQ1) * z + EXQ0;

  r  = 0.5 + p / (q - p);

  a = ldexp( r, n );

  b = _invert( a );

  return (a + b * 0.25);
d1020 7
a1026 2
  g = ((THP1 * g + THP0) * g) /
      ((g + THQ1) * g + THQ0);
d1028 3
@


1.4
log
@switch sqrt() back to old fashioned method
@
text
@d26 1
a26 1
 * RCS Id: $Id: math.c,v 1.3 1992/03/25 14:10:31 nickc Exp nickc $
d356 4
a359 3
  fp_number 	f;
  double	y0;
  int		n;
d373 3
a375 1
  f.d = x;
d377 3
a379 18
  /*
   * adjust double precision number to 0 <= f.d <= 1
   */
    
  n     = f.i.x + 1;
  f.i.x = -1;

    {
      double fd = f.d;

      
      y0 = 0.41731 + 0.59016 * fd;
      y0 = 0.5 * (y0 + fd / y0);
      y0 = 0.5 * (y0 + fd / y0);
      y0 = 0.5 * (y0 + fd / y0);
    }

  if (n & 1)
d381 1
a381 2
      y0 *= _sqrt_half;
      n  += 1;
d384 1
a384 5
  n /= 2;
  f.d = y0;
  f.i.x += n;

  return f.d;
d725 1
a725 1
  
@


1.3
log
@removed static arrays
@
text
@d26 1
a26 1
 * RCS Id: $Id: math.c,v 1.2 1992/03/17 18:16:22 nickc Exp nickc $
d33 2
a48 1
extern double 	_sqrt( double number );
d114 1
d356 5
a365 1
	  
d368 12
d381 14
a394 1
      return 0.0;
d397 5
a401 1
  return _sqrt( x );
d607 1
a607 1
      y = -2.0 * _sqrt( g );
d646 1
a646 1
      y = -2.0 * _sqrt( g );
@


1.2
log
@fixed bugs and run through simulator - should be kosher
@
text
@d26 1
a26 1
 * RCS Id: $Id$
a49 5
#ifdef REAL
#define _sqrt sqrt
#define _invert( a )	(1.0 / a)
#endif

d114 68
d427 2
a428 6
        xnum = ((_tan_p3*g + _tan_p2)*g + _tan_p1)*g*f + f;
        xden = (((_tan_q4*g + _tan_q3)*g + _tan_q2)*g + _tan_q1)*g + _tan_q0;
/*
      xnum = (TAP2 * g + TAP1) * g * f + f;
      xden = (TAQ2 * g + TAQ1) * g + 1.0;
      */
d483 1
a483 3
  static double a[ 4 ] = {0.0, 0.5235987905, 1.570796371, 1.047197805};
  double 	g, p, q, r;
  int    	n;
d492 1
a492 2
      x = 1.0 / x;	
      n = 2;	
d494 11
d506 1
a506 1
  else
d508 1
d510 1
a510 1
      n = 0;
d512 1
a512 2

  if (x > TWO_SQRT3)
d514 2
a515 3
      x = (x * SQRTTHREE - 1.0) / (SQRTTHREE + x); 

      ++n;
d529 1
a529 1
	  r = g - a[ n ];
d533 1
a533 1
	  r = -(a[ n ] + g);
d540 1
a540 1
	  r = a[ n ] - g;
d544 1
a544 1
	  r = g + a[ n ];
a547 2
  return r;
  
d591 2
a592 2
  static double b[ 2 ] = { 1.57079632679489661923, 0.78539816339744830962 };
  static double c[ 2 ] = { 0.0, 0.78539816339744830962 };
a596 1
  int 		i;
d608 2
a609 1
      i = 0;
d616 2
a617 1
      i = 1;
d623 2
a624 2
  return (x < 0) ? ((b[ i ] + y + y * p / q) + b[ i ])
		 : ((c[ i ] - y - y * p / q) + c[ i ]);
@


1.1
log
@first attempt at C40 version of maths library
@
text
@d25 2
a45 1
extern double	_invert( double number );
d48 1
d50 4
d117 1
d119 1
d127 3
a129 1
  double	xn, f, g, rg;
d150 1
a150 1
  f = (x - xn * C1) - xn * C2;
d152 5
a156 1
  g = f * f;
d158 4
a161 1
  rg = ((((R5 * g + R4) * g + R3) * g + R2) * g + R1) * g;
a162 4
  return sign ?
    -(f + f * rg) :    
     (f + f * rg) ;

a222 1
  double	x2;
d224 7
d233 1
a233 1
  if (x <= 0)
d235 1
a235 1
      errno = (x == 0) ? ERANGE : EDOM;
d240 1
a240 1
  x = 2.0 * frexp( x, &n );
d242 10
a251 1
  --n;
d253 3
a255 1
  x = (x - SQRTWO) / (x + SQRTWO);
d257 1
a257 1
  x2 = x * x;
d259 1
a259 1
  x  = ((((L7 * x2 + L5) * x2 + L3) * x2 + L1) * x + 0.5);
d261 6
a266 1
  return ((x + n) * LOGe2);
d268 9
d348 1
a348 1
  f = (x - xn * C5) - xn * C6;
d350 1
a350 1
  g = f * f;
d352 3
a354 2
  xnum = (TAP2 * g + TAP1) * g * f + f;
  xden = (TAQ2 * g + TAQ1) * g + 0.5 + 0.5;
d356 21
d379 1
a379 1
      if (n & 1 == 0)
d382 1
a382 1
	return - xnum / xden;	
d386 1
a386 1
      if (n & 1 == 0)
d389 1
a389 1
	return - xden / xnum ;	
a489 1
  static double c[ 2 ] = { 0.0, 0.78539816339744830962 };
d494 1
a494 1
  int 		i;
d506 1
a506 1
      i = 1;	
d512 1
a512 1
      i = 0;
d519 2
a520 2
  return (x < 0) ? (-((c[ i ] + y + y * p / q) + c[ i ]))
                   : ((c[ i ] + y + y * p / q) + c[ i ]);
d581 1
a581 1
      if (y <= 0.0)
d587 3
d653 1
a653 1
  if (x == 0.0 && y == 0.0)
d699 2
a700 1
  int		sign;
d704 4
a707 1
    x = -x, sign = 1;
d709 4
a712 1
    sign = 0;
d714 1
a714 1
  if (x <= 1.0)
d716 7
a722 3
      double	x2;
      double	p;
      double	q;
d724 1
d726 3
a728 1
      x2 = x * x;
d730 5
a734 2
      p = (SHP2 * x2 + SHP1) * x2 + SHP0;
      q = (x2 + SHQ1) * x2 + SHQ0;
d736 1
a736 2
      return sign ? ((x * x2 * (p / q)) - x) : (x + (x * x2 * (p / q)));
    }
d738 2
a739 3
  if (x > MAXH)
    {
      errno = ERANGE;
d741 6
a746 1
      return (sign ? -HUGE_VAL : HUGE_VAL);
d748 1
a748 1

d750 12
a761 4
      double	a;
      double	b;
      int    	n;
      
d763 2
a764 4
      if (x < 0)
	n = (int) (x * INVLOGe2 - 0.5);   /* since (int) -1.5 = -1.0 */
      else
	n = (int) (x * INVLOGe2 + 0.5);
d766 1
a766 1
      a = (x - n * C3) - n * C4;
d768 2
a769 1
      b = a * a;
d771 1
a771 8
      a = (EXP1 * b + EXP0) * a;
      b = (EXQ2 * b + EXQ1) * b + EXQ0;

      a = ldexp( 0.5 + a / (b - a), n );

      b = _invert( a ) * 0.25;

      return sign ? (b - a) : (a - b);
a825 1
  double	f = x;
a826 3
  double	p;
  double	q;
  double	r;
a828 1

a829 5
  if (x > 27.0)
    return 1.0;         /* here exp(2x) dominates 1.0        */
  else if (x < -27.0)
    return -1.0;
  
d831 6
a836 1
    x = -x, sign = 1;
d838 6
a843 1
    sign = 0;
d846 5
a850 3
    return sign ?
       (2.0 / (exp( 2.0 * f ) + 1.0)) - 1.0 :
       (1.0 - 2.0 / (exp( 2.0 * f ) + 1.0)) ;
d852 1
a852 1
  g = f * f;
d854 2
a855 2
  p = (THP1 * g + THP0) * g;
  q = (g + THQ1) * g + THQ0;
d857 1
a857 3
  r = p / q;

  return sign ? -(f + f * r) : (f + f * r);
d859 2
d888 1
a888 1
  r = modf( x / y, &q );
@
