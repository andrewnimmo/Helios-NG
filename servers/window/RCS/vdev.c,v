head	1.5;
access;
symbols;
locks; strict;
comment	@ * @;


1.5
date	93.10.07.14.05.51;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	93.08.06.14.32.39;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	91.03.20.15.41.42;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	90.11.07.02.10.42;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	90.09.25.18.42.35;	author paul;	state Exp;
branches;
next	;


desc
@@


1.5
log
@fixed stack size for cursor_flash to work with new mutex system
@
text
@/*
 * File:	vdev.c
 * Subsystem:	Helios Native Window Server
 * Author:	P.A.Beskeen / Jamie Smith
 * Date:	March '93, based on previous code developed for ABC machine.
 *
 * Description: Provides low-level support for the native window server.
 *
 *		This version is specific to the Helios-ARM 1.3 Archimedes
 *		implementation.
 *
 *		@@@@@@ This code should be transfered to a device driver so that
 *		different display formats and addresses can be supported
 *		without a change to the basic code.
 *
 *		@@@@@@ Need a better separation between the hardware specific
 *		functions and info and the generic code for memory mapped type
 *		displays. This would serve as a better level for a device
 *		driver interface.
 *
 *
 * RcsId: $Id: vdev.c,v 1.4 1993/08/06 14:32:39 paul Exp nickc $
 *
 * (C) Copyright 1993 Perihelion Software Ltd.
 * 
 * RcsLog: $Log: vdev.c,v $
 * Revision 1.4  1993/08/06  14:32:39  paul
 * latest version as ported to archi
 *
 *
 */

/*---------------------------------------------------------------------------
 *
 *	Exported Functions:
 *
 *	void vdev_init(void);
 *	void vdev_info(short *rows, short *cols);
 *	void vdev_clear_screen(void);
 *	void vdev_putstr(char *text);
 *	void vdev_moveto(int row,int col);
 *	void vdev_beep(void);
 *	void vdev_backspace(void);
 *	void vdev_carriage_return(void);
 *	void vdev_linefeed(void);
 *	void vdev_set_foreground(int colour);		optional
 *	void vdev_set_background(int colour);		optional
 *	void vdev_set_inverse(bool flag);
 *	void vdev_set_bold(bool flag);			optional
 *	void vdev_set_underline(bool flag);		optional
 *	void vdev_set_italic(bool flag);		optional
 *
 *	The "optional" functions should still exist, but perform no actions.
 *
 */

#include <stdio.h>
#include <helios.h>
#include <process.h>
#include <sem.h>
#include <syslib.h>
#include <nonansi.h>

/*---------------------------------------------------------------------------*/

#define UNUSED(x)	((x) = (x))


/*---------------------------------------------------------------------------*/
/* Define cursor flash rate (note: the cursor has a 1:1 mark space ratio) */

#define flashrate	(400000)	/* time in micro-seconds */


#ifndef DRIVER
/*---------------------------------------------------------------------------*/
/* Character Sets */

/* The character arrays and character blitting code could be moved to the
 * assembler section. This gives an immediate gain in that the glyph arrays
 * will not be duplicated in the code and static data areas (plus minor
 * blitting speed gains).
 */
/* At the moment the character glyphs are optimised for the normal screen
 * mode. However, the Active Book is most likely to be used in reverse
 * landscape. We should reverse the bits in the glyph to optimise that
 * display orientation.
 */

typedef struct {
	unsigned char carray[8];
} cdef;	/* character definition */

cdef normalchars[] = {
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, /* ' ' */
	{0x18,0x18,0x18,0x18,0x18,0x00,0x18,0x00}, /* '!' */
	{0x36,0x36,0x36,0x00,0x00,0x00,0x00,0x00}, /* '"' */
	{0x6C,0x6C,0xFE,0x6C,0xFE,0x6C,0x6C,0x00}, /* '#' */
	{0x30,0xFC,0x16,0x7C,0xD0,0x7E,0x18,0x00}, /* '$' */
	{0x06,0x66,0x30,0x18,0x0C,0x66,0x60,0x00}, /* '%' */
	{0x1C,0x36,0x36,0x1C,0xB6,0x66,0xDC,0x00}, /* '&' */
	{0x18,0x18,0x18,0x00,0x00,0x00,0x00,0x00}, /* ''' */
	{0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30,0x00}, /* '(' */
	{0x0C,0x18,0x30,0x30,0x30,0x18,0x0C,0x00}, /* ')' */
	{0x00,0x18,0x7E,0x3C,0x7E,0x18,0x00,0x00}, /* '*' */
	{0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00}, /* '+' */
	{0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x0C}, /* ',' */
	{0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00}, /* '-' */
	{0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00}, /* '.' */
	{0x00,0x60,0x30,0x18,0x0C,0x06,0x00,0x00}, /* '/' */
	{0x3C,0x66,0x76,0x7E,0x6E,0x66,0x3C,0x00}, /* '0' */
	{0x18,0x1C,0x18,0x18,0x18,0x18,0x7E,0x00}, /* '1' */
	{0x3C,0x66,0x60,0x30,0x18,0x0C,0x7E,0x00}, /* '2' */
	{0x3C,0x66,0x60,0x38,0x60,0x66,0x3C,0x00}, /* '3' */
	{0x30,0x38,0x3C,0x36,0x7E,0x30,0x30,0x00}, /* '4' */
	{0x7E,0x06,0x3E,0x60,0x60,0x66,0x3C,0x00}, /* '5' */
	{0x38,0x0C,0x06,0x3E,0x66,0x66,0x3C,0x00}, /* '6' */
	{0x7E,0x60,0x30,0x18,0x0C,0x0C,0x0C,0x00}, /* '7' */
	{0x3C,0x66,0x66,0x3C,0x66,0x66,0x3C,0x00}, /* '8' */
	{0x3C,0x66,0x66,0x7C,0x60,0x30,0x1C,0x00}, /* '9' */
	{0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x00}, /* ':' */
	{0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x0C}, /* ';' */
	{0x30,0x18,0x0C,0x06,0x0C,0x18,0x30,0x00}, /* '<' */
	{0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00}, /* '=' */
	{0x0C,0x18,0x30,0x60,0x30,0x18,0x0C,0x00}, /* '>' */
	{0x3C,0x66,0x30,0x18,0x18,0x00,0x18,0x00}, /* '?' */
	{0x3C,0x66,0x76,0x56,0x76,0x06,0x3C,0x00}, /* '@@' */
	{0x3C,0x66,0x66,0x7E,0x66,0x66,0x66,0x00}, /* 'A' */
	{0x3E,0x66,0x66,0x3E,0x66,0x66,0x3E,0x00}, /* 'B' */
	{0x3C,0x66,0x06,0x06,0x06,0x66,0x3C,0x00}, /* 'C' */
	{0x1E,0x36,0x66,0x66,0x66,0x36,0x1E,0x00}, /* 'D' */
	{0x7E,0x06,0x06,0x3E,0x06,0x06,0x7E,0x00}, /* 'E' */
	{0x7E,0x06,0x06,0x3E,0x06,0x06,0x06,0x00}, /* 'F' */
	{0x3C,0x66,0x06,0x76,0x66,0x66,0x3C,0x00}, /* 'G' */
	{0x66,0x66,0x66,0x7E,0x66,0x66,0x66,0x00}, /* 'H' */
	{0x7E,0x18,0x18,0x18,0x18,0x18,0x7E,0x00}, /* 'I' */
	{0x7C,0x30,0x30,0x30,0x30,0x36,0x1C,0x00}, /* 'J' */
	{0x66,0x36,0x1E,0x0E,0x1E,0x36,0x66,0x00}, /* 'K' */
	{0x06,0x06,0x06,0x06,0x06,0x06,0x7E,0x00}, /* 'L' */
	{0xC6,0xEE,0xFE,0xD6,0xD6,0xC6,0xC6,0x00}, /* 'M' */
	{0x66,0x66,0x6E,0x7E,0x76,0x66,0x66,0x00}, /* 'N' */
	{0x3C,0x66,0x66,0x66,0x66,0x66,0x3C,0x00}, /* 'O' */
	{0x3E,0x66,0x66,0x3E,0x06,0x06,0x06,0x00}, /* 'P' */
	{0x3C,0x66,0x66,0x66,0x56,0x36,0x6C,0x00}, /* 'Q' */
	{0x3E,0x66,0x66,0x3E,0x36,0x66,0x66,0x00}, /* 'R' */
	{0x3C,0x66,0x06,0x3C,0x60,0x66,0x3C,0x00}, /* 'S' */
	{0x7E,0x18,0x18,0x18,0x18,0x18,0x18,0x00}, /* 'T' */
	{0x66,0x66,0x66,0x66,0x66,0x66,0x3C,0x00}, /* 'U' */
	{0x66,0x66,0x66,0x66,0x66,0x3C,0x18,0x00}, /* 'V' */
	{0xC6,0xC6,0xD6,0xD6,0xFE,0xEE,0xC6,0x00}, /* 'W' */
	{0x66,0x66,0x3C,0x18,0x3C,0x66,0x66,0x00}, /* 'X' */
	{0x66,0x66,0x66,0x3C,0x18,0x18,0x18,0x00}, /* 'Y' */
	{0x7E,0x60,0x30,0x18,0x0C,0x06,0x7E,0x00}, /* 'Z' */
	{0x3E,0x06,0x06,0x06,0x06,0x06,0x3E,0x00}, /* '[' */
	{0x00,0x06,0x0C,0x18,0x30,0x60,0x00,0x00}, /* '\' */
	{0x7C,0x60,0x60,0x60,0x60,0x60,0x7C,0x00}, /* ']' */
	{0x3C,0x66,0x00,0x00,0x00,0x00,0x00,0x00}, /* '^' */
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF}, /* '_' */
	{0x0C,0x18,0x00,0x00,0x00,0x00,0x00,0x00}, /* '`' */
	{0x00,0x00,0x3C,0x60,0x7C,0x66,0x7C,0x00}, /* 'a' */
	{0x06,0x06,0x3E,0x66,0x66,0x66,0x3E,0x00}, /* 'b' */
	{0x00,0x00,0x3C,0x66,0x06,0x66,0x3C,0x00}, /* 'c' */
	{0x60,0x60,0x7C,0x66,0x66,0x66,0x7C,0x00}, /* 'd' */
	{0x00,0x00,0x3C,0x66,0x7E,0x06,0x3C,0x00}, /* 'e' */
	{0x38,0x0C,0x0C,0x3E,0x0C,0x0C,0x0C,0x00}, /* 'f' */
	{0x00,0x00,0x7C,0x66,0x66,0x7C,0x60,0x3C}, /* 'g' */
	{0x06,0x06,0x3E,0x66,0x66,0x66,0x66,0x00}, /* 'h' */
	{0x18,0x00,0x1C,0x18,0x18,0x18,0x3C,0x00}, /* 'i' */
	{0x18,0x00,0x1C,0x18,0x18,0x18,0x18,0x0E}, /* 'j' */
	{0x06,0x06,0x66,0x36,0x1E,0x36,0x66,0x00}, /* 'k' */
	{0x1C,0x18,0x18,0x18,0x18,0x18,0x3C,0x00}, /* 'l' */
	{0x00,0x00,0x6C,0xFE,0xD6,0xD6,0xC6,0x00}, /* 'm' */
	{0x00,0x00,0x3E,0x66,0x66,0x66,0x66,0x00}, /* 'n' */
	{0x00,0x00,0x3C,0x66,0x66,0x66,0x3C,0x00}, /* 'o' */
	{0x00,0x00,0x3E,0x66,0x66,0x3E,0x06,0x06}, /* 'p' */
	{0x00,0x00,0x7C,0x66,0x66,0x7C,0x60,0xE0}, /* 'q' */
	{0x00,0x00,0x36,0x6E,0x06,0x06,0x06,0x00}, /* 'r' */
	{0x00,0x00,0x7C,0x06,0x3C,0x60,0x3E,0x00}, /* 's' */
	{0x0C,0x0C,0x3E,0x0C,0x0C,0x0C,0x38,0x00}, /* 't' */
	{0x00,0x00,0x66,0x66,0x66,0x66,0x7C,0x00}, /* 'u' */
	{0x00,0x00,0x66,0x66,0x66,0x3C,0x18,0x00}, /* 'v' */
	{0x00,0x00,0xC6,0xD6,0xD6,0xFE,0x6C,0x00}, /* 'w' */
	{0x00,0x00,0x66,0x3C,0x18,0x3C,0x66,0x00}, /* 'x' */
	{0x00,0x00,0x66,0x66,0x66,0x7C,0x60,0x3C}, /* 'y' */
	{0x00,0x00,0x7E,0x30,0x18,0x0C,0x7E,0x00}, /* 'z' */
	{0x30,0x18,0x18,0x0E,0x18,0x18,0x30,0x00}, /* '{' */
	{0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00}, /* '|' */
	{0x0C,0x18,0x18,0x70,0x18,0x18,0x0C,0x00}, /* '}' */
	{0x8C,0xD6,0x62,0x00,0x00,0x00,0x00,0x00}, /* '~' */
};

cdef boldchars[] = {
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, /* 20 */
	{0x38,0x38,0x38,0x38,0x38,0x00,0x38,0x00}, /* 21 */
	{0x77,0x77,0x77,0x00,0x00,0x00,0x00,0x00}, /* 22 */
	{0x36,0x7F,0x7F,0x36,0x7F,0x7F,0x36,0x00}, /* 23 */
	{0x18,0x7E,0x1B,0x7E,0xD8,0x7E,0x18,0x00}, /* 24 */
	{0x67,0x77,0x38,0x1C,0x0E,0x77,0x73,0x00}, /* 25 */
	{0x3E,0x77,0x77,0x3E,0xDF,0x77,0xDE,0x00}, /* 26 */
	{0x70,0x70,0x38,0x00,0x00,0x00,0x00,0x00}, /* 27 */
	{0x70,0x38,0x1C,0x1C,0x1C,0x38,0x70,0x00}, /* 28 */
	{0x0E,0x1C,0x38,0x38,0x38,0x1C,0x0E,0x00}, /* 29 */
	{0x18,0x5A,0x7E,0x3C,0x7E,0x5A,0x18,0x00}, /* 2A */
	{0x00,0x1C,0x1C,0x7F,0x1C,0x1C,0x00,0x00}, /* 2B */
	{0x00,0x00,0x00,0x00,0x00,0x38,0x38,0x1C}, /* 2C */
	{0x00,0x00,0x00,0x7F,0x7F,0x00,0x00,0x00}, /* 2D */
	{0x00,0x00,0x00,0x00,0x00,0x38,0x38,0x00}, /* 2E */
	{0x00,0x70,0x38,0x1C,0x0E,0x07,0x00,0x00}, /* 2F */
	{0x3E,0x73,0x7B,0x7F,0x6F,0x67,0x3E,0x00}, /* 30 */
	{0x38,0x3E,0x38,0x38,0x38,0x38,0x7E,0x00}, /* 31 */
	{0x3E,0x73,0x70,0x38,0x1C,0x0E,0x7F,0x00}, /* 32 */
	{0x3E,0x73,0x70,0x3C,0x70,0x73,0x3E,0x00}, /* 33 */
	{0x38,0x3C,0x3E,0x3B,0x7F,0x38,0x38,0x00}, /* 34 */
	{0x7F,0x07,0x3F,0x70,0x70,0x73,0x3E,0x00}, /* 35 */
	{0x3C,0x0E,0x07,0x3F,0x67,0x67,0x3E,0x00}, /* 36 */
	{0x7F,0x70,0x38,0x1C,0x0E,0x0E,0x0E,0x00}, /* 37 */
	{0x3E,0x67,0x67,0x3E,0x67,0x67,0x3E,0x00}, /* 38 */
	{0x3E,0x73,0x73,0x7E,0x70,0x38,0x1E,0x00}, /* 39 */
	{0x00,0x00,0x38,0x38,0x00,0x38,0x38,0x00}, /* 3A */
	{0x00,0x00,0x38,0x38,0x00,0x38,0x38,0x1C}, /* 3B */
	{0x70,0x3C,0x0E,0x07,0x0E,0x3C,0x70,0x00}, /* 3C */
	{0x00,0x7F,0x7F,0x00,0x7F,0x7F,0x00,0x00}, /* 3D */
	{0x07,0x1E,0x38,0x70,0x38,0x1E,0x07,0x00}, /* 3E */
	{0x3E,0x77,0x77,0x38,0x1C,0x00,0x1C,0x00}, /* 3F */
	{0x3E,0x67,0x67,0x77,0x77,0x07,0x3E,0x00}, /* 40 */
	{0x3E,0x67,0x67,0x7F,0x67,0x67,0x67,0x00}, /* 41 */
	{0x3F,0x67,0x67,0x3F,0x67,0x67,0x3F,0x00}, /* 42 */
	{0x3E,0x67,0x07,0x07,0x07,0x67,0x3E,0x00}, /* 43 */
	{0x1F,0x37,0x67,0x67,0x67,0x37,0x1F,0x00}, /* 44 */
	{0x7F,0x07,0x07,0x3F,0x07,0x07,0x7F,0x00}, /* 45 */
	{0x7F,0x07,0x07,0x3F,0x07,0x07,0x07,0x00}, /* 46 */
	{0x3E,0x67,0x07,0x77,0x67,0x67,0x3E,0x00}, /* 47 */
	{0x67,0x67,0x67,0x7F,0x67,0x67,0x67,0x00}, /* 48 */
	{0x7F,0x1C,0x1C,0x1C,0x1C,0x1C,0x7F,0x00}, /* 49 */
	{0x7E,0x38,0x38,0x38,0x38,0x3B,0x1E,0x00}, /* 4A */
	{0x67,0x37,0x1F,0x0F,0x1F,0x37,0x67,0x00}, /* 4B */
	{0x07,0x07,0x07,0x07,0x07,0x07,0x7F,0x00}, /* 4C */
	{0x63,0x77,0x7F,0x6B,0x6B,0x63,0x63,0x00}, /* 4D */
	{0x63,0x67,0x6F,0x7F,0x7B,0x73,0x63,0x00}, /* 4E */
	{0x3E,0x67,0x67,0x67,0x67,0x67,0x3E,0x00}, /* 4F */
	{0x3F,0x67,0x67,0x3F,0x07,0x07,0x07,0x00}, /* 50 */
	{0x3E,0x67,0x67,0x67,0x57,0x37,0x6E,0x00}, /* 51 */
	{0x3F,0x67,0x67,0x3F,0x37,0x67,0x67,0x00}, /* 52 */
	{0x3E,0x67,0x07,0x3E,0x70,0x73,0x3E,0x00}, /* 53 */
	{0x7F,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x00}, /* 54 */
	{0x67,0x67,0x67,0x67,0x67,0x67,0x3E,0x00}, /* 55 */
	{0x63,0x63,0x77,0x36,0x3E,0x1C,0x1C,0x00}, /* 56 */
	{0x63,0x63,0x6B,0x7F,0x7F,0x77,0x63,0x00}, /* 57 */
	{0x63,0x77,0x3E,0x1C,0x3E,0x77,0x63,0x00}, /* 58 */
	{0x63,0x77,0x3E,0x1C,0x1C,0x1C,0x1C,0x00}, /* 59 */
	{0x7F,0x70,0x38,0x1C,0x0E,0x07,0x7F,0x00}, /* 5A */
	{0x3E,0x0E,0x0E,0x0E,0x0E,0x0E,0x3E,0x00}, /* 5B */
	{0x00,0x06,0x0E,0x1C,0x38,0x70,0x00,0x00}, /* 5C */
	{0x7C,0x70,0x70,0x70,0x70,0x70,0x7C,0x00}, /* 5D */
	{0x08,0x1C,0x3E,0x77,0x63,0x00,0x00,0x00}, /* 5E */
	{0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF}, /* 5F */
	{0x3C,0x6E,0x0E,0x3F,0x0E,0x0E,0x7F,0x00}, /* 60 */
	{0x00,0x00,0x3E,0x70,0x7E,0x73,0x7E,0x00}, /* 61 */
	{0x07,0x07,0x3F,0x67,0x67,0x67,0x3F,0x00}, /* 62 */
	{0x00,0x00,0x3E,0x67,0x07,0x67,0x3E,0x00}, /* 63 */
	{0x70,0x70,0x7E,0x73,0x73,0x73,0x7E,0x00}, /* 64 */
	{0x00,0x00,0x3E,0x67,0x7F,0x07,0x7E,0x00}, /* 65 */
	{0x7C,0x0E,0x0E,0x3F,0x0E,0x0E,0x0E,0x00}, /* 66 */
	{0x00,0x00,0x7E,0x73,0x73,0x7E,0x70,0x3E}, /* 67 */
	{0x07,0x07,0x3F,0x67,0x67,0x67,0x67,0x00}, /* 68 */
	{0x38,0x00,0x3E,0x38,0x38,0x38,0x7E,0x00}, /* 69 */
	{0x38,0x00,0x3C,0x38,0x38,0x38,0x38,0x1E}, /* 6A */
	{0x07,0x07,0x67,0x37,0x1F,0x37,0x67,0x00}, /* 6B */
	{0x1E,0x1C,0x1C,0x1C,0x1C,0x1C,0x7E,0x00}, /* 6C */
	{0x00,0x00,0x63,0x7F,0x7F,0x6B,0x63,0x00}, /* 6D */
	{0x00,0x00,0x3F,0x77,0x77,0x77,0x77,0x00}, /* 6E */
	{0x00,0x00,0x3E,0x77,0x77,0x77,0x3E,0x00}, /* 6F */
	{0x00,0x00,0x3F,0x77,0x77,0x3F,0x07,0x07}, /* 70 */
	{0x00,0x00,0x7E,0x77,0x77,0x7E,0x70,0x70}, /* 71 */
	{0x00,0x00,0x3F,0x6F,0x07,0x07,0x07,0x00}, /* 72 */
	{0x00,0x00,0x7E,0x0F,0x3E,0x78,0x3F,0x00}, /* 73 */
	{0x0E,0x0E,0x3F,0x0E,0x0E,0x0E,0x7C,0x00}, /* 74 */
	{0x00,0x00,0x77,0x77,0x77,0x77,0x7E,0x00}, /* 75 */
	{0x00,0x00,0x77,0x77,0x77,0x3E,0x1C,0x00}, /* 76 */
	{0x00,0x00,0x63,0x6B,0x7F,0x7F,0x63,0x00}, /* 77 */
	{0x00,0x00,0x67,0x3E,0x1C,0x3E,0x73,0x00}, /* 78 */
	{0x00,0x00,0x77,0x77,0x77,0x7E,0x70,0x3E}, /* 79 */
	{0x00,0x00,0x7F,0x38,0x1C,0x0E,0x7F,0x00}, /* 7A */
	{0x38,0x1C,0x1C,0x0F,0x1C,0x1C,0x38,0x00}, /* 7B */
	{0x38,0x38,0x38,0x00,0x38,0x38,0x38,0x00}, /* 7C */
	{0x0E,0x1C,0x1C,0x78,0x1C,0x1C,0x0E,0x00}, /* 7D */
	{0x9C,0xFE,0x72,0x00,0x00,0x00,0x00,0x00}, /* 7E */
};

cdef italicchars[] = {
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, /* 20 */
	{0x60,0x60,0x30,0x30,0x18,0x00,0x0C,0x00}, /* 21 */
	{0x6C,0x6C,0x36,0x00,0x00,0x00,0x00,0x00}, /* 22 */
	{0xD8,0xD8,0xFE,0x6C,0xFE,0x1B,0x1B,0x00}, /* 23 */
	{0x60,0xFC,0x16,0x7C,0xD0,0x7F,0x0C,0x00}, /* 24 */
	{0x0C,0xCC,0x30,0x18,0x0C,0x33,0x30,0x00}, /* 25 */
	{0x38,0x6C,0x36,0x1C,0xB6,0x33,0x6E,0x00}, /* 26 */
	{0x60,0x30,0x0C,0x00,0x00,0x00,0x00,0x00}, /* 27 */
	{0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30,0x00}, /* 28 */
	{0x0C,0x18,0x30,0x30,0x30,0x18,0x0C,0x00}, /* 29 */
	{0x00,0x30,0x7E,0x3C,0x7E,0x0C,0x00,0x00}, /* 2A */
	{0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00}, /* 2B */
	{0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x0C}, /* 2C */
	{0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00}, /* 2D */
	{0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00}, /* 2E */
	{0x00,0xC0,0x30,0x18,0x0C,0x03,0x00,0x00}, /* 2F */
	{0x78,0xCC,0x76,0x7E,0x6E,0x33,0x1E,0x00}, /* 30 */
	{0x70,0x38,0x30,0x18,0x18,0x0C,0x1F,0x00}, /* 31 */
	{0x78,0xCC,0x60,0x30,0x18,0x0C,0x3F,0x00}, /* 32 */
	{0x78,0xCC,0x60,0x38,0x60,0x33,0x1E,0x00}, /* 33 */
	{0x60,0x70,0x3C,0x36,0x7E,0x18,0x18,0x00}, /* 34 */
	{0xFC,0x0C,0x3E,0x60,0x60,0x33,0x1E,0x00}, /* 35 */
	{0x70,0x18,0x06,0x3E,0x66,0x33,0x1E,0x00}, /* 36 */
	{0xFC,0x60,0x30,0x18,0x0C,0x06,0x06,0x00}, /* 37 */
	{0x78,0xCC,0x66,0x3C,0x66,0x33,0x1E,0x00}, /* 38 */
	{0x78,0xCC,0x66,0x7C,0x60,0x18,0x0E,0x00}, /* 39 */
	{0x00,0x00,0x18,0x18,0x00,0x0C,0x0C,0x00}, /* 3A */
	{0x00,0x00,0x18,0x18,0x00,0x0C,0x0C,0x03}, /* 3B */
	{0x60,0x30,0x18,0x06,0x0C,0x0C,0x18,0x00}, /* 3C */
	{0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00}, /* 3D */
	{0x18,0x30,0x60,0x60,0x18,0x0C,0x06,0x00}, /* 3E */
	{0x78,0xCC,0x30,0x18,0x18,0x00,0x0C,0x00}, /* 3F */
	{0x78,0xCC,0x76,0x56,0x76,0x03,0x1E,0x00}, /* 40 */
	{0x78,0xCC,0x66,0x7E,0x66,0x33,0x33,0x00}, /* 41 */
	{0x7C,0xCC,0x66,0x3E,0x66,0x33,0x1F,0x00}, /* 42 */
	{0x78,0xCC,0x06,0x06,0x06,0x66,0x1E,0x00}, /* 43 */
	{0x3C,0x6C,0x66,0x66,0x66,0x1B,0x0F,0x00}, /* 44 */
	{0xFC,0x0C,0x06,0x3E,0x06,0x03,0x3F,0x00}, /* 45 */
	{0xFC,0x0C,0x06,0x3E,0x06,0x03,0x03,0x00}, /* 46 */
	{0x78,0xCC,0x06,0x76,0x66,0x33,0x1E,0x00}, /* 47 */
	{0xCC,0xCC,0x66,0x7E,0x66,0x33,0x33,0x00}, /* 48 */
	{0xFC,0x30,0x18,0x18,0x18,0x0C,0x3F,0x00}, /* 49 */
	{0xF8,0x60,0x30,0x30,0x30,0x1B,0x0E,0x00}, /* 4A */
	{0xCC,0x6C,0x1E,0x0E,0x1E,0x1B,0x33,0x00}, /* 4B */
	{0x0C,0x0C,0x06,0x06,0x06,0x03,0x3F,0x00}, /* 4C */
	{0xCC,0xDC,0xFE,0xD6,0xD6,0x63,0x63,0x00}, /* 4D */
	{0xCC,0xCC,0x6E,0x7E,0x76,0x33,0x33,0x00}, /* 4E */
	{0x78,0xCC,0x66,0x66,0x66,0x33,0x1E,0x00}, /* 4F */
	{0x7C,0xCC,0x66,0x3E,0x06,0x03,0x03,0x00}, /* 50 */
	{0x78,0xCC,0x66,0x66,0x56,0x1B,0x36,0x00}, /* 51 */
	{0x7C,0xCC,0x66,0x3E,0x36,0x33,0x33,0x00}, /* 52 */
	{0x78,0xCC,0x06,0x3C,0x60,0x33,0x1E,0x00}, /* 53 */
	{0xFC,0x30,0x18,0x18,0x18,0x0C,0x0C,0x00}, /* 54 */
	{0xCC,0xCC,0x66,0x66,0x66,0x33,0x1E,0x00}, /* 55 */
	{0xCC,0xCC,0x66,0x66,0x66,0x1E,0x0C,0x00}, /* 56 */
	{0xCC,0xCC,0xD6,0xD6,0xFE,0x77,0x63,0x00}, /* 57 */
	{0xCC,0xCC,0x3C,0x18,0x3C,0x33,0x33,0x00}, /* 58 */
	{0xCC,0xCC,0x66,0x3C,0x18,0x0C,0x0C,0x00}, /* 59 */
	{0xFC,0xC0,0x30,0x18,0x0C,0x03,0x3F,0x00}, /* 5A */
	{0x7C,0x0C,0x06,0x06,0x06,0x03,0x1F,0x00}, /* 5B */
	{0x00,0x0C,0x0C,0x18,0x30,0x30,0x00,0x00}, /* 5C */
	{0xF8,0xC0,0x60,0x60,0x60,0x30,0x3E,0x00}, /* 5D */
	{0x30,0x78,0x66,0x42,0x00,0x00,0x00,0x00}, /* 5E */
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF}, /* 5F */
	{0x70,0xD8,0x0C,0x3E,0x0C,0x06,0x3F,0x00}, /* 60 */
	{0x00,0x00,0x78,0x60,0x7C,0x33,0x3E,0x00}, /* 61 */
	{0x18,0x0C,0x7C,0x66,0x66,0x33,0x1F,0x00}, /* 62 */
	{0x00,0x00,0x78,0x66,0x06,0x33,0x1E,0x00}, /* 63 */
	{0xC0,0xC0,0xF8,0x66,0x66,0x33,0x3E,0x00}, /* 64 */
	{0x00,0x00,0x78,0x66,0x7E,0x03,0x1E,0x00}, /* 65 */
	{0xE0,0x18,0x18,0x3E,0x0C,0x06,0x06,0x00}, /* 66 */
	{0x00,0x00,0xF8,0x66,0x66,0x3E,0x30,0x1E}, /* 67 */
	{0x18,0x0C,0x7C,0x66,0x66,0x33,0x33,0x00}, /* 68 */
	{0x60,0x00,0x38,0x18,0x18,0x0C,0x1E,0x00}, /* 69 */
	{0x30,0x00,0x38,0x18,0x18,0x0C,0x0C,0x03}, /* 6A */
	{0x18,0x0C,0xCC,0x36,0x1E,0x1B,0x33,0x00}, /* 6B */
	{0x70,0x30,0x30,0x18,0x18,0x0C,0x1E,0x00}, /* 6C */
	{0x00,0x00,0xD8,0xFE,0xD6,0x6B,0x63,0x00}, /* 6D */
	{0x00,0x00,0x7C,0x66,0x66,0x33,0x33,0x00}, /* 6E */
	{0x00,0x00,0x78,0x66,0x66,0x33,0x1E,0x00}, /* 6F */
	{0x00,0x00,0x7C,0x66,0x66,0x1F,0x03,0x03}, /* 70 */
	{0x00,0x00,0xF8,0x66,0x66,0x3E,0x30,0x38}, /* 71 */
	{0x00,0x00,0x6C,0x6E,0x06,0x03,0x03,0x00}, /* 72 */
	{0x00,0x00,0xF8,0x06,0x3C,0x30,0x1F,0x00}, /* 73 */
	{0x30,0x18,0x7C,0x0C,0x0C,0x06,0x1C,0x00}, /* 74 */
	{0x00,0x00,0xCC,0x66,0x66,0x33,0x3E,0x00}, /* 75 */
	{0x00,0x00,0xCC,0x66,0x66,0x1E,0x0C,0x00}, /* 76 */
	{0x00,0x00,0xCC,0xD6,0xD6,0x7F,0x36,0x00}, /* 77 */
	{0x00,0x00,0xCC,0x3C,0x18,0x1E,0x33,0x00}, /* 78 */
	{0x00,0x00,0xCC,0x66,0x66,0x3E,0x30,0x0F}, /* 79 */
	{0x00,0x00,0xFC,0x30,0x18,0x06,0x3F,0x00}, /* 7A */
	{0x30,0x18,0x18,0x0E,0x18,0x18,0x30,0x00}, /* 7B */
	{0x60,0x30,0x18,0x00,0x18,0x0C,0x06,0x00}, /* 7C */
	{0x0C,0x18,0x18,0x70,0x18,0x18,0x0C,0x00}, /* 7D */
	{0x8C,0xD6,0x62,0x00,0x00,0x00,0x00,0x00}, /* 7E */
};

typedef enum {normalset,boldset,italicset,bolditalicset} charsets;

/* character set mappings */
cdef *glyphs[] = {
	normalchars,	/* normal */
	boldchars,	/* bold */
	italicchars,	/* italic */
	normalchars,	/* bold italic */
	NULL
};

/* Primitive routines. These functions should really be provided by a */
/* device driver interface. */

static void cursor_blit(void);			/* XOR Cursor */
static void display_scroll(void);		/* Scroll one line up */
static void display_clear(void);		/* Clear entire screen */
						/* display char on screen */
static void blit_char(unsigned char *dptr, unsigned char cchr);

/* Return information defining screen position and size */
static int DisplayInfo(unsigned char **screenbase, int *stride,
			int *cols, int *rows);
#endif

/*---------------------------------------------------------------------------*/

typedef enum shape {
	landscape,		/*   0 degrees */
	landscape_reverse,	/* 180 degrees */
	portrait_left,		/* 270 degrees */
	portrait_right		/*  90 degrees */
} shape;

typedef enum attr {
	normal	= 0,		/* default state */
	bold	= 1,		/* enbolden text */
	italic	= 2,		/* italicise text */
	underline = 4,		/* underline text */
	inverse	= 8		/* invert text */
} attr;


/* static variables */

static unsigned char *	screenbase;	/* Base address of the screen memory */
static int	stride;			/* Offset in bytes to next screen row */
static int	cols = 0;		/* Number of screen X positions */
static int	rows = 0;		/* Number of screen Y positions */
static int	attributes = 0;		/* Current display attributes */
static int	CursorX = 0;		/* Cursors X position */
static int	CursorY = 0;		/* Cursors Y position */
static int	CursorEOL = FALSE;	/* True if cursor at end of line. */
					/* notes pending CR/LF state */
static int	CursorShows = FALSE;	/* True if then cursor is displayed */
static int	CursorFlashing = TRUE;	/* True if then cursor is flashing */
static Semaphore curgrip;		/* Controls Access to the cursor */


/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/* The following two functions are identical, but are seperated for clarity
 * and in-case we need to change the system in the future.
 */
static void cursor_on(void)
{
	/* If the cursor is currently displayed then place it onto the */
	/* screen. This function assumes that we hold the cursor semaphore. */

	if (CursorShows == TRUE)
		cursor_blit();

	return;
}

/*---------------------------------------------------------------------------*/

static void cursor_off(void)
{
	/* If the cursor is currently displayed, then remove it from the */
	/* screen. This function assumes that we hold the cursor semaphore. */
	if (CursorShows == TRUE)
		cursor_blit();
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

static void cursor_flash(void)
{
	/* This function should just sit and flash the cursor */

	for (;;) {
		Wait(&curgrip);	/* claim the cursor semaphore */

		if (CursorFlashing) {
			/* EOR the "block" cursor onto the screen */
			CursorShows = TRUE;	/* cursor is on the screen */
			cursor_on();		/* and display the cursor */
		}

		Signal(&curgrip);	/* release the cursor semaphore */

		/* wait for the specified amount of time */
		Delay(flashrate);

		Wait(&curgrip);	/* claim the cursor semaphore */

		if (CursorFlashing) {
			/* EOR the "block" cursor off the screen */
			cursor_off();		/* remove the cursor */
			CursorShows = FALSE;	/* cursor is off the screen */
		}

		Signal(&curgrip);	/* release the cursor semaphore */

		/* wait for the specified amount of time */
		Delay(flashrate);
	}
}

/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/

/* Returns the screen size in character blocks
 */

void vdev_info(short *r, short *c) {
	*r = rows;
	*c = cols;
}

/*---------------------------------------------------------------------------*/

void vdev_clear_screen(void) {
	Wait(&curgrip);
	cursor_off();

	display_clear();

	CursorEOL = CursorX = CursorY = 0;

	cursor_on();
	Signal(&curgrip);
}

/*---------------------------------------------------------------------------*/

/* Position the cursor at the specified position on the display
 */

void vdev_moveto(int row,int col) {
	Wait(&curgrip);			/* grab the cursor */
	cursor_off();

	CursorEOL = FALSE;

	/* update the cursor position */
	CursorX = col;
	CursorY = row;

	cursor_on();
	Signal(&curgrip);		/* and the release the cursor lock */
}

/*---------------------------------------------------------------------------*/

/* Notify the user via a audio or visual signal
 */

void vdev_beep(void) {
	IOputc(7);	/* Get the IO server to generate a BEEP */
}

/*---------------------------------------------------------------------------*/

/* Move the cursor one character cell left in a non-destructive manner. If
 * the cursor is at the left hand edge of the screen the function should
 * not be called. If we are in a CursorEOL state, we should simply cancel it,
 * without moving the cursor.
 */

void vdev_backspace(void) {
	Wait(&curgrip);
	cursor_off();

	if (!CursorEOL) {
		if (CursorX > 0)
			CursorX--;
	} else {
		CursorEOL = FALSE;
	}

	cursor_on();
	Signal(&curgrip);
}

/*---------------------------------------------------------------------------*/

/* Move the cursor to the first column of the current row. It does not
 * erase the contents of the current row.
 */
void vdev_carriage_return(void)
{

	Wait(&curgrip);
	cursor_off();

	CursorEOL = FALSE;
	CursorX = 0;

	cursor_on();
	Signal(&curgrip);
}

/*---------------------------------------------------------------------------*/

/* Move the cursor down a row. If the cursor is on the bottom row of the
 * screen, the display should scroll. The cursor will retain its current
 * column position.
 * We must preserve any "pending" newline state.
 */

void vdev_linefeed(void)
{
	Wait(&curgrip);
	cursor_off();

	if (CursorY == (rows - 1))
		/* scroll the display (leaving the cursor in the same place) */
		display_scroll();
	else
		/* move the cursor down a row */
		CursorY++;

	cursor_on();
	Signal(&curgrip);
}

/*---------------------------------------------------------------------------*/


/* Prints the null terminated ASCII string at the current cursor position.
 * If the text wraps over the right hand edge of the screen, then an
 * automatic CR/LF sequence should occur (ie. automatic wrap).
 *
 * Only ASCII values in the range 32..126 are displayed. All other codes are
 * displayed as spaces.
 *
 * This code can be moved into "displaycode.s"
 */

void vdev_putstr(char *text)
{
	unsigned char *	cptr = (unsigned char *)text;
	unsigned char *	dptr;
	unsigned char	cchr;

	/* We should only do this when writing beneath the cursor
	 * (always the case at the moment).
	 */
	Wait(&curgrip);
	cursor_off();

	/* start blitting characters at "CursorX,CursorY" */
	for (; (*cptr); cptr++) {

		cchr = *cptr;

		/* only 7bit characters supported */
		/* "cchr" is an index in the range "0x00..0x5E" */
		cchr = (((cchr < 0x20) || (cchr >= 0x7F)) ?
			0x00 : (cchr - 0x20));

		if (CursorEOL) {
			Wait(&curgrip);
			cursor_off();
     
			CursorEOL = FALSE;	/* remove CR pending state */
			CursorX = 0;		/* we are at start of next row */
			if (CursorY == (rows - 1))
				display_scroll();
			else
				CursorY++;
		}

		/* @@@@@@ This info should probably be calc. by blit_char() */    
		dptr = (unsigned char *)screenbase
			+ ((CursorY * 8) * stride) + CursorX;

               	blit_char(dptr, cchr);

		if ((CursorX + 1) == cols)
			/* next char should be preceded by CR/LF */
			CursorEOL = TRUE;
		else
			CursorX++;
	}

	/* Release control of cursor */
	cursor_on();
	Signal(&curgrip);
}

/*---------------------------------------------------------------------------*/

void vdev_set_foreground(int colour)		/* optional */
{
	/* not implemented */
	UNUSED(colour);
}

/*---------------------------------------------------------------------------*/

void vdev_set_background(int colour)		/* optional */
{
	/* not implemented */
	UNUSED(colour);
}

/*---------------------------------------------------------------------------*/

/* Set inverse video state according to the "flag" state.
 *	TRUE  - display in inverse video
 *	FALSE - display in normal video
 */

void vdev_set_inverse(bool flag)
{
	if (flag)
		attributes |= inverse;
	else
		attributes &= ~inverse;
}

/*---------------------------------------------------------------------------*/

void vdev_set_bold(bool flag)			/* optional */
{
	/* not implemented */
	if (flag)
		attributes |= bold;
	else
		attributes &= ~bold;
}

/*---------------------------------------------------------------------------*/

void vdev_set_underline(bool flag)		/* optional */
{
	if (flag)
		attributes |= underline;
	else
		attributes &= ~underline;
}

/*---------------------------------------------------------------------------*/

void vdev_set_italic(bool flag)			/* optional */
{
	if (flag)
		attributes |= italic;
	else
		attributes &= ~italic;
}

/*---------------------------------------------------------------------------*/

void vdev_set_cursorflash(int onoff)
{
	Wait(&curgrip);			/* claim the cursor semaphore */

	if (onoff) {
		/* Enable cursor flash */

		CursorFlashing = TRUE;
	} else {
		/* Disable the cursor flash */

		if (CursorShows) {		/* cursor is displayed */
			cursor_off();		/* remove the cursor */
			CursorShows = FALSE;	/* cursor is off the screen */
		}
		CursorFlashing = FALSE;		/* disable cursor flash */
	}

	Signal(&curgrip);		/* release the cursor semaphore */

	return;
}

/*---------------------------------------------------------------------------*/

/* Device specific initialisation:
 *	Screen should be clear.
 *	Character cursor should be in the top left corner.
 *	Any pointer cursor should be disabled (off).
 *	All character attributes (bold, italic, underline) should be off.
 */


void vdev_init(void)
{
	CursorEOL = FALSE;

	InitSemaphore(&curgrip,1);	/* initialise the cursor semaphore */

	/* Determine the screen shape and position */
	/* Assumes all characters are 8x8 matrices */
	/* and screen shape is a multiple of 8. */
	DisplayInfo(&screenbase, &stride, &cols, &rows);

	/* Clear the screen */
	vdev_clear_screen();

	/* Create background process (1024 byte stack) */
	Fork(0x0400,cursor_flash,0);
}


#ifndef DRIVER
/*---------------------------------------------------------------------------*/
/* Return addressing and size information for the display */

static int DisplayInfo(unsigned char **screenbase, int *stride, int *X, int *Y) {

	/* Base address of screen */
	*screenbase = (unsigned char *)0x01fd8000;

	/* Number of bytes between left hand edge and next left hand edge. */
	*stride = 80;

	/* Character size of screen */
	*X = 80;
	*Y = 50;

	/* Display is connected. */
	return TRUE;
}

/*---------------------------------------------------------------------------*/
/* Clear screen */

void display_clear(void) {
	word *	dptr = (word *)screenbase;
	int	numwords = (stride * rows * 8) / sizeof(word);

	for (; numwords > 0; numwords--)
		*dptr++ = 0;
}


/*---------------------------------------------------------------------------*/
/* Scroll display up by one line, assumes 8x8 chars */

void display_scroll(void) {
	word *	dptr_dst = (word *)screenbase;
	word *	dptr_src = (word *)(screenbase + stride * 8);
	int	numwords = (stride * (rows - 1) * 8) / sizeof(word);

	/* Copy display up by one line */
	for ( ; numwords > 0 ; numwords--)
		*dptr_dst++ = *dptr_src++;

	/* Clear last line of display */
	numwords =  (cols * 8) / sizeof(word);

	for ( ; numwords > 0 ; numwords--)
		*dptr_dst++ = 0;
}

/*---------------------------------------------------------------------------*/
/* Place cursor at current CursorX, CursorY position. */

static void cursor_blit(void)
{
	unsigned char *dptr;
	int            loop;

	dptr = ((unsigned char *)screenbase) + ((CursorY * 8) * stride) + CursorX;

	for (loop = 0; (loop < 8); loop++) {
		*dptr ^= 0xFF;
		dptr += stride;
	}

	return;
}


/*---------------------------------------------------------------------------*/
/* Place a character on the screen */

static void blit_char(unsigned char *dptr, unsigned char cchr)
{
	int loop;

	for (loop = 0; (loop < 8); loop++) {
		unsigned char cdata = glyphs[normalset][cchr].carray[loop];

		if (attributes & bold) {
			if (attributes & italic)
				cdata = glyphs[bolditalicset][cchr].carray[loop];
			else
				cdata = glyphs[boldset][cchr].carray[loop];
		} else {
			if (attributes & italic)
				cdata = glyphs[italicset][cchr].carray[loop];
		}

		if ((attributes & underline) && (loop == 7))
			cdata = 0xFF;	/* underbar = set all the pixels */

		if (attributes & inverse)
			cdata = ~cdata;

		*dptr = cdata;
		dptr += stride;
	}
}

/*---------------------------------------------------------------------------*/

#if 0
static void blit_reverse(unsigned char *dptr, unsigned char cchr)
{
	int loop, iloop;

	for (loop = 7; (loop >= 0); loop--) {
		unsigned char cdata = glyphs[normalset][cchr].carray[loop];

		if (attributes & bold) {
			if (attributes & italic)
				cdata = glyphs[bolditalicset][cchr].carray[loop];
			else
				cdata = glyphs[boldset][cchr].carray[loop];
		} else {
			if (attributes & italic)
				cdata = glyphs[italicset][cchr].carray[loop];
		}

		if (((attributes & underline) != 0) && (loop == 7))
			cdata = 0xFF;	/* set all the pixels */

		if ((attributes & inverse) != 0)
			cdata = ~cdata;

		/* reverse the bit-ordering */
		for (iloop = 0; (iloop < 4); iloop++) {
			int tstatelo = (cdata & (1 << iloop));
			int tstatehi = (cdata & (1 << (7 - iloop)));

			cdata &= ~(tstatelo | tstatehi);
			tstatelo = (tstatelo << (7 - (2 * iloop)));
			tstatehi = (tstatehi >> (7 - (2 * iloop)));
			cdata |= (tstatelo | tstatehi);
		}

		*dptr = cdata;
		dptr += stride;
	}
}
#endif
#endif /* DRIVER */

/*---------------------------------------------------------------------------*/
/* End of vdev.c */

@


1.4
log
@latest version as ported to archi
@
text
@d22 1
a22 1
 * RcsId: $Id$
d26 3
a28 1
 * RcsLog: $Log$
d30 1
d803 2
a804 2
	/* Create background process (512byte stack) */
	Fork(0x0200,cursor_flash,0);
@


1.3
log
@latest from ABC 20 mar 91
@
text
@d1 48
a48 3
/*> vdev.c <*/
/*---------------------------------------------------------------------------*/
/* Provide low-level support for the native window server
d50 1
a50 28
 *	void vdev_init(void) ;
 *	void vdev_info(short *rows, short *cols) ;
 *	void vdev_clear_screen(void) ;
 *	void vdev_putstr(char *text) ;
 *	void vdev_moveto(int row,int col) ;
 *	void vdev_beep(void) ;
 *	void vdev_backspace(void) ;
 *	void vdev_carriage_return(void) ;
 *	void vdev_linefeed(void) ;
 *	void vdev_set_foreground(int colour) ;		optional
 *	void vdev_set_background(int colour) ;		optional
 *	void vdev_set_inverse(bool flag) ;
 *	void vdev_set_bold(bool flag) ;			optional
 *	void vdev_set_underline(bool flag) ;		optional
 *	void vdev_set_italic(bool flag) ;		optional
 *
 * The "optional" functions should still exist, but perform no actions
 *
 * Note: Some time in the future this display code will need to blit in
 *	 the other direction. Since the screen is actually upside down.
 *
 *       This code should be transfered to a device driver so that different
 *	 displays can be supported without a change to the executive.
 *
 *	 The dependance on the "HiExecutive" to perform actual video functions
 *	 will be removed. A lower-level assembler file "displaycode.s" will
 *	 provide the machine/display/time dependant sections. The "HiExecutive"
 *	 will only provide default display type information.
a51 2
 *---------------------------------------------------------------------------
 * RCSId: $Id: vdev.c,v 1.2 90/11/07 02:10:42 paul Exp $
d59 1
a61 2
/* The scroll direction is always viewed as a normal screen (lomem==topleft) */
typedef enum {scroll_up,scroll_down,scroll_left,scroll_right} scrolling ;
d63 1
a63 18
/* "displaycode.s" support functions */
extern void display_init(void) ;			   /* setup display */
extern void display_showcur(int state,int Xpos,int Ypos) ; /* cursor ON/OFF */
extern int  display_scroll(int direction,int amount) ;	   /* soft-scroll */
extern void display_clear(void) ;			   /* clear screen */
extern void blit_normal(unsigned char *dptr,unsigned char cchr) ;
extern void blit_reverse(unsigned char *dptr,unsigned char cchr) ;
/* "displaycode.s" provided variables */
extern word screenbase ;	/* base address of the screen */
extern word stride ;		/* raster width in bytes */
extern word screenX ;		/* screen pixel width */
extern word screenY ;		/* screen raster height */
extern word attributes ;	/* character display style control */

#if 0
/* hi-executive support functions */
extern int DisplayInfo(word *screen,word *stride,int *X,int *Y) ;
#endif
a64 1
#define UNUSED(x)	((x) = (x))
d68 1
d71 2
d74 2
a75 2
#if 0
/* character sets */
d84 1
a84 1
 * display style.
d88 2
a89 2
                unsigned char carray[8] ;
               } cdef ;	/* character definition */
d92 96
a187 96
                      {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, /* ' ' */
                      {0x18,0x18,0x18,0x18,0x18,0x00,0x18,0x00}, /* '!' */
                      {0x36,0x36,0x36,0x00,0x00,0x00,0x00,0x00}, /* '"' */
                      {0x6C,0x6C,0xFE,0x6C,0xFE,0x6C,0x6C,0x00}, /* '#' */
                      {0x30,0xFC,0x16,0x7C,0xD0,0x7E,0x18,0x00}, /* '$' */
                      {0x06,0x66,0x30,0x18,0x0C,0x66,0x60,0x00}, /* '%' */
                      {0x1C,0x36,0x36,0x1C,0xB6,0x66,0xDC,0x00}, /* '&' */
                      {0x18,0x18,0x18,0x00,0x00,0x00,0x00,0x00}, /* ''' */
                      {0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30,0x00}, /* '(' */
                      {0x0C,0x18,0x30,0x30,0x30,0x18,0x0C,0x00}, /* ')' */
                      {0x00,0x18,0x7E,0x3C,0x7E,0x18,0x00,0x00}, /* '*' */
                      {0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00}, /* '+' */
                      {0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x0C}, /* ',' */
                      {0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00}, /* '-' */
                      {0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00}, /* '.' */
                      {0x00,0x60,0x30,0x18,0x0C,0x06,0x00,0x00}, /* '/' */
                      {0x3C,0x66,0x76,0x7E,0x6E,0x66,0x3C,0x00}, /* '0' */
                      {0x18,0x1C,0x18,0x18,0x18,0x18,0x7E,0x00}, /* '1' */
                      {0x3C,0x66,0x60,0x30,0x18,0x0C,0x7E,0x00}, /* '2' */
                      {0x3C,0x66,0x60,0x38,0x60,0x66,0x3C,0x00}, /* '3' */
                      {0x30,0x38,0x3C,0x36,0x7E,0x30,0x30,0x00}, /* '4' */
                      {0x7E,0x06,0x3E,0x60,0x60,0x66,0x3C,0x00}, /* '5' */
                      {0x38,0x0C,0x06,0x3E,0x66,0x66,0x3C,0x00}, /* '6' */
                      {0x7E,0x60,0x30,0x18,0x0C,0x0C,0x0C,0x00}, /* '7' */
                      {0x3C,0x66,0x66,0x3C,0x66,0x66,0x3C,0x00}, /* '8' */
                      {0x3C,0x66,0x66,0x7C,0x60,0x30,0x1C,0x00}, /* '9' */
                      {0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x00}, /* ':' */
                      {0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x0C}, /* ';' */
                      {0x30,0x18,0x0C,0x06,0x0C,0x18,0x30,0x00}, /* '<' */
                      {0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00}, /* '=' */
                      {0x0C,0x18,0x30,0x60,0x30,0x18,0x0C,0x00}, /* '>' */
                      {0x3C,0x66,0x30,0x18,0x18,0x00,0x18,0x00}, /* '?' */
                      {0x3C,0x66,0x76,0x56,0x76,0x06,0x3C,0x00}, /* '@@' */
                      {0x3C,0x66,0x66,0x7E,0x66,0x66,0x66,0x00}, /* 'A' */
                      {0x3E,0x66,0x66,0x3E,0x66,0x66,0x3E,0x00}, /* 'B' */
                      {0x3C,0x66,0x06,0x06,0x06,0x66,0x3C,0x00}, /* 'C' */
                      {0x1E,0x36,0x66,0x66,0x66,0x36,0x1E,0x00}, /* 'D' */
                      {0x7E,0x06,0x06,0x3E,0x06,0x06,0x7E,0x00}, /* 'E' */
                      {0x7E,0x06,0x06,0x3E,0x06,0x06,0x06,0x00}, /* 'F' */
                      {0x3C,0x66,0x06,0x76,0x66,0x66,0x3C,0x00}, /* 'G' */
                      {0x66,0x66,0x66,0x7E,0x66,0x66,0x66,0x00}, /* 'H' */
                      {0x7E,0x18,0x18,0x18,0x18,0x18,0x7E,0x00}, /* 'I' */
                      {0x7C,0x30,0x30,0x30,0x30,0x36,0x1C,0x00}, /* 'J' */
                      {0x66,0x36,0x1E,0x0E,0x1E,0x36,0x66,0x00}, /* 'K' */
                      {0x06,0x06,0x06,0x06,0x06,0x06,0x7E,0x00}, /* 'L' */
                      {0xC6,0xEE,0xFE,0xD6,0xD6,0xC6,0xC6,0x00}, /* 'M' */
                      {0x66,0x66,0x6E,0x7E,0x76,0x66,0x66,0x00}, /* 'N' */
                      {0x3C,0x66,0x66,0x66,0x66,0x66,0x3C,0x00}, /* 'O' */
                      {0x3E,0x66,0x66,0x3E,0x06,0x06,0x06,0x00}, /* 'P' */
                      {0x3C,0x66,0x66,0x66,0x56,0x36,0x6C,0x00}, /* 'Q' */
                      {0x3E,0x66,0x66,0x3E,0x36,0x66,0x66,0x00}, /* 'R' */
                      {0x3C,0x66,0x06,0x3C,0x60,0x66,0x3C,0x00}, /* 'S' */
                      {0x7E,0x18,0x18,0x18,0x18,0x18,0x18,0x00}, /* 'T' */
                      {0x66,0x66,0x66,0x66,0x66,0x66,0x3C,0x00}, /* 'U' */
                      {0x66,0x66,0x66,0x66,0x66,0x3C,0x18,0x00}, /* 'V' */
                      {0xC6,0xC6,0xD6,0xD6,0xFE,0xEE,0xC6,0x00}, /* 'W' */
                      {0x66,0x66,0x3C,0x18,0x3C,0x66,0x66,0x00}, /* 'X' */
                      {0x66,0x66,0x66,0x3C,0x18,0x18,0x18,0x00}, /* 'Y' */
                      {0x7E,0x60,0x30,0x18,0x0C,0x06,0x7E,0x00}, /* 'Z' */
                      {0x3E,0x06,0x06,0x06,0x06,0x06,0x3E,0x00}, /* '[' */
                      {0x00,0x06,0x0C,0x18,0x30,0x60,0x00,0x00}, /* '\' */
                      {0x7C,0x60,0x60,0x60,0x60,0x60,0x7C,0x00}, /* ']' */
                      {0x3C,0x66,0x00,0x00,0x00,0x00,0x00,0x00}, /* '^' */
                      {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF}, /* '_' */
                      {0x0C,0x18,0x00,0x00,0x00,0x00,0x00,0x00}, /* '`' */
                      {0x00,0x00,0x3C,0x60,0x7C,0x66,0x7C,0x00}, /* 'a' */
                      {0x06,0x06,0x3E,0x66,0x66,0x66,0x3E,0x00}, /* 'b' */
                      {0x00,0x00,0x3C,0x66,0x06,0x66,0x3C,0x00}, /* 'c' */
                      {0x60,0x60,0x7C,0x66,0x66,0x66,0x7C,0x00}, /* 'd' */
                      {0x00,0x00,0x3C,0x66,0x7E,0x06,0x3C,0x00}, /* 'e' */
                      {0x38,0x0C,0x0C,0x3E,0x0C,0x0C,0x0C,0x00}, /* 'f' */
                      {0x00,0x00,0x7C,0x66,0x66,0x7C,0x60,0x3C}, /* 'g' */
                      {0x06,0x06,0x3E,0x66,0x66,0x66,0x66,0x00}, /* 'h' */
                      {0x18,0x00,0x1C,0x18,0x18,0x18,0x3C,0x00}, /* 'i' */
                      {0x18,0x00,0x1C,0x18,0x18,0x18,0x18,0x0E}, /* 'j' */
                      {0x06,0x06,0x66,0x36,0x1E,0x36,0x66,0x00}, /* 'k' */
                      {0x1C,0x18,0x18,0x18,0x18,0x18,0x3C,0x00}, /* 'l' */
                      {0x00,0x00,0x6C,0xFE,0xD6,0xD6,0xC6,0x00}, /* 'm' */
                      {0x00,0x00,0x3E,0x66,0x66,0x66,0x66,0x00}, /* 'n' */
                      {0x00,0x00,0x3C,0x66,0x66,0x66,0x3C,0x00}, /* 'o' */
                      {0x00,0x00,0x3E,0x66,0x66,0x3E,0x06,0x06}, /* 'p' */
                      {0x00,0x00,0x7C,0x66,0x66,0x7C,0x60,0xE0}, /* 'q' */
                      {0x00,0x00,0x36,0x6E,0x06,0x06,0x06,0x00}, /* 'r' */
                      {0x00,0x00,0x7C,0x06,0x3C,0x60,0x3E,0x00}, /* 's' */
                      {0x0C,0x0C,0x3E,0x0C,0x0C,0x0C,0x38,0x00}, /* 't' */
                      {0x00,0x00,0x66,0x66,0x66,0x66,0x7C,0x00}, /* 'u' */
                      {0x00,0x00,0x66,0x66,0x66,0x3C,0x18,0x00}, /* 'v' */
                      {0x00,0x00,0xC6,0xD6,0xD6,0xFE,0x6C,0x00}, /* 'w' */
                      {0x00,0x00,0x66,0x3C,0x18,0x3C,0x66,0x00}, /* 'x' */
                      {0x00,0x00,0x66,0x66,0x66,0x7C,0x60,0x3C}, /* 'y' */
                      {0x00,0x00,0x7E,0x30,0x18,0x0C,0x7E,0x00}, /* 'z' */
                      {0x30,0x18,0x18,0x0E,0x18,0x18,0x30,0x00}, /* '{' */
                      {0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x00}, /* '|' */
                      {0x0C,0x18,0x18,0x70,0x18,0x18,0x0C,0x00}, /* '}' */
                      {0x8C,0xD6,0x62,0x00,0x00,0x00,0x00,0x00}, /* '~' */
		     } ;
d190 96
a285 96
                    {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, /* 20 */
                    {0x38,0x38,0x38,0x38,0x38,0x00,0x38,0x00}, /* 21 */
                    {0x77,0x77,0x77,0x00,0x00,0x00,0x00,0x00}, /* 22 */
                    {0x36,0x7F,0x7F,0x36,0x7F,0x7F,0x36,0x00}, /* 23 */
                    {0x18,0x7E,0x1B,0x7E,0xD8,0x7E,0x18,0x00}, /* 24 */
                    {0x67,0x77,0x38,0x1C,0x0E,0x77,0x73,0x00}, /* 25 */
                    {0x3E,0x77,0x77,0x3E,0xDF,0x77,0xDE,0x00}, /* 26 */
                    {0x70,0x70,0x38,0x00,0x00,0x00,0x00,0x00}, /* 27 */
                    {0x70,0x38,0x1C,0x1C,0x1C,0x38,0x70,0x00}, /* 28 */
                    {0x0E,0x1C,0x38,0x38,0x38,0x1C,0x0E,0x00}, /* 29 */
                    {0x18,0x5A,0x7E,0x3C,0x7E,0x5A,0x18,0x00}, /* 2A */
                    {0x00,0x1C,0x1C,0x7F,0x1C,0x1C,0x00,0x00}, /* 2B */
                    {0x00,0x00,0x00,0x00,0x00,0x38,0x38,0x1C}, /* 2C */
                    {0x00,0x00,0x00,0x7F,0x7F,0x00,0x00,0x00}, /* 2D */
                    {0x00,0x00,0x00,0x00,0x00,0x38,0x38,0x00}, /* 2E */
                    {0x00,0x70,0x38,0x1C,0x0E,0x07,0x00,0x00}, /* 2F */
                    {0x3E,0x73,0x7B,0x7F,0x6F,0x67,0x3E,0x00}, /* 30 */
                    {0x38,0x3E,0x38,0x38,0x38,0x38,0x7E,0x00}, /* 31 */
                    {0x3E,0x73,0x70,0x38,0x1C,0x0E,0x7F,0x00}, /* 32 */
                    {0x3E,0x73,0x70,0x3C,0x70,0x73,0x3E,0x00}, /* 33 */
                    {0x38,0x3C,0x3E,0x3B,0x7F,0x38,0x38,0x00}, /* 34 */
                    {0x7F,0x07,0x3F,0x70,0x70,0x73,0x3E,0x00}, /* 35 */
                    {0x3C,0x0E,0x07,0x3F,0x67,0x67,0x3E,0x00}, /* 36 */
                    {0x7F,0x70,0x38,0x1C,0x0E,0x0E,0x0E,0x00}, /* 37 */
                    {0x3E,0x67,0x67,0x3E,0x67,0x67,0x3E,0x00}, /* 38 */
                    {0x3E,0x73,0x73,0x7E,0x70,0x38,0x1E,0x00}, /* 39 */
                    {0x00,0x00,0x38,0x38,0x00,0x38,0x38,0x00}, /* 3A */
                    {0x00,0x00,0x38,0x38,0x00,0x38,0x38,0x1C}, /* 3B */
                    {0x70,0x3C,0x0E,0x07,0x0E,0x3C,0x70,0x00}, /* 3C */
                    {0x00,0x7F,0x7F,0x00,0x7F,0x7F,0x00,0x00}, /* 3D */
                    {0x07,0x1E,0x38,0x70,0x38,0x1E,0x07,0x00}, /* 3E */
                    {0x3E,0x77,0x77,0x38,0x1C,0x00,0x1C,0x00}, /* 3F */
                    {0x3E,0x67,0x67,0x77,0x77,0x07,0x3E,0x00}, /* 40 */
                    {0x3E,0x67,0x67,0x7F,0x67,0x67,0x67,0x00}, /* 41 */
                    {0x3F,0x67,0x67,0x3F,0x67,0x67,0x3F,0x00}, /* 42 */
                    {0x3E,0x67,0x07,0x07,0x07,0x67,0x3E,0x00}, /* 43 */
                    {0x1F,0x37,0x67,0x67,0x67,0x37,0x1F,0x00}, /* 44 */
                    {0x7F,0x07,0x07,0x3F,0x07,0x07,0x7F,0x00}, /* 45 */
                    {0x7F,0x07,0x07,0x3F,0x07,0x07,0x07,0x00}, /* 46 */
                    {0x3E,0x67,0x07,0x77,0x67,0x67,0x3E,0x00}, /* 47 */
                    {0x67,0x67,0x67,0x7F,0x67,0x67,0x67,0x00}, /* 48 */
                    {0x7F,0x1C,0x1C,0x1C,0x1C,0x1C,0x7F,0x00}, /* 49 */
                    {0x7E,0x38,0x38,0x38,0x38,0x3B,0x1E,0x00}, /* 4A */
                    {0x67,0x37,0x1F,0x0F,0x1F,0x37,0x67,0x00}, /* 4B */
                    {0x07,0x07,0x07,0x07,0x07,0x07,0x7F,0x00}, /* 4C */
                    {0x63,0x77,0x7F,0x6B,0x6B,0x63,0x63,0x00}, /* 4D */
                    {0x63,0x67,0x6F,0x7F,0x7B,0x73,0x63,0x00}, /* 4E */
                    {0x3E,0x67,0x67,0x67,0x67,0x67,0x3E,0x00}, /* 4F */
                    {0x3F,0x67,0x67,0x3F,0x07,0x07,0x07,0x00}, /* 50 */
                    {0x3E,0x67,0x67,0x67,0x57,0x37,0x6E,0x00}, /* 51 */
                    {0x3F,0x67,0x67,0x3F,0x37,0x67,0x67,0x00}, /* 52 */
                    {0x3E,0x67,0x07,0x3E,0x70,0x73,0x3E,0x00}, /* 53 */
                    {0x7F,0x1C,0x1C,0x1C,0x1C,0x1C,0x1C,0x00}, /* 54 */
                    {0x67,0x67,0x67,0x67,0x67,0x67,0x3E,0x00}, /* 55 */
                    {0x63,0x63,0x77,0x36,0x3E,0x1C,0x1C,0x00}, /* 56 */
                    {0x63,0x63,0x6B,0x7F,0x7F,0x77,0x63,0x00}, /* 57 */
                    {0x63,0x77,0x3E,0x1C,0x3E,0x77,0x63,0x00}, /* 58 */
                    {0x63,0x77,0x3E,0x1C,0x1C,0x1C,0x1C,0x00}, /* 59 */
                    {0x7F,0x70,0x38,0x1C,0x0E,0x07,0x7F,0x00}, /* 5A */
                    {0x3E,0x0E,0x0E,0x0E,0x0E,0x0E,0x3E,0x00}, /* 5B */
                    {0x00,0x06,0x0E,0x1C,0x38,0x70,0x00,0x00}, /* 5C */
                    {0x7C,0x70,0x70,0x70,0x70,0x70,0x7C,0x00}, /* 5D */
                    {0x08,0x1C,0x3E,0x77,0x63,0x00,0x00,0x00}, /* 5E */
                    {0x00,0x00,0x00,0x00,0x00,0x00,0xFF,0xFF}, /* 5F */
                    {0x3C,0x6E,0x0E,0x3F,0x0E,0x0E,0x7F,0x00}, /* 60 */
                    {0x00,0x00,0x3E,0x70,0x7E,0x73,0x7E,0x00}, /* 61 */
                    {0x07,0x07,0x3F,0x67,0x67,0x67,0x3F,0x00}, /* 62 */
                    {0x00,0x00,0x3E,0x67,0x07,0x67,0x3E,0x00}, /* 63 */
                    {0x70,0x70,0x7E,0x73,0x73,0x73,0x7E,0x00}, /* 64 */
                    {0x00,0x00,0x3E,0x67,0x7F,0x07,0x7E,0x00}, /* 65 */
                    {0x7C,0x0E,0x0E,0x3F,0x0E,0x0E,0x0E,0x00}, /* 66 */
                    {0x00,0x00,0x7E,0x73,0x73,0x7E,0x70,0x3E}, /* 67 */
                    {0x07,0x07,0x3F,0x67,0x67,0x67,0x67,0x00}, /* 68 */
                    {0x38,0x00,0x3E,0x38,0x38,0x38,0x7E,0x00}, /* 69 */
                    {0x38,0x00,0x3C,0x38,0x38,0x38,0x38,0x1E}, /* 6A */
                    {0x07,0x07,0x67,0x37,0x1F,0x37,0x67,0x00}, /* 6B */
                    {0x1E,0x1C,0x1C,0x1C,0x1C,0x1C,0x7E,0x00}, /* 6C */
                    {0x00,0x00,0x63,0x7F,0x7F,0x6B,0x63,0x00}, /* 6D */
                    {0x00,0x00,0x3F,0x77,0x77,0x77,0x77,0x00}, /* 6E */
                    {0x00,0x00,0x3E,0x77,0x77,0x77,0x3E,0x00}, /* 6F */
                    {0x00,0x00,0x3F,0x77,0x77,0x3F,0x07,0x07}, /* 70 */
                    {0x00,0x00,0x7E,0x77,0x77,0x7E,0x70,0x70}, /* 71 */
                    {0x00,0x00,0x3F,0x6F,0x07,0x07,0x07,0x00}, /* 72 */
                    {0x00,0x00,0x7E,0x0F,0x3E,0x78,0x3F,0x00}, /* 73 */
                    {0x0E,0x0E,0x3F,0x0E,0x0E,0x0E,0x7C,0x00}, /* 74 */
                    {0x00,0x00,0x77,0x77,0x77,0x77,0x7E,0x00}, /* 75 */
                    {0x00,0x00,0x77,0x77,0x77,0x3E,0x1C,0x00}, /* 76 */
                    {0x00,0x00,0x63,0x6B,0x7F,0x7F,0x63,0x00}, /* 77 */
                    {0x00,0x00,0x67,0x3E,0x1C,0x3E,0x73,0x00}, /* 78 */
                    {0x00,0x00,0x77,0x77,0x77,0x7E,0x70,0x3E}, /* 79 */
                    {0x00,0x00,0x7F,0x38,0x1C,0x0E,0x7F,0x00}, /* 7A */
                    {0x38,0x1C,0x1C,0x0F,0x1C,0x1C,0x38,0x00}, /* 7B */
                    {0x38,0x38,0x38,0x00,0x38,0x38,0x38,0x00}, /* 7C */
                    {0x0E,0x1C,0x1C,0x78,0x1C,0x1C,0x0E,0x00}, /* 7D */
                    {0x9C,0xFE,0x72,0x00,0x00,0x00,0x00,0x00}, /* 7E */
                   } ;
d288 96
a383 96
		      {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}, /* 20 */
		      {0x60,0x60,0x30,0x30,0x18,0x00,0x0C,0x00}, /* 21 */
		      {0x6C,0x6C,0x36,0x00,0x00,0x00,0x00,0x00}, /* 22 */
		      {0xD8,0xD8,0xFE,0x6C,0xFE,0x1B,0x1B,0x00}, /* 23 */
		      {0x60,0xFC,0x16,0x7C,0xD0,0x7F,0x0C,0x00}, /* 24 */
		      {0x0C,0xCC,0x30,0x18,0x0C,0x33,0x30,0x00}, /* 25 */
		      {0x38,0x6C,0x36,0x1C,0xB6,0x33,0x6E,0x00}, /* 26 */
		      {0x60,0x30,0x0C,0x00,0x00,0x00,0x00,0x00}, /* 27 */
		      {0x30,0x18,0x0C,0x0C,0x0C,0x18,0x30,0x00}, /* 28 */
		      {0x0C,0x18,0x30,0x30,0x30,0x18,0x0C,0x00}, /* 29 */
		      {0x00,0x30,0x7E,0x3C,0x7E,0x0C,0x00,0x00}, /* 2A */
		      {0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00}, /* 2B */
		      {0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x0C}, /* 2C */
		      {0x00,0x00,0x00,0x7E,0x00,0x00,0x00,0x00}, /* 2D */
		      {0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00}, /* 2E */
		      {0x00,0xC0,0x30,0x18,0x0C,0x03,0x00,0x00}, /* 2F */
		      {0x78,0xCC,0x76,0x7E,0x6E,0x33,0x1E,0x00}, /* 30 */
		      {0x70,0x38,0x30,0x18,0x18,0x0C,0x1F,0x00}, /* 31 */
		      {0x78,0xCC,0x60,0x30,0x18,0x0C,0x3F,0x00}, /* 32 */
		      {0x78,0xCC,0x60,0x38,0x60,0x33,0x1E,0x00}, /* 33 */
		      {0x60,0x70,0x3C,0x36,0x7E,0x18,0x18,0x00}, /* 34 */
		      {0xFC,0x0C,0x3E,0x60,0x60,0x33,0x1E,0x00}, /* 35 */
		      {0x70,0x18,0x06,0x3E,0x66,0x33,0x1E,0x00}, /* 36 */
		      {0xFC,0x60,0x30,0x18,0x0C,0x06,0x06,0x00}, /* 37 */
		      {0x78,0xCC,0x66,0x3C,0x66,0x33,0x1E,0x00}, /* 38 */
		      {0x78,0xCC,0x66,0x7C,0x60,0x18,0x0E,0x00}, /* 39 */
		      {0x00,0x00,0x18,0x18,0x00,0x0C,0x0C,0x00}, /* 3A */
		      {0x00,0x00,0x18,0x18,0x00,0x0C,0x0C,0x03}, /* 3B */
		      {0x60,0x30,0x18,0x06,0x0C,0x0C,0x18,0x00}, /* 3C */
		      {0x00,0x00,0x7E,0x00,0x7E,0x00,0x00,0x00}, /* 3D */
		      {0x18,0x30,0x60,0x60,0x18,0x0C,0x06,0x00}, /* 3E */
		      {0x78,0xCC,0x30,0x18,0x18,0x00,0x0C,0x00}, /* 3F */
		      {0x78,0xCC,0x76,0x56,0x76,0x03,0x1E,0x00}, /* 40 */
		      {0x78,0xCC,0x66,0x7E,0x66,0x33,0x33,0x00}, /* 41 */
		      {0x7C,0xCC,0x66,0x3E,0x66,0x33,0x1F,0x00}, /* 42 */
		      {0x78,0xCC,0x06,0x06,0x06,0x66,0x1E,0x00}, /* 43 */
		      {0x3C,0x6C,0x66,0x66,0x66,0x1B,0x0F,0x00}, /* 44 */
		      {0xFC,0x0C,0x06,0x3E,0x06,0x03,0x3F,0x00}, /* 45 */
		      {0xFC,0x0C,0x06,0x3E,0x06,0x03,0x03,0x00}, /* 46 */
		      {0x78,0xCC,0x06,0x76,0x66,0x33,0x1E,0x00}, /* 47 */
		      {0xCC,0xCC,0x66,0x7E,0x66,0x33,0x33,0x00}, /* 48 */
		      {0xFC,0x30,0x18,0x18,0x18,0x0C,0x3F,0x00}, /* 49 */
		      {0xF8,0x60,0x30,0x30,0x30,0x1B,0x0E,0x00}, /* 4A */
		      {0xCC,0x6C,0x1E,0x0E,0x1E,0x1B,0x33,0x00}, /* 4B */
		      {0x0C,0x0C,0x06,0x06,0x06,0x03,0x3F,0x00}, /* 4C */
		      {0xCC,0xDC,0xFE,0xD6,0xD6,0x63,0x63,0x00}, /* 4D */
		      {0xCC,0xCC,0x6E,0x7E,0x76,0x33,0x33,0x00}, /* 4E */
		      {0x78,0xCC,0x66,0x66,0x66,0x33,0x1E,0x00}, /* 4F */
		      {0x7C,0xCC,0x66,0x3E,0x06,0x03,0x03,0x00}, /* 50 */
		      {0x78,0xCC,0x66,0x66,0x56,0x1B,0x36,0x00}, /* 51 */
		      {0x7C,0xCC,0x66,0x3E,0x36,0x33,0x33,0x00}, /* 52 */
		      {0x78,0xCC,0x06,0x3C,0x60,0x33,0x1E,0x00}, /* 53 */
		      {0xFC,0x30,0x18,0x18,0x18,0x0C,0x0C,0x00}, /* 54 */
		      {0xCC,0xCC,0x66,0x66,0x66,0x33,0x1E,0x00}, /* 55 */
		      {0xCC,0xCC,0x66,0x66,0x66,0x1E,0x0C,0x00}, /* 56 */
		      {0xCC,0xCC,0xD6,0xD6,0xFE,0x77,0x63,0x00}, /* 57 */
		      {0xCC,0xCC,0x3C,0x18,0x3C,0x33,0x33,0x00}, /* 58 */
		      {0xCC,0xCC,0x66,0x3C,0x18,0x0C,0x0C,0x00}, /* 59 */
		      {0xFC,0xC0,0x30,0x18,0x0C,0x03,0x3F,0x00}, /* 5A */
		      {0x7C,0x0C,0x06,0x06,0x06,0x03,0x1F,0x00}, /* 5B */
		      {0x00,0x0C,0x0C,0x18,0x30,0x30,0x00,0x00}, /* 5C */
		      {0xF8,0xC0,0x60,0x60,0x60,0x30,0x3E,0x00}, /* 5D */
		      {0x30,0x78,0x66,0x42,0x00,0x00,0x00,0x00}, /* 5E */
		      {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFF}, /* 5F */
		      {0x70,0xD8,0x0C,0x3E,0x0C,0x06,0x3F,0x00}, /* 60 */
		      {0x00,0x00,0x78,0x60,0x7C,0x33,0x3E,0x00}, /* 61 */
		      {0x18,0x0C,0x7C,0x66,0x66,0x33,0x1F,0x00}, /* 62 */
		      {0x00,0x00,0x78,0x66,0x06,0x33,0x1E,0x00}, /* 63 */
		      {0xC0,0xC0,0xF8,0x66,0x66,0x33,0x3E,0x00}, /* 64 */
		      {0x00,0x00,0x78,0x66,0x7E,0x03,0x1E,0x00}, /* 65 */
		      {0xE0,0x18,0x18,0x3E,0x0C,0x06,0x06,0x00}, /* 66 */
		      {0x00,0x00,0xF8,0x66,0x66,0x3E,0x30,0x1E}, /* 67 */
		      {0x18,0x0C,0x7C,0x66,0x66,0x33,0x33,0x00}, /* 68 */
		      {0x60,0x00,0x38,0x18,0x18,0x0C,0x1E,0x00}, /* 69 */
		      {0x30,0x00,0x38,0x18,0x18,0x0C,0x0C,0x03}, /* 6A */
		      {0x18,0x0C,0xCC,0x36,0x1E,0x1B,0x33,0x00}, /* 6B */
		      {0x70,0x30,0x30,0x18,0x18,0x0C,0x1E,0x00}, /* 6C */
		      {0x00,0x00,0xD8,0xFE,0xD6,0x6B,0x63,0x00}, /* 6D */
		      {0x00,0x00,0x7C,0x66,0x66,0x33,0x33,0x00}, /* 6E */
		      {0x00,0x00,0x78,0x66,0x66,0x33,0x1E,0x00}, /* 6F */
		      {0x00,0x00,0x7C,0x66,0x66,0x1F,0x03,0x03}, /* 70 */
		      {0x00,0x00,0xF8,0x66,0x66,0x3E,0x30,0x38}, /* 71 */
		      {0x00,0x00,0x6C,0x6E,0x06,0x03,0x03,0x00}, /* 72 */
		      {0x00,0x00,0xF8,0x06,0x3C,0x30,0x1F,0x00}, /* 73 */
		      {0x30,0x18,0x7C,0x0C,0x0C,0x06,0x1C,0x00}, /* 74 */
		      {0x00,0x00,0xCC,0x66,0x66,0x33,0x3E,0x00}, /* 75 */
		      {0x00,0x00,0xCC,0x66,0x66,0x1E,0x0C,0x00}, /* 76 */
		      {0x00,0x00,0xCC,0xD6,0xD6,0x7F,0x36,0x00}, /* 77 */
		      {0x00,0x00,0xCC,0x3C,0x18,0x1E,0x33,0x00}, /* 78 */
		      {0x00,0x00,0xCC,0x66,0x66,0x3E,0x30,0x0F}, /* 79 */
		      {0x00,0x00,0xFC,0x30,0x18,0x06,0x3F,0x00}, /* 7A */
		      {0x30,0x18,0x18,0x0E,0x18,0x18,0x30,0x00}, /* 7B */
		      {0x60,0x30,0x18,0x00,0x18,0x0C,0x06,0x00}, /* 7C */
		      {0x0C,0x18,0x18,0x70,0x18,0x18,0x0C,0x00}, /* 7D */
		      {0x8C,0xD6,0x62,0x00,0x00,0x00,0x00,0x00}, /* 7E */
                     } ;
d385 1
a385 1
typedef enum {normalset,boldset,italicset,bolditalicset} charsets ;
d389 19
a407 6
                  normalchars,	/* normal */
		  boldchars,	/* bold */
		  italicchars,	/* italic */
		  normalchars,	/* bold italic */
		  NULL
                 } ;
d413 5
a417 5
		    landscape,		/*   0degrees */
		    landscape_reverse,	/* 180degrees */
		    portrait_left,	/* 270degrees */
		    portrait_right 	/*  90degrees */
                   } shape ;
d420 6
a425 6
                   normal = 0,		/* default state */
		   bold = 1,		/* enbolden text */
		   italic = 2,		/* italicise text */
		   underline = 4,	/* underline text */
		   inverse = 8		/* invert text */
                  } attr ;
d427 1
a428 15
#if 0
static int screen = 0 ;		/* base address of the screen memory */
#endif
static int style = landscape ;	/* default display style of the screen */
#if 0
static int stride = 0 ;		/* offset in bytes to next screen row */
#endif
static int cols = 0 ;		/* number of screen X positions */
static int rows = 0 ;		/* number of screen Y positions */
static int cursorX = 0 ;	/* screen X position */
static int cursorY = 0 ;	/* screen Y position */
static int pending = 0 ;	/* If we have a pending CR/LF state */
#if 0
static int attributes = 0 ;	/* current display attributes */
#endif
d430 12
a441 4
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/*---------------------------------------------------------------------------*/
/* internal support functions */
a442 3
static int       cursorstate = 0 ;	/* != 0 then cursor is displayed */
static int	 flashstate = -1 ;	/* != 0 then cursor is flashing */
static Semaphore curgrip ;		/* access to the cursor */
a444 33

static void cursor_blit(void)
{
#if 1
 unsigned char *dptr = (unsigned char *)screenbase ;
#else
 unsigned char *dptr = (unsigned char *)screen ;
#endif
 int            loop ;

 /* EOR the cursor onto the screen at "cursorX,cursorY" */
 switch (style)
  {
   case landscape         : dptr += ((cursorY * 8) * stride) + cursorX ;
                            break ;

   case landscape_reverse : dptr += (((rows - 1 - cursorY) * 8) * stride) + (cols - 1 - cursorX) ;
			    break ;

   case portrait_left     : /**** TODO ****/
   case portrait_right    : IOdebug("cursor_blit: portrait to be implemented\n") ;
			    return ;
  }

 for (loop = 0; (loop < 8); loop++)
  {
   *dptr ^= 0xFF ;
   dptr += stride ;
  }

 return ;
}

d451 5
a455 4
 /* If the cursor is currently displayed then place it onto the screen. */
 /* This function assumes that we hold the cursor semaphore. */
 if (cursorstate == -1)
  cursor_blit() ;
d457 1
a457 1
 return ;
d464 4
a467 6
 /* If the cursor is currently displayed, then remove it from the screen. */
 /* This function assumes that we hold the cursor semaphore. */
 if (cursorstate == -1)
  cursor_blit() ;

 return ;
d471 1
d475 17
a491 1
 /* This function should just sit and flash the cursor */
d493 5
a497 27
 for (;;)
  {
   Wait(&curgrip) ;	/* claim the cursor semaphore */
   if (flashstate)
    {
     /* EOR the "block" cursor onto the screen */
     cursorstate = -1 ;	/* cursor is on the screen */
     cursor_on() ;	/* and display the cursor */
    }
   Signal(&curgrip) ;	/* release the cursor semaphore */

   /* wait for the specified amount of time */
   Delay(flashrate) ;

   Wait(&curgrip) ;	/* claim the cursor semaphore */
   if (flashstate)
    {
     /* EOR the "block" cursor off the screen */
     cursor_off() ;	/* remove the cursor */
     cursorstate = 0 ;	/* cursor is off the screen */
    }
   Signal(&curgrip) ;	/* release the cursor semaphore */

   /* wait for the specified amount of time */
   Delay(flashrate) ;
  }
}
d499 1
a499 29
/*---------------------------------------------------------------------------*/
#if 0
static void blit_normal(unsigned char *dptr,unsigned char cchr)
{
 int loop ;
 for (loop = 0; (loop < 8); loop++)
  {
   unsigned char cdata = glyphs[normalset][cchr].carray[loop] ;
   if (attributes & bold)
    {
     if (attributes & italic)
      cdata = glyphs[bolditalicset][cchr].carray[loop] ;
     else
      cdata = glyphs[boldset][cchr].carray[loop] ;
    }
   else
    if (attributes & italic)
     cdata = glyphs[italicset][cchr].carray[loop] ;

   if (((attributes & underline) != 0) && (loop == 7))
    cdata = 0xFF ;	/* set all the pixels */
   if ((attributes & inverse) != 0)
    cdata = ~cdata ;
   *dptr = cdata ;
   dptr += stride ;
  }
 return ;
}
#endif
d501 3
a503 40
/*---------------------------------------------------------------------------*/
#if 0
static void blit_reverse(unsigned char *dptr,unsigned char cchr)
{
 int loop ;
 int iloop ;
 for (loop = 7; (loop >= 0); loop--)
  {
   unsigned char cdata = glyphs[normalset][cchr].carray[loop] ;
   if (attributes & bold)
    {
     if (attributes & italic)
      cdata = glyphs[bolditalicset][cchr].carray[loop] ;
     else
      cdata = glyphs[boldset][cchr].carray[loop] ;
    }
   else
    if (attributes & italic)
     cdata = glyphs[italicset][cchr].carray[loop] ;

   if (((attributes & underline) != 0) && (loop == 7))
    cdata = 0xFF ;	/* set all the pixels */
   if ((attributes & inverse) != 0)
    cdata = ~cdata ;

   /* reverse the bit-ordering */
   for (iloop = 0; (iloop < 4); iloop++)
    {
     int tstatelo = (cdata & (1 << iloop)) ;
     int tstatehi = (cdata & (1 << (7 - iloop))) ;
     cdata &= ~(tstatelo | tstatehi) ;
     tstatelo = (tstatelo << (7 - (2 * iloop))) ;
     tstatehi = (tstatehi >> (7 - (2 * iloop))) ;
     cdata |= (tstatelo | tstatehi) ;
    }

   *dptr = cdata ;
   dptr += stride ;
  }
 return ;
a504 1
#endif
d508 3
a510 2
/*---------------------------------------------------------------------------*/
/* external "vdev" functions */
d512 3
a514 6
void vdev_info(short *r, short *c)
{
 /* Returns the screen size in character blocks */
 *r = rows ;
 *c = cols ;
 return ;
d519 3
a521 6
void vdev_clear_screen(void)
{
 int		outloop ;

 Wait(&curgrip) ;
 cursor_off() ;
d523 1
a523 1
 display_clear() ;
d525 1
a525 1
 pending = cursorX = cursorY = 0 ;
d527 2
a528 4
 cursor_on() ;
 Signal(&curgrip) ;

 return ;
d533 2
a534 7
void vdev_moveto(int row,int col)
{
 /* Position the cursor at the specified position on the display */
 /* get the cursor */
 Wait(&curgrip) ;
 /* ensure the cursor is not displayed */
 cursor_off() ;
d536 3
a538 1
 pending = 0 ;
d540 1
a540 3
 /* update the cursor position */
 cursorX = col ;
 cursorY = row ;
d542 3
a544 4
 /* re-enable the cursor */
 cursor_on() ;
 /* and the release the cursor lock */
 Signal(&curgrip) ;
d546 2
a547 1
 return ;
d552 5
a556 5
void vdev_beep(void)
{
 /* Notify the user via a audio or visual signal */
 IOputc(7) ;	/* Get the IO server to generate a BEEP */
 return ;
d561 5
a565 7
void vdev_backspace(void)
{
 /* Move the cursor one character cell left in a non-destructive manner. If
  * the cursor is at the left hand edge of the screen the function should
  * not be called. If we are in a pending state, we should simply cancel it,
  * without moving the cursor.
  */
d567 3
a569 2
 Wait(&curgrip) ;
 cursor_off() ;
d571 6
a576 7
 if (!pending)
  {
   if (cursorX > 0)
    cursorX-- ;
  }
 else
  pending = 0 ;
d578 2
a579 3
 cursor_on() ;
 Signal(&curgrip) ;
 return ;
d584 3
d589 6
a594 10
 /* Move the cursor to the first column of the current row. It does not
  * erase the contents of the current row.
  */

 Wait(&curgrip) ;
 cursor_off() ;
 pending = 0 ;
 cursorX = 0 ;
 cursor_on() ;
 Signal(&curgrip) ;
d596 2
a597 1
 return ;
d602 6
d610 2
a611 29
 /* Move the cursor down a row. If the cursor is on the bottom row of the
  * screen, the display should scroll. The cursor will retain its current
  * column position.
  * We must preserve any "pending" newline state.
  */

 Wait(&curgrip) ;
 cursor_off() ;

 if (cursorY == (rows - 1))
  {
   /* scroll the display (leaving the cursor in the same place) */
   switch (style)
    {
     case landscape         : display_scroll(scroll_up,8) ;
			      break ;
     case landscape_reverse : display_scroll(scroll_down,8) ;
			      break ;
     case portrait_left     : display_scroll(scroll_right,8) ;
			      break ;
     case portrait_right    : display_scroll(scroll_left,8) ;
			      break ;
    }
  }
 else
  {
   /* move the cursor down a row */
   cursorY++ ;
  }
d613 6
a618 2
 cursor_on() ;
 Signal(&curgrip) ;
d620 2
a621 1
 return ;
d626 11
d639 23
a661 26
 unsigned char *cptr = (unsigned char *)text ;
 unsigned char *dptr ;
 unsigned char  cchr ;
 int	        loop ;

 /* Prints the null terminated ASCII string at the current cursor position.
  * If the text wraps over the right hand edge of the screen, then an
  * automatic CR/LF sequence should occur (ie. automatic wrap).
  *
  * Only ASCII values in the range 32..126 are displayed. All other codes are
  * displayed as spaces.
  *
  * This code can be moved into "displaycode.s"
  */

 /* start blitting characters at "cursorX,cursorY" */
 for (; (*cptr); cptr++)
  {
   cchr = (*cptr & 0x7F) ;	/* only 7bit characters supported */
   cchr = (((cchr < 0x20) || (cchr == 0x7F)) ? 0x00 : (cchr - 0x20)) ;
   /* "cchr" is an index in the range "0x00..0x5E" */

   if (pending)
    {
     Wait(&curgrip) ;
     cursor_off() ;
d663 24
a686 60
     pending = 0 ;		/* remove pending state */
     cursorX = 0 ;		/* we are at start of next row */
     if (cursorY == (rows - 1))
     switch (style)
      {
       case landscape         : display_scroll(scroll_up,8) ;
			        break ;
       case landscape_reverse : display_scroll(scroll_down,8) ;
			        break ;
       case portrait_left     : display_scroll(scroll_right,8) ;
			        break ;
       case portrait_right    : display_scroll(scroll_left,8) ;
			        break ;
      }
     else
      cursorY++ ;

     cursor_on() ;
     Signal(&curgrip) ;
    }
    
   /* we should only do this when writing beneath the cursor (always the case
    * at the moment).
    */
   Wait(&curgrip) ;
   cursor_off() ;
   /* The address we want here depends on the style of screen */
   switch (style)
    {
#if 1
     case landscape         : dptr = (unsigned char *)screenbase + ((cursorY * 8) * stride) + cursorX ;
#else
     case landscape         : dptr = (unsigned char *)screen + ((cursorY * 8) * stride) + cursorX ;
#endif
                              blit_normal(dptr,cchr) ;
			      break ;

#if 1
     case landscape_reverse : dptr = (unsigned char *)screenbase + (((rows - 1 - cursorY) * 8) * stride) + (cols - 1 - cursorX) ;
#else
     case landscape_reverse : dptr = (unsigned char *)screen + (((rows - 1 - cursorY) * 8) * stride) + (cols - 1 - cursorX) ;
#endif
			      blit_reverse(dptr,cchr) ;
			      break ;

     case portrait_left     : /**** TODO ****/
     case portrait_right    : IOdebug("vdev_putstr: portrait to be implemented\n") ;
			      return ;
    }   

   if ((cursorX + 1) == cols)
    pending = -1 ;		/* next char should be preceded by CR/LF */
   else
    cursorX++ ;

   cursor_on() ;
   Signal(&curgrip) ;
  }

 return ;
d693 2
a694 3
 /* not implemented */
 UNUSED(colour) ;
 return ;
d701 2
a702 3
 /* not implemented */
 UNUSED(colour) ;
 return ;
d707 5
d714 4
a717 9
 /* Set inverse video state according to the "flag" state.
  *	TRUE  - display in inverse video
  *	FALSE - display in normal video
  */
 if (flag)
  attributes |= inverse ;
 else
  attributes &= ~inverse ;
 return ;
d724 5
a728 6
 /* not implemented */
 if (flag)
  attributes |= bold ;
 else
  attributes &= ~bold ;
 return ;
d735 4
a738 5
 if (flag)
  attributes |= underline ;
 else
  attributes &= ~underline ;
 return ;
d745 4
a748 5
 if (flag)
  attributes |= italic ;
 else
  attributes &= ~italic ;
 return ;
d755 115
a869 1
 Wait(&curgrip) ;		/* claim the cursor semaphore */
d871 1
a871 15
 if (onoff == 0)		/* disable the cursor flash */
  {
   if (cursorstate == -1)	/* cursor is displayed */
    {
     cursor_off() ;		/* remove the cursor */
     cursorstate = 0 ;		/* cursor is off the screen */
    }
   flashstate = 0 ;             /* disable cursor flash */
  }
 else
  flashstate = -1 ;             /* enable cursor flash */

 Signal(&curgrip) ;	/* release the cursor semaphore */

 return ;
d874 1
d876 8
d885 19
a903 15
void vdev_set_screen(shape direction)
{
 /* set the screen blitting direction */
 switch (direction)
  {
   case landscape         :
   case landscape_reverse :
                            style = direction ;
			    break ;
   case portrait_left     :
   case portrait_right    :
                            /* not supported yet, so do not change */
                            break ;
  }
 return ;
d908 2
a909 1
void vdev_init(void)
d911 4
a914 17
 /* Device specific initialisation:
  *	Screen should be clear
  *	Character cursor should be in the top left corner
  *	Pointer cursor should be disabled (off)
  *	All character attributes (bold,italic,underline) should be off
  */

 pending = 0 ;

 InitSemaphore(&curgrip,1) ;	/* initialise the cursor semaphore */

#if 1
 display_init() ; /* define the display world */
#else
 /* call the hi-executive functions to read the screen shape and position */
 DisplayInfo((word *)&screen,(word *)&stride,&cols,&rows) ;
#endif
d916 9
a924 3
 /* all characters are 8x8 matrices (assumes screen shape is a tuple of 8) */
 cols = screenX / 8 ;
 rows = screenY / 8 ;
d926 2
a927 2
 /* decide on the default method of screen blitting */
 style = landscape ;
d929 2
a930 2
 /* clear the screen */
 vdev_clear_screen() ;
d932 4
a935 2
 /* and position it at the default spot */
 vdev_moveto(0,0) ;
d937 5
a941 1
 Fork(0x0200,cursor_flash,0) ;	/* create background process (512byte stack) */
d943 3
a945 1
 return ;
d947 2
d951 2
a952 1
/*> EOF vdev.c <*/
@


1.2
log
@change orientation for new world where screen will be the RIGHT way round
@
text
@d35 1
a35 1
 * RCSId: $Id: vdev.c,v 1.1 90/09/25 18:42:35 paul Exp $
d49 12
a60 4
void display_curpos(int Xpos,int Ypos) ;	/* VIDC systems only */
void display_showcur(int Xpos,int Ypos) ;
int  display_scroll(int direction,int amount) ;
void display_clear(void) ;
d62 1
d65 1
d74 1
d395 1
d415 1
d417 1
d419 1
d421 1
d427 1
d429 1
d444 3
d448 1
d535 1
a535 1

d562 1
d565 1
a565 1

d605 1
d625 1
a625 1
#if 1	/* newer code */
a634 3
#else
 int            inloop ;
 unsigned char *display = (unsigned char *)screen ;
a635 17
 /* Clears the entire display */
 Wait(&curgrip) ;
 cursor_off() ;

 /* much faster screen clears can be done (assembler in "displaycode.s") */

 /* set all of video memory to 0x00 */
 for (outloop = 0; (outloop < (rows * 8)); outloop++)
  for (inloop = 0; (inloop < stride); inloop++)
   *display++ = 0x00 ;

 pending = cursorX = cursorY = 0 ;

 cursor_on() ;
 Signal(&curgrip) ;
#endif /* newer code */

d816 3
d820 1
d824 3
d828 1
d964 2
a965 1
  *	Cursor should be in the top left corner
d973 3
d978 1
d980 3
a982 3
  /* all characters are 8x8 matrices (assumes screen shape is a tuple of 8) */
 cols /= 8 ;
 rows /= 8 ;
d990 1
a990 1
  /* and position it at the default spot */
d993 1
a993 1
 Fork(0x0400,cursor_flash,0) ;	/* create background process (1K of stack) */
@


1.1
log
@Initial revision
@
text
@d1 3
a3 5
/*---------------------------------------------------------------------------
 * File: vdev.c
 * Authors: JS & PAB June 1990
 *
 * Provide low-level support for the native window server
d35 1
a35 3
 *               Copyright (C) 1989, Perihelion Software Ltd.
 *---------------------------------------------------------------------------
 * RCSId: $Id$
a44 5

#define REVERSE 1	/* provide inverted screen blitting */

/*---------------------------------------------------------------------------*/

d404 1
a404 5
#if REVERSE
static int style = landscape_reverse ;	/* display style of the screen */
#else
static int style = landscape ;		/* display style of the screen */
#endif
d419 1
d486 8
a493 6
   Wait(&curgrip) ;
   /* EOR the "block" cursor onto the screen */
   cursorstate = -1 ;	/* cursor is on the screen */
   cursor_on() ;	/* and display the cursor */
   Signal(&curgrip) ;
   
d498 8
a505 5
   Wait(&curgrip) ;
   /* EOR the "block" cursor off the screen */
   cursor_off() ;	/* remove the cursor */
   cursorstate = 0 ;	/* cursor is off the screen */
   Signal(&curgrip) ;
d513 71
a753 71
static void blit_normal(unsigned char *dptr,unsigned char cchr)
{
 int loop ;
 for (loop = 0; (loop < 8); loop++)
  {
   unsigned char cdata = glyphs[normalset][cchr].carray[loop] ;
   if (attributes & bold)
    {
     if (attributes & italic)
      cdata = glyphs[bolditalicset][cchr].carray[loop] ;
     else
      cdata = glyphs[boldset][cchr].carray[loop] ;
    }
   else
    if (attributes & italic)
     cdata = glyphs[italicset][cchr].carray[loop] ;

   if (((attributes & underline) != 0) && (loop == 7))
    cdata = 0xFF ;	/* set all the pixels */
   if ((attributes & inverse) != 0)
    cdata = ~cdata ;
   *dptr = cdata ;
   dptr += stride ;
  }
 return ;
}

/*---------------------------------------------------------------------------*/

static void blit_reverse(unsigned char *dptr,unsigned char cchr)
{
 int loop ;
 int iloop ;
 for (loop = 7; (loop >= 0); loop--)
  {
   unsigned char cdata = glyphs[normalset][cchr].carray[loop] ;
   if (attributes & bold)
    {
     if (attributes & italic)
      cdata = glyphs[bolditalicset][cchr].carray[loop] ;
     else
      cdata = glyphs[boldset][cchr].carray[loop] ;
    }
   else
    if (attributes & italic)
     cdata = glyphs[italicset][cchr].carray[loop] ;

   if (((attributes & underline) != 0) && (loop == 7))
    cdata = 0xFF ;	/* set all the pixels */
   if ((attributes & inverse) != 0)
    cdata = ~cdata ;

   /* reverse the bit-ordering */
   for (iloop = 0; (iloop < 4); iloop++)
    {
     int tstatelo = (cdata & (1 << iloop)) ;
     int tstatehi = (cdata & (1 << (7 - iloop))) ;
     cdata &= ~(tstatelo | tstatehi) ;
     tstatelo = (tstatelo << (7 - (2 * iloop))) ;
     tstatehi = (tstatehi >> (7 - (2 * iloop))) ;
     cdata |= (tstatelo | tstatehi) ;
    }

   *dptr = cdata ;
   dptr += stride ;
  }
 return ;
}

/*---------------------------------------------------------------------------*/

d906 42
d967 1
a967 4
 /* decide on the method of screen blitting */
#if REVERSE
 style = landscape_reverse ;
#else
a968 1
#endif
@
