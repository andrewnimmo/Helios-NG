head	1.5;
access;
symbols;
locks; strict;
comment	@# @;


1.5
date	94.06.07.12.40.39;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	93.08.06.13.20.43;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	92.08.17.11.17.50;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	91.05.06.17.04.45;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	91.03.03.23.24.42;	author paul;	state Exp;
branches;
next	;


desc
@@


1.5
log
@made rules silent
@
text
@#-----------------------------------------------------------------------------
# Helios generic make system - GENERIC COMPONENT MAKEFILE -
#-----------------------------------------------------------------------------
# Helios generic component make rules for: standalone keyboard server
#
# File: /HSRC/servers/keyboard/makefile
#
# These are the host/processor independent rules and variables for this
# component of Helios. It is included by the processor specific makefile
# That may add to some of its functionality. You should only alter this
# makefile by using "ifneq ($(HPROC),YYY)" clauses for a specific processor.
#
# RcsId: $Id: makefile,v 1.4 1993/08/06 13:20:43 paul Exp nickc $
#		(C) Copyright 1990 Perihelion Software
#
# WARNING: assumes you are using GNUmake.
#-----------------------------------------------------------------------------

ifndef InProcMake
# This part of the makefile is run in the components generic source directory

# The variables HPROC, HHOST, HSRC, and HPROD should already be set by 
# your make script or environment, if not then get local defaults from
# $(HSRC)/makeinc/DFLT.mak. Note that the following pathname cannot use $(HSRC).
ifndef HPROC
 include ../../makeinc/DFLT.mak
endif

.PHONY: notarget
notarget:
	@@$(MAKE) -C $(HPROC)

.DEFAULT:
	@@$(MAKE) -C $(HPROC) $@@

else
#-----------------------------------------------------------------------------
# This part of the makefile is always run in a processor specific subdirectory.

# Manditory variables for a component:
# name of this dir relative to $(HSRC)
COMPONENT = servers/keyboard

# Manditory includes
include $(HSRC)/makeinc/$(HHOST).mak	# Default host system variables
include $(HSRC)/makeinc/$(HPROC).mak	# Default processor rules and vars.

# Manditory phoney targets
.PHONY: default clean Xdefault Xclean
# "default"    - should make this component in its proc subdir
# "install"    - copy the new component to $(HPROD) production directory
# "clean"      - remove all intermediate and executable files from proc subdir
# Phoney targets prefixed by X are for adding processor specific targets.
#
# Processor specific sources are held in the processor specific subdir.,
# generic ones in the directory above it.
HVPATH := $(HSRC)/$(COMPONENT)

ifdef RSRC
 HVPATH := $(RSRC)/$(COMPONENT)/$(HPROC):$(HSRC)/$(COMPONENT):$(RSRC)/$(COMPONENT)
endif

vpath %.h $(HVPATH)
vpath %.a $(HVPATH)
vpath %.c $(HVPATH)

#-----------------------------------------------------------------------------
# Extra server compilation rules:

.SUFFIXES: .si .dl .sa

# Servers incorporated into the system image
ifeq ($(HPROC),TRAN)
%.si:%.c
	$(NC) $(NCFLAGS) -DINSYSTEMIMAGE $< -s$(TEMP)/$*.s
	$(ASM) $(ASMFLAGS) -o $*.si $(TEMP)/$*.s
	$(RMTEMP) $(TEMP)/$*.s
else
%.si:%.c
	@@ Echo Compiling $< ...
	@@ $(NC) -o$*.si -c $(NCFLAGS) -DINSYSTEMIMAGE $<
endif

# Demand loaded servers
ifeq ($(HPROC),TRAN)
%.dl:%.c
	$(NC) $(NCFLAGS) -DDEMANDLOADED $< -s$(TEMP)/$*.s
	$(ASM) $(ASMFLAGS) -o $*.dl $(TEMP)/$*.s
	$(RMTEMP) $(TEMP)/$*.s
else
%.dl:%.c
	@@ Echo Compiling $< ...
	@@ $(NC) -o$*.dl -c $(NCFLAGS) -DDEMANDLOADED $<
endif

# Stand alone servers
ifeq ($(HPROC),TRAN)
%.sa:%.c
	$(NC) $(NCFLAGS) -DSTANDALONE $< -s$(TEMP)/$*.s
	$(ASM) $(ASMFLAGS) -o $*.sa $(TEMP)/$*.s
	$(RMTEMP) $(TEMP)/$*.s
else
%.sa:%.c
	@@ Echo Compiling $< ...
	@@ $(NC) -o$*.sa -c $(NCFLAGS) -DSTANDALONE $<
endif

#-----------------------------------------------------------------------------
# Generic component make rules and variables added below here

# Note all final generic targets here

ifeq ($(HPLATFORM), ARCHIMEDES)
 TARGETS = keyboard.i keyboard.cmd keytest
endif

default : $(TARGETS) Xdefault

install	: $(TARGETS) Xinstall
ifeq ($(HPLATFORM), ARCHIMEDES)
	$(CP) keyboard.i $(LIB)/keyboard
	$(CP) keyboard.cmd $(BIN)/private
endif
	$(CP) keytest $(BIN)/private
	$(TOUCH) install

clean	: Xclean
	-$(RM)	$(OBJECTS) $(TARGETS) $(XOBJECTS) $(XTARGETS) mkout \
		core ../mkout install Xinstall *.sa


#-----------------------------------------------------------------------------
# for archive, backup and cleaning purposes,
# note all generic SOURCE and OBJECT files:

# Note all sources
SOURCES		= $(SOURCES.c) $(SOURCES.a) \
		  $(HEADERS.c) $(HEADERS.m) \
		  $(SOURCES.odd)

OBJECTS	= $(SOURCES.c:.c=.o) $(SOURCES.a:.a=.o)

# C source files
SOURCES.c	= keyboard.c keytest.c

# AMPP source files
SOURCES.a	=

# C header files
HEADERS.c	=

# AMPP macro files
HEADERS.m	=

# Any other source files
SOURCES.odd	= makefile README template.akm


#-----------------------------------------------------------------------------
# Other generic component variables:

# Set any flags required

# Note any library def files to be linked with
LIBDEFS	:=

LINKFLAGS := $(LINKFLAGS)

#-----------------------------------------------------------------------------
# heap size set to < 2*buffer size so buffers are allocated from system &
# returned when not used.
#
# *.si = Server is incorporated into system image 
# *.dl = Demand loaded server - Name table entry already exists
# *.sa = Stand alone servers (run from shell)
#
# Generic targets and their dependencies:

keyboard.i: $(LIB)/sstart.o keyboard.si
	@@ Echo Linking $@@ ...
	@@ $(LINK) $(LINKFLAGS) -o$@@ -nKeyboard $^

keyboard.cmd: $(LIB)/sstart.o keyboard.sa
	@@ Echo Linking $@@ ...
	@@ $(LINK) $(LINKFLAGS) -o$@@ -nKeyboard $^

keytest: $(CSTART) keytest.o
	@@ Echo Linking $@@ ...
	@@ $(LINK) $(LINKFLAGS) -o$@@ -n$@@ $^


#-----------------------------------------------------------------------------
endif #InProcMake	# This line must be at EOF
@


1.4
log
@development checkpoint
@
text
@d13 1
a13 2
# SccsId: %W% %G%
# RcsId: $Id: makefile,v 1.3 1992/08/17 11:17:50 paul Exp $
d80 2
a81 1
	$(NC) -o$*.si -c $(NCFLAGS) -DINSYSTEMIMAGE $<
d92 2
a93 1
	$(NC) -o$*.dl -c $(NCFLAGS) -DDEMANDLOADED $<
d104 2
a105 1
	$(NC) -o$*.sa -c $(NCFLAGS) -DSTANDALONE $<
a114 4
else
 ifeq ($(HPLATFORM), ABC)
  TARGETS = keyboard.i keyboard.cmd keytest
 endif
a119 3
ifeq ($(HPLATFORM), ABC)
	sysstrip keyboard.i -o$(LIB)/keyboard
else
a162 5
ifeq ($(HPROC),ARM)
  NCFLAGS := $(NCFLAGS) -DCONSOLE
else
  NCFLAGS := $(NCFLAGS)
endif
a178 7
ifdef __ABC
keyboard.i: $(LIB)/sstart.o keyboard.si $(LIB)/abclib.def
	$(LINK) $(LINKFLAGS) -o$@@ -nKeyboard $^

keyboard.cmd: $(LIB)/sstart.o keyboard.sa $(LIB)/abclib.def
	$(LINK) $(LINKFLAGS) -o$@@ -nKeyboard $^
else
d180 2
a181 1
	$(LINK) $(LINKFLAGS) -o$@@ -nKeyboard $^
d184 2
a185 2
	$(LINK) $(LINKFLAGS) -o$@@ -nKeyboard $^
endif
d188 2
a189 1
	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ $^
@


1.3
log
@rm cppflags
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.2 1991/05/06 17:04:45 paul Exp paul $
a109 1
TARGETS = keyboard.i keyboard.cmd keytest
d111 8
d122 1
d124 6
a129 2
#	$(CP) keyboard.i $(LIB)/keyboard
	$(CP) keytest $(BIN)
d171 1
a171 1
  NCFLAGS := $(NCFLAGS) -DONEKEYBOARD
d189 1
d195 7
@


1.2
log
@checkpoint before being sent to ABC
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.1 1991/03/03 23:24:42 paul Exp paul $
d76 1
a76 1
	$(NC) $(CPPFLAGS) $(NCFLAGS) -DINSYSTEMIMAGE $< -s$(TEMP)/$*.s
d87 1
a87 1
	$(NC) $(CPPFLAGS) $(NCFLAGS) -DDEMANDLOADED $< -s$(TEMP)/$*.s
d98 1
a98 1
	$(NC) $(CPPFLAGS) $(NCFLAGS) -DSTANDALONE $< -s$(TEMP)/$*.s
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
# RcsId: $Id: generic.template,v 1.1 91/02/12 17:11:17 nick Exp $
d27 1
a27 1
include ../../makeinc/DFLT.mak
a52 1
# "installdef" - If component is a library, make .def file and install in LIB
d61 1
a61 1
HVPATH := $(RSRC)/$(COMPONENT)/$(HPROC):$(HSRC)/$(COMPONENT):$(RSRC)/$(COMPONENT)
d69 38
d110 1
a110 1
TARGETS = 
d114 5
a118 3
install	: installdef $(TARGETS) Xinstall
#	$(CP) $(TARGETS) $(BIN)
#	$(TOUCH) install
a119 4
installdef:	# If this is a library, enter all .def files here (to install)
#	$(CP) $^ $(LIB)
#	$(TOUCH) installdef

d122 1
a122 1
		core ../mkout install installdef Xinstall
a133 3
#Full set of library object files
#OBJECTS		= $(SOURCES.c:.c=.p) $(SOURCES.a:.a=.p)
# Or if you are not a library:
d137 1
a137 1
SOURCES.c	=
d149 1
a149 1
SOURCES.odd	= makefile
d157 1
a157 1
  NCFLAGS := $(NCFLAGS)
d159 1
a159 1
  NCFLAGS := $(NCFLAGS)
d168 7
d177 2
a178 2
# uncomment if you have compiler or makedepend generated dependencies
#include depends
d180 2
d183 2
a186 2


a188 1

@
