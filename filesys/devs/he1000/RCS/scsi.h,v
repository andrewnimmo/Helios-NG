head	1.2;
access;
symbols
	Helios1_3:1.2
	Helios13_beta:1.2
	Helios1_2_2:1.2
	Helios1_2_2Beta:1.2
	Helios1_2_1:1.2;
locks; strict;
comment	@ * @;


1.2
date	91.03.07.11.11.41;	author martyn;	state Exp;
branches;
next	1.1;

1.1
date	90.10.17.15.20.07;	author martyn;	state Exp;
branches;
next	;


desc
@@


1.2
log
@new version from hunt engineering
@
text
@#define ERROR -1
#define OK     0
#define ne     !=
#define eq     ==
#define LINKTIMEOUT ( OneSec * 5 )

typedef struct scsi_ptrs
{
	short current_command;
	short current_data;
	short current_status;
	short save_command;
	short save_data;
	short save_status;
}scsi_ptrs;

int 	set_scsi_id( WORD link, BYTE scsi_id );
int	set_target_id ( WORD link, WORD table, BYTE scsi_id );
int 	assert_bus_reset( WORD link);
int 	init_link_initiator( WORD link, bool state );
int 	set_arbitration( WORD link, bool state );
int     request_ptrs( WORD link , WORD table , scsi_ptrs *ptable );
int     alloc_table( WORD link, WORD *table );
int	put_command( WORD link , WORD table , WORD size , BYTE *data);
int	put_data( WORD link, WORD table , WORD size , BYTE *data );
int     get_data( WORD link, WORD table , WORD size , BYTE *data );
int	free_table ( WORD link, WORD table );
int	send_table ( WORD link, WORD table );

int     handle_return ( WORD link );
int  	link_init(WORD);
void 	link_reset(WORD);
void 	reset_subsys(void);
void    resync(WORD link);
@


1.1
log
@Initial revision
@
text
@d1 34
a34 34
#define ERROR -1
#define OK     0
#define ne     !=
#define eq     ==
#define LINKTIMEOUT ( OneSec * 5 )

typedef struct scsi_ptrs
{
	short current_command;
	short current_data;
	short current_status;
	short save_command;
	short save_data;
	short save_status;
}scsi_ptrs;

int 	set_scsi_id( WORD link, BYTE scsi_id );
int	set_target_id ( WORD link, WORD table, BYTE scsi_id );
int 	assert_bus_reset( WORD link);
int 	init_link_initiator( WORD link, bool state );
int 	set_arbitration( WORD link, bool state );
int     request_ptrs( WORD link , WORD table , scsi_ptrs *ptable );
int     alloc_table( WORD link, WORD *table );
int	put_command( WORD link , WORD table , WORD size , BYTE *data);
int	put_data( WORD link, WORD table , WORD size , BYTE *data );
int     get_data( WORD link, WORD table , WORD size , BYTE *data );
int	free_table ( WORD link, WORD table );
int	send_table ( WORD link, WORD table );

int     handle_return ( WORD link );
int  	link_init(WORD);
void 	link_reset(WORD);
void 	reset_subsys(void);
void    resync(WORD link);
@
