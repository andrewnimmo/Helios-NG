head	1.3;
access;
symbols
	Helios_C40_1_3_Official_Release:1.3
	Alenia_release:1.3
	Helios1_3:1.3
	C40_Field_Test_2:1.2
	C40_Field_Test_R1:1.2
	Helios13_beta:1.2
	Helios1_2_2:1.2
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1;
locks; strict;
comment	@# @;


1.3
date	92.10.29.15.39.49;	author bart;	state Exp;
branches;
next	1.2;

1.2
date	91.11.13.13.38.46;	author martyn;	state Exp;
branches;
next	1.1;

1.1
date	91.03.04.16.38.38;	author martyn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@fixed description of load balancer
@
text
@		Parallel Programming with CDL
		=============================

  This disk contains a number of programs which are designed to execute
as parallel task forces under Helios. Some of the programs have been listed
in Helios documentation, the Parallel Programming Tutorial and the
CDL guide, while others are new. It is assumed that the reader has copies
of these manuals, as the inner workings of the programs are not described
here.

PI
==
   This subdirectory contains various versions of the pi program described
in the CDL guide. The programs may not be exactly the same as those listed
in the guide, mainly because of minor changes needed to make them look
pretty in an A5 manual. All programs are supplied in source form with
suitable makefiles. The makefiles may have to be changed depending on
the processor network, they contain versions for either T800 networks or
T414 networks, and you will have to comment out one or the other.

   pi_ring contains the first form of the pi example, using a controller
that does no calculation of its own and a task force topology in the form
of a ring. There are two programs, control and worker, and a CDL script
pi.cdl. This script can be compiled or executed as a shell script. It
takes a single argument, the number of workers.

   pi_farm contains the equivalent task force but using a farm topology
without a load balancing component. The CDL script is slightly more
complicated, it takes a compile-time argument for the number of workers
and a run-time argument for the number of intervals per workers. The
makefile will compile the CDL script to produce a task force with
5 workers, and you may want to change this number.

pi_fort contains a Fortran version of the ring topology using the Meiko
Fortran compiler, and pi_pasc contains a Pascal version using Prospero
Pascal. Please note that Prospero Pascal only supports the T800, so there
is no T414 option in the makefile.

  pi_mix contains a CDL script which runs a mixed-language task force. It
takes the C version of the control, a number of C workers, a number of
Fortran workers, and a number of Pascal workers.

  pi_fast is a modified version of the ring topology, written in C. First,
the controller does the same amount of arithmetic as every worker which
avoids certain mapping problems. On a network with n Helios processors the
CDL script should be invoked with (n-1) workers. Second, AccelerateCode()
and Accelerate() are used to move the evaluation routine's code and the
stack into fast on-chip memory. This gives approximately a 70 percent
speed-up, but its use is limited by the amount of on-chip memory that is
available. Apart from the X-windows Server no standard Helios program makes
use of fast on-chip memory because such a valuable resource is best left
to the user's application. Note that the eval() routine is moved to a
separate module, because in the 1.1 release of Helios AccelerateCode() needs
to copy an entire module into fast memory, and hence the module should be
as small as possible.


LB
==
  This directory contains the source of the load balancer program
as described in the CDL guide.

Factor
======
      The Factor subdirectory contains the program listed in the CDL guide,
for determining the number of factors within a range of very large numbers.
@


1.2
log
@1.2.2 release (with DOS line-termination)
@
text
@d1 66
a66 79
		Parallel Programming with CDL
		=============================

  This disk contains a number of programs which are designed to execute
as parallel task forces under Helios. Some of the programs have been listed
in Helios documentation, the Parallel Programming Tutorial and the
CDL guide, while others are new. It is assumed that the reader has copies
of these manuals, as the inner workings of the programs are not described
here.

PI
==
   This subdirectory contains various versions of the pi program described
in the CDL guide. The programs may not be exactly the same as those listed
in the guide, mainly because of minor changes needed to make them look
pretty in an A5 manual. All programs are supplied in source form with
suitable makefiles. The makefiles may have to be changed depending on
the processor network, they contain versions for either T800 networks or
T414 networks, and you will have to comment out one or the other.

   pi_ring contains the first form of the pi example, using a controller
that does no calculation of its own and a task force topology in the form
of a ring. There are two programs, control and worker, and a CDL script
pi.cdl. This script can be compiled or executed as a shell script. It
takes a single argument, the number of workers.

   pi_farm contains the equivalent task force but using a farm topology
without a load balancing component. The CDL script is slightly more
complicated, it takes a compile-time argument for the number of workers
and a run-time argument for the number of intervals per workers. The
makefile will compile the CDL script to produce a task force with
5 workers, and you may want to change this number.

pi_fort contains a Fortran version of the ring topology using the Meiko
Fortran compiler, and pi_pasc contains a Pascal version using Prospero
Pascal. Please note that Prospero Pascal only supports the T800, so there
is no T414 option in the makefile.

  pi_mix contains a CDL script which runs a mixed-language task force. It
takes the C version of the control, a number of C workers, a number of
Fortran workers, and a number of Pascal workers.

  pi_fast is a modified version of the ring topology, written in C. First,
the controller does the same amount of arithmetic as every worker which
avoids certain mapping problems. On a network with n Helios processors the
CDL script should be invoked with (n-1) workers. Second, AccelerateCode()
and Accelerate() are used to move the evaluation routine's code and the
stack into fast on-chip memory. This gives approximately a 70 percent
speed-up, but its use is limited by the amount of on-chip memory that is
available. Apart from the X-windows Server no standard Helios program makes
use of fast on-chip memory because such a valuable resource is best left
to the user's application. Note that the eval() routine is moved to a
separate module, because in the 1.1 release of Helios AccelerateCode() needs
to copy an entire module into fast memory, and hence the module should be
as small as possible.


LB
==
  This directory contains two versions of the load balancer. The one in
the simple subdirectory contains the load balancer source as listed in
the CDL guide. The one in the enhanced subdirectory contains a much more
advanced load balancer, incorporating an output buffer as well as an
input buffer, and having a few more control packets (synch, worker count,
set input buffer and set output buffer). To implement this load balancer
the format of the packet header has been changed and in particular the
control field uses a rather better format. There is a new header file,
newlb.h, describing the new header format. This header file describes
the control packets in more detail.

  The enhanced load balancer has another useful feature. If compiled
with -DBUILT_IN, it can be linked with the master component to produce
a built-in load balancer, eliminating the need for a separate component
in the task force. This is used in one of the factor programs.

Factor
======
      The Factor subdirectory contains the program listed in the CDL guide,
for determining the number of factors within a range of very large numbers.
@


1.1
log
@Initial revision
@
text
@d1 79
a79 89
		Parallel Programming with CDL
		=============================

  This disk contains a number of programs which are designed to execute
as parallel task forces under Helios. Some of the programs have been listed
in Helios documentation, the Parallel Programming Tutorial and the
CDL guide, while others are new. It is assumed that the reader has copies
of these manuals, as the inner workings of the programs are not described
here.

PI
==
   This subdirectory contains various versions of the pi program described
in the CDL guide. The programs may not be exactly the same as those listed
in the guide, mainly because of minor changes needed to make them look
pretty in an A5 manual. All programs are supplied in source form with
suitable makefiles. The makefiles may have to be changed depending on
the processor network, they contain versions for either T800 networks or
T414 networks, and you will have to comment out one or the other.

   pi_ring contains the first form of the pi example, using a controller
that does no calculation of its own and a task force topology in the form
of a ring. There are two programs, control and worker, and a CDL script
pi.cdl. This script can be compiled or executed as a shell script. It
takes a single argument, the number of workers.

   pi_farm contains the equivalent task force but using a farm topology
without a load balancing component. The CDL script is slightly more
complicated, it takes a compile-time argument for the number of workers
and a run-time argument for the number of intervals per workers. The
makefile will compile the CDL script to produce a task force with
5 workers, and you may want to change this number.

pi_fort contains a Fortran version of the ring topology using the Meiko
Fortran compiler, and pi_pasc contains a Pascal version using Prospero
Pascal. Please note that Prospero Pascal only supports the T800, so there
is no T414 option in the makefile.

  pi_mix contains a CDL script which runs a mixed-language task force. It
takes the C version of the control, a number of C workers, a number of
Fortran workers, and a number of Pascal workers.

  pi_fast is a modified version of the ring topology, written in C. First,
the controller does the same amount of arithmetic as every worker which
avoids certain mapping problems. On a network with n Helios processors the
CDL script should be invoked with (n-1) workers. Second, AccelerateCode()
and Accelerate() are used to move the evaluation routine's code and the
stack into fast on-chip memory. This gives approximately a 70 percent
speed-up, but its use is limited by the amount of on-chip memory that is
available. Apart from the X-windows Server no standard Helios program makes
use of fast on-chip memory because such a valuable resource is best left
to the user's application. Note that the eval() routine is moved to a
separate module, because in the 1.1 release of Helios AccelerateCode() needs
to copy an entire module into fast memory, and hence the module should be
as small as possible.


LB
==
  This directory contains two versions of the load balancer. The one in
the simple subdirectory contains the load balancer source as listed in
the CDL guide. The one in the enhanced subdirectory contains a much more
advanced load balancer, incorporating an output buffer as well as an
input buffer, and having a few more control packets (synch, worker count,
set input buffer and set output buffer). To implement this load balancer
the format of the packet header has been changed and in particular the
control field uses a rather better format. There is a new header file,
newlb.h, describing the new header format. This header file describes
the control packets in more detail.

  The enhanced load balancer has another useful feature. If compiled
with -DBUILT_IN, it can be linked with the master component to produce
a built-in load balancer, eliminating the need for a separate component
in the task force. This is used in one of the factor programs.

Factor
======
      The Factor subdirectory contains the program listed in the CDL guide,
for determining the number of factors within a range of very large numbers.

Convol
======
      This is an implementation of the image convolution program described
in the parallel programming tutorial. The inner loop of the worker
is slightly different from the one listed in the tutorial, eliminating the
special cases from the inner loop which gives a significant speed-up. The
images are displayed using Helios X-Windows, so users without X will have
some difficulties. 

@
