head	1.3;
access;
symbols
	Helios_C40_1_3_Official_Release:1.3
	Alenia_release:1.2
	Helios1_3:1.2
	C40_Field_Test_2:1.2
	Helios13_beta:1.1
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1;
locks; strict;
comment	@ * @;


1.3
date	93.04.20.16.43.57;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	92.08.19.09.30.13;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.15.25.54;	author jon;	state Exp;
branches;
next	;


desc
@@


1.3
log
@changed error messages to refer to Pi worker, not Pi controller
@
text
@#include <helios.h>
#include <stdio.h>
#include <posix.h>
#include <nonansi.h>
#include <memory.h>
#include <task.h>
#include <stdlib.h>

extern void eval( int position, int number_workers,
                   int intervals, double * result );


#define	 TO_RING	1	/* file handle for sending messages into pi ring */
#define	 FROM_RING	0	/* file handle for receiving messages from pi ring */


void
safe_read(
	  char *	buffer,		/* buffer into which to place read data */
	  unsigned int	size )		/* the size of 'buffer' in bytes */
{
  int	got	= 0;


  do
    {
      int	res;
      
      
      res = read( FROM_RING, buffer + got, size - got );

      if (res < 0)
	{
	  fprintf( stderr, "Pi worker: read(), failed, errno = %d\n", errno );

	  exit( EXIT_FAILURE );
	}

      if (res == 0)
	{
	  fprintf( stderr, "Pi worker: warning read() returned 0\n" );
	}

      got += res;
    }
  while (got < size);

  return;
  
} /* safe_read */


void
safe_write(
	   char *	buffer,		/* buffer from which data should be taken */
	   unsigned int	size )		/* the size of 'buffer' in bytes */
{
  int	sent = 0;


  do
    {
      int	res;
      
      
      res = write( TO_RING, buffer + sent, size - sent );

      if (res < 0)
	{
	  fprintf( stderr, "Pi worker: write(), failed, errno = %d\n", errno );

	  exit( EXIT_FAILURE );
	}

      if (res == 0)
	{
	  fprintf( stderr, "Pi worker: warning write() returned 0\n" );
	}

      sent += res;
    }
  while (sent < size);

  return;
  
} /* safe_write */


int
main( void )
{
  int 		position;
  int		number_workers;
  int		temp;
  int		intervals;
  double	sum;
  double	total;
  Carrier *	fast_stack;

  
  /* get the worker's position in the pipeline */
  
  safe_read(  (char *) &position, sizeof (position) );
  
  temp = position + 1;
  
  safe_write( (char *) &temp, sizeof (temp) );


  /* get the length of the pipeline */
  
  safe_read(  (char *) &number_workers, sizeof (number_workers) );
  safe_write( (char *) &number_workers, sizeof (number_workers) );
  

  /* get the number of intervals per worker */
  
  safe_read(  (char *) &intervals, sizeof (intervals) );
  safe_write( (char *) &intervals, sizeof (intervals) );


  /* put the code for eval() into Fast RAM */
  
  AccelerateCode( eval );


  /* get some more Fast RAM to use as an execution stack */
  
  fast_stack = AllocFast( 500, &MyTask->MemPool );

  
  /* run the evaluate function */
  
  if (fast_stack == Null(Carrier))
    {
      eval( position, number_workers, intervals, &sum );
    }
  else
    {
      Accelerate( fast_stack, eval,
		 sizeof (position)  + sizeof (number_workers) +
		 sizeof (intervals) + sizeof (&sum),
		 position, number_workers, intervals, &sum );

      FreeMem( fast_stack );
    }

  
  /* get the running total */
  
  safe_read( (char *) &total, sizeof (total) );

  
  /* add in our contribution and send on */
  
  total = total + sum;
  
  safe_write( (char *) &total, sizeof (total) );


  /* finished */
  
  return EXIT_SUCCESS;

} /* main */

@


1.2
log
@fixed compile time warnings and improved read() and write()
@
text
@d34 1
a34 1
	  fprintf( stderr, "Pi controller: read(), failed, errno = %d\n", errno );
d41 1
a41 1
	  fprintf( stderr, "Pi controller: warning read() returned 0\n" );
d70 1
a70 1
	  fprintf( stderr, "Pi controller: write(), failed, errno = %d\n", errno );
d77 1
a77 1
	  fprintf( stderr, "Pi controller: warning write() returned 0\n" );
@


1.1
log
@Initial revision
@
text
@d7 1
d9 2
a10 2
extern void eval(int position, int number_workers,
                   int intervals, double *result);
d12 93
a104 7
int main(void)
{ int 		position, number_workers, temp, intervals;
  double	sum, total;
  Carrier	*fast_stack;
    
 		/* get the worker's position in the pipeline */
  read( 0, (BYTE *) &position, sizeof(int));
d106 20
a125 1
  write(1, (BYTE *) &temp, sizeof(int));
d127 3
a129 7
		/* get the length of the pipeline */
  read( 0, (BYTE *) &number_workers, sizeof(int));
  write(1, (BYTE *) &number_workers, sizeof(int));
   
		/* get the number of intervals per worker */
  read( 0, (BYTE *) &intervals, sizeof(int));
  write(1, (BYTE *) &intervals, sizeof(int));
d131 3
a133 2
  AccelerateCode(&eval);
  fast_stack = AllocFast(500, &MyTask->MemPool);
d135 3
a137 1
    eval(position, number_workers, intervals, &sum);
d139 17
a155 4
   Accelerate(fast_stack, &eval, 3 * sizeof(int) + sizeof(double *),
   	      position, number_workers, intervals, &sum);
   	      
  read( 0, (BYTE *) &total, sizeof(double));
d157 5
a161 1
  write(1, (BYTE *) &total, sizeof(double));
d163 3
a165 2
  return(0);
}
@
