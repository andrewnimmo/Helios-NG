head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	93.05.12.11.21.43;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	92.12.05.13.08.22;	author craig;	state Exp;
branches;
next	;


desc
@@


1.2
log
@updated with JP changes
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <graph.h>

int main (void)
{
   Stream *graph_strm;
   int    x, y, x_loc[1000], y_loc[1000], loc[8];
   
   if (!InitGraphics(NULL, NULL)) 
   {  printf("Unable to initialise graphics\r\n");
      exit(1);
   }   		
   graph_strm = OpenGraph("PutPixel Test", 100, 100, 200, 200, WS_OVERLAPPED | WS_CAPTION | WS_BORDER, SW_SHOWNA);
   if (graph_strm == (Stream *) NULL)
   {  printf("Unable to open graphics window\r\n");
      exit(1);
   } 

/* Generate a bunch of random points, and scale them to fit into a small */
/* rectangle */
 
   for (x = 0; x < 1000; x++)
   {  x_loc[x] = rand();
      y_loc[x] = rand();
   }
   for (x = 0; x < 1000; x++)
   {  x_loc[x] = (int) (((float) x_loc[x] / (float) RAND_MAX) * 40);
      y_loc[x] = (int) (((float) y_loc[x] / (float) RAND_MAX) * 40);
   }   	
   for (x = 0; x < 8; x++)
   {  loc[x] = rand();
      loc[x] = (int) (((float) loc[x] / (float) RAND_MAX) * 150);
   }   	
   
   for (y = 0; y < 8; y++)
   {  /* Plot black pixels */
      for (x = 0; x < 1000; x++)
         PutPixel(graph_strm, x_loc[x] + loc[y], y_loc[x] + loc[y], BLACK);

      /*  Plot white pixels */
      for (x = 0; x < 1000; x++)
         PutPixel(graph_strm, x_loc[x] + loc[y], y_loc[x] + loc[y], WHITE);
   } 

   if (!CloseGraph(graph_strm))
   {  printf("Unable to Close the graph window\r\n");
      exit(1);
   }
   
   if (!TidyGraphics())
   {  printf("Tidy graphics failed\r\n");
      exit(1);
   }
  exit(0);
}  
@


1.1
log
@Initial revision
@
text
@a0 3
/* Program to test the PutPixek function. Program needs stack and heap of */
/* about 10000. */

d2 1
a3 1
#include <stdlib.h>
d10 3
a12 3
   if (!InitGraphics(NULL, NULL)) {
   	printf("Unable to initialise graphics\r\n");
   	return(0);
d14 4
a17 5
   graph_strm = OpenGraph("PutPixel Test", 100, 100, 200, 200,
		WS_OVERLAPPED | WS_CAPTION | WS_BORDER, SW_SHOWNA);
   if (graph_strm == (Stream *) NULL) {
   	printf("Unable to open graphics window\r\n");
   	return(0);
d23 3
a25 3
   for (x = 0; x < 1000; x++) {
   	x_loc[x] = rand();
   	y_loc[x] = rand();
d27 3
a29 3
   for (x = 0; x < 1000; x++) {
   	x_loc[x] = (int) (((float) x_loc[x] / (float) RAND_MAX) * 40);
   	y_loc[x] = (int) (((float) y_loc[x] / (float) RAND_MAX) * 40);
d31 3
a33 3
   for (x = 0; x < 8; x++) {
   	loc[x] = rand();
   	loc[x] = (int) (((float) loc[x] / (float) RAND_MAX) * 150);
d36 9
a44 5
   for (y = 0; y < 8; y++) {
     
/* Plot black pixels */
    for (x = 0; x < 1000; x++)
      PutPixel(graph_strm, x_loc[x] + loc[y], y_loc[x] + loc[y], BLACK);
d46 10
a55 13
/*  Plot white pixels */
    for (x = 0; x < 1000; x++)
      PutPixel(graph_strm, x_loc[x] + loc[y], y_loc[x] + loc[y], WHITE);
  } 
  if (!CloseGraph(graph_strm)) {
  	printf("Unable to Close the graph window\r\n");
  	return(0);
  }   
  if (!TidyGraphics()) {
  	printf("Tidy graphics failed\r\n");
  	return(0);
  }
  return(1);
@
