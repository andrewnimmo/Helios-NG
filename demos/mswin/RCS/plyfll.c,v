head	1.2;
access;
symbols;
locks; strict;
comment	@ * @;


1.2
date	93.05.12.11.21.43;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	92.12.05.13.08.22;	author craig;	state Exp;
branches;
next	;


desc
@@


1.2
log
@updated with JP changes
@
text
@#include <stdio.h>
#include <stdlib.h>
#include <signal.h>
#include <graph.h>
#include <helios.h>

int main()
{
   Stream *graph_stream;
   word   num_pts, pts[100], x;
  
   if (!InitGraphics(NULL, NULL))
      exit(1);

   graph_stream = OpenGraph(NULL, 0, 0, 300, 300, WS_OVERLAPPEDWINDOW, SW_SHOWNA);

   if (graph_stream == Null(Stream))
      exit(1);

   /* generate a 50 random points */

   num_pts = 50;
   for (x = 0; x < num_pts * 2; x+=2) 
   {  pts[x]   = (int) (((float) rand()/ (float) RAND_MAX) * 300);
      pts[x+1] = (int) (((float) rand()/ (float) RAND_MAX) * 300);
   }

   SetFillAttr(graph_stream, SOLID, BLUE);  		/* Solid blue fill style */
   SetFillMode(graph_stream, ALTERNATE);   		/* alternate mode */
   FillPoly(graph_stream, num_pts / 2, &pts[0]);   	/* Fill a 25 point polygon */
  
   SetFillAttr(graph_stream, H_DIAGCROSS, RED);  	/* Red Hatched fill style */
   SetFillMode(graph_stream, WINDING);    		/* winding mode */
   FillPoly(graph_stream, num_pts / 2, &pts[num_pts]); 	/* 25 point polygon */
   FLUSH();
   sleep(3);
   CloseGraph(graph_stream);
   TidyGraphics();
   exit(0);
}  
  	
@


1.1
log
@Initial revision
@
text
@a0 2
/* Program to test the the fill functions */

d2 2
a4 1
#include <stdlib.h>
d9 2
a10 2
  Stream *graph_stream;
  word   num_pts, pts[100], x;
d12 19
a30 16
  if (!InitGraphics(NULL, NULL)) return(0);
  graph_stream = OpenGraph(NULL, 0, 0, 300, 300,
			   WS_OVERLAPPEDWINDOW, SW_SHOWNA);
  if (graph_stream == (Stream *) NULL) return(0);

/* generate a 50 random points */

  num_pts = 50;
  for (x = 0; x < num_pts * 2; x+=2) {
    pts[x]   = (int) (((float) rand()/ (float) RAND_MAX) * 300);
    pts[x+1] = (int) (((float) rand()/ (float) RAND_MAX) * 300);
  }

  SetFillAttr(graph_stream, SOLID, BLUE);  /* Solid blue fill style */
  SetFillMode(graph_stream, ALTERNATE);   /* alternate mode */
  FillPoly(graph_stream, num_pts / 2, &pts[0]);   /* Fill a 25 point polygon */
d32 8
a39 7
  SetFillAttr(graph_stream, H_DIAGCROSS, RED);  /* Red Hatched fill style */
  SetFillMode(graph_stream, WINDING);    /* winding mode */
  FillPoly(graph_stream, num_pts / 2, &pts[num_pts]); /* 25 point polygon */
  FLUSH();
  Delay(OneSec * 3);
  CloseGraph(graph_stream);
  TidyGraphics();
@
