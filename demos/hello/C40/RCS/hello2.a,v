head	1.4;
access;
symbols
	Helios_C40_1_3_Official_Release:1.4
	Alenia_release:1.4;
locks; strict;
comment	@-- @;


1.4
date	92.11.13.16.24.40;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	92.07.21.09.12.01;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	92.07.08.16.12.40;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	92.07.02.16.29.31;	author paul;	state Exp;
branches;
next	;


desc
@@


1.4
log
@upgraded to work with seperate code and data areas
@
text
@-- Simple assembler hello world C intercalling example
-- P.A.Beskeen July '92
-- Modified to support seperate code and data by NC, Nov '92

-- include some AMPP macro files containing simple macros and constants

include c40.m
include c40mtab.m
include module.m

-- begin the module

StartModule Hello -1 1

-- By convention exported fn labels are prefixed by '.'

export .main				-- export main fn.
import .printf				-- import printf fn.

-- declare our function's name

Function main

-- get address of message into first argument reg
-- the patch instruction ensures that the correct field of the module table is used

patchinstr( PATCHC40MASK8ADD, shift ( 1, MODNUM ),
	LDI   *+R_MT(0), R_A1 )		-- get address of message 
	B	.printf			-- branch to C printf() routine

-- end of function

-- start the initialisation code

init
	CMPI	0,	R_A1			-- check to see if we are initialising the data area
	Bne	R_LR				-- and ignore any other kind of initialisation

	ldabs32 hello_msg R_ADDR1		-- get address of message, (beware, corrupts R_ATMP)

patchinstr( PATCHC40MASK8ADD, shift ( 1, MODNUM ),
	LDI	*+R_MT(0),	R_ATMP )	-- get address of data area from module table

	C40WordAddress R_ATMP 			-- convert address to word pointer

loop:
	LDI	*R_ADDR1++(1),	R_A2		-- load word from message
	STI	R_A2, *R_ATMP++(1)		-- store word into data area
	Bne	loop				-- repeat until we have copied a zero word
	Bu	R_LR				-- return

-- declare our message

hello_msg:
	byte	"Hello World via assembly language\\n", 0
align
	word	0				-- make sure that there is a zero word at the end
end_msg:

-- allocate space for our message in the module table's data area

data    message, (end_msg - hello_msg) * 4

	EndModule				-- note end of module
@


1.3
log
@fixed for new import directive in assembler.
@
text
@d3 1
d5 2
d11 10
a20 1
StartModule Hello -1 1				-- note start of module
d22 1
a22 3
	-- By convention exported fn labels are prefixed by '.'
	export .main				-- export main fn.
	import .printf				-- import printf fn.
d24 2
d27 3
a29 2
Function main					-- defines .main label
	sti	R_LR, *\--R_USP			-- save return address
d31 1
a31 3
	-- get address of "hello world" message into argument reg 1
	ldabs	hello_msg R_A1			-- get absolute address
	C40CAddress R_A1			-- convert to C pointer
d33 1
a33 4
	laj	.printf				-- call C printf
		nop				-- do something
		nop				-- more useful
		nop				-- in delay slots
d35 3
a37 2
	ldi	*R_USP++, R_LR			-- restore link reg
	b	R_LR				-- return to caller (exit)
d39 1
d41 13
d56 5
d62 1
@


1.2
log
@fixed message
@
text
@d1 35
a35 34
-- Simple assembler hello world C intercalling example
-- P.A.Beskeen July '92

include c40.m
include c40mtab.m
include module.m


StartModule Hello -1 1				-- note start of module


static [
	extern func main			-- export main function
]


Function main
	sti	R_LR, *\--R_USP			-- save return address

	-- get address of "hello world" message into argument reg 1
	ldabs	hello_msg R_A1			-- get absolute address
	C40CAddress R_A1			-- convert to C pointer

	ExternCall printf			-- call C printf

	ldi	*R_USP++, R_LR			-- restore link reg
	b	R_LR				-- return to caller (exit)


hello_msg:
	byte	"Hello World via assembly language\\n", 0


	EndModule				-- note end of module
@


1.1
log
@Initial revision
@
text
@d31 1
a31 1
	byte	"Hello World from the Assembler\\n", 0
@
