head	1.10;
access;
symbols
	Helios1_3:1.10
	Helios13_beta:1.9
	Helios1_2_2:1.7
	Helios1_2_2Beta:1.7
	Helios1_2_1:1.7;
locks; strict;
comment	@# @;


1.10
date	92.08.17.11.20.04;	author paul;	state Exp;
branches;
next	1.9;

1.9
date	92.06.22.11.19.10;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	91.12.04.12.44.49;	author martyn;	state Exp;
branches;
next	1.7;

1.7
date	91.03.21.11.35.14;	author martyn;	state Exp;
branches;
next	1.6;

1.6
date	91.03.15.17.16.18;	author al;	state Exp;
branches;
next	1.5;

1.5
date	91.03.08.15.48.37;	author paul;	state Exp;
branches;
next	1.4;

1.4
date	91.03.07.11.55.55;	author nick;	state Exp;
branches;
next	1.3;

1.3
date	91.03.06.11.51.16;	author martyn;	state Exp;
branches;
next	1.2;

1.2
date	91.03.05.18.55.26;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	91.03.05.18.52.02;	author paul;	state Exp;
branches;
next	;


desc
@@


1.10
log
@rm cppflags
@
text
@#-----------------------------------------------------------------------------
# Helios generic make system - GENERIC COMPONENT MAKEFILE -
#-----------------------------------------------------------------------------
# Helios generic component make rules for: tcpip/devs/in-ether
#
# File: /HSRC/tcpip/devs/in-ether/makefile
#
# These are the host/processor independent rules and variables for this
# component of Helios. It is included by the processor specific makefile
# That may add to some of its functionality. You should only alter this
# makefile by using "ifneq ($(HPROC),YYY)" clauses for a specific processor.
#
# SccsId: %W% %G%
# RcsId: $Id: makefile,v 1.9 1992/06/22 11:19:10 nickc Exp paul $
#		(C) Copyright 1990 Perihelion Software
#
# WARNING: assumes you are using GNUmake.
#-----------------------------------------------------------------------------

ifndef InProcMake
# This part of the makefile is run in the components generic source directory

# The variables HPROC, HHOST, HSRC, and HPROD should already be set by 
# your make script or environment, if not then get local defaults from
# $(HSRC)/makeinc/DFLT.mak. Note that the following pathname cannot use $(HSRC).
ifndef HPROC
include ../../../makeinc/DFLT.mak
endif

.PHONY: notarget
notarget:
	@@$(MAKE) -C $(HPROC)

.DEFAULT:
	@@$(MAKE) -C $(HPROC) $@@

else
#-----------------------------------------------------------------------------
# This part of the makefile is always run in a processor specific subdirectory.

# Manditory variables for a component:
# name of this dir relative to $(HSRC)
COMPONENT = tcpip/devs/in-ether

# Manditory includes
include $(HSRC)/makeinc/$(HHOST).mak	# Default host system variables
include $(HSRC)/makeinc/$(HPROC).mak	# Default processor rules and vars.

# Manditory phoney targets
.PHONY: default clean Xdefault Xclean
# "default"    - should make this component in its proc subdir
# "install"    - copy the new component to $(HPROD) production directory
# "installdef" - If component is a library, make .def file and install in LIB
# "clean"      - remove all intermediate and executable files from proc subdir
# Phoney targets prefixed by X are for adding processor specific targets.
#
# Processor specific sources are held in the processor specific subdir.,
# generic ones in the directory above it.
VPATH := $(HSRC)/$(COMPONENT)

ifdef RSRC
VPATH := $(RSRC)/$(COMPONENT)/$(HPROC):$(HSRC)/$(COMPONENT):$(RSRC)/$(COMPONENT)
endif

#-----------------------------------------------------------------------------
# Generic component make rules and variables added below here

# Note all final generic targets here
TARGETS = in-ether.d b407.b2h #in-ether0.d in-ether1.d in-ether2.d in-ether3.d 


default : $(TARGETS) Xdefault

install	:  $(TARGETS) Xinstall
	$(CP) $(TARGETS) $(LIB)
	$(TOUCH) install

clean	: Xclean
	-$(RM)	$(OBJECTS) in-ether.d $(XOBJECTS) $(XTARGETS) mkout \
		core ../mkout install installdef Xinstall *.o *.p


#-----------------------------------------------------------------------------
# for archive, backup and cleaning purposes,
# note all generic SOURCE and OBJECT files:

# Note all sources
SOURCES		= $(SOURCES.c) $(SOURCES.a) \
		  $(HEADERS.c) $(HEADERS.m) \
		  $(SOURCES.odd)

#Full set of library object files
#OBJECTS		= $(SOURCES.c:.c=.p) $(SOURCES.a:.a=.p)
# Or if you are not a library:
#OBJECTS	= $(SOURCES.c:.c=.o) $(SOURCES.a:.a=.o)

# C source files
SOURCES.c	= b407.c b407dev.c

# AMPP source files
SOURCES.a	= devs.a modend.a

# C header files
HEADERS.c	= b407.h b407dev.h

# AMPP macro files
HEADERS.m	= device.m

# Any other source files
SOURCES.odd	= makefile etherd.mak b407.b2h


#-----------------------------------------------------------------------------
# Other generic component variables:

# Set any flags required
ifeq ($(HPROC),ARM)
  NCFLAGS := $(NCFLAGS)
else
  ifeq ($(HPROC),C40)
    NCFLAGS := $(NCFLAGS) -Ff -zps1 -Zr
  else
    NCFLAGS := $(NCFLAGS) -ps1 -pf0 -r
  endif
endif

# Note any library def files to be linked with
LIBDEFS	:= $(LIB)/kernel.def $(LIB)/syslib.def $(LIB)/util.def $(LIB)/posix.def

ifeq ($(HPROC),C40)
  LINKFLAGS := $(LINKFLAGS)
else
  LINKFLAGS := $(LINKFLAGS) -v -f
endif

#-----------------------------------------------------------------------------
# Generic targets and their dependencies:

# uncomment if you have compiler or makedepend generated dependencies
#include depends

ifdef never
b407dev0.o : b407dev.c
	$(NC) -DB407_LINK0 $(NCFLAGS) $(DEFINES) $< -s$(TEMP)/$*.s
	$(ASM) $(ASMFLAGS) -o $@@ $(TEMP)/$*.s
	-$(RMTEMP) $(TEMP)/$*.s

b407dev1.o : b407dev.c
	$(NC) -DB407_LINK1 $(NCFLAGS) $(DEFINES) $< -s$(TEMP)/$*.s
	$(ASM) $(ASMFLAGS) -o $@@ $(TEMP)/$*.s
	-$(RMTEMP) $(TEMP)/$*.s

b407dev2.o : b407dev.c
	$(NC) -DB407_LINK2 $(NCFLAGS) $(DEFINES) $< -s$(TEMP)/$*.s
	$(ASM) $(ASMFLAGS) -o $@@ $(TEMP)/$*.s
	-$(RMTEMP) $(TEMP)/$*.s

b407dev3.o : b407dev.c
	$(NC) -DB407_LINK3 $(NCFLAGS) $(DEFINES) $< -s$(TEMP)/$*.s
	$(ASM) $(ASMFLAGS) -o $@@ $(TEMP)/$*.s
	-$(RMTEMP) $(TEMP)/$*.s
endif

in-ether.d :	devs.p b407dev.o b407.o modend.p
	$(LINK) $(LINKFLAGS) -n in-ether.d -o $@@ $^ $(LIBDEFS)

ifdef never
in-ether0.d :	devs.p b407dev0.o b407.o modend.p
	$(LINK) $(LINKFLAGS) -n in-ether0.d -o $@@ $^ $(LIBDEFS)

in-ether1.d :	devs.p b407dev1.o b407.o modend.p
	$(LINK) $(LINKFLAGS) -n in-ether1.d -o $@@ $^ $(LIBDEFS)

in-ether2.d :	devs.p b407dev2.o b407.o modend.p
	$(LINK) $(LINKFLAGS) -n in-ether2.d -o $@@ $^ $(LIBDEFS)

in-ether3.d :	devs.p b407dev3.o b407.o modend.p
	$(LINK) $(LINKFLAGS) -n in-ether3.d -o $@@ $^ $(LIBDEFS)
endif
b407.b2h :


#-----------------------------------------------------------------------------
endif #InProcMake	# This line must be at EOF

@


1.9
log
@made to work for C40 !
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.8 1991/12/04 12:44:49 martyn Exp nickc $
d144 1
a144 1
	$(NC) -DB407_LINK0 $(CPPFLAGS) $(NCFLAGS) $(DEFINES) $< -s$(TEMP)/$*.s
d149 1
a149 1
	$(NC) -DB407_LINK1 $(CPPFLAGS) $(NCFLAGS) $(DEFINES) $< -s$(TEMP)/$*.s
d154 1
a154 1
	$(NC) -DB407_LINK2 $(CPPFLAGS) $(NCFLAGS) $(DEFINES) $< -s$(TEMP)/$*.s
d159 1
a159 1
	$(NC) -DB407_LINK3 $(CPPFLAGS) $(NCFLAGS) $(DEFINES) $< -s$(TEMP)/$*.s
@


1.8
log
@remove .o and .p on clean
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.7 1991/03/21 11:35:14 martyn Exp martyn $
d120 5
a124 1
  NCFLAGS := $(NCFLAGS) -ps1 -pf0 -r
d130 5
a134 1
LINKFLAGS := $(LINKFLAGS) -v -f
@


1.7
log
@don't remove b407.b2h when cleaning.
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.6 1991/03/15 17:16:18 al Exp martyn $
d80 1
a80 1
		core ../mkout install installdef Xinstall
@


1.6
log
@devs.p moved to first item in link
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.5 91/03/08 15:48:37 paul Exp Locker: martyn $
d79 1
a79 1
	-$(RM)	$(OBJECTS) $(TARGETS) $(XOBJECTS) $(XTARGETS) mkout \
@


1.5
log
@fixed duplicate device.m - shouldn't this be a std include anyway?
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.4 91/03/07 11:55:55 nick Exp Locker: paul $
d156 1
a156 1
in-ether.d :	b407dev.o devs.p b407.o modend.p
d160 1
a160 1
in-ether0.d :	b407dev0.o devs.p b407.o modend.p
d163 1
a163 1
in-ether1.d :	b407dev1.o devs.p b407.o modend.p
d166 1
a166 1
in-ether2.d :	b407dev2.o devs.p b407.o modend.p
d169 1
a169 1
in-ether3.d :	b407dev3.o devs.p b407.o modend.p
@


1.4
log
@special per-link drivers removed
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.3 91/03/06 11:51:16 martyn Exp Locker: nick $
d110 1
a110 1
SOURCES.odd	= makefile etherd.mak b407.b2h device.m
@


1.3
log
@mistakes in names of SOURCES.odd
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.2 91/03/05 18:55:26 paul Exp Locker: martyn $
d69 1
a69 1
TARGETS = in-ether.d in-ether0.d in-ether1.d in-ether2.d in-ether3.d b407.b2h
d71 1
d134 1
d154 1
d159 1
d171 1
a171 1

@


1.2
log
@*** empty log message ***
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.1 91/03/05 18:52:02 paul Exp Locker: paul $
d109 1
a109 1
SOURCES.odd	= makefile etherd.mak b407.b2u devices.m
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.2 90/10/18 13:12:29 martyn Exp $
d109 1
a109 1
SOURCES.odd	= makefile etherd.mak
@
