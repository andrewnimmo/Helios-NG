head	1.2;
access;
symbols
	Helios_1_3_1:1.1
	Helios_C40_1_3_Official_Release:1.1
	Alenia_release:1.1
	Helios1_3:1.1
	C40_Field_Test_2:1.1
	Helios13_beta:1.1
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1;
locks; strict;
comment	@ * @;


1.2
date	94.03.17.15.01.47;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	91.02.13.13.05.53;	author nick;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fixed compile time warnings
@
text
@/*
 * Copyright (c) 1988 The Regents of the University of California.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms are permitted
 * provided that the above copyright notice and this paragraph are
 * duplicated in all such forms and that any documentation,
 * advertising materials, and other materials related to such
 * distribution and use acknowledge that the software was developed
 * by the University of California, Berkeley.  The name of the
 * University may not be used to endorse or promote products derived
 * from this software without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND WITHOUT ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
 * WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 * static char sccsid[] = "@@(#)logwtmp.c	5.2 (Berkeley) 9/20/88";
 */

#ifdef lint
static char sccsid[] = "@@(#)logwtmp.c	5.2 (Berkeley) 9/22/88";
#endif /* not lint */

#ifdef __HELIOS
void
logwtmp(line, name, host)
	char *line, *name, *host;
{
/*	IOdebug("logwtmp %s %s %s",line,name,host);*/
}

#else

#include <sys/types.h>
#include <sys/file.h>
#include <sys/time.h>
#include <sys/stat.h>
#include <utmp.h>

#define	WTMPFILE	"/usr/adm/wtmp"

static int fd;

logwtmp(line, name, host)
	char *line, *name, *host;
{
	struct utmp ut;
	struct stat buf;
	time_t time();
	char *strncpy();

	if (!fd && (fd = open(WTMPFILE, O_WRONLY|O_APPEND, 0)) < 0)
		return;
	if (!fstat(fd, &buf)) {
		(void)strncpy(ut.ut_line, line, sizeof(ut.ut_line));
		(void)strncpy(ut.ut_name, name, sizeof(ut.ut_name));
		(void)strncpy(ut.ut_host, host, sizeof(ut.ut_host));
		(void)time(&ut.ut_time);
		if (write(fd, (char *)&ut, sizeof(struct utmp)) !=
		    sizeof(struct utmp))
			(void)ftruncate(fd, buf.st_size);
	}
}

#endif
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
#ifndef lint
d25 1
@
