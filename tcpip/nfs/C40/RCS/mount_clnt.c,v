head	1.2;
access;
symbols
	Helios_1_3_1:1.2
	Helios_C40_1_3_Official_Release:1.2
	Alenia_release:1.2;
locks; strict;
comment	@ * @;


1.2
date	92.06.24.08.17.13;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	92.06.23.17.18.05;	author nickc;	state Exp;
branches;
next	;


desc
@NFS source file
,
@


1.2
log
@fixed memset
@
text
@#include <rpc/rpc.h>
#include <sys/time.h>
#include "mount.h"

#ifdef hpux

#ifndef NULL
#define NULL  0
#endif  /* NULL */

#endif /* hpux */

static struct timeval TIMEOUT = { 25, 0 };

void *
mountproc_null_1(argp, clnt)
	void *argp;
	CLIENT *clnt;
{
	static char res;

	memset(&res, 0, sizeof(res));

	if (clnt_call(clnt, MOUNTPROC_NULL, xdr_void, argp, xdr_void, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return ((void *)&res);
}


fhstatus *
mountproc_mnt_1(argp, clnt)
	dirpath *argp;
	CLIENT *clnt;
{
	static fhstatus res;

	memset(&res, 0, sizeof(res));

	if (clnt_call(clnt, MOUNTPROC_MNT, xdr_dirpath, argp, xdr_fhstatus, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&res);
}


mountlist *
mountproc_dump_1(argp, clnt)
	void *argp;
	CLIENT *clnt;
{
	static mountlist res;

	memset(&res, 0, sizeof(res));

	if (clnt_call(clnt, MOUNTPROC_DUMP, xdr_void, argp, xdr_mountlist, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&res);
}


void *
mountproc_umnt_1(argp, clnt)
	dirpath *argp;
	CLIENT *clnt;
{
	static char res;

	memset(&res, 0, sizeof(res));

	if (clnt_call(clnt, MOUNTPROC_UMNT, xdr_dirpath, argp, xdr_void, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return ((void *)&res);
}


void *
mountproc_umntall_1(argp, clnt)
	void *argp;
	CLIENT *clnt;
{
	static char res;

	memset(&res, 0, sizeof(res));

	if (clnt_call(clnt, MOUNTPROC_UMNTALL, xdr_void, argp, xdr_void, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return ((void *)&res);
}


exports *
mountproc_export_1(argp, clnt)
	void *argp;
	CLIENT *clnt;
{
	static exports res;

	memset(&res, 0, sizeof(res));

	if (clnt_call(clnt, MOUNTPROC_EXPORT, xdr_void, argp, xdr_exports, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&res);
}


exports *
mountproc_exportall_1(argp, clnt)
	void *argp;
	CLIENT *clnt;
{
	static exports res;

	memset(&res, 0, sizeof(res));

	if (clnt_call(clnt, MOUNTPROC_EXPORTALL, xdr_void, argp, xdr_exports, &res, TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&res);
}

@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
#endif  NULL
d11 1
a11 1
#endif hpux
a21 1
#ifdef hpux
d23 1
a23 3
#else  hpux
	memset(&res, sizeof(res));
#endif hpux
a37 1
#ifdef hpux
d39 1
a39 3
#else  hpux
	memset(&res, sizeof(res));
#endif hpux
a53 1
#ifdef hpux
d55 1
a55 3
#else  hpux
	memset(&res, sizeof(res));
#endif hpux
a69 1
#ifdef hpux
d71 1
a71 3
#else  hpux
	memset(&res, sizeof(res));
#endif hpux
a85 1
#ifdef hpux
d87 1
a87 3
#else  hpux
	memset(&res, sizeof(res));
#endif hpux
a101 1
#ifdef hpux
d103 1
a103 3
#else  hpux
	memset(&res, sizeof(res));
#endif hpux
a117 1
#ifdef hpux
d119 1
a119 3
#else  hpux
	memset(&res, sizeof(res));
#endif hpux
@
