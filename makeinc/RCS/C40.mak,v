head	1.12;
access;
symbols
	Helios_C40_1_3_Official_Release:1.10
	Alenia_release:1.10
	Helios1_3:1.7
	C40_Field_Test_2:1.7
	C40_Field_Test_R1:1.4
	Helios13_beta:1.4
	Helios1_2_2:1.2;
locks; strict;
comment	@# @;


1.12
date	93.08.04.14.42.44;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	93.07.29.13.23.16;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	92.12.03.11.38.43;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	92.11.20.12.44.52;	author paul;	state Exp;
branches;
next	1.8;

1.8
date	92.11.05.15.53.27;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	92.08.20.08.58.58;	author paul;	state Exp;
branches;
next	1.6;

1.6
date	92.08.05.10.51.32;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	92.07.10.08.39.08;	author paul;	state Exp;
branches;
next	1.4;

1.4
date	92.05.07.16.57.11;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	92.04.21.17.50.54;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	91.10.14.09.29.55;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	91.10.10.15.25.53;	author paul;	state Exp;
branches;
next	;


desc
@first stab at C40 specific master makefile
@


1.12
log
@added another comment
@
text
@#-----------------------------------------------------------------------------
# Helios generic make system - PROCESSOR SPECIFIC MAKEFILE -
#-----------------------------------------------------------------------------
# 'C40 Processor specific *DEFAULT* make rules.
#
# File: /HSRC/makeinc/C40.mak
#
# This file contains definitions of variables and rules with are
# specific to making the 'C40 processor version of Helios.
#
# SccsId: %W% %G%
# RcsId: $Id: C40.mak,v 1.11 1993/07/29 13:23:16 nickc Exp nickc $
#		(C) Copyright 1990 Perihelion Software
#
# WARNING: assumes you are using GNUmake.
#-----------------------------------------------------------------------------

# Default variables:

# Default #defines
# (These should already be produced automatically by your C compiler)
# NCFLAGS := -D__HELIOS -D__HELIOS$(HPROC) -D__$(HPROC)

# to turn off peepholeing use -Zpn1,
# -Zpl1 = few modules ( < 256) used in progs
# -Zpw0 = less than 256K of data used per module
# -Fao  = report used before set variables, and old style K&R fns.
# -Ff   = do not store function names in the code
# -Zps1 = disables stack checking

NCFLAGS := $(NCFLAGS) -D__SMT -Zpl1 -Fao

ifdef SYSDEB
 NCFLAGS := $(NCFLAGS) -DSYSDEB
else
 NCFLAGS := $(NCFLAGS) -Ff
endif

# Default compiler flags:
#
# @@@@@@ assume default SMT
# -wn = don't complain about implicit narrowing casts and reduced precision
# @@@@@@ check what special flags might exist

ifdef RSRC
 NCFLAGS	:= $(NCFLAGS) -I$(RSRC)/$(COMPONENT)/$(HPROC) -I$(RSRC)/$(COMPONENT)
endif

NCFLAGS		:= $(NCFLAGS) -j$(INCLUDE) $(DEFINES)

# Default C Preprocessor flags
CPPFLAGS	:= $(CPPFLAGS)

# Default ampp flags
AMPPFLAGS	:= $(AMPPFLAGS) -dhelios.$(HPROC) 1 -dAUTOLIB 1 -d__SMT 1 -i$(MACRO)/

# if using new (450 series) C40 C compiler then add this to AMPPFLAGS:   -dPCS_3 1

ifdef SYSDEB
 AMPPFLAGS	:= $(AMPPFLAGS) -dSYSDEB 1
endif

# Default assembler flags (-d = disable auto generation of start/end module)
ASMFLAGS	:= $(ASMFLAGS) -d

# Default linker flags
LINKFLAGS	:= $(LINKFLAGS)

#----------------------------------------------------------------------------- 
# Default rules:

.SUFFIXES:
.SUFFIXES: .c .a .s .p .q .o .def .i .t

# File extension defaults:
#
# .c	C source file
# .a	AMPP source file
# .s	ASM intermediate text source file
# .o	Conventional object file
# .p	Library object file (no module header or data init code (-Zl))
# .q	Device Driver object code (no modhdr data/code directives or init (-r))

#----------------------------------------------------------------------------- 
# Rules for compiling C sources

%.o : %.c
	$(NC) $(NCFLAGS) -c $<

# Library modules
%.p : %.c
	$(NC) -zl $(NCFLAGS) -o $*.p -c $<

# Device drivers
%.q : %.c
	$(NC) -zr $(NCFLAGS) -o $*.q -c $<

%.s : %.c
	$(NC) $(NCFLAGS) -S $<


#----------------------------------------------------------------------------- 
# Rules for compiling AMPP sources

%.o : %.a
	$(AMPP) $(AMPPFLAGS) $(MACRO)/basic.m $< > $*.s
	$(ASM) $(ASMFLAGS) -o $*.o $*.s

%.p : %.a
	$(AMPP) $(AMPPFLAGS) $(MACRO)/basic.m $< > $*.s
	$(ASM) $(ASMFLAGS) -o $*.p $*.s

%.q : %.a
	$(AMPP) $(AMPPFLAGS) $(MACRO)/basic.m $< > $*.s
	$(ASM) $(ASMFLAGS) -o $*.q $*.s

%.s : %.a
	$(AMPP) $(AMPPFLAGS) $(MACRO)/basic.m $< > $*.s


#----------------------------------------------------------------------------- 
# Rules for assembling sources

%.o : %.s
	$(ASM) $(ASMFLAGS) -o $*.o $<


#----------------------------------------------------------------------------- 
# Misc rules:

# Making library definition files
define MAKE.DEF
	$(AMPP) -dmake.def 1 $(AMPPFLAGS) $(MACRO)/basic.m $^ > $*.s
	$(ASM) $(ASMFLAGS) -o $@@ $*.s
	$(RMTEMP) $*.s
endef
# 	$(AMPP) -dmake.def 1 $(AMPPFLAGS) $(MACRO)/basic.m $^ \
	$(ASM) $(ASMFLAGS) -o $@@

# linking libraries
LINK.LIBRARY	=	$(LINK) $(LINKFLAGS) -v

# Linking programs
LINK.CPROGRAM	=	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s4000 -h4000 \
				$(CSTART) $^

# Linking C floating point programs
LINK.FPPROGRAM  =	$(LINK) $(LINKFLAGS) -o$@@ -n$@@ -s6000 -h4000 \
				$(CSTART) $(LIB)/fplib.def $^

# Ammp -> Object
# Convert first dependency source file into an object file
define AMPPASM
	$(AMPP) $(AMPPFLAGS) $(MACRO)/basic.m $< > $*.s
	$(ASM) $(ASMFLAGS) -o $*.o $*.s
	$(RMTEMP) $*.s
endef
#	$(AMPP) $(AMPPFLAGS) $(MACRO)/basic.m $< | $(ASM) $(ASMFLAGS) -o $*.o

#------------------------------------------------------------------------------





@


1.11
log
@added comment about 450 series
@
text
@d12 1
a12 1
# RcsId: $Id: C40.mak,v 1.10 1992/12/03 11:38:43 nickc Exp nickc $
d26 1
@


1.10
log
@added feature to suppress function names when not building debugging world
@
text
@d12 1
a12 1
# RcsId: $Id: C40.mak,v 1.9 1992/11/20 12:44:52 paul Exp nickc $
d55 2
@


1.9
log
@updated for new C40 asm -d option
@
text
@d12 1
a12 1
# RcsId: $Id: C40.mak,v 1.8 1992/11/05 15:53:27 nickc Exp $
a28 1
NCFLAGS := $(NCFLAGS) -D__SMT -Zpl1 -Fao # -Ff -Zps1 
d30 2
d34 2
@


1.8
log
@minor cosmetic changes
@
text
@d12 1
a12 1
# RcsId: $Id: C40.mak,v 1.7 1992/08/20 08:58:58 paul Exp nickc $
d57 2
a58 2
# Default assembler flags
ASMFLAGS	:= $(ASMFLAGS)
@


1.7
log
@removed CPPFLAGS
@
text
@d12 1
a12 1
# RcsId: $Id: C40.mak,v 1.6 1992/08/05 10:51:32 paul Exp $
d26 4
a29 2
# -Fao = report used before set variables, and old style K&R fns.
NCFLAGS := $(NCFLAGS) -D__SMT -Zpl1 -Fao
d58 1
a58 1
ASMFLAGS	:=  $(ASMFLAGS)
@


1.6
log
@added pragmas to build - few modules and warn about uninitialised data
@
text
@d12 1
a12 1
# RcsId: $Id: C40.mak,v 1.5 1992/07/10 08:39:08 paul Exp $
d22 1
a22 1
#DEFINES		:= $(DEFINES) -D__HELIOS -D__HELIOS$(HPROC) -D__$(HPROC)
d24 4
a27 2
# to turn off peepholeing use -Zpn1, -Zpl1 = few modules ( < 256) used in progs
DEFINES := $(DEFINES) -D__SMT -Zpl1 -Fao
d30 1
a30 1
 DEFINES := $(DEFINES) -DSYSDEB
d80 1
a80 1
	$(NC) $(CPPFLAGS) $(NCFLAGS) -c $<
d84 1
a84 1
	$(NC) -zl $(CPPFLAGS) $(NCFLAGS) -o $*.p -c $<
d88 1
a88 1
	$(NC) -zr $(CPPFLAGS) $(NCFLAGS) -o $*.q -c $<
d91 1
a91 1
	$(NC) $(CPPFLAGS) $(NCFLAGS) -S $<
@


1.5
log
@added .q rules to build device drivers
@
text
@d12 1
a12 1
# RcsId: $Id: C40.mak,v 1.4 1992/05/07 16:57:11 paul Exp $
d24 2
a25 2
# to turn off peepholeing use -Zpn1
DEFINES := $(DEFINES) -D__SMT
@


1.4
log
@added SYSDEB flag to amppflags
@
text
@d12 1
a12 1
# RcsId: $Id: C40.mak,v 1.3 1992/04/21 17:50:54 paul Exp $
d63 1
a63 1
.SUFFIXES: .c .a .s .p .o .def .i .t
d71 2
a72 1
# .p	Library object file (no module header or data init code)
a80 2
#%.p : %.c (old style)
#	$(NC) -zr $(CPPFLAGS) $(NCFLAGS) -o $*.p -c $<
d84 4
a95 1
#	$(AMPP) $(AMPPFLAGS) $(MACRO)/basic.m $< | $(ASM) $(ASMFLAGS) -o $*.o
a99 1
#	$(AMPP) $(AMPPFLAGS) $(MACRO)/basic.m $< | $(ASM) $(ASMFLAGS) -o $*.p
d102 4
@


1.3
log
@alpha version
@
text
@d12 1
a12 1
# RcsId: $Id: C40.mak,v 1.2 1991/10/14 09:29:55 paul Exp paul $
d48 4
@


1.2
log
@SMT -> __SMT
@
text
@d12 1
a12 1
# RcsId: $Id: C40.mak,v 1.1 1991/10/10 15:25:53 paul Exp $
d24 1
d38 1
a38 1
 NCFLAGS		:= $(NCFLAGS) -I$(RSRC)/$(COMPONENT)/$(HPROC) -I$(RSRC)/$(COMPONENT)
d53 1
a53 1
  LINKFLAGS	:= $(LINKFLAGS)
d89 3
a91 1
	$(AMPP) $(AMPPFLAGS) $(MACRO)/basic.m $< | $(ASM) $(ASMFLAGS) -o $*.o
d94 3
a96 1
	$(AMPP) $(AMPPFLAGS) $(MACRO)/basic.m $< | $(ASM) $(ASMFLAGS) -o $*.p
d114 3
a116 2
	$(AMPP) -dmake.def 1 $(AMPPFLAGS) $(MACRO)/basic.m $^ \
	| $(ASM) $(ASMFLAGS) -o $@@
d118 2
d135 3
a137 2
	$(AMPP) $(AMPPFLAGS) $(MACRO)/basic.m $< \
		| $(ASM) $(ASMFLAGS) -o $*.o
d139 1
d142 5
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
# RcsId: $Id$
a16 2
# define SMT for split module table usage by all cross coding utilities
SMT = 1
a17 1

d24 1
a24 3
ifdef SMT
 DEFINES := $(DEFINES) -DSMT
endif
d46 1
a46 5
ifdef SMT
  AMPPFLAGS	:= $(AMPPFLAGS) -dhelios.$(HPROC) 1 -dAUTOLIB 1 -d__SMT 1 -i$(MACRO)/
else
  AMPPFLAGS	:= $(AMPPFLAGS) -dhelios.$(HPROC) 1 -dAUTOLIB 1 -i$(MACRO)/
endif
a51 1
ifdef SMT
a52 4
else
# -nsmt = *not* smt
  LINKFLAGS	:= $(LINKFLAGS) -nsmt
endif
@
