head	1.12;
access;
symbols
	Helios_C40_1_3_Official_Release:1.11
	Alenia_release:1.10
	Helios1_3:1.10
	C40_Field_Test_2:1.10
	C40_Field_Test_R1:1.4
	Helios13_beta:1.4
	Helios1_2_2:1.3;
locks; strict;
comment	@# @;


1.12
date	93.08.08.21.13.57;	author paul;	state Exp;
branches;
next	1.11;

1.11
date	93.05.10.09.58.47;	author bart;	state Exp;
branches;
next	1.10;

1.10
date	92.09.16.10.31.05;	author paul;	state Exp;
branches;
next	1.9;

1.9
date	92.09.04.16.36.12;	author paul;	state Exp;
branches;
next	1.8;

1.8
date	92.09.01.15.04.21;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	92.08.20.15.15.48;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	92.08.18.08.58.16;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	92.07.08.16.07.46;	author paul;	state Exp;
branches;
next	1.4;

1.4
date	92.04.21.17.51.14;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	91.11.21.11.55.39;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	91.10.11.14.12.24;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	91.10.10.15.25.22;	author paul;	state Exp;
branches;
next	;


desc
@first stab at host specific makefile
@


1.12
log
@fixed for 'c' to support different processors
@
text
@#-----------------------------------------------------------------------------
# Helios generic make system - HOST SPECIFIC MAKEFILE -
#-----------------------------------------------------------------------------
# HPUX/Snake Host system specific *DEFAULT* make rules.
# 
# File: /HSRC/makeinc/HP.mak
#
# This file contains definitions of variables and rules which are
# common to all Helios makefiles, or which need customizing to 
# a particular host. You may tailor to a particular processor via:
# ifeq($(HPROC),XXX) directives. This will allow you for instance, to select
# a particular compiler on this host to create XXX processor binaries.
#
# SccsId: %W% %G%
# RcsId: $Id: HP.mak,v 1.11 1993/05/10 09:58:47 bart Exp paul $
#		(C) Copyright 1990 Perihelion Software
#
# WARNING: assumes you are using GNUmake.
#-----------------------------------------------------------------------------
# Host system directories:

ifndef HHOSTBIN
  HHOSTBIN	= /usr/local/bin## Where to place host utilities e.g. IO Server
endif

TEMP		= /tmp#		# dir for temporary files (/ram, /fifo, etc)


#-----------------------------------------------------------------------------
# Host system commands:

# For optional commands that do not exist, simply replace with dummy:
# e.g. DISASS = -@@echo#

# Native host compiler (used to generate host utilities)
HOSTCC = cc

# Native host compiler flags: ANSI mode, Split module table
# If -DHOSTISBIGENDIAN is not set littleendian is defaulted to.
# @@@@@@ -O causes the disassembler to core dump!
HOSTCFLAGS := $(HOSTCFLAGS) -Aa -DHOSTISBIGENDIAN -D__SMT -D$(HHOST) \
		-D_INCLUDE_HPUX_SOURCE -D_INCLUDE_POSIX_SOURCE \
		-D_INCLUDE_XOPEN_SOURCE -D__$(HPROC) -D__HELIOS$(HPROC)

# Cross C Compiler
ifeq ($(HPROC),TRAN)
  NC		= $(HHOSTBIN)/nc#	# Transputer C compil. on native Helios
else
  ifeq ($(HPROC),ARM)
    NC		= $(HHOSTBIN)/ccarm#	# ARM C compiler on Native Helios
  else
    ifeq ($(HPROC),I860)
      NC	= $(HHOSTBIN)/cci860#	# i860 C compiler on Native Helios
    else
      ifeq ($(HPROC),C40)
        NC	= $(HHOSTBIN)/ccc40#	# 'C40 C compiler on Native Helios
      else 
        ifeq ($(HPROC),68K)
          NC	= $(HHOSTBIN)/cc68k#	# 68K C compiler on Native Helios
        endif
      endif
    endif
  endif
endif

# Cross Compiler Driver, accepting Unix cc syntax
ifeq ($(HPROC),TRAN)
  CC = $(HHOSTBIN)/c#			# Separate compiler driver
else
  ifeq ($(HPROC),ARM)
    CC = $(HHOSTBIN)/c -xarm#		# Built-in compiler driver
  else
    ifeq ($(HPROC),I860)
      CC = $(HHOSTBIN)/cci860#		# @@@@@@ Built-in compiler driver ?
    else
      ifeq ($(HPROC),C40)
        CC = $(HHOSTBIN)/c#		# Separate compiler driver
      else 
        ifeq ($(HPROC),68K)
          CC = $(HHOSTBIN)/c#		# Separate compiler driver
        endif
      endif
    endif
  endif
endif

# Name of Cross linker
ifeq ($(HPROC),TRAN)
  LINK	= $(HHOSTBIN)/asm#
else
  ifeq ($(HPROC),ARM)
    LINK = $(HHOSTBIN)/ldarm#
  else
    ifeq ($(HPROC),I860)
      LINK = $(HHOSTBIN)/ldi860#
    else
      ifeq ($(HPROC),C40)
        LINK = $(HHOSTBIN)/ldc40#
      else
        ifeq ($(HPROC),68K)
          LINK = $(HHOSTBIN)/ldc40#
        endif
      endif
    endif
  endif
endif

# Name of Cross assembler
ifeq ($(HPROC),TRAN)
  ASM = $(HHOSTBIN)/asm#
else
  ifeq ($(HPROC),ARM)
    ASM = $(HHOSTBIN)/asarm#
  else
    ifeq ($(HPROC),I860)
      ASM = $(HHOSTBIN)/asi860#
    else
      ifeq ($(HPROC),C40)
        ASM = $(HHOSTBIN)/asc40#
      else
        ifeq ($(HPROC),68K)
          ASM = $(HHOSTBIN)/asc40#
        endif
      endif
    endif
  endif
endif

# Name of Cross diassembler
ifeq ($(HPROC),TRAN)
  DISASS = -@@echo#
else
  ifeq ($(HPROC),ARM)
    DISASS = $(HHOSTBIN)/disasarm#
  else
    ifeq ($(HPROC),I860)
      DISASS = -@@echo#
    else
      ifeq ($(HPROC),C40)
        DISASS = $(HHOSTBIN)/disasc40#
      else
        ifeq ($(HPROC),68K)
          DISASS = $(HHOSTBIN)/disasc40#
        endif
      endif
    endif
  endif
endif

# Name of object dump program
ifeq ($(HPROC),TRAN)
  OBJDUMP = -@@echo#
else
  ifeq ($(HPROC),ARM)
    OBJDUMP = $(HHOSTBIN)/objdumparm#
  else
    ifeq ($(HPROC),I860)
      OBJDUMP = $(HHOSTBIN)/objdumpi860#
    else
      ifeq ($(HPROC),C40)
        OBJDUMP = $(HHOSTBIN)/objdumpc40#
      else
        ifeq ($(HPROC),68K)
          OBJDUMP = $(HHOSTBIN)/objdumpc40#
        endif
      endif
    endif
  endif
endif

TCP	= /bin/cp#			# text file copy
RMTEMP	= /bin/rm#			# remove temporary files
CP	= /bin/cp#			# binary file copy
CAT	= /bin/cat#			# text file cat (create using default protect.)
OBJED	= $(HHOSTBIN)/objed#		# object editor
AMPP	= $(HHOSTBIN)/ampp#		# macro preprocessor
RM	= /bin/rm -f#			# file remover
MKDIR	= /bin/mkdir#			# directory creator
CHMOD	= /bin/chmod#			# chmod (if applicable)
SYSBUILD = $(HHOSTBIN)/sysbuild		# nucleus image builder
TOUCH	= /bin/touch#			# update file modification time
CPP     = /bin/cc -E -C -P -Aa		# stand-alone C pre-processor


#-----------------------------------------------------------------------------
# Generic variables and rules for making Helios
#
# No changes should be necessary beyond this point
#
#-----------------------------------------------------------------------------
# Directories where things will be found...

INCLUDE	= $(HSRC)/include#	# standard include directory
NUCLEUS	= $(HSRC)/nucleus#	# nucleus source directory
KERNEL	= $(HSRC)/kernel#	# kernel source directory
UTIL	= $(HSRC)/util#		# util source directory
POSIX	= $(HSRC)/posix#	# posix source directory
CLIB	= $(HSRC)/cmds/cc/clib#	# C library source directory
FPLIB	= $(HSRC)/fplib#	# floating point library source directory
FAULT	= $(HSRC)/fault#	# fault library source directory
TCPIP	= $(HSRC)/tcpip#	# tcp/ip source directory
MACRO	= $(INCLUDE)/ampp#	# AMPP macro files
HINCLUDE = $(HSRC)/include/abcARM/asm#	# hobjasm include files
CMDS	= $(HSRC)/cmds#		# Commands directory

BIN	= $(HPROD)/bin#		# production binaries
LIB	= $(HPROD)/lib#		# production libraries
ETC	= $(HPROD)/etc#		# production etc directory
TMP	= $(HPROD)/tmp#		# production temp directory

CSTART  = $(LIB)/cstart.o#	# Standard C runtime init. object file

NULL	= /dev/null		# Bit bucket

#-----------------------------------------------------------------------------
# Following two variables are NOT USED at present
# OEMDIR should be set from command line or environment, if not make a
# suitable default here
# *OEM source distribution directory*
ifndef OEMDIR
OEMDIR		= /hsrc/oemdir#
endif

# same for BACKUPDIR
# *BACKUP system directory*
ifndef BACKUPDIR
BACKUPDIR	= /hsrc/backup#
endif


#-----------------------------------------------------------------------------
# Rule to make native objects.
# This will be overlayed if processor specific rules are included later

.SUFFIXES: .o .c

%.o: %.c
	$(HOSTCC) $(HOSTCFLAGS) -c $<

#-----------------------------------------------------------------------------
# Default rules

firstrule: default	# default in user makefile is always first rule


# Standard backup target

tar:
	cd ..; rm -f $(notdir $(COMPONENT)).tar ; tar chf $(notdir $(COMPONENT)).tar *

srcnames:
	@@echo $(foreach FILE, $(XSOURCES), $(COMPONENT)/$(HPROC)/$(FILE)) \
	$(foreach FILE, $(SOURCES), $(COMPONENT)/$(FILE)) >> $(HSRC)/backedupsrcs

#-----------------------------------------------------------------------------
# disable RCS extraction

% :: %,v

% :: RCS/%,v
@


1.11
log
@added rules for building 698K world
@
text
@d15 1
a15 1
# RcsId: $Id: HP.mak,v 1.10 1992/09/16 10:31:05 paul Exp bart $
d71 1
a71 1
    CC = $(HHOSTBIN)/ccarm#		# Built-in compiler driver
d203 1
@


1.10
log
@stopped confusion between host and native command names by adding path to
host commands name.
@
text
@d15 1
a15 1
# RcsId: $Id: HP.mak,v 1.9 1992/09/04 16:36:12 paul Exp paul $
d57 4
d78 4
d98 5
a102 1
      LINK = $(HHOSTBIN)/ldc40#
d120 4
d141 4
d162 4
a259 1

@


1.9
log
@removed -O opt flag from HOSTCFLAGS as it causes the disassembler to core dump
@
text
@d15 1
a15 1
# RcsId: $Id: HP.mak,v 1.8 1992/09/01 15:04:21 nickc Exp $
d47 1
a47 1
  NC		= nc#			# Transputer C compil. on native Helios
d50 1
a50 1
    NC		= ccarm#		# ARM C compiler on Native Helios
d53 1
a53 1
      NC	= cci860#		# i860 C compiler on Native Helios
d56 1
a56 1
        NC	= ccc40#		# 'C40 C compiler on Native Helios
d64 1
a64 1
  CC = c#			# Separate compiler driver
d67 1
a67 1
    CC = ccarm#		# Built-in compiler driver
d70 1
a70 1
      CC = cci860#		# @@@@@@ Built-in compiler driver ?
d73 1
a73 1
        CC = c#			# Separate compiler driver
d81 1
a81 1
  LINK	= asm#
d84 1
a84 1
    LINK = ldarm#
d87 1
a87 1
      LINK = ldi860#
d90 1
a90 1
      LINK = ldc40#
d98 1
a98 1
  ASM = asm#
d101 1
a101 1
    ASM = asarm#
d104 1
a104 1
      ASM = asi860#
d107 1
a107 1
        ASM = asc40#
d118 1
a118 1
    DISASS = disasarm#
d124 1
a124 1
        DISASS = disasc40#
d135 1
a135 1
    OBJDUMP = objdumparm#
d138 1
a138 1
      OBJDUMP = objdumpi860#
d141 1
a141 1
        OBJDUMP = objdumpc40#
d147 12
a158 12
TCP	= cp#			# text file copy
RMTEMP	= rm#			# remove temporary files
CP	= cp#			# binary file copy
CAT	= cat#			# text file cat (create using default protect.)
OBJED	= objed#		# object editor
AMPP	= ampp#			# macro preprocessor
RM	= rm -f#		# file remover
MKDIR	= mkdir#		# directory creator
CHMOD	= chmod#		# chmod (if applicable)
SYSBUILD = sysbuild#		# nucleus image builder
TOUCH	= touch#		# update file modification time
CPP      = cc -E -C -P -Aa	# stand-alone C pre-processor
@


1.8
log
@added -O to cc command line
@
text
@d15 1
a15 1
# RcsId: $Id: HP.mak,v 1.7 1992/08/20 15:15:48 nickc Exp nickc $
d40 2
a41 1
HOSTCFLAGS := $(HOSTCFLAGS) -Aa -O -DHOSTISBIGENDIAN -D__SMT -D$(HHOST) \
@


1.7
log
@changed compiler driver for C40 to be c not ccc40
@
text
@d15 1
a15 1
# RcsId: $Id: HP.mak,v 1.6 1992/08/18 08:58:16 paul Exp nickc $
d40 1
a40 1
HOSTCFLAGS := $(HOSTCFLAGS) -Aa -DHOSTISBIGENDIAN -D__SMT -D$(HHOST) \
@


1.6
log
@fixed for new arm assembler name
@
text
@d15 1
a15 1
# RcsId: $Id: HP.mak,v 1.5 1992/07/08 16:07:46 paul Exp $
d72 1
a72 1
        CC = ccc40#		# Built-in compiler driver
@


1.5
log
@added __PROC and __HELIOSPROC names to HOSTCFLAGS
@
text
@d15 1
a15 1
# RcsId: $Id: HP.mak,v 1.4 1992/04/21 17:51:14 paul Exp paul $
d100 1
a100 2
#    ASM = asarm#
    ASM = as#
d149 1
@


1.4
log
@alpha release
@
text
@d15 1
a15 1
# RcsId: $Id: HP.mak,v 1.3 1991/11/21 11:55:39 paul Exp $
d42 1
a42 1
		-D_INCLUDE_XOPEN_SOURCE
@


1.3
log
@added -DHHOST to HOSTCFLAGS
@
text
@d15 1
a15 1
# RcsId: $Id: HP.mak,v 1.2 1991/10/11 14:12:24 paul Exp $
d40 3
a42 1
HOSTCFLAGS := $(HOSTCFLAGS) -Aa -DHOSTISBIGENDIAN -D__SMT -D($HHOST)
d49 1
a49 1
    NC		= nccarm#		# ARM C compiler on Native Helios
d52 1
a52 1
      NC	= ncci860#		# i860 C compiler on Native Helios
d55 1
a55 1
        NC	= nccc40#		# 'C40 C compiler on Native Helios
d63 1
a63 1
  CC		= c#			# Separate compiler driver
d66 1
a66 1
    CC		= nccarm#		# Built-in compiler driver
d69 1
a69 1
      CC	= ncci860#		# @@@@@@ Built-in compiler driver ?
d72 1
a72 1
        NC	= nccc40#		# @@@@@@ Built-in compiler driver ?
d83 1
a83 1
    LINK = armlink#
d86 1
a86 1
      LINK = i860link#
d89 1
a89 1
      LINK = c40link#
d100 1
a100 1
#    ASM = armas#
d104 1
a104 1
      ASM = i860as#
d107 1
a107 1
        ASM	= c40as#
d118 1
a118 1
    DISASS = armdisas#
d124 1
a124 1
        DISASS = c40disas
d135 1
a135 1
    OBJDUMP = armobjdump#
d138 1
a138 1
      OBJDUMP = i860objdump#
d141 1
a141 1
        OBJDUMP = c40objdump#
d157 1
a157 2
#LIBCPP  = /lib/cpp#		# stand-alone C pre-processor
LIBCPP  = cc -E -C -P -Aac	# stand-alone C pre-processor
@


1.2
log
@added -D__SMT and renamed objdump -> c40objdump
@
text
@d15 1
a15 1
# RcsId: $Id: HP.mak,v 1.1 1991/10/10 15:25:22 paul Exp paul $
d40 1
a40 1
HOSTCFLAGS := $(HOSTCFLAGS) -Aa -DHOSTISBIGENDIAN -D__SMT
d155 2
a156 1
LIBCPP  = /lib/cpp#		# stand-alone C pre-processor
d211 1
a211 1
	$(HOSTCC) $(HOSTCFLAGS) -D$(HHOST) -c $<
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
# RcsId: $Id$
d38 3
a40 2
# Native host compiler flags: ANSI mode
HOSTCFLAGS := $(HOSTCFLAGS) -Aa -DHOSTISBIGENDIAN
d133 1
a133 1
    OBJDUMP = objdump#
d136 1
a136 1
      OBJDUMP = objdump#
d139 1
a139 1
        OBJDUMP = objdump#
@
