head	1.2;
access;
symbols;
locks; strict;
comment	@# @;


1.2
date	95.08.04.11.14.03;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	95.05.19.11.36.18;	author nickc;	state Exp;
branches;
next	;


desc
@NMAKE based makefile for DOS builds
@


1.2
log
@Switched over to Watcom make, as Microsoft make is incompatible with the Watcom linker
@
text
@TRANSRC   = ..\tran
MIPSRC    = ..\mip
CFESRC    = ..\cfe

CC        = wcc386
CFLAGS    = -d2 -i=$(TRANSRC) -i=$(MIPSRC) -i=$(CFESRC) -i=$(OPTS) -dHOST_IS_DOS -dCXXCOMMENTS -dCC450 -dTARGET_IS_TRAN
GHF	  = -s -b

.c: $(CFESRC);$(TRANSRC);$(MIPSRC)

.c.obj:
	$(CC) -fo=$@@ $(CFLAGS) $<

OBJ_MIP =   aetree.obj bind.obj builtin.obj compiler.obj fname.obj ieeeflt.obj misc.obj store.obj version.obj

OBJ_CFE =   lex.obj pp.obj sem.obj simplify.obj syn.obj vargen.obj

OBJ_TRAN =  cg.obj cg1.obj cg2.obj emit.obj optimise.obj preparse.obj showcode.obj stubs.obj debug.obj

HELIOS_C    = $(OBJ_MIP) $(OBJ_CFE) $(OBJ_TRAN)

default: version cc_mac.exe

version: .SYMBOLIC
	-rm -f version.obj

cc_mac.exe:      $(HELIOS_C)
	wlink @@link.at

clean: .SYMBLOIC
	rm -f *.obj 

@


1.1
log
@Initial revision
@
text
@d1 3
a4 43
#          /********* r140make for Norcroft C Compiler ********/
#          /* Note: dependencies are automatically generated  */
#          /* by "make depend".  Sources which have changed   */
#          /* on the remote host are copied across.           */
#          /* "make converge" makes a new compiler using the  */
#          /* most recently made compiler, and checks that    */
#          /* resulting executable is the same (apart from    */
#          /* link timestamp == around byte 93).              */
#          /***************************************************/


#          /***************************************************/
#          /*                                                 */
#          /*    Set r140make flags                           */
#          /*                                                 */
#          /***************************************************/

{..\mip}.c{}.obj:
#	$(CC) $(CFLAGS) -c $< -o $*.o
	$(CC) $(CFLAGS) $< 

{..\cfe}.c{}.obj:
#	$(CC) $(CFLAGS) -c $< -o $*.o
	$(CC) $(CFLAGS) $<

{..\tran}.c{}.obj:
#	$(CC) $(CFLAGS) -c $< -o $*.o
	$(CC) $(CFLAGS) $<

{}.c{}.s:
#	$(CC) -v -S $(CFLAGS) -c $< -o $*.s
	$(CC) -v -S $(CFLAGS) $<

RELEASE   = tcc
DESTDIR   = $(LOCAL)\obj
SCRIPT    = rm -f version.obj

LOCAL     = ..
TRANSRC    = $(LOCAL)\tran
MIPSRC    = $(LOCAL)\mip
CFESRC    = $(LOCAL)\cfe
OPTS      = .
VPATH     = ..\tran:..\cfe:..\mip:.
d6 1
a6 3
CFLAGS    = -d2 -i=$(TRANSRC) -i=$(MIPSRC) -i=$(CFESRC) -i=$(OPTS) \
		-dHOST_IS_DOS -dCXXCOMMENTS \
		-dCC450 -dTARGET_IS_TRAN
d9 1
a9 59
SRC_MIP =   aetree.c \
	    bind.c \
	    builtin.c \
	    compiler.c \
	    fname.c \
	    ieeeflt.c \
	    misc.c \
	    store.c \
	    version.c

OBJ_MIP =   aetree.obj \
	    bind.obj \
	    builtin.obj \
	    compiler.obj \
	    fname.obj \
	    ieeeflt.obj \
	    misc.obj \
	    store.obj \
	    version.obj

SRC_CFE =   lex.c \
	    pp.c \
	    sem.c \
	    simplify.c \
	    syn.c \
	    vargen.c

OBJ_CFE =   lex.obj \
	    pp.obj \
	    sem.obj \
	    simplify.obj \
	    syn.obj \
	    vargen.obj

SRC_TRAN =  cg.c \
	    cg1.c \
	    cg2.c \
	    emit.c \
	    optimise.c \
	    preparse.c \
	    showcode.c \
	    stubs.c \
	    debug.c

OBJ_TRAN =  cg.obj \
	    cg1.obj \
	    cg2.obj \
	    emit.obj \
	    optimise.obj \
	    preparse.obj \
	    showcode.obj \
	    stubs.obj \
	    debug.obj

SOURCES = $(SRC_MIP) $(SRC_CFE) $(SRC_TRAN)

HDRFILES = \
    assert.h ctype.h errno.h float.h limits.h locale.h math.h setjmp.h \
    signal.h stdarg.h stddef.h stdio.h stdlib.h string.h time.h
d11 6
a16 1
HELIOS_C    = $(OBJ_MIP) $(OBJ_CFE) $(OBJ_TRAN)
d18 1
d20 1
a20 5
#          /***************************************************/
#          /*                                                 */
#          /*    Define r140make commands                     */
#          /*                                                 */
#          /***************************************************/
d24 1
a24 1
version:
a26 12
sources:  $(SOURCES)

all:      script $(RELEASE)

clean:
	  rm -f *.obj 

install:  #$(RELEASE)
	  cp cc_mac.exe c:\bin\new.ncc

#	  cp $(RELEASE) $(DESTDIR)

d30 2
a31 63
headers: $(OPTS)\headers.c

script:
	  $(SCRIPT)

genhdrs:	$(LOCAL)\util\genhdrs.c
		$(CC) $(CFLAGS) -o genhdrs $(LOCAL)\util\genhdrs.c

$(OPTS)\headers.c:	$(MIPSRC)\miperrs.h $(TRANSRC)\mcerrs.h \
                $(CFESRC)\feerrs.h genhdrs
		genhdrs $(GHF) -o $(OPTS)\headers.c \
		-e $(OPTS)\errors.h -q $(MIPSRC)\miperrs.h \
		-q $(CFESRC)\feerrs.h -q $(TRANSRC)\mcerrs.h \
		-i= $(LOCAL)\clib\ $(HDRFILES)

$(OPTS)\errors.h:	$(OPTS)\headers.c
		touch $(OPTS)\errors.h

#          /***************************************************/
#          /*                                                 */
#          /*    Define r140make dependencies                 */
#          /*                                                 */
#          /***************************************************/

depend:
#	  for j in $(ARMSRC)\*.[ch]; do \
#	      echo $$j :  $(REMOTE)a\rm\`basename $$j` >> makedep ;\
#	      echo -n '	cp -i= $(REMOTE)/arm/' >> makedep ;\
#	      echo `basename $$j` $$j  >> makedep; \
#          done
#	  for j in $(MIPSRC)/*.[ch]; do \
#	      echo $$j :  $(REMOTE)/mip/`basename $$j` >> makedep ;\
#	      echo -n '	cp -i= $(REMOTE)/mip/' >> makedep ;\
#	      echo `basename $$j` $$j  >> makedep; \
#	  done
#	  for j in $(CFESRC)/*.[ch]; do \
#	      echo $$j :  $(REMOTE)/cfe/`basename $$j` >> makedep ;\
#	      echo -n '	cp -i= $(REMOTE)/cfe/' >> makedep ;\
#	      echo `basename $$j` $$j  >> makedep; \
#	  done
#	  for j in $(OPTS)/*.[ch]; do \
#	      echo $$j :  $(REMOTE)/cchelios/`basename $$j` >> makedep ;\
#	      echo -n '	cp  $(REMOTE)/cchelios/' >> makedep ;\
#	      echo `basename $$j` $$j  >> makedep; \
#	  done
	  for i in $(SOURCES); do \
	      $(CC) -M $(CFLAGS) $$i | \
	      awk ' { if ($$1 != prev) \
		  { if (rec != "") print rec; rec = $$0; prev = $$1; } \
		  else { if (length(rec $$2) > 78) { print rec; rec = $$0; } \
		  else rec = rec " " $$2 } } \
		  END { print rec } ' >> makedep; done
	  echo '/^# DO NOT DELETE THIS LINE/+2,$$d' >eddep
	  echo '$$r makedep' >>eddep
	  echo 'w' >>eddep
	  cp r140make r140make.bak
	  ed - r140make < eddep
	  rm eddep makedep
	  echo '# DEPENDENCIES MUST END AT END OF FILE' >> r140make
	  echo '# IF YOU PUT STUFF HERE IT WILL GO AWAY' >> r140make
	  echo '# see make depend above' >> r140make

# DO NOT DELETE THIS LINE -- make depend uses it
@
