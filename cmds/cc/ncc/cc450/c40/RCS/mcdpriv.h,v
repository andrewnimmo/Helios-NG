head	1.24;
access;
symbols
	beta_release:1.13;
locks; strict;
comment	@ * @;


1.24
date	93.07.22.10.06.06;	author nickc;	state Exp;
branches;
next	1.23;

1.23
date	93.07.09.10.50.41;	author nickc;	state Exp;
branches;
next	1.22;

1.22
date	93.07.07.10.21.03;	author nickc;	state Exp;
branches;
next	1.21;

1.21
date	93.07.06.14.16.57;	author nickc;	state Exp;
branches;
next	1.20;

1.20
date	93.04.28.10.08.17;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	93.03.18.16.22.41;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	92.11.30.15.42.26;	author nickc;	state Exp;
branches;
next	1.17;

1.17
date	92.10.07.14.43.35;	author nickc;	state Exp;
branches;
next	1.16;

1.16
date	92.09.04.08.42.17;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	92.07.29.13.03.05;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	92.07.14.17.51.24;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	92.06.19.11.21.14;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	92.06.05.11.44.38;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	92.05.14.11.20.05;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	92.05.14.10.28.54;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	92.05.14.09.57.59;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	92.05.13.17.28.42;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	92.05.13.14.26.00;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	91.12.11.16.00.55;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	91.10.01.10.45.35;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	91.08.29.17.12.39;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	91.08.29.15.42.06;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	91.08.29.15.31.05;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	91.08.22.14.58.57;	author nickc;	state Exp;
branches;
next	;


desc
@C40 back end private header
@


1.24
log
@improved xref macros
@
text
@
/*
 * C compiler file mcdpriv.h :  Copyright (C) Codemist Ltd
 * (Private interfaces within machine-dependent back end).
 * version 1
 *
 * Modified by Nicholas Clifton
 *
 * Copyright (c) 1992 Perihelion Software Ltd.
 *  All Rights Reserved.
 *
 * RCS Id: $Id: mcdpriv.h,v 1.23 1993/07/09 10:50:41 nickc Exp nickc $
 */

#ifndef __mcdpriv_h
#define __mcdpriv_h 1

#include "xrefs.h"	/* for ExtRef */
#include "jopcode.h"	/* for J_OPCODE */

/* exported functions */

/* from gen.c: */
extern int32		hardware_register( 		RealRegister r );
extern bool		is_C40_float_register(		RealRegister );
extern RealRegister	real_register(			int32 );
extern int32		build_op(			int32, int32, RealRegister, int32 );
extern void		move_register(			RealRegister, RealRegister, bool, bool );
extern void		ipush(				RealRegister );
extern void		ipop(				RealRegister );
extern void		fpush(				RealRegister );
extern void		dpush(				RealRegister );
extern bool		fpliteral(			FloatCon * val, J_OPCODE op );
extern void		correct_stack(			bool );
extern void		load_static_data_ptr(		RealRegister r, bool iscode, Symstr * symbol );
extern bool		is_function(			Symstr * );
extern void		prepare_for_initialisation(	int data_init, LabelNumber * data_label );
extern void		prepare_for_function_exporting( void );
extern void		export_function(		Symstr * name, RealRegister dest );
extern void		prepare_for_data_exporting(	RealRegister );
extern void		prepare_for_block_copying(	LabelNumber * );
extern void		block_copy_data(		int32 num_words_to_cpoy );
extern void		store_data_value(		unsigned32 value );
extern void		export_data_symbol(		Symstr *, int32, unsigned32 );
extern void		finished_exporting(		void );
extern RealRegister	local_base(			Binder * );
extern int32		local_address(			Binder * );
extern void		setlabel(			LabelNumber * );
extern bool		target_isaddrreg(		RealRegister );
extern bool		immed_cmp(			int32 );
extern void         	show_instruction(		J_OPCODE op, VRegInt r1, VRegInt r2, VRegInt m );
extern void		branch_round_literals(		LabelNumber * );
extern void		mcdep_init(			void );
extern void		localcg_tidy(			void );
extern void		localcg_reinit(			void );

/* from asm.c: */
#ifdef __HELIOS
#pragma -v1
extern void		asmf( 				const char * format, ... );
#pragma -v0
#else
extern void		asmf( 				const char * format, ... ); 
#endif
extern signed long	mask_and_sign_extend_word(	unsigned long, unsigned long );
extern void		decode_instruction(		int32, bool );
extern void		display_assembly_code(		Symstr * );
extern void		asm_header(			void );
extern void		asm_trailer(			void );

/* from heliobj.c */
extern void	  	request_new_stub(		Symstr * );
extern void	  	request_addr_stub(		Symstr * );
extern void		obj_codewrite(			Symstr * );
extern void		request_stub(			Symstr * );
extern int32		obj_symref(			Symstr *, int, int32 );
extern void		obj_init(			void );
extern void		obj_header(			void );
extern void		obj_makestubs(			void );
extern void		obj_trailer(			void );
extern int32		IEEE_to_single_float( 		int32 );
extern int32		IEEE_to_extended_float(		int32, unsigned32, int32 * );

/* from mcdep.c */
extern void		config_init(			void );
extern bool		mcdep_config_option(		char, char tail[] );
extern char *		file_name(			FILE * );


#ifdef __HELIOS
#pragma -v1
#endif

/* from peep.c */
extern void		debug(				const char *, ... );

#ifdef __HELIOS
#pragma -v0
#endif

#ifdef TARGET_HAS_DEBUGGER

/* from debug.c: */
extern void		db_init( 			char * );
extern void		db_tidy(			void );
extern void 		debugger_add_line(		int32 );
extern void		debugger_end_of_function(	void );      
extern LabelNumber *	debugger_filenamelabel(		char * );
extern void		debugger_end_of_function(	void );
extern VoidStar		dbg_notefileline(		FileLine );
extern void		dbg_locvar(			Binder *, FileLine, bool );
extern void		dbg_proc(			Symstr *, TypeExpr *, bool, FileLine );
extern void		dbg_type(			Symstr *, TypeExpr * );
extern void		dbg_topvar(			Symstr *, int32, TypeExpr *, bool, FileLine );
extern void		dbg_init(			void );
extern void		debugger_add_line(		int32 );
extern void		dbg_enterproc(			void );
extern void		dbg_locvar1(			Binder * );
extern bool		dbg_scope(			BindListList *, BindListList * );
extern void		dbg_xendproc(			FileLine );

#endif /* TARGET_HAS_DEBUGGER */

/* other: */
extern unsigned32	abs(				int32 );


/* variables */

/* in heliobj.c */
extern FILE *		objstream;
extern ExtRef *		obj_symlist;
extern CodeXref *	codexrefs;
extern int 		suppress_module;
extern ExtRef *		datasymbols;
extern LabelNumber *	exporting_routines;

/* in asm.c */
extern FILE *		asmstream;
extern Symstr *		sym_reladdr;

/* in gen.c */

#ifdef TARGET_HAS_DEBUGGER
extern int32 		saved_regs_offsets[ MAXREGNUMBER + 1 ];
#endif

/* in mcdep.c */
extern bool    		in_stubs;
extern int		split_module_table;
extern int32		config;

/* in debug.c */
extern int    		usrdbgmask;
extern char		dbg_name[ 4 ];
extern Symstr *		current_proc;
extern LabelNumber *	proc_label;

/* macros */

#define annotations 			  (feature & FEATURE_ANNOTATE)
#define new_stubs			(!(feature & FEATURE_OLD_STUBS))

#define xr_definition			(xr_defloc | xr_defext)
#define xr_external_code		(xr_code   | xr_defext)

#define extflags_( x )			((x)->extflags)
#define extsym_( x )			((x)->extsym)
#define extcdr_( x )			((x)->extcdr)
#define extoffset_( x )			((x)->extoffset)

#define is_defined( x )			 (extflags_(x) & xr_definition)
#define is_defined_( flags )		 ((flags)      & xr_definition)
#define is_code( x )			 (extflags_(x) & xr_code)
#define is_code_( flags )		 ((flags)      & xr_code)
#define is_data( x )			 (extflags_(x) & xr_data)
#define is_external_code( x )		((extflags_(x) & xr_external_code) == xr_external_code)
#define is_local( x )			 (extflags_(x) & xr_defloc)
#define is_global( x )			 (extflags_(x) & xr_defext)
#define is_bss( x )			 (extflags_(x) & xr_bss)

#define fits_in_5_bits_signed( val )	(((val) & 0xfffffff0U) == 0 || ((val) & 0xfffffff0U) == 0xfffffff0U)
#define fits_in_8_bits_signed( val )	(((val) & 0xffffff80U) == 0 || ((val) & 0xffffff80U) == 0xffffff80U)
#define fits_in_8_bits_unsigned( val )	(((val) & 0xffffff00U) == 0 )
#define fits_in_16_bits_signed( val )	(((val) & 0xffff8000U) == 0 || ((val) & 0xffff8000U) == 0xffff8000U)
#define fits_in_16_bits_unsigned( val )	(((val) & 0xffff0000U) == 0 )
#define fits_in_24_bits_signed( val )	(((val) & 0xff800000U) == 0 || ((val) & 0xff800000U) == 0xff800000U)

#ifdef __HELIOS
#define use( x )	x = x
#else
#define use( x )
#endif

/* constants */

#ifndef TRUE
#define TRUE 	1U
#define FALSE 	0U
#endif

/* addressing modes for forw. refs. */

#define LABREF_OFF16    0x00000000
#define LABREF_OFF24    0x01000000
#define LABREF_LIT16    0x02000000
#define LABREF_LIT8     0x03000000
#define LABREF_ABS32    0x04000000
#define LABREF_NONE	0x05000000	/* used by peep hole type changer */


#define build_indirect( mode, reg, disp )	\
	((((mode) & 0x1fU) << 11) | ((hardware_register( reg ) & 0x7UL) << 8) | ((disp) & 0xffU))

/*
 * NB/ for triadic addressing use the build_indirect macro
 */

#define build_parallel_indirect( mode_or_disp, reg )	\
	((((mode_or_disp) & 0x1f) << 3) | (hardware_register( reg ) & 0x7))

#define INDIRECT_PRE_ADD	    B_00000 /*  *+AR(x)                 addr = ARn + x                        */
#define INDIRECT_PRE_SUB	    B_00001 /*  *-AR(x)	                addr = ARn - x                        */
#define INDIRECT_PRE_INCR	    B_00010 /*  *++AR(x)    ARn += x,   addr = ARn                            */
#define INDIRECT_PRE_DECR	    B_00011 /*  *--AR(x)    ARn -= x,   addr = ARn                            */
#define INDIRECT_POST_INCR	    B_00100 /*  *AR++(x)                addr = ARn,      ARn += x             */
#define INDIRECT_POST_DECR	    B_00101 /*  *AR--(x)                addr = ARn,      ARn -= x             */
#define INDIRECT_POST_INCR_CIRC	    B_00110 /*  *AR++(x)%               addr = ARn,      ARn += x, ARn %= BK  */
#define INDIRECT_POST_DECR_CIRC	    B_00111 /*  *AR--(x)%               addr = ARn,      ARn -= x, ARn %= BK  */
#define INDIRECT_PRE_ADD_IR0	    B_01000 /*  *+AR(IR0)               addr = ARn + IR0                      */
#define INDIRECT_PRE_SUB_IR0	    B_01001 /*  *-AR(IR0)               addr = ARn - IR0                      */
#define INDIRECT_PRE_INCR_IR0	    B_01010 /*  *++AR(IR0)  ARn += IR0, addr = ARn                            */
#define INDIRECT_PRE_DECR_IR0	    B_01011 /*  *--AR(IR0)  ARn -= IR0, addr = ARn                            */
#define INDIRECT_POST_INCR_IR0	    B_01100 /*  *AR++(IR0)              addr = ARn,      ARn += IR0           */
#define INDIRECT_POST_DECR_IR0	    B_01101 /*  *AR--(IR0)	        addr = ARn,      ARn -= IR0           */
#define INDIRECT_POST_INCR_CIRC_IR0 B_01110 /*  *AR++(IR0)%             addr = ARn,      ARn += IR0, ARn %= BK*/
#define INDIRECT_POST_DECR_CIRC_IR0 B_01111 /*  *AR--(IR0)%             addr = ARn,      ARn -= IR0, ARn %= BK*/
#define INDIRECT_PRE_ADD_IR1	    B_10000 /*  *+AR(IR1)               addr = ARn + IR1                      */
#define INDIRECT_PRE_SUB_IR1	    B_10001 /*  *-AR(IR1)               addr = ARn - IR1                      */
#define INDIRECT_PRE_INCR_IR1	    B_10010 /*  *++AR(IR1)  ARn += IR1, addr = ARn                            */
#define INDIRECT_PRE_DECR_IR1	    B_10011 /*  *--AR(IR1)  ARn -= IR1, addr = ARn                            */
#define INDIRECT_POST_INCR_IR1	    B_10100 /*  *AR++(IR1)              addr = ARn,      ARn += IR1           */
#define INDIRECT_POST_DECR_IR1	    B_10101 /*  *AR--(IR1)              addr = ARn,      ARn -= IR1           */
#define INDIRECT_POST_INCR_CIRC_IR1 B_10110 /*  *AR++(IR1)%             addr = ARn,      ARn += IR1, ARn %= BK*/
#define INDIRECT_POST_DECR_CIRC_IR1 B_10111 /*  *AR--(IR1)%             addr = ARn,      ARn -= IR1, ARn %= BK*/

#define INDIRECT_REL		    B_11000 /*  *AR	                 addr = ARn                           */
#define INDIRECT_POST_INCR_BITR	    B_11001 /*  *AR++(IR0)B	         addr = ARn,      ARn = B( ARn + IR0 )*/

#endif /* __mcdpriv_h */
@


1.23
log
@added extra parameter to move_register
@
text
@d12 1
a12 1
 * RCS Id: $Id: mcdpriv.h,v 1.22 1993/07/07 10:21:03 nickc Exp nickc $
d166 15
a180 9
#define is_defined( x )			 ((x)->extflags & xr_definition)
#define is_defined_( flags )		 ((flags)       & xr_definition)
#define is_code( x )			 ((x)->extflags & xr_code)
#define is_code_( flags )		 ((flags)       & xr_code)
#define is_data( x )			 ((x)->extflags & xr_data)
#define is_external_code( x )		(((x)->extflags & xr_external_code) == xr_external_code)
#define is_local( x )			 ((x)->extflags & xr_defloc)
#define is_global( x )			 ((x)->extflags & xr_defext)
#define is_bss( x )			 ((x)->extflags & xr_bss)
@


1.22
log
@fixed type of saved_regs_offset
@
text
@d12 1
a12 1
 * RCS Id: $Id: mcdpriv.h,v 1.21 1993/07/06 14:16:57 nickc Exp nickc $
d28 1
a28 1
extern void		move_register(			RealRegister, RealRegister, bool );
@


1.21
log
@upgraded to match new revision of compiler
@
text
@d12 1
a12 1
 * RCS Id: $Id: mcdpriv.h,v 1.20 1993/04/28 10:08:17 nickc Exp nickc $
d145 1
a145 1
extern int 		saved_regs_offsets[ MAXREGNUMBER + 1 ];
d207 1
a207 1
	((((mode) & 0x1fU) << 11) | ((hardware_register( reg ) & 0x7) << 8) | ((disp) & 0xffU))
@


1.20
log
@added declaration of (debugger used) saved_regs_offsets table
@
text
@d12 1
a12 1
 * RCS Id: $Id: mcdpriv.h,v 1.21 1993/04/28 10:05:17 nickc Exp $
a133 1
extern DataXref *	dataxrefs;
@


1.19
log
@changed prototype for dbg_locvar() [indiactes if var is narrowed]
@
text
@d12 1
a12 1
 * RCS Id: $Id: mcdpriv.h,v 1.20 1993/03/18 16:22:12 nickc Exp $
d144 4
@


1.18
log
@*** empty log message ***
@
text
@d12 1
a12 1
 * RCS Id: $Id: mcdpriv.h,v 1.19 1992/11/06 16:56:56 nickc Exp $
d111 1
a111 1
extern void		dbg_locvar(			Binder *, FileLine );
@


1.17
log
@added prototype for request_addr_stub()
@
text
@d12 1
a12 1
 * RCS Id: $Id: mcdpriv.h,v 1.18 1992/10/02 13:17:40 nickc Exp $
d137 1
@


1.16
log
@changed globalise() to request_new_stub()
@
text
@d12 1
a12 1
 * RCS Id: $Id: mcdpriv.h,v 1.16 1992/09/03 16:59:43 nickc Exp nickc $
d73 1
@


1.15
log
@fixed compile time warnings
@
text
@d12 1
a12 1
 * RCS Id: $Id: mcdpriv.h,v 1.15 1992/07/27 16:30:59 nickc Exp $
d72 1
@


1.14
log
@added option to revert to old style stubs
@
text
@d12 1
a12 1
 * RCS Id: $Id: mcdpriv.h,v 1.14 1992/07/13 08:57:47 nickc Exp $
d85 1
d87 1
d106 1
a106 1
extern LabelNumber *	debuuger_filenamelabel(		char * );
d177 5
@


1.13
log
@added asmf() and debug()
@
text
@d12 1
a12 1
 * RCS Id: $Id: mcdpriv.h,v 1.12 1992/06/05 11:44:38 nickc Exp nickc $
d153 2
a154 1
#define annotations 			(feature & FEATURE_ANNOTATE)
@


1.12
log
@removed reduced_addresibility
@
text
@d12 1
a12 1
 * RCS Id: $Id: mcdpriv.h,v 1.11 1992/05/14 11:20:05 nickc Exp nickc $
d58 7
d85 11
@


1.11
log
@minor cosmetic changes
@
text
@d12 1
a12 1
 * RCS Id: $Id: mcdpriv.h,v 1.10 1992/05/14 10:28:54 nickc Exp nickc $
a123 1
extern bool		reduced_addresibility;
@


1.10
log
@improved ExtRef macros
@
text
@d12 1
a12 1
 * RCS Id: $Id: mcdpriv.h,v 1.9 1992/05/14 09:57:59 nickc Exp nickc $
a20 5
#ifndef TRUE
#define TRUE 	1U
#define FALSE 	0U
#endif

d114 1
d158 6
@


1.9
log
@added new macro
@
text
@d12 1
a12 1
 * RCS Id: $Id: mcdpriv.h,v 1.8 1992/05/13 17:28:42 nickc Exp nickc $
d144 9
a152 6
#define is_defined( flags )		((flags)   & xr_definition)
#define is_code( flags )		((flags)   & xr_code)
#define is_data( flags )		((flags)   & xr_data)
#define is_external_code( flags )	(((flags)  & xr_external_code) == xr_external_code)
#define is_local( flags )		((flags)   & xr_defloc)
#define is_global( flags )		((flags)   & xr_defext)
@


1.8
log
@added another prototype
@
text
@d12 1
a12 1
 * RCS Id: $Id: mcdpriv.h,v 1.7 1992/05/13 14:26:00 nickc Exp nickc $
d149 1
@


1.7
log
@extended to act as global header file for the machine depenedent back end
@
text
@d12 1
a12 1
 * RCS Id: $Id$
d106 3
@


1.6
log
@minor cosmetic changes
@
text
@d6 7
d18 3
d26 1
a26 1
#ifdef TARGET_HAS_DEBUGGER
d28 55
a82 1
extern int32 	local_fpaddress( int32 p );
d84 1
a84 10
  /* p is the bindaddr field from a binder for a local object.  Returns the
   * offset of the object from the fp (assuming that fp and sp have not been
   * split in the frame containing the object ...).
   */

extern void 	dbg_writedebug( void );

  /* Call from the object formatter to the debug table generator to
   * cause tables to be output
   */
d86 18
a103 1
extern void 	obj_writedebug( void *, size_t );
a106 7
extern int32 	handler_offset; /* ?? */
extern char *	source_name;    /* ?? */
extern int32 	asm_ptr;
extern int32 	asm_getdisp( void );
extern int32 	asm_getval( int32 len );
extern int32 	obj_link( Symstr * name, int flags );
extern int32 	to32016sex( int32 w, int32 flags );
d108 1
a108 10
#ifdef USE_PIPELINE

/* START OF PIPELINE ALLOCATOR */

/*
 * The following are used to pass on register user information to the
 * machine-dependent peepholer.  In due course one could imagine
 * all sorts of information about the hardware resources involved in
 * instructions being provided here.
 */
d110 43
a152 36
/* An instruction can read at most four registers (eg double-precision add),
   including one of the condition-code pseudo registers, and can write at
   most two.
  
   We adopt the following arbitrary conventions ...
   1. R_CC appears in the reg2_ field if it is used
   2. R_IP is occasionally 'added in' to the read registers. reg4_ is used
*/

#define R_MASK          0x7f
#define R_CC		64	/* A fake for condition codes */
#define R_FCC		65	/* A fake for float condition codes */

#define reads_( r1, r2, r3, r4) (((((((r1) << 7) | (r2)) <<  7) | (r3)) << 7) | (r4))
#define writes_( r1, r2, op )     (((((r1) << 7) | (r2)) << 14) | (op))

#define reg1_( a ) 	(((a) >> 21) & R_MASK)
#define reg2_( a ) 	(((a) >> 14) & R_MASK)
#define reg3_( a ) 	(((a) >>  7) & R_MASK)
#define reg4_( a ) 	((a) & R_MASK)
#define opclass_( a ) 	((a) & R_MASK)

/* the following may not all be required - check sometime */

#define set_reg1_( a, r ) a = ((a) & ~reads_( R_MASK, 0, 0, 0 )) | reads_( (r), 0, 0, 0 )
#define set_reg2_( a, r ) a = ((a) & ~reads_( 0, R_MASK, 0, 0 )) | reads_( 0, (r), 0, 0 )
#define set_reg3_( a, r ) a = ((a) & ~reads_( 0, 0, R_MASK, 0 )) | reads_( 0, 0, (r), 0 )
#define set_reg4_( a, r ) a = ((a) & ~reads_( 0, 0, 0, R_MASK )) | reads_( 0, 0, 0, (r) )

#define OP_NULL		0
#define OP_DELAY	1
#define OP_LOAD		2
#define OP_STORE	4
#define OP_FLOAT	8
#define OP_FLUSH       16	/* flush peepholer before and after */
#define OP_SPECIAL     32	/* funny one-off cases */
a153 1
#endif /* USE_PIPELINE */
d176 24
a199 24
#define INDIRECT_PRE_ADD	     B_00000 /*  *+AR()                  addr = ARn + disp                       */
#define INDIRECT_PRE_SUB	     B_00001 /*  *-AR()	                 addr = ARn - disp                       */
#define INDIRECT_PRE_INCR	     B_00010 /*  *++AR()    ARn += disp, addr = ARn                              */
#define INDIRECT_PRE_DECR	     B_00011 /*  *--AR()    ARn -= disp, addr = ARn                              */
#define INDIRECT_POST_INCR	     B_00100 /*  *AR++()                 addr = ARn,      ARn += disp            */
#define INDIRECT_POST_DECR	     B_00101 /*  *AR--()                 addr = ARn,      ARn -= disp            */
#define INDIRECT_POST_INCR_CIRC	     B_00110 /*  *AR++()%                addr = ARn,      ARn += disp, ARn %= BK */
#define INDIRECT_POST_DECR_CIRC	     B_00111 /*  *AR--()%                addr = ARn,      ARn -= disp, ARn %= BK */
#define INDIRECT_PRE_ADD_IR0	     B_01000 /*  *+AR(IR0)               addr = ARn + IR0                        */
#define INDIRECT_PRE_SUB_IR0	     B_01001 /*  *-AR(IR0)               addr = ARn - IR0                        */
#define INDIRECT_PRE_INCR_IR0	     B_01010 /*  *++AR(IR0)  ARn += IR0, addr = ARn                              */
#define INDIRECT_PRE_DECR_IR0	     B_01011 /*  *--AR(IR0)  ARn -= IR0, addr = ARn                              */
#define INDIRECT_POST_INCR_IR0	     B_01100 /*  *AR++(IR0)              addr = ARn,      ARn += IR0             */
#define INDIRECT_POST_DECR_IR0	     B_01101 /*  *AR--(IR0)	         addr = ARn,      ARn -= IR0             */
#define INDIRECT_POST_INCR_CIRC_IR0  B_01110 /*  *AR++(IR0)%             addr = ARn,      ARn += IR0, ARn %= BK  */
#define INDIRECT_POST_DECR_CIRC_IR0  B_01111 /*  *AR--(IR0)%             addr = ARn,      ARn -= IR0, ARn %= BK  */
#define INDIRECT_PRE_ADD_IR1	     B_10000 /*  *+AR(IR1)               addr = ARn + IR1                        */
#define INDIRECT_PRE_SUB_IR1	     B_10001 /*  *-AR(IR1)               addr = ARn - IR1                        */
#define INDIRECT_PRE_INCR_IR1	     B_10010 /*  *++AR(IR1)  ARn += IR1, addr = ARn                              */
#define INDIRECT_PRE_DECR_IR1	     B_10011 /*  *--AR(IR1)  ARn -= IR1, addr = ARn                              */
#define INDIRECT_POST_INCR_IR1	     B_10100 /*  *AR++(IR1)              addr = ARn,      ARn += IR1             */
#define INDIRECT_POST_DECR_IR1	     B_10101 /*  *AR--(IR1)              addr = ARn,      ARn -= IR1             */
#define INDIRECT_POST_INCR_CIRC_IR1  B_10110 /*  *AR++(IR1)%             addr = ARn,      ARn += IR1, ARn %= BK  */
#define INDIRECT_POST_DECR_CIRC_IR1  B_10111 /*  *AR--(IR1)%             addr = ARn,      ARn -= IR1, ARn %= BK  */
d201 2
a202 2
#define INDIRECT_REL		     B_11000 /*  *AR	                 addr = ARn                              */
#define INDIRECT_POST_INCR_BITR	     B_11001 /*  *AR++(IR0)B	         addr = ARn,      ARn = B( ARn + IR0 )   */
@


1.5
log
@minor cosmetic changes
@
text
@d12 2
a13 2
#define TRUE 	1
#define FALSE 	0
d105 1
a105 1
	((((mode) & 0x1f) << 11) | ((hardware_register( reg ) & 0x7) << 8) | ((disp) & 0xff))
@


1.4
log
@changed LABREF_LITHI16 to LABREF_LIT8
@
text
@d101 1
d114 24
a137 24
#define INDIRECT_PRE_ADD		B_00000	/*  *+AR() 	             address = ARn + disp                       */
#define INDIRECT_PRE_SUB		B_00001	/*  *-AR()	             address = ARn - disp                       */
#define INDIRECT_PRE_INCR		B_00010	/*  *++AR()	ARn += disp, address = ARn                              */
#define INDIRECT_PRE_DECR		B_00011	/*  *--AR()	ARn -= disp, address = ARn                              */
#define INDIRECT_POST_INCR		B_00100	/*  *AR++()	             address = ARn,      ARn += disp            */
#define INDIRECT_POST_DECR		B_00101	/*  *AR--()	             address = ARn,      ARn -= disp            */
#define INDIRECT_POST_INCR_CIRC		B_00110	/*  *AR++()%	             address = ARn,      ARn += disp, ARn %= BK */
#define INDIRECT_POST_DECR_CIRC		B_00111	/*  *AR--()%	             address = ARn,      ARn -= disp, ARn %= BK */
#define INDIRECT_PRE_ADD_IR0		B_01000	/*  *+AR(IR0)	             address = ARn + IR0                        */
#define INDIRECT_PRE_SUB_IR0		B_01001	/*  *-AR(IR0)	             address = ARn - IR0                        */
#define INDIRECT_PRE_INCR_IR0		B_01010	/*  *++AR(IR0)	 ARn += IR0, address = ARn                              */
#define INDIRECT_PRE_DECR_IR0		B_01011	/*  *--AR(IR0)	 ARn -= IR0, address = ARn                              */
#define INDIRECT_POST_INCR_IR0		B_01100	/*  *AR++(IR0)	             address = ARn,      ARn += IR0             */
#define INDIRECT_POST_DECR_IR0		B_01101	/*  *AR--(IR0)	             address = ARn,      ARn -= IR0             */
#define INDIRECT_POST_INCR_CIRC_IR0	B_01110	/*  *AR++(IR0)%	             address = ARn,      ARn += IR0, ARn %= BK  */
#define INDIRECT_POST_DECR_CIRC_IR0	B_01111	/*  *AR--(IR0)%	             address = ARn,      ARn -= IR0, ARn %= BK  */
#define INDIRECT_PRE_ADD_IR1		B_10000 /*  *+AR(IR1)                address = ARn + IR1                        */
#define INDIRECT_PRE_SUB_IR1		B_10001 /*  *-AR(IR1)                address = ARn - IR1                        */
#define INDIRECT_PRE_INCR_IR1		B_10010 /*  *++AR(IR1)   ARn += IR1, address = ARn                              */
#define INDIRECT_PRE_DECR_IR1		B_10011 /*  *--AR(IR1)   ARn -= IR1, address = ARn                              */
#define INDIRECT_POST_INCR_IR1		B_10100 /*  *AR++(IR1)               address = ARn,      ARn += IR1             */
#define INDIRECT_POST_DECR_IR1		B_10101 /*  *AR--(IR1)               address = ARn,      ARn -= IR1             */
#define INDIRECT_POST_INCR_CIRC_IR1	B_10110 /*  *AR++(IR1)%              address = ARn,      ARn += IR1, ARn %= BK  */
#define INDIRECT_POST_DECR_CIRC_IR1	B_10111 /*  *AR--(IR1)%              address = ARn,      ARn -= IR1, ARn %= BK  */
d139 2
a140 2
#define INDIRECT_REL			B_11000	/*  *AR		             address = ARn                              */
#define INDIRECT_POST_INCR_BITR		B_11001	/*  *AR++(IR0)B	             address = ARn,      ARn = B( ARn + IR0 )   */
@


1.3
log
@added LABREF_ABS32
@
text
@d99 1
a99 1
#define LABREF_LITHI16  0x03000000
@


1.2
log
@added LABREF_LITHI16 to load the 16 high bits of an address
@
text
@d100 1
@


1.1
log
@Initial revision
@
text
@d96 4
a99 3
#define LABREF_OFF16  0x00000000
#define LABREF_OFF24  0x01000000
#define LABREF_LIT16  0x02000000
@
