head	1.24;
access;
symbols
	Helios_1_3_1:1.23
	Helios_C40_1_3_Official_Release:1.21
	Alenia_release:1.21
	Helios1_3:1.21
	C40_Field_Test_2:1.21
	C40_Field_Test_R1:1.19
	Helios13_beta:1.19
	Helios1_2_2:1.15
	Helios1_2_2Beta:1.15
	Helios1_2_1:1.15
	Helios1_2:1.12
	V1_2Beta0:1.5;
locks; strict;
comment	@# @;


1.24
date	93.12.08.17.32.25;	author nickc;	state Exp;
branches;
next	1.23;

1.23
date	93.08.11.13.36.23;	author bart;	state Exp;
branches;
next	1.22;

1.22
date	93.08.08.13.40.11;	author paul;	state Exp;
branches;
next	1.21;

1.21
date	92.09.16.11.21.05;	author paul;	state Exp;
branches;
next	1.20;

1.20
date	92.08.18.09.51.54;	author paul;	state Exp;
branches;
next	1.19;

1.19
date	92.06.16.14.31.50;	author nickc;	state Exp;
branches;
next	1.18;

1.18
date	92.04.08.08.59.27;	author paul;	state Exp;
branches;
next	1.17;

1.17
date	92.02.05.10.48.13;	author paul;	state Exp;
branches;
next	1.16;

1.16
date	91.12.02.14.57.59;	author martyn;	state Exp;
branches;
next	1.15;

1.15
date	91.03.05.18.47.53;	author paul;	state Exp;
branches;
next	1.14;

1.14
date	91.02.14.21.59.36;	author paul;	state Exp;
branches;
next	1.13;

1.13
date	91.01.22.12.53.22;	author paul;	state Exp;
branches;
next	1.12;

1.12
date	90.11.05.20.56.30;	author paul;	state Exp;
branches;
next	1.11;

1.11
date	90.10.31.13.00.02;	author paul;	state Exp;
branches;
next	1.10;

1.10
date	90.10.30.10.44.21;	author paul;	state Exp;
branches;
next	1.9;

1.9
date	90.10.22.11.26.14;	author paul;	state Exp;
branches;
next	1.8;

1.8
date	90.10.22.11.25.31;	author nick;	state Exp;
branches;
next	1.7;

1.7
date	90.10.02.15.22.52;	author paul;	state Exp;
branches;
next	1.6;

1.6
date	90.09.25.20.47.37;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	90.09.13.16.56.39;	author nick;	state Exp;
branches;
next	1.4;

1.4
date	90.09.12.11.25.32;	author nick;	state Exp;
branches;
next	1.3;

1.3
date	90.09.07.13.13.20;	author nick;	state Exp;
branches;
next	1.2;

1.2
date	90.09.07.12.50.59;	author nick;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.13.47.44;	author nick;	state Exp;
branches;
next	;


desc
@@


1.24
log
@fixed for ARM6 builds
@
text
@#-----------------------------------------------------------------------------
# Helios generic make system
#-----------------------------------------------------------------------------
# Helios generic component make rules for: C Language Support Library
#
# File: /HSRC/cmds/cc/clib/makefile
#
# These are the host/processor independent rules and variables for this
# component of Helios. It is included by the processor specific makefile
# That may add to some of its functionality. You should only alter this
# makefile by using "ifneq ($(HPROC),YYY)" clauses for a specific processor.
#
# SccsId: %W% %G%
# RcsId: $Id: makefile,v 1.23 1993/08/11 13:36:23 bart Exp nickc $
#		(C) Copyright 1990 Perihelion Software
#
# WARNING: assumes you are using GNUmake.
#-----------------------------------------------------------------------------

ifndef InProcMake
# This part of the makefile is run in the components generic source directory

  # These variables should already be set by your make script or environment.
  ifndef HPROC
    HPROC = TRAN
  endif

  ifndef HHOST
    HHOST = SUN4
  endif

  ifndef HSRC
    HSRC = /usr/perihelion/Helios
  endif

  ifndef HPROD
    HPROD = $(HSRC)/slashhelios/$(HPROC)
  endif

.PHONY: notarget
notarget:
	@@$(MAKE) -C $(HPROC)

.DEFAULT:
	@@$(MAKE) -C $(HPROC) $@@

else
#-----------------------------------------------------------------------------
# This part of the makefile is always run in a processor specific subdirectory.

# Manditory variables for a component:
# name of this dir relative to $(HSRC)
COMPONENT = cmds/cc/clib

# Manditory includes
include $(HSRC)/makeinc/$(HHOST).mak	# Default host system variables
include $(HSRC)/makeinc/$(HPROC).mak	# Default processor rules and vars.

# Manditory phoney targets
.PHONY: default clean Xdefault Xclean
# "default"    - should make this component in its proc subdir
# "install"    - copy the new component to $(HPROD) production directory
# "installdef" - If component is a library, make .def file and install in LIB
# "clean"      - remove all intermediate and executable files from proc subdir
# Phoney targets prefixed by X are for adding processor specific targets.
#
# Processor specific sources are held in the processor specific subdir.,
# generic ones in the directory above it.
HVPATH := $(HSRC)/$(COMPONENT)

ifdef RSRC
HVPATH := $(HSRC)/$(COMPONENT)/$(HPROC):$(RSRC)/$(COMPONENT)/$(HPROC):$(HSRC)/$(COMPONENT):/$(RSRC)/$(COMPONENT)
endif

vpath %.h $(HVPATH)
vpath %.a $(HVPATH)
vpath %.c $(HVPATH)


#-----------------------------------------------------------------------------
# Generic component make rules and variables added below here

# Note all final generic targets here
TARGETS = clib.def c0.o cstart.o clib.i

default: $(TARGETS) Xdefault

install: installdef $(TARGETS) Xinstall
ifeq ($(HLICENSEE),ABC)
	sysstrip clib.i -o$(LIB)/Clib
else
	$(CP) clib.i $(LIB)/Clib
endif
	$(TOUCH) install


installdef: $(LIB)/clib.def $(LIB)/c0.o $(LIB)/cstart.o
	$(TOUCH) installdef


$(LIB)/clib.def : clib.def
ifeq (HELIOS,$(findstring HELIOS,$(HHOST))) #csh default on Helios hosts
	(cmp $^ $@@ ; if ( $$status ) cp $^ $@@ )
else
	@@ if cmp $^ $@@; then echo "$^ not changed"; else $(CP) $^ $@@ ;fi
endif

$(LIB)/cstart.o : cstart.o
ifeq (HELIOS,$(findstring HELIOS,$(HHOST))) #csh default on Helios hosts
	(cmp $^ $@@ ; if ( $$status ) cp $^ $@@ )
else
	@@ if cmp $^ $@@; then echo "$^ not changed"; else $(CP) $^ $@@ ;fi
endif

$(LIB)/c0.o : c0.o
ifeq (HELIOS,$(findstring HELIOS,$(HHOST))) #csh default on Helios hosts
	(cmp $^ $@@ ; if ( $$status ) cp $^ $@@ )
else
	@@ if cmp $^ $@@; then echo "$^ not changed"; else $(CP) $^ $@@ ;fi
endif


clean	: Xclean
	-$(RM)	$(OBJECTS) $(TARGETS) $(XOBJECTS) $(XTARGETS) mkout \
		core ../mkout install installdef Xinstall

#-----------------------------------------------------------------------------
# for archive, backup and cleaning purposes,
# note all generic SOURCE and OBJECT files:

# Note all sources
SOURCES		= $(SOURCES.c) $(SOURCES.a) \
		   $(HEADERS.c) $(HEADERS.m) \
		   $(SOURCES.odd)

# C source files
SOURCES.c	= stdio.c ctype.c string.c printf.c fpprintf.c \
		scanf.c stdlib.c sort.c alloc.c time.c error.c \
		locale.c posixsys.c

# AMPP source files
SOURCES.a	= clibstar.a cstart.a modend.a

# C header files
HEADERS.c	= sysdep.h norcrosys.h fplib.h

# AMPP macro files
HEADERS.m	=

# Any other source files
SOURCES.odd	= makefile


#-----------------------------------------------------------------------------
# Other generic component variables:

# Set any flags required
#	Possible flags: -DSTACKEXTENSION (requires stackchecking)
ifeq ($(HPROC),TRAN)
  NCFLAGS := $(NCFLAGS) -ps1 -dT800 -t4 -dPOSIX -DBYTESEX_EVEN
endif
ifeq ($(HPROC),C40)
# -Zpw1 = little data < 64k static data optimisation
# -Zps1 = no stack checks
  NCFLAGS := $(NCFLAGS) -Zpw1 -dPOSIX -DBYTESEX_EVEN -DSTACKEXTENSION
endif
ifeq ($(HPROC),ARM)
# -Zt = tiny memory model
  NCFLAGS := $(NCFLAGS) -dPOSIX -DBYTESEX_EVEN -Zt
endif
ifeq ($(HPROC),ARM6)
  NCFLAGS := $(NCFLAGS) -dPOSIX -DBYTESEX_EVEN -Zt
endif

# Note any library def files to be linked with
LIBDEFS	:= $(LIB)/kernel.def $(LIB)/syslib.def $(LIB)/posix.def $(LIB)/util.def

ifeq ($(HPROC),TRAN)
  LIBDEFS := $(LIBDEFS) $(LIB)/fplib.def
endif

#-----------------------------------------------------------------------------
# Generic targets and their dependencies:

OBJECTS = clibstar.p stdio.p ctype.p string.p printf.p fpprintf.p \
	scanf.p stdlib.p sort.p alloc.p time.p error.p \
	locale.p posixsys.p $(XOBJECTS)	modend.p

$(OBJECTS): sysdep.h norcrosys.h

# Posix C library
clib.i: $(OBJECTS) $(LIBDEFS)
	$(LINK.LIBRARY) -nClib $^ -oclib.i
#	cp clib.i /lib/clib

clib.def : clibstar.a
	$(MAKE.DEF)


ifeq ($(HPROC),TRAN)
cstart.o: c0.o
	asm -p -o cstart.o		\
		$(LIB)/c0.o		\
		$(LIB)/kernel.def	\
		$(LIB)/syslib.def	\
		$(LIB)/util.def		\
		$(LIB)/clib.def		\
		$(LIB)/fplib.def	\
		$(LIB)/posix.def

c0.o	: cstart.p
	$(CP) cstart.p c0.o

#pctest : pctest.c
#	$(CC) -t4 -j$(INCLUDE)/ pctest.c -s$(FIFO)/x
#	$(ASM) -v -f -npctest $(LIB)/cstart.o $(FIFO)/x -opctest
#	$(CP) pctest $(BIN)

else
# c0.o is actual C startup object code, cstart.o is object + lib resrefs
c0.o : cstart.a
	$(AMPPASM)

cstart.o: c0.o clib.def $(LIBDEFS)
	cat $^ > cstart.o

pctest : pctest.c
	$(NCC) -c pctest.c
	$(LINK) -npctest $(LIB)/cstart.o -opctest pctest.o
	$(CP) pctest $(BIN)
endif


#-----------------------------------------------------------------------------
endif #InProcMake	# This line must be at EOF
@


1.23
log
@1) remote source support now works
2) Added -DSTACKEXTENSION for C40 version
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.21 1992/09/16 11:21:05 paul Exp $
d169 3
@


1.22
log
@fixed for arm
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.21 1992/09/16 11:21:05 paul Exp paul $
d69 1
a69 1
VPATH := $(HSRC)/$(COMPONENT):$(FPLIB)
d71 9
d158 1
d165 1
a165 1
    NCFLAGS := $(NCFLAGS) -Zpw1 -dPOSIX -DBYTESEX_EVEN
d169 1
a169 1
    NCFLAGS := $(NCFLAGS) -dPOSIX -DBYTESEX_EVEN -Zt
@


1.21
log
@fixed for new ARM build
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.20 1992/08/18 09:51:54 paul Exp paul $
d151 2
a152 2
else
  ifeq ($(HPROC),C40)
d156 4
a159 3
  else
    NCFLAGS := $(NCFLAGS) -dPOSIX -DBYTESEX_EVEN
  endif
@


1.20
log
@added the little data pragme to the cc flags
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.19 1992/06/16 14:31:50 nickc Exp paul $
d80 1
a80 1
ifeq ($(HPROC),ARM)
@


1.19
log
@improved rules slightly
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.18 1992/04/08 08:59:27 paul Exp nickc $
d149 2
a150 2
ifeq ($(HPROC),ARM)
  NCFLAGS := $(NCFLAGS) -Zps1 -dPOSIX -DBYTESEX_EVEN
d153 3
a155 1
    NCFLAGS := $(NCFLAGS) -Zps1 -dPOSIX -DBYTESEX_EVEN
d157 1
a157 1
    NCFLAGS := $(NCFLAGS) -ps1 -dT800 -t4 -dPOSIX -DBYTESEX_EVEN
@


1.18
log
@minor tweeks
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.17 1992/02/05 10:48:13 paul Exp $
d96 1
a96 1
	if cmp $^ $@@; then echo "$^ not changed"; else $(CP) $^ $@@ ;fi
d103 1
a103 1
	if cmp $^ $@@; then echo "$^ not changed"; else $(CP) $^ $@@ ;fi
d110 1
a110 1
	if cmp $^ $@@; then echo "$^ not changed"; else $(CP) $^ $@@ ;fi
@


1.17
log
@c40 changes
/
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.16 1991/12/02 14:57:59 martyn Exp $
d77 1
a78 3
default : $(TARGETS) Xdefault


a168 3
# uncomment if you have compiler or makedepend generated dependencies
#include depends

d171 1
a171 1
	locale.p posixsys.p modend.p
@


1.16
log
@finally removed ORION
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.15 1991/03/05 18:47:53 paul Exp martyn $
d154 5
a158 1
  NCFLAGS := $(NCFLAGS) -ps1 -dT800 -t4 -dPOSIX -DBYTESEX_EVEN
d165 1
a165 1
LIBDEFS := $(LIBDEFS) $(LIB)/fplib.def
@


1.15
log
@fixed installdef
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.14 91/02/14 21:59:36 paul Exp Locker: paul $
d29 1
a29 1
    HHOST = ORION
@


1.14
log
@removed -DNEWSIGNALS and added -o to sysstrip
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.13 91/01/22 12:53:22 paul Exp $
d75 1
a75 5
ifneq ($(HPROC),TRAN)
  TARGETS = clib.def c0.o cstart.o clib.i
else
  TARGETS = clib.def c0.o clib.i
endif
d77 1
d81 1
a81 1
install	: installdef $(TARGETS) Xinstall
d90 1
a90 5
ifneq ($(HPROC),TRAN)
installdef: $(LIB)/clib.def $(LIB)/cstart.o $(LIB)/c0.o
else
installdef: $(LIB)/clib.def $(LIB)/c0.o
endif
a100 1
ifneq ($(HPROC),TRAN)
d102 1
a102 1
  ifeq (HELIOS,$(findstring HELIOS,$(HHOST))) #csh default on Helios hosts
d104 1
a104 1
  else
a105 1
  endif
d184 21
a204 1
ifeq ($(HPROC),ARM)
a215 38

else

#cstart.p : cstart.a clib.def $(KERNEL)/kernel.def $(LIB)/posix.def \
#	$(NUCLEUS)/syslib.def $(UTIL)/util.def
#	$(AMPP) -o$(FIFO)/x -i$(KINCLUDE)/ $(KINCLUDE)/basic.m cstart.a
#	$(ASM) -p -ocstart.p $(FIFO)/x \
#	$(KERNEL)/kernel.def \
#	$(NUCLEUS)/syslib.def \
#	$(UTIL)/util.def \
#	$(LIB)/posix.def \
#	clib.def 
#	$(CP) cstart.p $(LIB)/cstart.o

c0.o	: cstart.p
	$(CP) cstart.p c0.o

#libc	: $(KERNEL)/kernel.def $(NUCLEUS)/syslib.def $(UTIL)/util.def \
#	../fault/fault.def \
#	  $(POSIX)/posix.def clib.def $(FPLIB)/fplib.def $(FPLIB)/fpclib.def 
#	$(ASM) -p -olibc \
#	$(FPLIB)/fpclib.def \
#	$(FPLIB)/fplib.def \
#	clib.def \
#	../fault/fault.def \
#	$(POSIX)/posix.def \
#	$(NUCLEUS)/servlib.def \
#	$(NUCLEUS)/syslib.def \
#	$(UTIL)/util.def \
#	$(KERNEL)/kernel.def 
#	$(CP) libc $(LIB)	


#pctest : pctest.c
#	$(CC) -t4 -j$(INCLUDE)/ pctest.c -s$(FIFO)/x
#	$(ASM) -v -f -npctest $(LIB)/cstart.o $(FIFO)/x -opctest
#	$(CP) pctest $(BIN)

@


1.13
log
@sysstrip for ARM version to allow boot time patching of individual nucleus
items (constructs ram based nucleus RPTR table).
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.12 90/11/05 20:56:30 paul Exp $
d86 1
a86 1
	sysstrip clib.i $(LIB)/Clib
d161 1
a161 1
  NCFLAGS := $(NCFLAGS) -Zps1 -dPOSIX -DBYTESEX_EVEN -DNEWSIGNALS
d163 1
a163 1
  NCFLAGS := $(NCFLAGS) -ps1 -dT800 -t4 -dPOSIX -DBYTESEX_EVEN -DNEWSIGNALS
@


1.12
log
@fixed bad dependency c0.o/cstart.o
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.11 90/10/31 13:00:02 paul Exp $
d85 3
d89 1
@


1.11
log
@Fixed duplicated contents in ARM cstart.o problem
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.10 90/10/30 10:44:21 paul Exp $
d191 1
a191 1
c0.o : cstart.a $(LIBDEFS) clib.def
d194 2
a195 2
cstart.o: c0.o
	cat c0.o clib.def $(LIBDEFS) > cstart.o
@


1.10
log
@removed double reference to norcrosys.h
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.9 90/10/22 11:26:14 paul Exp Locker: paul $
d190 2
a191 2
# c0.o is actual object code, cstart.o is object + resrefs
c0.o cstart.o: cstart.a $(LIBDEFS) clib.def
d193 2
a194 1
	mv cstart.o c0.o
@


1.9
log
@fplib.h added to sources.h line
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.7 90/10/02 15:22:52 paul Exp Locker: nick $
d137 1
a137 1
		locale.c posixsys.c norcrosys.h
@


1.8
log
@*** empty log message ***
@
text
@d143 1
a143 1
HEADERS.c	= sysdep.h norcrosys.h
@


1.7
log
@*** empty log message ***
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.6 90/09/25 20:47:37 paul Exp $
@


1.6
log
@arm changes
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.5 90/09/13 16:56:39 nick Exp $
@


1.5
log
@copy outo /lib removed
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.4 90/09/12 11:25:32 nick Exp Locker: nick $
d75 5
a79 1
TARGETS := clib.def c0.o clib.i
d89 3
d93 1
d96 1
d104 8
a111 6
#$(LIB)/cstart.o : cstart.o
#ifeq (HELIOS,$(findstring HELIOS,$(HHOST))) #csh default on Helios hosts
#	(cmp $^ $@@ ; if ( $$status ) cp $^ $@@ )
#else
#	if cmp $^ $@@; then echo "$^ not changed"; else $(CP) $^ $@@ ;fi
#endif
d130 1
a130 1
SOURCES		:= $(SOURCES.c) $(SOURCES.a) \
d135 1
a135 7
ifeq ($(HPROC),ARM)	# includes floating point library source fpprintf, etc
SOURCES.c	:= stdio.c ctype.c string.c printf.c fpprintf.c \
		scanf.c stdlib.c sort.c alloc.c time.c error.c \
		locale.c posixsys.c norcrosys.h

else
SOURCES.c	:= stdio.c ctype.c string.c printf.c fpprintf.c \
a137 1
endif
d140 1
a140 1
SOURCES.a	:= clibstar.a cstart.a modend.a
d143 1
a143 1
HEADERS.c	:= sysdep.h norcrosys.h
d146 1
a146 1
HEADERS.m	:=
d149 1
a149 1
SOURCES.odd	:= makefile
d157 1
a157 1
  NCFLAGS := $(NCFLAGS) -Zps1 -dPOSIX -DBYTESEX_EVEN	#-DNEWSIGNALS
a174 9
ifeq ($(HPROC),ARM)	# includes floating point fpprintf, etc
OBJECTS = clibstar.p stdio.p ctype.p string.p printf.p fpprintf.p \
	scanf.p stdlib.p sort.p alloc.p time.p error.p \
	locale.p posixsys.p modend.p

#fpprintf.p: $(FPLIB)/fpprintf.c
#	$(NC) $(NCFLAGS) -Zr -i$(FPLIB) $(FPLIB)/fpprintf.c

else
a177 1
endif
d183 1
a183 1
	$(LINK) -nClib $^ -oclib.i
d190 2
a191 2
# cstart.x is actual object code, cstart.o is object + resrefs
cstart.o: cstart.a $(LIBDEFS) clib.def
d193 2
a194 3
	$(CP) $@@ $*.x
	cat cstart.x clib.def $(LIBDEFS) > cstart.o
	$(RM) cstart.x
@


1.4
log
@cstart.o removed by make, now made with Linklibs in main makefile
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.3 90/09/07 13:13:20 nick Exp $
d190 1
a190 1
	cp clib.i /lib/clib
@


1.3
log
@installdef now copes with empty $(LIB) and installs c0.o and cstart.o too
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.2 90/09/07 12:50:59 nick Exp Locker: nick $
d75 1
a75 1
TARGETS := clib.def cstart.o c0.o clib.i
d85 1
a85 1
installdef: $(LIB)/clib.def $(LIB)/cstart.o $(LIB)/c0.o
d95 6
a100 6
$(LIB)/cstart.o : cstart.o
ifeq (HELIOS,$(findstring HELIOS,$(HHOST))) #csh default on Helios hosts
	(cmp $^ $@@ ; if ( $$status ) cp $^ $@@ )
else
	if cmp $^ $@@; then echo "$^ not changed"; else $(CP) $^ $@@ ;fi
endif
d190 1
d240 4
a243 4
pctest : pctest.c
	$(CC) -t4 -j$(INCLUDE)/ pctest.c -s$(FIFO)/x
	$(ASM) -v -f -npctest $(LIB)/cstart.o $(FIFO)/x -opctest
	$(CP) pctest $(BIN)
@


1.2
log
@installdef fixed to cope with empty $(LIB)
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.1 90/09/05 13:47:44 nick Exp Locker: nick $
d75 1
a75 1
TARGETS := clib.def c0.o clib.i
a81 6
ifeq (HELIOS,$(findstring HELIOS,$(HHOST))) #csh default on Helios hosts
	(cmp c0.o $(LIB)/c0.o ; if ( $$status ) cp c0.o $(LIB) )
else
	if cmp c0.o $(LIB)/c0.o; then echo "c0.o not changed"; else $(CP) c0.o $(LIB) ;fi
#	$(CP) c0.o $(LIB)
endif
d85 1
a85 1
installdef: $(LIB)/clib.def
d90 15
a104 1
	(cmp $^ $(LIB)/clib.def ; if ( $$status ) cp $^ $(LIB) )
d106 1
a106 1
	if cmp $^ $(LIB)/clib.def; then echo ".def not changed"; else $(CP) $^ $(LIB) ;fi
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
# RcsId: $Id$
d91 4
a94 1
installdef: clib.def
a98 1
#	$(CP) $^ $(LIB)
a99 1
	$(TOUCH) installdef
@
