head	1.5;
access;
symbols
	Helios_1_3_1:1.5
	Helios_C40_1_3_Official_Release:1.5
	Alenia_release:1.5
	Helios1_3:1.5
	C40_Field_Test_2:1.5
	C40_Field_Test_R1:1.1
	Helios13_beta:1.1
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1
	Helios1_2:1.1
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.5
date	92.09.16.09.32.42;	author paul;	state Exp;
branches;
next	1.4;

1.4
date	92.08.12.16.38.43;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	92.08.12.13.26.11;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	92.08.12.13.21.10;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.13.47.19;	author nick;	state Exp;
branches;
next	;


desc
@private header
@


1.5
log
@made #ifdefs clearer
@
text
@
/* <nonansi.norcrosys.h>: Internal functions for use within run-time        */
/* system of Norcroft C compiler  (deadly eh?).                             */
/* version 0.02a */

#ifndef __nonansi_norcrosys_h
#define __nonansi_norcrosys_h

#define memclr( s, n )	memset( s, 0, n )

extern int		_interrupts_off;
extern void		_raise_stacked_interrupts( void );
extern void *		_fopen_string_file( const char * data, int length );  /* really FILE * but I do not want to include stdio.h */
extern void		_postmortem( void );
extern void		_mapstore( void );
extern void		_sysdie( const char * s );
extern void		_initalloc( char *, char * );
extern void		_initio( char *, char *, char * );
extern void		_terminateio( void );
extern void		_signal_init( void );
extern void		_exit_init( void );

#if !defined size_t && !defined __size_t
#define __size_t 1
typedef unsigned int size_t;  /* see <stddef.h> */
#endif

extern void *		_sys_alloc( size_t n );
extern void		_sys_msg( const char * );
extern void		_exit( int n );

#define __system_io 1

#ifdef RISCOS
typedef int FILEHANDLE;
#define TTYFILENAME ":tt"
extern int _osbyte(int a, int x, int y, int c);
extern int _oswrch(int ch);
extern int _osbget(int fh);
extern int _osbput(int ch, int fh);
extern int _osgbpb(int op, int fh, void *base, int len, int extra);
extern int _osgbpb1(int op, int fh,
    struct _osgbpb1_control_block {void *base; int len; int extra;} *z);
extern int _osrdch(void);
extern int _osword(int op, int *data);
extern int _osfind(int op, char *name);
extern int _osfile(int op, const char *name, int loadaddr, int execaddr,
                                             int startaddr, int endaddr);
extern int _osfile1(int op, const char *name,
    struct _osfile1_control_block {int load; int exec; int start; int end;} *z);
extern int _osargs(int op, int fh, int arg);
extern int _oscli(const char *s);
extern int _ttywrite(unsigned char *buf, unsigned int len, int flag);
extern int _ttyread(unsigned char *buff, int size, int flag);
#endif /* RISCOS */

#ifdef HELIOS
typedef Stream *	FILEHANDLE;  /* pointer to a Helios Stream structure */
#endif

#ifdef POSIX
typedef int 		FILEHANDLE;		/* Posix fd */
#endif


#ifndef eq
#define eq 		==
#define ne		!=
#endif

typedef struct sysbase
  {
    int  file_pos;
    int  used;
    int  read;
    char data[ 1 ];
  }
sysbase;

#ifdef __C40
extern int 			_sdiv10( int );
extern unsigned int		_udiv10( unsigned int );
#define _kernel_sdiv10( x )	_sdiv10( x )
#define _kernel_sdiv( x, y )	((y) / (x))
#define _kernel_udiv10( v )	_udiv10( v )
#else
#define _kernel_sdiv10( x ) 	((x) / 10)
#define _kernel_sdiv( x, y )	((y) / (x))
#define _kernel_udiv10( v )	((unsigned)((v)) / 10)
#endif

#endif /* __nonansi_norcrosys_h */

/* end of nonansi.norcrosys.h */
@


1.4
log
@fixed name of kernel division functions
@
text
@d33 2
a34 1
#ifdef ACORNARM		/* HELIOSARM fix */
d55 1
a55 1
#endif /* ACORNARM */
@


1.3
log
@minor cosmetic changes
@
text
@d9 1
a9 1
#define memclr( p, n)	memset( p, 0, n )
d23 1
a23 1
#ifndef __size_t
d80 3
a82 3
extern int 			__sdiv10( int );
extern unsigned int		__udiv10( unsigned int );
#define _kernel_sdiv10( x )	__sdiv10( x )
d84 1
a84 1
#define _kernel_udiv10( v )	__udiv10( v )
@


1.2
log
@added definitions of _kernel_sdiv10() and co
@
text
@d9 1
a9 1
#define memclr(p,n) memset(p,0,n)
d11 20
a30 15
extern int _interrupts_off;
extern void _raise_stacked_interrupts(void);
extern void *_fopen_string_file(const char *data, int length);
            /* really FILE * but I do not want to include stdio.h */
extern void _postmortem(void);
extern void _mapstore(void);
extern void _sysdie(const char *s);
extern void _initalloc(char *,char *), _initio(char *,char *,char *),
            _terminateio(void), _signal_init(void), _exit_init(void);
#ifndef size_t
#  define size_t unsigned int   /* see <stddef.h> */
#endif
extern void *_sys_alloc(size_t n);
extern void _sys_msg(const char *);
extern void _exit(int n);
d54 1
a54 22
#endif

#ifdef ibm370
extern char _etoa[], _atoe[];
extern void *_abend(int);
extern void *_svc_getmain(int);
extern void _svc_freemain(void *, int);
struct _svcwto { short len, mcsflags;
                 char  msg[80];
                 short desccode, routcde; };
extern void _svc_wto(const struct _svcwto *);
struct _svctime { int csecs; int yday/* 0-365 */; int year; };
extern void _svc_time(struct _svctime *);
extern void  _svc_stimer(int);
extern unsigned  _svc_ttimer(void);             /* units of 1/38400 sec  */
/* the following lines use "struct NIOPBASE" instead of "NIOPBASE" to    */
/* to reduce syntactic confusion if "niopbase.h" not included            */
typedef struct NIOPBASE *FILEHANDLE;
extern int _io_call(int fn, struct NIOPBASE *p, int arg), _io_r0;
extern struct _svcwto _io_emsg;  /* beware only 64 bytes thereof */
#endif

d57 1
a57 1
typedef Stream *FILEHANDLE;  /* pointer to a Helios Stream structure */
d61 1
a61 1
typedef int FILEHANDLE;		/* Posix fd */
d66 2
a67 2
#define eq ==
#define ne !=
d70 8
a77 5
typedef struct sysbase { int  file_pos;
                         int  used;
                         int  read;
                         char data[1];
} sysbase;
d91 1
a91 1
#endif
@


1.1
log
@Initial revision
@
text
@d92 12
@
