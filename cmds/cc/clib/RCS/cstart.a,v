head	1.7;
access;
symbols
	Helios_1_3_1:1.7
	Helios_C40_1_3_Official_Release:1.7
	Alenia_release:1.7
	Helios1_3:1.7
	C40_Field_Test_2:1.7
	C40_Field_Test_R1:1.3
	Helios13_beta:1.3
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1
	Helios1_2:1.1
	V1_2Beta0:1.1;
locks; strict;


1.7
date	92.09.16.11.27.03;	author paul;	state Exp;
branches;
next	1.6;

1.6
date	92.09.15.13.51.04;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	92.08.21.16.30.13;	author paul;	state Exp;
branches;
next	1.4;

1.4
date	92.07.27.14.59.28;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	92.03.31.16.23.42;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	92.02.05.10.51.42;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.13.46.58;	author nick;	state Exp;
branches;
next	;


desc
@C program startup
@


1.7
log
@fixed for arm
@
text
@--------------------------------------------------------------------------
--                                                                      --
--                      H E L I O S   K E R N E L                       --
--                      -------------------------                       --
--                                                                      --
--             Copyright (C) 1987, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- cstart.a								--
--                                                                      --
--	Startup code for C programs					--
--                                                                      --
--	Author:  NHG 28/7/87						--
--                                                                      --
--                                                                      --
--	Keep in step with nucleus server startup code & vis/versa	--
--                                                                      --
--------------------------------------------------------------------------


include basic.m
include structs.m
include debug.m
include module.m
include tasks.m
include message.m
_if _defp 'helios.arm [
	include arm.m
]

	-- Program structure
	StartProgram	CStart		-1 1001

.stacksize:
	word	2000			-- stacksize
	word 	8000			-- heap size

	_test _defp 'helios.C40 [
		word	(.Main << 2) -- convert to byte offset
	][
		word	.Main
	]

--	sccsid [ %W% %G% Copyright (C) 1987, Perihelion Software Ltd.]

	ref	Clib.library		-- force link to Clib

----------------------------------------------------------
-- Server						--
--							--
-- entry point						--
--							--
----------------------------------------------------------

_test _defp 'helios.arm [
	Function Main

	-- update syslib static data pointer with Task pointer
	-- task pointer passed as first arg to this code.
	patchinstr(patcharmdt, datamodule(_MyTask), 
		ldr	ip,(dp,#0))		-- module of MyTask
	patchinstr(patcharmdt, datasymb(_MyTask), 
		str	a1,(ip,#0))		-- save arg1 (Task*) in MyTask

	patchinstr(patcharmdt, datamodule(_main), 
		ldr	a1,(dp,#0))		-- module of user main
	patchinstr(patcharmdt, codesymb(_main), 
		ldr	a1,(a1,#0))		-- pointer to user main
	mov	a2,#0				-- null second arg

	patchinstr(patcharmdt, datamodule(__main), 
		ldr	ip,(dp,#0))		-- module of clib main
	patchinstr(patcharmdt, codesymb(__main), 
		ldr	ip,(ip,#0))		-- pointer to clib main
	mov	pc,ip				-- enter clib main
][
	_test _defp 'helios.C40 [
	Function Main

		PutStaticDataWord R_A1 MyTask
		-- pass fp pointer of main() to CLib _main()

		-- codestub support
		global	.main

		ldabs32	.main R_ADDR1
		ldi	R_ADDR1, R_A1

		ldi	0, R_A2		-- null second argument

		-- jump to clib _main function through the module table
		ExternBranch _main
	][
		procsym .Main
	.Main:
	--Mark
		ajw -2				-- space for display

		ldl 3
		stl 0				-- modtab to display

		ldl 4 				-- set static task pointer
		ldl 0
		ldnl 0
		ldnl @@_MyTask
		stnl _MyTask

		ldlp 0				-- current stack posn
		ldc .stacksize-2
		ldpi
		ldnl 0				-- get stack size
		sub				-- subtract from present pos
		ldnlp 10			-- allow for linkage + safety
		stl 1				-- set vector pointer

	-- differs from sstart from here


		ldc 0				-- second arg (0 for now)
		ldl  0				-- modtab
		ldnl @@_main			-- module of main
		ldnl _main			-- address of main
		ldlp 0				-- display address
	--Regs
		call ._main

		-- a return from main will terminate the process
		-- (see TaskInit)
		ajw 2
		ret

	._main:	
		ldl 1				-- display
		ldnl 0				-- module table
		ldnl @@__main			-- module of main
		ldnl __main			-- get pointer to main
		gcall				-- enter
	]
]
	EndModule


-- End of cstart.a
@


1.6
log
@converted for ARM to gasm
@
text
@d27 3
@


1.5
log
@changes for the generic ARM system (uncompleted)
@
text
@a52 1

d57 16
a72 23
	.patch_armdt [datamodule _MyTask]
	ldr	ip,(dp,#0)		-- module of MyTask
	.patch_armdt [datasymb _MyTask]
	str	a1,(ip,#0)		-- save arg1 (Task*) in MyTask

.main:	
	.patch_armdt [datamodule _main]
	ldr	a1,(dp,#0)		-- module of user main
	_test _defp 'SMT.arm
	[.patch_armdt [codesymb _main]]
	[.patch_armdt [datasymb _main]]
	ldr	a1,(a1,#0)		-- pointer to user main

	mov	a2,#0			-- null second arg

	.patch_armdt [datamodule __main]
	ldr	ip,(dp,#0)		-- module of clib main
	_test _defp 'SMT.arm
	[.patch_armdt [codesymb __main]]
	[.patch_armdt [datasymb __main]]
	ldr	ip,(ip,#0)		-- pointer to clib main

	mov	pc,ip			-- enter clib main
@


1.4
log
@altered to support code stubs for most intermodule calls rather than mod tab
@
text
@a21 3
_test _defp 'helios.arm
	[include munge.m]
	[include procs.m]
d29 1
d31 3
a33 3
	_test _defp 'helios.arm
		[StartProgram CStart undef 1001]
		[StartProgram CStart -1 1001]
d35 2
a36 10
.stacksize:
	_test _defp 'helios.arm	[
		word	2000			-- stacksize
		word 	8000			-- heap size
	][
		word	2000			-- stacksize
		word 	8000			-- heap size
	]
	_test _defp 'helios.arm [
			.patch_word [labelref .EntryPoint]
d38 1
a38 5
		_test _defp 'helios.C40 [
			word	(.EntryPoint << 2) -- convert to byte offset
		][
			word	.EntryPoint
		]
d53 3
a55 2
	procsym .EntryPoint
.EntryPoint:
d83 1
a83 1
	Function EntryPoint
d99 2
a100 2
		procsym .EntryPoint
	.EntryPoint:
@


1.3
log
@fix entrypoint rptr to be a byte not word pointer for the C40
@
text
@d96 1
a96 2
		procsym .EntryPoint
	.EntryPoint:
a98 1
	.main:
d100 7
a106 2
		GetFunctionPointer main R_ATMP
		ldi	R_ATMP, R_A1
@


1.2
log
@added in C40 init
@
text
@d45 9
a53 3
	_test _defp 'helios.arm
		[.patch_word [labelref .EntryPoint]]
		[word	.EntryPoint]
@


1.1
log
@Initial revision
@
text
@a32 7
        align
_test _defp 'helios.arm
        [module  undef]
        [module  -1]
.ModStart:
        word    T.Program
        word    .ModEnd-.ModStart
d34 2
a35 15
	[
		.asciz "CStart"
		.space 32 - _strsize CStart - 1
	]
        [blkb    31,"CStart" byte 0]
	_test _defp 'helios.arm
		[.patch_word [modnum]]
	        [word    modnum]
	word	1001
	_test _defp 'helios.arm
		[.patch_word [datasymb .MaxData]]
		[word    .MaxData]
        init
	_if _defp 'SMT.arm -- split module table
		[.patch_word [codesymb .MaxCodeP]]
d38 1
a38 2
	_test _defp 'helios.arm
	[
d41 1
a41 2
	]
	[
d60 1
a60 2
_test _defp 'helios.arm
[
d88 60
a147 47
]
[
	procsym .EntryPoint
.EntryPoint:
--Mark
	ajw -2				-- space for display

	ldl 3
	stl 0				-- modtab to display

	ldl 4 				-- set static task pointer
	ldl 0
	ldnl 0
	ldnl @@_MyTask
	stnl _MyTask

	ldlp 0				-- current stack posn
	ldc .stacksize-2
	ldpi
	ldnl 0				-- get stack size
	sub				-- subtract from present pos
	ldnlp 10			-- allow for linkage + safety
	stl 1				-- set vector pointer

-- differs from sstart from here


	ldc 0				-- second arg (0 for now)
	ldl  0				-- modtab
	ldnl @@_main			-- module of main
	ldnl _main			-- address of main
	ldlp 0				-- display address
--Regs
	call ._main

	-- a return from main will terminate the process
	-- (see TaskInit)
	ajw 2
	ret

._main:	
	ldl 1				-- display
	ldnl 0				-- module table
	ldnl @@__main			-- module of main
	ldnl __main			-- get pointer to main
	gcall				-- enter

a148 1

@
