head	1.4;
access;
symbols
	Helios_1_3_1:1.4
	Helios_C40_1_3_Official_Release:1.4
	Alenia_release:1.4
	Helios1_3:1.4
	C40_Field_Test_2:1.4
	C40_Field_Test_R1:1.2
	Helios13_beta:1.2
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1
	Helios1_2:1.1
	V1_2Beta0:1.1;
locks; strict;
comment	@ * @;


1.4
date	92.08.12.16.28.24;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	92.08.12.09.48.08;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	92.06.15.10.17.16;	author craig;	state Exp;
branches;
next	1.1;

1.1
date	90.09.05.13.44.34;	author nick;	state Exp;
branches;
next	;


desc
@locale handling
@


1.4
log
@fixed typos
@
text
@/* locale.c: ANSI draft (X3J11 Oct 86) library header, section 4.3 */
/* Copyright (C) A. Mycroft and A.C. Norman */
/* version 0.01 */ /* Updated to Norcroft C library from version 350 of C compiler */
/* $Id: locale.c,v 1.3 1992/08/12 09:48:08 nickc Exp nickc $ */
/*
 * Local changes made by NC
 *
 * Copyright (C) Perihelion Software Ltd.
 *  All Rights Reserved.
 */

#include <locale.h>
#include <stddef.h>
#include <stdio.h>
#include <time.h>
#include <time.h>
#include <string.h>
#include <stdlib.h>  /* multibyte characters & strings */

/*
  #define LC_COLLATE  1
  #define LC_CTYPE    2
  #define LC_MONETARY 4
  #define LC_NUMERIC  8
  #define LC_TIME    16
  #define LC_ALL     31
*/

#define C_LOCALE "C"

static char	Clocale[]    = C_LOCALE;
static char	iso_8859_1[] = "ISO8859-1";
static char *	locales[ 5 ] = { C_LOCALE, C_LOCALE, C_LOCALE, C_LOCALE, C_LOCALE };
static char *	lc_all       = C_LOCALE;
static struct	lconv lc     = { ".", ",", "\3", "STG", "`", ".", ",", "\3", "", "-", 2, 2, 1, 0, 1, 0, 1, 2 };

/* Tables used by strftime() */

static char *	abbrweek[]   = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
static char *	fullweek[]   = { "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday" };
static char *	abbrmonth[]  = { "Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
static char *	fullmonth[]  = { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" };
static char *	ampmname[]   = { "AM", "PM" };


static int
index_of( int bitset )
{
  int j = 0;


  /* return index of ls bit */

  bitset &= (-bitset);

  for (;;)
    {
      bitset >>= 1;

      if (bitset == 0)
	return j;
      
      ++j;
    }
  
} /* index_of */



extern void _set_ctype_8859(int yes_or_no);

char *
setlocale(
	  int 		category,
	  const char *	locale )
{
  /* I expect the category to be a bit-map - complain if out of range  */

  if (((unsigned)category > LC_ALL) || (category == 0))
      /* no can do... */
    return NULL;

  if ((locale == 0) || (locale[ 0 ] == 0))
    {
      /* get locale */

      if (category == LC_ALL)
        return lc_all;
      else
        return locales[ index_of( category ) ];
    }
  else
    {
      /* set locale */
      
      if (strcmp( locale, C_LOCALE ) == 0)
	{
	  int j = 0;

	  
	  /* The system default is Clocale */
	  
	  if (category & LC_CTYPE)
	    _set_ctype_8859( 0 );
	  
	  while (category)
	    {
	      if (category & 1)
		locales[ j ] = Clocale;

	      category >>= 1;

	      ++j;
	    }
	  
	  lc_all = Clocale;
	  
	  for (j = 0;  j < sizeof (locales) / sizeof (char *);  ++j)
	    {
	      if (locales[ j ] != Clocale)
		lc_all = NULL;
	    }

	  return Clocale;
	}
      else if ((strcmp( locale, iso_8859_1 ) == 0) && (category == LC_CTYPE))
	{
	  lc_all = NULL;

	  _set_ctype_8859( 1 );

	  return locales[ index_of( LC_CTYPE ) ] = iso_8859_1;
	}

      /* currently "C" is the only acceptable locale */

    }

  return NULL;

} /* setlocale */


struct lconv *
localeconv( void )
{
  return &lc;

} /* localeconv */


static int
findweek(
	 int 	yday,
	 int	startday,
	 int	today )
{
  int	days_into_this_week = today - startday;
  int	last_weekstart;


  if (days_into_this_week < 0)
    days_into_this_week += 7;
  
  last_weekstart = yday - days_into_this_week;
  
  if (last_weekstart <= 0)
    return 1;

  return last_weekstart / 7 + 1;

} /* findweek */


size_t
strftime(
	 char *			s,
	 size_t			maxsize,
	 const char *		fmt,
	 const struct tm *	tt )
{
  int 		p = 0;
  int		c;
  char *	ss;
  char		buff[ 24 ];

  
  if (maxsize == 0)
    return 0;
  
#define push(ch) { s[p++]=(ch); if (p>=maxsize) return 0; }
  
  for (;;)
    {
      switch (c = *fmt++)
        {
	case 0: s[p] = 0;
	  return p;

	default:
	  push(c);
	  continue;

	case '%':
	  ss = buff;

	  switch (c = *fmt++)
            {
	    default:            /* Unknown directive - leave uninterpreted   */
	      push('%');  /* NB undefined behaviour according to ANSI  */
	      fmt--;
	      continue;

	    case 'a':
	      ss = abbrweek[tt->tm_wday];
	      break;

	    case 'A':
	      ss = fullweek[tt->tm_wday];
	      break;

	    case 'b':
	      ss = abbrmonth[tt->tm_mon];
	      break;

	    case 'B':
	      ss = fullmonth[tt->tm_mon];
	      break;

	    case 'c':
	      /* Is this the locale-specific date & time format we want?               */
	      sprintf( ss, "%02d.%02d.%02d %02d:%02d:%02d",
		      tt->tm_mday, tt->tm_mon + 1, tt->tm_year,
		      tt->tm_hour, tt->tm_min, tt->tm_sec);
	      break;

	    case 'd':
	      sprintf(ss, "%.2d", tt->tm_mday);
	      break;
	      
	    case 'H':
	      sprintf(ss, "%.2d", tt->tm_hour);
	      break;

	    case 'I':
	      sprintf(ss, "%.2d", (tt->tm_hour + 11)%12 + 1);
	      break;

	    case 'j':
	      sprintf(ss, "%.3d", tt->tm_yday + 1);
	      break;

	    case 'm':
	      sprintf(ss, "%.2d", tt->tm_mon + 1);
	      break;

	    case 'M':
	      sprintf(ss, "%.2d", tt->tm_min);
	      break;

	    case 'p':
	      /* I am worried here re 12.00 AM/PM and times near same.                 */
	      if (tt->tm_hour < 12)
		ss = ampmname[ 0 ];
	      else
		ss = ampmname[ 1 ];
	      break;
	      
	    case 'S':
	      sprintf(ss, "%.2d", tt->tm_sec);
	      break;

	    case 'U':
	      sprintf(ss, "%.2d", findweek(tt->tm_yday, 0, tt->tm_wday));
	      break;

	    case 'w':
	      sprintf(ss, "%.1d", tt->tm_wday);
	      break;

	    case 'W':
	      sprintf(ss, "%.2d", findweek(tt->tm_yday, 1, tt->tm_wday));
	      break;

	    case 'x':
	      /* The next two had better agree with %c conversions                     */
	      sprintf(ss, "%02d.%02d.%02d",
		      tt->tm_mday, tt->tm_mon + 1, tt->tm_year);
	      break;

	    case 'X':
	      sprintf(ss, "%02d:%02d:%02d", tt->tm_hour, tt->tm_min, tt->tm_sec );
	      break;
	      
	    case 'y':
	      sprintf(ss, "%.2d", tt->tm_year % 100);
	      break;

	    case 'Y':
	      sprintf(ss, "%d", 1900 + tt->tm_year);
	      break;

	    case 'Z':
	      /* No timezone exists here */
	      continue;

	    case '%':
	      push('%');
	      continue;
            } 

	  while ((c = *ss++) != 0)
	    push(c);
	  
	  continue;
        }
#undef push
    }
} /* strftime */


#define STATE_DEPENDENT_ENCODINGS 0

int
mblen(
      const char *	s,
      size_t		n )
{
  if (s == 0)
    return STATE_DEPENDENT_ENCODINGS;
  
  /* @@@@@@ ANSI ambiguity: if n=0 and *s=0 then return 0 or -1?                 */
  /* @@@@@@ LDS: for consistency with mbtowc, return -1                          */
  
  if (n == 0)
    return -1;
  
  if (*s == 0)
    return 0;

  return 1;

} /* mblen */


int
mbtowc(
       wchar_t *	pwc,
       const char *	s,
       size_t		n )
{
  if (s == 0)
    return STATE_DEPENDENT_ENCODINGS;
  
  /* @@@@@@ ANSI ambiguity: if n=0 and *s=0 then return 0 or -1?                 */
  /* @@@@@@ LDS At most n chars of s are examined, ergo must return -1.          */

  if (n == 0)
    return -1;
  else
    {
      wchar_t 	wc = *(unsigned char *)s;

      
      if (pwc)
	*pwc = wc;

      return (wc != 0);
    }
  
} /* mbtowc */
    

int
wctomb(
       char *	s,
       wchar_t	w )
{
  if (s == 0)
    return STATE_DEPENDENT_ENCODINGS;
  
  /* @@@@@@ ANSI ambiguity: what return (and setting for s) if w == 0?           */
  
  if ((unsigned)w > (unsigned char) -1)
    return -1;
  
  if ((*s = w) == 0)
    return 0;
  
  return 1;

} /* wctomb */


size_t
mbstowcs(wchar_t *pwcs, const char *s, size_t n)
{
  size_t r = 0;

  
  /* @@@@@@ ANSI ambiguity: if n=0 then is *s read?                              */
  
  for (; n != 0; n--)
    {
      if ((pwcs[ r ] = ((unsigned char *)s)[ r ]) == 0)
	return r;

      r++;
    }

  return r;

} /* mbstowcs */


size_t
wcstombs(
	 char *			s,
	 const wchar_t *	pwcs,
	 size_t			n )
{
  size_t r = 0;

  
  /* @@@@@@ ANSI ambiguity: if n=0 then is *pwcs read?  Also invalidity check?   */

  for (; n != 0; n--)
    {
      wchar_t w = pwcs[ r ];


      if ((unsigned)w > (unsigned char)-1)
	return (size_t) - 1;

      if ((s[ r ] = w) == 0)
	return r;

      r++;
    }

  return r;

} /* wcstombs */

/* end of locale.c */
@


1.3
log
@added new functions to support wide chars
@
text
@d4 1
a4 1
/* $Id: locale.c,v 1.2 1992/06/15 10:17:16 craig Exp nickc $ */
d234 1
a234 1
		      tt->tm_hour, tt->tm_min);
d273 1
a273 1
	    case 'a':
@


1.2
log
@Bug 899 - added 1 to the month returned by strftime (%c and %x)
@
text
@a0 1

d3 8
a10 2
/* version 0.01 */
/* $Id: locale.c,v 1.1 90/09/05 13:44:34 nick Exp $ */
d16 3
d20 7
a26 5
/* #define LC_COLLATE  1
   #define LC_CTYPE    2
   #define LC_NUMBERIC 4
   #define LC_TIME     8
   #define LC_ALL     15
d29 40
a68 1
static char Clocale[] = "C";
d70 8
a77 1
/* Tables used by strftime()                                             */
d79 2
a80 19
static char *abbrweek[]  = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };
static char *fullweek[]  = { "Sunday", "Monday", "Tuesday", "Wednesday",
                             "Thursday", "Friday", "Saturday" };
static char *abbrmonth[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                             "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" };
static char *fullmonth[] = { "January", "February", "March", "April",
                             "May", "June", "July", "August",
                             "September", "October", "November", "December" };
static char *ampmname[]  = { "AM", "PM" };

char *setlocale(int category, const char *locale)
{
    /* I expect the category to be a bit-map - complain if out of range  */
    if ((unsigned)category > LC_ALL) return NULL;
    if (locale == 0) return Clocale;
    if (locale[0] == 0) return Clocale;
    /* The system default is Clocale */
    if (locale[0] == 'C' && locale[1] == 0) return Clocale;
    /* currently "C" is the only acceptable locale */
d82 52
a133 1
}
d135 46
a180 1
static int findweek(int yday, int startday, int today)
d182 9
a190 13
    int days_into_this_week = today - startday;
    int last_weekstart;
    if (days_into_this_week < 0) days_into_this_week += 7;
    last_weekstart = yday - days_into_this_week;
    if (last_weekstart <= 0) return 1;
    return last_weekstart/7 + 1;
}

size_t strftime(char *s, size_t maxsize, const char *fmt, const struct tm *tt)
{
    int p = 0, c;
    char *ss, buff[24];
    if (maxsize==0) return 0;
d192 4
a195 2
    for (;;)
    {   switch (c = *fmt++)
d197 11
a207 8
    case 0: s[p] = 0;
            return p;
    default:
            push(c);
            continue;
    case '%':
            ss = buff;
            switch (c = *fmt++)
d209 107
a315 96
        default:            /* Unknown directive - leave uninterpreted   */
                push('%');  /* NB undefined behaviour according to ANSI  */
                fmt--;
                continue;
        case 'a':
                ss = abbrweek[tt->tm_wday];
                break;
        case 'A':
                ss = fullweek[tt->tm_wday];
                break;
        case 'b':
                ss = abbrmonth[tt->tm_mon];
                break;
        case 'B':
                ss = fullmonth[tt->tm_mon];
                break;
        case 'c':
/* Is this the locale-specific date & time format we want?               */
                sprintf(ss, "%d.%d.%d %d:%d",
#if 0 
/* 
-- crf: 07/06/92
-- BUG 899 
*/
                    tt->tm_mday, tt->tm_mon, tt->tm_year,
#else
                    tt->tm_mday, tt->tm_mon + 1, tt->tm_year,
#endif
                    tt->tm_hour, tt->tm_min);
                break;
        case 'd':
                sprintf(ss, "%.2d", tt->tm_mday);
                break;
        case 'H':
                sprintf(ss, "%.2d", tt->tm_hour);
                break;
        case 'I':
                sprintf(ss, "%.2d", (tt->tm_hour + 11)%12 + 1);
                break;
        case 'j':
                sprintf(ss, "%.3d", tt->tm_yday + 1);
                break;
        case 'm':
                sprintf(ss, "%.2d", tt->tm_mon + 1);
                break;
        case 'M':
                sprintf(ss, "%.2d", tt->tm_min);
                break;
        case 'p':
/* I am worried here re 12.00 AM/PM and times near same.                 */
                if (tt->tm_hour < 12) ss = ampmname[0];
                else ss = ampmname[1];
                break;
        case 'S':
                sprintf(ss, "%.2d", tt->tm_sec);
                break;
        case 'U':
                sprintf(ss, "%.2d", findweek(tt->tm_yday, 0, tt->tm_wday));
                break;
        case 'w':
                sprintf(ss, "%.1d", tt->tm_wday);
                break;
        case 'W':
                sprintf(ss, "%.2d", findweek(tt->tm_yday, 1, tt->tm_wday));
                break;
        case 'x':
/* The next two had better agree with %c conversions                     */
                sprintf(ss, "%d.%d.%d",
#if 0 
/* 
-- crf: 07/06/92
-- BUG 899 
*/
                    tt->tm_mday, tt->tm_mon, tt->tm_year);
#else
                    tt->tm_mday, tt->tm_mon + 1, tt->tm_year);
#endif
                break;
        case 'X':
                sprintf(ss, "%d:%d", tt->tm_hour, tt->tm_min);
                break;
        case 'y':
                sprintf(ss, "%.2d", tt->tm_year % 100);
                break;
        case 'Y':
                sprintf(ss, "%d", 1900 + tt->tm_year);
                break;
        case 'Z':
                /* No timezone exists here */
                continue;
        case '%':
                push('%');
                continue;
            }
            while ((c = *ss++) != 0) push(c);
            continue;
d319 125
a443 1
}
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
/* $Id$ */
d92 5
d98 3
d141 5
d147 3
@
