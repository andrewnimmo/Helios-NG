head	1.6;
access;
symbols
	Helios_1_3_1:1.5
	Helios_C40_1_3_Official_Release:1.3
	Alenia_release:1.3
	C40_Field_Test_R1:1.2;
locks; strict;
comment	@# @;


1.6
date	94.02.17.11.45.13;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	93.09.20.14.20.48;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	93.07.06.11.27.55;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	92.08.05.10.35.39;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	92.04.21.17.49.02;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	91.12.06.12.19.52;	author martyn;	state Exp;
branches;
next	;


desc
@@


1.6
log
@added test for existance of private directory - creates if needed
@
text
@#------------------------------------------------------------------------------
# Helios generic make system - PROCESSOR SPECIFIC COMPONENT MAKEFILE -
#-----------------------------------------------------------------------------
# C40 processor specific make rules for private commands
#
# File: /HSRC/cmds/private/C40/makefile
#
# This file contains the extra definitions of variables and rules that are
# required to make a processor specific version of this component.
#
# If you wish to overide a targets rule that has been defined in the generic
# part of the makefile, you should bracket it with "ifneq ($(HPROC),YYY)" and
# supply the new rule in this makefile.
#
# This makefile is always executed within this processor specific subdir.
# All processor specific source files should be kept here.
# All intermediate, object and binary files should be made in here.
#
# RcsId: $Id: makefile,v 1.5 1993/09/20 14:20:48 nickc Exp nickc $
#		(C) Copyright 1990 Perihelion Software
#
# WARNING: assumes you are using GNUmake.
#-----------------------------------------------------------------------------

InProcMake = TRUE

# Get generic component makefile
include ../makefile

#-----------------------------------------------------------------------------
# Add processor specific targets:
XTARGETS = maxlat atst artst

Xdefault: $(XTARGETS)


# Install the extra targets:
Xinstall: $(XTARGETS)
	@@ test -d $(BIN)/private || mkdir -p $(BIN)/private
	$(CP) $(XTARGETS) $(BIN)/private
	$(TOUCH) Xinstall


# Remove any processor specific files other than targets and objects here:
Xclean:
	-$(RM) $(XTARGETS) $(XOBJECTS)


#-----------------------------------------------------------------------------
# Add to lists of files, used for archive, backup and cleaning purposes.

# All extra processor specific sources
XSOURCES	= $(XSOURCES.c) $(XSOURCES.a) \
		  $(XHEADERS.c) $(XHEADERS.m) \
		  $(XSOURCES.odd)

XOBJECTS	= $(XSOURCES.c:.c=.o) $(XSOURCES.a:.a=.o)
XBINS		= $(XOBJECTS:.o=)


# Fill in processor specific sources here:
XSOURCES.c	= maxlat.c atst.c artst.c

XSOURCES.a	=

XHEADERS.c	=

XHEADERS.m	=

XSOURCES.odd	= makefile


#-----------------------------------------------------------------------------
# Any additional processor specific rules and generic rule overides go here:

$(XOBJECTS):

$(XBINS): $(CSTART)

NCFLAGS := $(NCFLAGS) -Zpz1 -Zpw1
@


1.5
log
@re-enabled stack checking
@
text
@d19 1
a19 2
# SccsId: %W% %G%
# RcsId: $Id: makefile,v 1.4 1993/07/06 11:27:55 nickc Exp nickc $
d39 1
d80 1
a80 1
NCFLAGS := $(NCFLAGS) -Zpz1 -Zpw1@


1.4
log
@added command line flags to improve code size
@
text
@d20 1
a20 1
# RcsId: $Id: makefile,v 1.3 1992/08/05 10:35:39 paul Exp nickc $
d80 1
a80 1
NCFLAGS := $(NCFLAGS) -Zps1 -Zpz1 -Zpw1@


1.3
log
@added artst.c
@
text
@d20 1
a20 1
# RcsId: $Id: makefile,v 1.2 1992/04/21 17:49:02 paul Exp $
d80 1
@


1.2
log
@alpha
,
@
text
@d20 1
a20 1
# RcsId: $Id: makefile,v 1.1 1991/12/06 12:19:52 martyn Exp $
d33 1
a33 1
XTARGETS = maxlat
d62 1
a62 1
XSOURCES.c	= maxlat.c
@


1.1
log
@Initial revision
@
text
@d4 1
a4 1
# YYY processor specific make rules for the XXX component.
d6 1
a6 1
# File: /HSRC/XXX/YYY/makefile
d20 1
a20 1
# RcsId: $Id: makefile,v 1.1 1991/12/06 12:19:17 martyn Exp $
d33 1
a33 1
XTARGETS = 
d40 1
a40 1
#	$(CP) $(XTARGETS) $(BIN)
d46 1
a46 1
#	-$(RM) xxx
d57 2
a59 4
#Full set of library object files
XOBJECTS	= $(XSOURCES.c:.c=.p) $(XSOURCES.a:.a=.p)
# Or if you are not a library:
#XOBJECTS	= $(XSOURCES.c:.c=.o) $(XSOURCES.a:.a=.o)
a60 1

d62 1
a62 1
XSOURCES.c	=
d75 4
@
