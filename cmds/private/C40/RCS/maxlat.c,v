head	1.3;
access;
symbols
	Helios_1_3_1:1.2;
locks; strict;
comment	@ * @;


1.3
date	94.02.16.15.04.13;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	93.10.04.12.09.20;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	93.08.06.15.15.37;	author nickc;	state Exp;
branches;
next	;


desc
@@


1.3
log
@Bart version
@
text
@/*{{{  Banner */

/*------------------------------------------------------------------------
--                                                                      --
--                     H E L I O S			                --
--                     -----------                                      --
--                                                                      --
--             Copyright (C) 1993, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- maxlat.c								--
--	   Interrupt and latency monitor for the ARM/VY86PId.		--
--                                                                      --
--	Author:  BLV 10/12/93						--
--                                                                      --
------------------------------------------------------------------------*/
static char *rcsid = "$Header: /hsrc/cmds/private/RCS/timeio.c,v 1.4 1993/02/22 18:34:18 bart Exp $";

/*}}}*/
/*{{{  #include's */
#include <helios.h>
#include <syslib.h>
#include <root.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
/*}}}*/
/*{{{  usage() */

static void usage(void)
{
    fputs("maxlat: usage, maxlat [-z | -l]\n", stderr);
    fputs("        -z    reset current values\n", stderr);
    fputs("        -l    loop forever\n", stderr);
}

/*}}}*/
/*{{{  main() */

int main(int argc, char **argv) 
{
    bool	 loop	= FALSE;
    bool	 reset	= FALSE;
    ExecInfo	 exec_info;
    LatencyInfo	*info;

    if (argc > 2) usage();
    if (argc == 2) 
    {
	if (!strcmp(argv[1], "-z"))
	    reset = TRUE;
	elif (!strcmp(argv[1], "-l"))
	    loop = TRUE;
	else
	    usage();
    }

    GetExecInfo(&(exec_info));
    info	= exec_info.Latency;

    if (reset)
    {
#ifdef __ARM
	EnterSVCMode();
#endif
	info->MaxInterruptLat		= 0;
	info->MaxSoftwareInterruptLat	= 0;
	info->MaxDispatchLat		= 0;
	info->MaxInterruptPC		= 0;
#ifdef __ARM
	EnterUserMode();
#endif	
	return(EXIT_SUCCESS);
    }

    forever
    {
	printf("Maximum interrupt latency detected: %ld us (%ld ticks)\n",
	       (info->MaxInterruptLat * Latency_NsPerUnit) / 1000, info->MaxInterruptLat);
	printf("Program counter of interrupted thread was 0x%08lx\n", info->MaxInterruptPC);
#if 0	
	printf("Overhead of interrupt handling software: %ld us (%ld ticks)\n", 
	       (info->MaxSoftwareInterruptLat * Latency_NsPerUnit) / 1000, info->MaxSoftwareInterruptLat);
#endif
	printf("Maximum dispatch latency (including interrupt latency) : %ld us (%ld ticks)\n", 
	       (info->MaxDispatchLat * Latency_NsPerUnit) / 1000, info->MaxDispatchLat);

	if (loop)
	    Delay(10 * OneSec);
	else
	    break;
    }
    
    return(EXIT_SUCCESS);
}

/*}}}*/
@


1.2
log
@updated to include max dispatch latency
@
text
@d1 1
a1 20
/*
 * File:	maxlat.c
 * Subsystem:	Helios (C40) commands
 * Author:	P.A.Beskeen
 * Date:	April '92
 *
 * Description: Command to print out ExecRoot info pertaining to the
 *		maximum interrupt latency seen so far.
 *
 * RcsId: $Id: maxlat.c,v 1.1 1993/08/06 15:15:37 nickc Exp $
 *
 * (C) Copyright 1991 Perihelion Software Ltd.
 * 
 * RcsLog: $Log: maxlat.c,v $
 * Revision 1.1  1993/08/06  15:15:37  nickc
 * Initial revision
 *
 *
 *
 */
d3 15
a17 1
/* Include Files: */
d19 2
d22 2
d25 4
a28 1
#include "../../../kernel/gexec.h"	/* ExecRoot defn */
d30 9
d40 1
a40 1
int main(int argc, char **argv)
d42 54
a95 29
	RootStruct * root = GetRoot();
	ExecRoot *xroot = GetExecRoot();
	uword lat  = xroot->MaxLatency;
	bool loop = FALSE;
	word nsclk = (word)GetIDROM()->CPU_CLK + 1;

	nsclk *= 2; /* for timer tick rate */

	if (argc == 2 && strcmp(argv[1], "-z") == 0) {
		printf("Trace of max latency reset\n");
		xroot->MaxLatency = 0;
		xroot->MaxLatencyPC = 0;
		root->MaxLatency = 0;
		root->Latency = 0;
		return 0;
	}

	if (argc == 2 && strcmp(argv[1], "-l") == 0) {
		loop = TRUE;
	}

	do {
		/* 100 ns tick = 50ns cpu cycle */
		printf("TMS320C40 Maximum interrupt and dispatch latency test (%ld nS clock).\n", nsclk/2);
		printf("Max Interrupt latency:\n");
		printf("\t%ld timer ticks, %ld nS, %ld uS.\n", lat, lat * nsclk, lat * nsclk / 1000);
		printf("\t%ld/%ld approx instructions with 0/1 waitstate memory.\n", lat*2, lat );
		printf("\t%#lx PC of thread causing max interrupt latency.\n", xroot->MaxLatencyPC);
		printf("\t%lu nS Last latency seen.\n", xroot->Latency * nsclk);
d97 1
a97 3
		printf("Max dispatch latency: %ld uS, last dispatch latency: %ld uS.\n", root->MaxLatency, root->Latency);
	} while (loop);
}
@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
 * RcsId: $Id$
d14 3
a16 1
 * RcsLog: $Log$
d19 1
d31 1
d33 5
a37 1
	word lat  = xroot->MaxLatency;
a38 13
	printf("TMS320C40 Maximum interrupt latency: Assumes 33Mhz 'C40\n");
	printf("\t%ld timer ticks\n", lat);
	printf("\t%ld ns\n", lat * 121);
	printf("\t%ld Usec\n", lat * 121 / 1000);
	printf("\t%ld approx instructions 1 waitstate read\n", lat );
		/* 120 ns tick 60ns cpu cycle */
	printf("\t%ld approx instructions 0 waitstate read\n", lat*2 );
	printf("\t%#lx PC of max latency thread\n", xroot->MaxLatencyPC);
#if 0
	printf("\t%ld (timer ticks) last latency seen\n", xroot->Latency);
#else
	printf("\t%#lx address of last caller to Dispatch()\n", xroot->Latency);
#endif
d43 7
d51 12
@
