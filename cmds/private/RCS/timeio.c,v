head	1.4;
access;
symbols
	Helios_1_3_1:1.4
	Helios_C40_1_3_Official_Release:1.4
	Alenia_release:1.3
	Helios1_3:1.3
	C40_Field_Test_2:1.2
	C40_Field_Test_R1:1.2
	Helios13_beta:1.2
	Helios1_2_2:1.2
	Helios1_2_2Beta:1.2
	Helios1_2_1:1.2
	Helios1_2:1.2;
locks; strict;
comment	@ * @;


1.4
date	93.02.22.18.34.18;	author bart;	state Exp;
branches;
next	1.3;

1.3
date	92.10.20.10.08.53;	author martyn;	state Exp;
branches;
next	1.2;

1.2
date	90.08.23.10.37.12;	author james;	state Exp;
branches;
next	1.1;

1.1
date	90.08.22.16.40.08;	author james;	state Exp;
branches;
next	;


desc
@@


1.4
log
@New improved version with much more sensible output
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--                     H E L I O S			                --
--                     -----------                                      --
--                                                                      --
--             Copyright (C) 1989, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
-- timeio.c								--
--                                                                      --
--	Author:  BLV 22/3/90						--
--                                                                      --
------------------------------------------------------------------------*/
static char *rcsid = "$Header: /m/giga/HeliosRoot/Helios/cmds/private/RCS/timeio.c,v 1.3 1992/10/20 10:08:53 martyn Exp $";

#include <helios.h>
#include <stdio.h>
#include <string.h>
#include <codes.h>
#include <syslib.h>
#include <servlib.h>
#include <nonansi.h>
#include <stdlib.h>
#include <time.h>
#include <limits.h>

/**
*** This program opens a stream to /logger in the  I/O Server and
*** bounces private protocol messages of it. These protocol messages
*** take the following function codes :
*** 0 FC_Private request control_size data_size
*** request = 1, for simple bounce
***           2, return message header only
***           3, send reply message with the specified size
**/

#define LL_Bounce (word)(1 << 24)
#define LL_Empty  (word)(2 << 24)
#define LL_Fill   (word)(3 << 24)

static  Stream  *connect_to_server(string);
static  void     message_handler(Stream *, word loops, word type, word size);

static void usage(void)
{
    fputs("timeio: usage, timeio <bounces>\n", stderr);
    exit(EXIT_FAILURE);
}

int main(int argc, char **argv)
{
    Stream  *my_stream;
    word     loops      = 100;

    if (argc != 1)
    {
        if (argc > 2) usage();
        loops   = atoi(argv[1]);
        if (loops == 0) usage();
    }

    my_stream = connect_to_server("/logger");
    printf("Timeio : times are for %ld bounces.\n", loops);

    message_handler(my_stream, loops, LL_Bounce,     0);
    putchar('\n');
    message_handler(my_stream, loops, LL_Empty,     64);
    message_handler(my_stream, loops, LL_Fill,      64);
    message_handler(my_stream, loops, LL_Bounce,    64);
    putchar('\n');
    message_handler(my_stream, loops, LL_Empty,   1024);
    message_handler(my_stream, loops, LL_Fill,    1024);
    message_handler(my_stream, loops, LL_Bounce,  1024);
    putchar('\n');
    message_handler(my_stream, loops, LL_Empty,  32768);
    message_handler(my_stream, loops, LL_Fill,   32768);
    message_handler(my_stream, loops, LL_Bounce, 32768);

    Close(my_stream);
    return(EXIT_SUCCESS);
}

static void message_handler(Stream *my_stream, word loops, word type, word size)
{
    static byte     data_vec[0x0FFFF];
    static word     word_vec[256];
    MCB             mcb;
    word            i;
    clock_t         timer;
    Port            reply_port  = NewPort();;

    if (reply_port == NullPort)
    {
        fputs("timeio: failed to get new message port.\n", stderr);
        exit(EXIT_FAILURE);
    }
    
    mcb.Control = word_vec;
    mcb.Data    = data_vec;

    timer = clock();
     
    for (i = 0; i < loops; i++)
    {
        mcb.MsgHdr.Dest          = my_stream->Server;
        mcb.MsgHdr.Reply         = reply_port;
        mcb.Timeout              = -1;
        mcb.MsgHdr.ContSize      =  0;
        if ((type == LL_Empty) || (type == LL_Bounce))
            mcb.MsgHdr.DataSize  = (unsigned short) size;
        else
            mcb.MsgHdr.DataSize  = 0;
        mcb.MsgHdr.Flags         = MsgHdr_Flags_preserve;
        mcb.MsgHdr.FnRc          = FC_Private + type;
        if ((type == LL_Fill) || (type == LL_Bounce))
            mcb.MsgHdr.FnRc     |= size;
     
        PutMsg(&mcb);

        mcb.MsgHdr.Dest  = mcb.MsgHdr.Reply;
        mcb.Timeout      = -1;

        GetMsg(&mcb);     
    }

    timer = clock() - timer;
    FreePort(reply_port);

    if (size == 0)
    {
        printf("Message header only : %6.2f seconds\n",
            (double) timer / (double) CLK_TCK);
    }
    else
    {
        word    rate;
/*
printf("loops %ld, size %ld, timer %d\n", loops, size, timer);
*/
        if (timer == 0)
            rate = INT_MAX;
        else
        {
            rate = (loops * size * CLK_TCK) / (timer * 1024L);
            if (type == LL_Bounce)
                rate *= 2;
        }
        
        printf("Header + %5ld bytes, %s : %6.2f seconds, %4ld KBytes/second\n",
                size,
                (type == LL_Empty) ? "-> I/O   " :
                (type == LL_Fill)  ? "<- I/O   " :
                                     "both ways",
                (double) timer / (double) CLK_TCK,
                rate);
    }
}

static Stream *connect_to_server(string name)
{
    Object *server;
    Stream *stream;

    server = Locate(NULL, name);
    if (server == Null(Object))
    {
        fprintf(stderr, "timeio: failed to locate %s\n", name);
        exit(EXIT_FAILURE);
    }

    stream = Open(server, Null(char), O_ReadWrite);
    if (stream == Null(Stream))
    {
        fprintf(stderr, "timeio: failed to Open %s\n", server->Name);
        Close(server);
        exit(EXIT_FAILURE);
    }
   
    Close(server);
    return(stream);
}

@


1.3
log
@Fixed typo, < instead of <<, resulting in the I/O Server sending back
an extra byte.
@
text
@d14 1
d16 1
a16 8
static char *rcsid = "$Header: /hsrc/cmds/private/RCS/timeio.c,v 1.2 1990/08/23 10:37:12 james Exp martyn $";

#include <helios.h>	/* standard header */

/*--------------------------------------------------------
-- 		     Include Files			--
--------------------------------------------------------*/

d25 1
d37 3
a39 4
#define LL_Bounce (1 << 24)
#define LL_Empty  (2 << 24)
#define LL_Fill   (3 << 24)
#define C_shift   16
d41 2
a42 9
PRIVATE Port connect_to_server(string);
PRIVATE WORD message_handler(Port, int, int, int, int, int);
PRIVATE WORD results[20];
PRIVATE BYTE data_vec[65536];
PRIVATE WORD word_vec[256];
#define LOOPS 100
  
int main(void)
{ Port myport = connect_to_server("/logger");
d44 5
a48 5
  printf("Timeio : times are for %d bounces.\n", LOOPS);
  
  results[0] = message_handler(myport, 0, 0, LL_Bounce, 0, 0);
  printf("Message header only : %3d.%2d seconds\n\n",
         results[0] / 100, results[0] % 100);
d50 4
a53 16
  results[1] = message_handler(myport, 0, 64, LL_Empty, 0, 0);
  printf("Header + 64 bytes, -> I/O    : %3d.%2d seconds, %d K/s, max %d K/s\n",
         results[1] / 100, results[1] % 100,
         10000 / (16 * results[1]),
         10000 / (16 *(results[1] - results[0]))
        );  
  results[2] = message_handler(myport, 0, 0, LL_Fill, 0, 64);
  printf("Header + 64 bytes, <- I/O    : %3d.%2d seconds, %d K/s, max %d K/s\n",
         results[2] / 100, results[2] % 100,
         10000 / (16 * results[2]),
         10000 / (16 *(results[2] - results[0])) );  
  results[3] = message_handler(myport, 0, 64, LL_Bounce, 0, 0);
  printf("Header + 64 bytes, both ways : %3d.%2d seconds, %d K/s, max %d K/s\n\n",
         results[3] / 100, results[3] % 100,
         20000 / (16 * results[3]),
         20000 / (16 *(results[3] - results[0])) );           
d55 6
a60 18
  results[4] = message_handler(myport, 0, 1024, LL_Empty, 0, 0);
  printf("Header + 1024 bytes, -> I/O    : %3d.%2d seconds, %d K/s, max %d K/s\n",
         results[4] / 100, results[4] % 100,
         10000 / results[4],
         10000 / (results[4] - results[0])
         );  
  results[5] = message_handler(myport, 0, 0, LL_Fill, 0, 1024);
  printf("Header + 1024 bytes, <- I/O    : %3d.%2d seconds, %d K/s, max %d K/s\n",
         results[5] / 100, results[5] % 100,
         10000 / results[5],
         10000 / (results[5] - results[0])
         );  
  results[6] = message_handler(myport, 0, 1024, LL_Bounce, 0, 0);
  printf("Header + 1024 bytes, both ways : %3d.%2d seconds, %d K/s, max %d K/s\n\n",
         results[6] / 100, results[6] % 100,
         20000 / results[6],
         20000 / (results[6] - results[0])
         );  
d62 2
a63 18
  results[7] = message_handler(myport, 0, 32768, LL_Empty, 0, 0);
  printf("Header + 32768 bytes, -> I/O    : %3d.%2d seconds, %d K/s, max %d K/s\n",
         results[7] / 100, results[7] % 100,
         (10000 * 32) / results[7],
         (10000 * 32 ) / (results[7] - results[0])
         );  
  results[8] = message_handler(myport, 0, 0, LL_Fill, 0, 32768);
  printf("Header + 32768 bytes, <- I/O    : %3d.%2d seconds, %d K/s, max %d K/s\n",
         results[8] / 100, results[8] % 100,
         (10000 * 32) / results[8],
         (10000 * 32) / (results[8] - results[0])
         );  
  results[9] = message_handler(myport, 0, 32768, LL_Bounce, 0, 0);
  printf("Header + 32768 bytes, both ways : %3d.%2d seconds, %d K/s, max %d K/s\n\n",
         results[9] / 100, results[9] % 100,
         (20000 * 32) / results[9],
         (20000 * 32) / (results[9] - results[0])
         );  
d65 16
a80 1
  return(0);
d83 8
a90 9
PRIVATE WORD message_handler(Port destport, int csize, int dsize, int fnrc,
        int rcsize, int rdsize)
{ MCB  mcb;
  int  count;
  clock_t start;
  Port    reply_port = NewPort();
  
  mcb.Control = word_vec;
  mcb.Data    = data_vec;
d92 10
a101 1
  start = clock();
d103 14
a116 9
  for (count = 0; count < LOOPS; count++)
   {
     mcb.MsgHdr.Dest        = destport;
     mcb.MsgHdr.Reply       = reply_port;
     mcb.Timeout            = -1;
     mcb.MsgHdr.ContSize    = csize;
     mcb.MsgHdr.DataSize    = dsize;
     mcb.MsgHdr.Flags       = MsgHdr_Flags_preserve;
     mcb.MsgHdr.FnRc        = FC_Private + fnrc + (rcsize << C_shift) + rdsize;
d118 1
a118 1
     PutMsg(&mcb);
d120 2
a121 2
     mcb.MsgHdr.Dest  = mcb.MsgHdr.Reply;
     mcb.Timeout      = -1;
d123 34
a156 6
     GetMsg(&mcb);     
   }
   
  start = clock() - start;
  FreePort(reply_port);
  return(start);
d159 4
a162 3
PRIVATE Port connect_to_server(string name)
{ Object *server = Locate(Null(Object), name);
  Stream *stream;
d164 14
a177 2
  if (server == Null(Object))
   return(NullPort);
d179 2
a180 8
  stream = Open(server, Null(char), O_ReadWrite);
  if (stream == Null(Stream))
   { Close(server);
     return(NullPort);
   }
   
  Close(server);
  return(stream->Server);
@


1.2
log
@*** empty log message ***
@
text
@d15 1
a15 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/timeio.c,v 1.1 90/08/22 16:40:08 james Exp Locker: james $";
d141 1
a141 1
     mcb.MsgHdr.FnRc        = FC_Private + fnrc + (rcsize < C_shift) + rdsize;
@


1.1
log
@Initial revision
@
text
@d15 1
a15 1
static char rcsid[] = "$Header$";
@
