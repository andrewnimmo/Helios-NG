head	1.11;
access;
symbols
	Helios_1_3_1:1.10
	Helios_C40_1_3_Official_Release:1.10
	Alenia_release:1.10
	Helios1_3:1.10
	C40_Field_Test_2:1.10
	C40_Field_Test_R1:1.8
	Helios13_beta:1.8
	Helios1_2_2:1.8
	Helios1_2_2Beta:1.8
	Helios1_2_1:1.8
	Helios1_2:1.5;
locks; strict;
comment	@ * @;


1.11
date	94.03.08.12.30.51;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	92.09.25.16.35.00;	author bart;	state Exp;
branches;
next	1.9;

1.9
date	92.09.22.17.29.13;	author paul;	state Exp;
branches;
next	1.8;

1.8
date	91.03.14.21.49.44;	author paul;	state Exp;
branches;
next	1.7;

1.7
date	91.03.11.11.29.15;	author paul;	state Exp;
branches;
next	1.6;

1.6
date	91.01.22.12.55.53;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	90.11.22.00.27.43;	author paul;	state Exp;
branches;
next	1.4;

1.4
date	90.11.22.00.11.15;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	90.11.07.00.58.28;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	90.08.23.10.16.05;	author james;	state Exp;
branches;
next	1.1;

1.1
date	90.08.22.16.23.42;	author james;	state Exp;
branches;
next	;


desc
@@


1.11
log
@fixed compile time warnings and added folding
@
text
@/*{{{  Header */

/*
 * memory display utility
 *
 * hacked from code for mem by NC 21/02/89
 *
 * This code is copyright (c) 1994 by Perihelion Software Ltd.
 */

#ifdef __TRAN
static char *rcsid = "$Header: /users/nickc/RTNucleus/cmds/private/RCS/free.c,v 1.10 1992/09/25 16:35:00 bart Exp nickc $";
#endif

/*}}}*/
/*{{{  Includes */

#include <stdio.h>
#include <stddef.h>
#include <syslib.h>
#include <root.h>
#include <stdio.h>
#include <memory.h>
#include <task.h>
#include <servlib.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

/*}}}*/
/*{{{  Macros */

# define FirstPoolBlock(pool) ((Memory *)(pool + 1))
# define LastPoolBlock(poo)  ((Memory *)(poo->Memory.Head))

/*}}}*/
/*{{{  Types */

typedef enum
  {
    Normal,
    Long,
    Short
  }
Output;

typedef struct block
  {
    char *	owner;
    uword	alloc;
    uword	program;
    uword	module;
    uword	fast;
  }
block;

/*}}}*/
/*{{{  Constants */

#define table_block_size	10

/*}}}*/
/*{{{  Variables */

block * 	blocks;
int		table_size = 0;
int		nextfree   = 0;
char *		ProgName;

/*}}}*/
/*{{{  Code */

/*{{{  find_program_block() */

int
find_program_block( char * name )
/*
 * finds a program block
 * creates a new entry if none exists
 * returns the index of the block in the table
 */
{
  int	len   = strlen( name );
  int	j;
  int 	i;
  char *	ptr;
  char *	lname = (char *)malloc( len + 1 );
  char *	lblock;
  
  
  if (lname == NULL)
    {
      return 0;
    }
  
  strcpy( lname, name );
  
  for (i = 0; i < len; i++)
    {
      lname[ i ] = tolower( lname[ i ] );
    }
  
  if ((ptr = strrchr( lname, '/' )) != NULL)
    {
      i = 0;
      
      ++ptr;
      
      while ((lname[ i++ ] = *ptr++) != '\0')
	;
    }
  
  for (i = 0; i < nextfree; i++)
    {
      len = strlen( blocks[ i ].owner );
      
      lblock = (char *)malloc( len + 1 );
      
      if (lblock == NULL)
	{
	  free( lname );
	  
	  return 0;
	}
      
      strcpy( lblock, blocks[ i ].owner );
      
      for (j = 0; j < len; j++)
	{
	  lblock[ j ] = tolower( lblock[ j ] );
	}
      
      if ((ptr = strchr( lblock, '.' )) != NULL)
	{
	  *ptr = '\0';
	}
      
      if (!strcmp( lblock, lname  ))
	{
	  free( lblock );
	  
	  break;
	}
      
      free( lblock );
    }
  
  free( lname );
  
  if (i == nextfree)
    {
      if (nextfree == table_size)
	{
	  table_size += table_block_size;
	  
	  if ((blocks = (block *)realloc( blocks, table_size * sizeof( block ) )) == NULL)
	    {
	      fprintf( stderr, "free: unable to reallocate table\n" );
	      
	      exit( -2 );
	    }
	}
      
      memset( &blocks[ nextfree ], 0, sizeof( block ) );
      
      blocks[ nextfree++ ].owner = name;
    }		
  
  return i;
  
} /* find_program_block */

/*}}}*/
/*{{{  find_block() */

int
find_block( char * name )
/*
 * locate a given block in the table
 * creates new entry if the block cannot be found
 * returns the index of the block in the table
 */
{
  int i;
  
  for (i = 0; i < nextfree; i++)
    {
      if (!strcmp( blocks[ i ].owner, name  ))
	break;
    }
  
  if (i == nextfree)
    {
      if (nextfree >= table_size)
	{
	  table_size += table_block_size;
	  
	  if ((blocks = (block *)realloc( blocks, table_size * sizeof( block ) )) == NULL)
	    {
	      fprintf( stderr, "free: unable to reallocate table\n" );
	      
	      exit( -3 );
	    }
	}
      
      memset( &blocks[ nextfree ], 0, sizeof( block ) );
      
      blocks[ nextfree++ ].owner = name;
    }
  
  return i;
} /* find_block */

/*}}}*/
/*{{{  compare() */

int
compare(
	const void *	a,
	const void *	b )
/*
 * compare two blocks and return an integer < 0, == 0, or > 0
 * depending upon whether a < b, a == b or a > b
 */
{
  block *	first  = (block *)a;
  block *	second = (block *)b;
  word		first_size;
  word		second_size;
  
  
  first_size  = first->alloc  + first->fast  + first->module  + first->program;
  second_size = second->alloc + second->fast + second->module + second->program;
  
  return (int)first_size - (int)second_size;
  
} /* compare */

/*}}}*/
/*{{{  approximate() */

char *
approximate( uword size )
/*
 * returns formatted string approximating 'size'
 */
{
  static char	buffer[ 128 ];
  
  
  buffer[ 0 ] = '\0';
  
  if (size < 1024)
    {
      sprintf( buffer, "%ld  bytes", size );
    }
  else if (size < 1024 * 1024)
    {
      sprintf( buffer, "%ld Kbytes", (size  + 1023) / 1024 );
    }
  else
    {
      sprintf( buffer, "%ld.%ld Mbytes",
	      size / (1024 * 1024), (size - ((size / (1024 * 1024)) * 1024 * 1024)) / (1024 * 1024 / 10) );
    }
  
  return (char *)buffer;
  
} /* approximate */

/*}}}*/
/*{{{  scan() */

bool
scan( Output output )
/*
 * performs the memory scan
 * return true upon success, false otherwise
 */
{
  RootStruct *	Root = GetRoot();
  char		machine_name[ 128 ];
  Pool *		p;
  Pool *		mypool;
  Pool *		freepool;
  Pool *		syspool;
#ifdef __RRD
  Pool *		rrdpool;
#endif
#if defined(__TRAN) || defined (__C40) || defined (__ABC)
  Pool *		fastpool;
#endif
  Memory *	m;
  Memory *	last;
  uword		alloc    = 0;
  uword		fast     = 0;
  uword		freefast = 0;
  uword		module   = 0;
  uword		program  = 0;	
  uword 		total    = 0;
  uword		maxblock = 0;
  bool		fast_ram;
  int		i;
  
  
  table_size += table_block_size;
  
  if ((blocks = (block *) calloc( table_size, sizeof( block ) )) == NULL)
    {
      fprintf( stderr, "%s: insufficient memory for table\n", ProgName );
      
      return false;
    }
  
  blocks[ nextfree++ ].owner = "Loader.1";
  blocks[ nextfree++ ].owner = "SysPool";
#ifdef __RRD
  blocks[ nextfree++ ].owner = "RRDPool";
#endif
  mypool   = &MyTask->MemPool;
  
  freepool = p = Root->FreePool;
  
  syspool  = &Root->SysPool;
  
#ifdef __RRD
  rrdpool	 = Root->RRDPool;
#endif
#if defined(__TRAN) || defined(__C40) || defined(__ABC)
  fastpool = &Root->FastPool;
#endif
  
  m = FirstPoolBlock(p);
  last = LastPoolBlock(p);
  
  until (m >= last)
    {
      uword 		size  = m->Size & ~Memory_Size_BitMask;
      word 		alloc = m->Size & Memory_Size_FwdBit;
      Memory *	next  = (Memory *)((word)m + size);
      
      
      if (size > 0x08000000)
	{
	  /*
	   * any block this big is unreal
	   * this can be caused by the 'steal' program
	   */
	  
	  m = (Memory *)((word)m + ((uword)m->Size & ~15));
	  
	  continue;
	}
      
      if (!alloc)
	{
	  total += size;
	  
	  if (size > maxblock)
	    maxblock = size;
	}
#if defined(__TRAN) || defined(__C40) || defined(__ABC)
      if (m->Size & 4) 
	{
	  Carrier *	c = (Carrier *)(m + 1);
	  
	  
	  size     = c->Size;	
	  
	  fast_ram = true;
	}
      else
#endif
	{
	  fast_ram = false;
	}
      
      if (m->Pool == freepool &&  alloc)
	{
	  printf( "%p block is INCONSISTENT - free and alloc'ed\n", m );
	}
      
      if (m->Pool != freepool && !alloc)
	{
	  printf( "%p block is INCONSISTENT - not free but not alloc'ed\n", m );
	}
      
      if (( alloc && (next->Size & Memory_Size_BwdBit) == 0) ||
	  (!alloc && (next->Size & Memory_Size_BwdBit) != 0) )
	{
	  printf( "%p BWD bit of next wrong\n", m );
	}
      
      if (alloc && (*(word *)(m + 1) == T_Program))
	{
	  Program *	prog = (Program *)(m + 1);
	  
	  
	  blocks[ find_program_block( prog->Module.Name ) ].program += size;
	}
      else if (alloc && (*(word *)(m + 1) == T_Module))
	{
	  blocks[ 0 ].alloc += size;
	}
      else if (alloc && (*(word *)(m + 1) == T_Device))
	{
	  blocks[ 0 ].alloc += size;
	}
      else if (m->Pool == freepool)
	{
	  ;
	}
      else if (m->Pool == syspool)
	{
	  blocks[ 1 ].alloc += size;
	}
#if defined(__TRAN) || defined(__C40) || defined(__ABC)
else if (m->Pool == fastpool)
  {
    freefast += size;
  }
#endif
#ifdef __RRD
else if (m->Pool == rrdpool)
  {
    blocks[ 2 ].alloc += size;
  }
#endif
else
  {
    Task *		task  = (Task*)((int)(m->Pool) - offsetof( Task, MemPool ));
    ObjNode *	entry = (ObjNode *)task->TaskEntry;
    int 		block;
    
    block = find_block( entry->Name );
    if (*(word *)(m + 1) == (word)(m + 1))
      {
	blocks[ block ].module += size;
      }
    else
      {
	if (fast_ram)
	  {
	    blocks[ block ].fast += size;
	  }
	else
	  {
	    blocks[ block ].alloc += size;
	  }
      }
  }
      
      m = (Memory *)((word)m + ((uword)m->Size & ~15));
    }
  
  qsort( blocks, nextfree, sizeof( block ), compare );
  
  for (i = 0; i < nextfree; i++)
    {
      alloc   += blocks[ i ].alloc;
      fast    += blocks[ i ].fast;
      module  += blocks[ i ].module;
      program += blocks[ i ].program;
    }
  
  MachineName( (string)&machine_name );
  
  printf( "\nMemory statistics for processor %s\n\n", machine_name );
  
  if (output == Short)
    {
      printf( "Free memory available:  %12s\n", approximate( total ) );
      printf( "Largest free block:     %12s\n", approximate( maxblock ) );
#if defined(__TRAN) || defined(__C40) || defined(__ABC)
      printf( "Fast RAM available:     %12s\n", approximate( freefast ) );
#endif
      printf( "Total memory allocated: %12s\n", approximate( alloc + fast + module + program ) );
      printf( "Total memory in system: %12s\n",
	     approximate( alloc + fast + freefast + module + program + total ) );
      
      return true;
    }
  else
    {
      printf( "Free memory available:  %8lu\n", total );
      printf( "Largest free block:     %8lu\n", maxblock );
#if defined(__TRAN) || defined(__C40) || defined(__ABC)
      printf( "Fast RAM available:     %8u\n", freefast );
#endif
      printf( "Total memory allocated: %8lu\n", alloc + fast + module + program );
      printf( "Total memory in system: %8lu\n",
	     alloc + fast + freefast + module + program + total );
    }
  
  printf( "\n" );
  printf( "Allocated Memory :-\n" );
  printf( "\n" );
  printf( " Dynamic  Fast   Static     Code    Total  Owner\n" );
  printf( " -------  ----   ------     ----    -----  -----\n" );
  
  for (i = 0; i < nextfree; i++)
    {
      printf( " %7lu  %4lu  %7lu  %7lu  %7lu  %s\n",
	     blocks[ i ].alloc,
	     blocks[ i ].fast,
	     blocks[ i ].module,
	     blocks[ i ].program,
	     blocks[ i ].alloc + blocks[ i ].fast + blocks[ i ].module + blocks[ i ].program,
	     blocks[ i ].owner );
    }
  
  printf( "  ------  ----   ------   ------  -------\n" );
  
  printf( " %7lu  %4lu  %7lu  %7lu  %7lu\n",
	 alloc,  fast,  module,  program,
	 alloc + fast + module + program );
  
  
  free( blocks );
  
  return true;
  
} /* scan */

/*}}}*/
/*{{{  usage() */

void
usage( void )
/*
 * explain the usage of the program
 */
{
  fprintf( stderr, "usage: %s [-s]\n", ProgName );
  
} /* usage */

/*}}}*/
/*{{{  main() */

int
main(
	int	argc,
	char **	argv )
/*
 * start up and run world
 */
{
  char *	arg;
  Output	output = Normal;
  
  
  ProgName = argv[ 0 ];
  
  while (argc > 1)
    {
      arg = *++argv;
      --argc;
      
      if (arg[ 0 ] == '-')
	{
	  switch (arg[ 1 ])
	    {
	    default:
	      usage();
	      return -2;
	      
	    case 's':
	      output = Short;
	      break;
	      
	    case 'l':
	      output = Long;
	      break;
	      
	    case 'n':
	      output = Normal;
	      break;					
	    }
	}
      else
	{
	  usage();
	  
	  return -2;
	}
    }
  
  if (!scan( output ))
    {
      return -1;
    }
  else
    {
      return 0;
    }
  
} /* main */

/*}}}*/

/*}}}*/

/* end of free.c */
@


1.10
log
@Now copes with device drivers as well as resident libraries.
@
text
@d1 2
d7 2
d11 6
a16 1
static char *rcsid = "$Header: /m/giga/HeliosRoot/Helios/cmds/private/RCS/free.c,v 1.9 1992/09/22 17:29:13 paul Exp $";
d30 2
a32 8
#ifdef __ABC
# ifdef __MI
#  define FirstPoolBlock(pool) ((Memory *)((word)(pool + 1) + ((sizeof(Pool) + sizeof(MIInfo) + 15) & ~15)))
# else
#  define FirstPoolBlock(pool) ((Memory *)(pool + 1))
# endif
# define LastPoolBlock(poo)  ((Memory *)((word)FirstPoolBlock(poo) + p->Max))
#else
a34 1
#endif
d36 2
d40 6
a45 5
{
	Normal,
	Long,
	Short
} Output;
d48 11
a58 7
{
	char *		owner;
	unsigned int	alloc;
	unsigned int	program;
	unsigned int	module;
	unsigned int	fast;
} block;
d62 3
d70 4
d83 88
a170 88
	int	len   = strlen( name );
	int	j;
	int 	i;
	char *	ptr;
	char *	lname = malloc( len + 1 );
	char *	lblock;


	if (lname == NULL)
	{
		return 0;
	}
		
	strcpy( lname, name );

	for (i = 0; i < len; i++)
	{
		lname[ i ] = tolower( lname[ i ] );
	}

	if ((ptr = strrchr( lname, '/' )) != NULL)
	{
		i = 0;

		++ptr;
		
		while ((lname[ i++ ] = *ptr++) != '\0')
			;
	}

	for (i = 0; i < nextfree; i++)
	{
		len = strlen( blocks[ i ].owner );

		lblock = malloc( len + 1 );

		if (lblock == NULL)
		{
			free( lname );

			return 0;
		}
				
		strcpy( lblock, blocks[ i ].owner );

		for (j = 0; j < len; j++)
		{
			lblock[ j ] = tolower( lblock[ j ] );
		}
		
		if ((ptr = strchr( lblock, '.' )) != NULL)
		{
			*ptr = '\0';
		}

		if (!strcmp( lblock, lname  ))
		{
			free( lblock );
			
			break;
		}
		
		free( lblock );
	}

	free( lname );

	if (i == nextfree)
	{
		if (nextfree == table_size)
		{
			table_size += table_block_size;

			if ((blocks = realloc( blocks, table_size * sizeof( block ) )) == NULL)
			{
				fprintf( stderr, "free: unable to reallocate table\n" );
				
				exit( -2 );
			}
		}
		
		memset( &blocks[ nextfree ], 0, sizeof( block ) );
			
		blocks[ nextfree++ ].owner = name;
	}		

	return i;
		
d173 2
d184 28
a211 28
	int i;

	for (i = 0; i < nextfree; i++)
	{
		if (!strcmp( blocks[ i ].owner, name  ))
			break;
	}

	if (i == nextfree)
	{
		if (nextfree >= table_size)
		{
			table_size += table_block_size;

			if ((blocks = realloc( blocks, table_size * sizeof( block ) )) == NULL)
			{
				fprintf( stderr, "free: unable to reallocate table\n" );
				
				exit( -3 );
			}
		}
					
		memset( &blocks[ nextfree ], 0, sizeof( block ) );

		blocks[ nextfree++ ].owner = name;
	}

	return i;
d214 2
d226 11
a236 11
	block *		first  = (block *)a;
	block *		second = (block *)b;
	int		first_size;
	int		second_size;
	

	first_size  = first->alloc  + first->fast  + first->module  + first->program;
	second_size = second->alloc + second->fast + second->module + second->program;
	
	return first_size - second_size;

d239 2
d243 1
a243 1
approximate( unsigned int size )
d248 21
a268 20
	static char	buffer[ 128 ];
	

	buffer[ 0 ] = '\0';
	
	if (size < 1024)
	{
		sprintf( buffer, "%d  bytes", size );
	}
	else if (size < 1024 * 1024)
	{
		sprintf( buffer, "%d Kbytes", (size  + 1023) / 1024 );
	}
	else
	{
		sprintf( buffer, "%d.%d Mbytes", size / (1024 * 1024), (size - ((size / (1024 * 1024)) * 1024 * 1024)) / (1024 * 1024 / 10) );
	}
	
	return (char *)buffer;
	
d271 2
d281 6
a286 6
 	RootStruct *	Root = GetRoot();
	char		machine_name[ 128 ];
	Pool *		p;
	Pool *		mypool;
	Pool *		freepool;
	Pool *		syspool;
d288 1
a288 1
	Pool *		rrdpool;
d291 1
a291 1
	Pool *		fastpool;
d293 24
a316 24
	Memory *	m;
	Memory *	last;
	unsigned int	alloc    = 0;
	unsigned int	fast     = 0;
	unsigned int	freefast = 0;
	unsigned int	module   = 0;
	unsigned int	program  = 0;	
	uword 		total    = 0;
	uword		maxblock = 0;
	bool		fast_ram;
	int		i;


	table_size += table_block_size;
	
	if ((blocks = calloc( table_size, sizeof( block ) )) == NULL)
	{
		fprintf( stderr, "%s: insufficient memory for table\n", ProgName );
		
		return false;
	}

	blocks[ nextfree++ ].owner = "Loader.1";
	blocks[ nextfree++ ].owner = "SysPool";
d318 1
a318 1
	blocks[ nextfree++ ].owner = "RRDPool";
d320 6
a325 6
	mypool   = &MyTask->MemPool;

	freepool = p = Root->FreePool;

	syspool  = &Root->SysPool;

d327 4
a330 1
	rrdpool	 = Root->RRDPool;
d332 30
d363 10
a372 1
	fastpool = &Root->FastPool;
d374 40
a413 5

	m = FirstPoolBlock(p);
	last = LastPoolBlock(p);

	until (m >= last)
d415 2
a416 79
		uword 		size  = m->Size & ~Memory_Size_BitMask;
		word 		alloc = m->Size & Memory_Size_FwdBit;
		Memory *	next  = (Memory *)((word)m + size);


		if (size > 0x08000000)
		{
			/*
			 * any block this big is unreal
			 * this can be caused by the 'steal' program
			 */
			 
			m = (Memory *)((word)m + ((uword)m->Size & ~15));

			continue;
		}
		
		if (!alloc)
		{
			total += size;

			if (size > maxblock)
				maxblock = size;
		}
#if defined(__TRAN) || defined(__C40) || defined(__ABC)
		if (m->Size & 4) 
		{
			Carrier *	c = (Carrier *)(m + 1);
				
		
			size     = c->Size;	

			fast_ram = true;
		}
		else
#endif
		{
			fast_ram = false;
		}

		if (m->Pool == freepool &&  alloc)
		{
			printf( "%p block is INCONSISTENT - free and alloc'ed\n", m );
		}

	    	if (m->Pool != freepool && !alloc)
		{
			printf( "%p block is INCONSISTENT - not free but not alloc'ed\n", m );
		}

		if (( alloc && (next->Size & Memory_Size_BwdBit) == 0) ||
		    (!alloc && (next->Size & Memory_Size_BwdBit) != 0) )
		{
			printf( "%p BWD bit of next wrong\n", m );
		}
		
		if (alloc && (*(word *)(m + 1) == T_Program))
		{
			Program *	prog = (Program *)(m + 1);


			blocks[ find_program_block( prog->Module.Name ) ].program += size;
		}
		else if (alloc && (*(word *)(m + 1) == T_Module))
		{
			blocks[ 0 ].alloc += size;
		}
		else if (alloc && (*(word *)(m + 1) == T_Device))
		{
			blocks[ 0 ].alloc += size;
		}
		else if (m->Pool == freepool)
		{
			;
		}
		else if (m->Pool == syspool)
		{
			blocks[ 1 ].alloc += size;
		}
d418 4
a421 4
		else if (m->Pool == fastpool)
		{
			freefast += size;
		}
d424 50
a473 50
		else if (m->Pool == rrdpool)
		{
			blocks[ 2 ].alloc += size;
		}
#endif
		else
		{
			Task *		task  = (Task*)((int)(m->Pool) - offsetof( Task, MemPool ));
			ObjNode *	entry = (ObjNode *)task->TaskEntry;
			int 		block;

			block = find_block( entry->Name );
			if (*(word *)(m + 1) == (word)(m + 1))
			{
				blocks[ block ].module += size;
			}
			else
			{
				if (fast_ram)
				{
					blocks[ block ].fast += size;
				}
				else
				{
					blocks[ block ].alloc += size;
				}
			}
		}

		m = (Memory *)((word)m + ((uword)m->Size & ~15));
	}

	qsort( blocks, nextfree, sizeof( block ), compare );

	for (i = 0; i < nextfree; i++)
	{
		alloc   += blocks[ i ].alloc;
		fast    += blocks[ i ].fast;
		module  += blocks[ i ].module;
		program += blocks[ i ].program;
	}

	MachineName( (string)&machine_name );
	
	printf( "\nMemory statistics for processor %s\n\n", machine_name );

	if (output == Short)
	{
		printf( "Free memory available:  %12s\n", approximate( total ) );
		printf( "Largest free block:     %12s\n", approximate( maxblock ) );
d475 1
a475 1
		printf( "Fast RAM available:     %12s\n", approximate( freefast ) );
d477 10
a486 9
		printf( "Total memory allocated: %12s\n", approximate( alloc + fast + module + program ) );
		printf( "Total memory in system: %12s\n", approximate( alloc + fast + freefast + module + program + total ) );

		return true;
	}
	else
	{
		printf( "Free memory available:  %8u\n", total );
		printf( "Largest free block:     %8u\n", maxblock );
d488 1
a488 1
		printf( "Fast RAM available:     %8u\n", freefast );
d490 33
a522 32
		printf( "Total memory allocated: %8u\n", alloc + fast + module + program );
		printf( "Total memory in system: %8u\n", alloc + fast + freefast + module + program + total );
	}
	
	printf( "\n" );
	printf( "Allocated Memory :-\n" );
	printf( "\n" );
	printf( " Dynamic  Fast   Static     Code    Total  Owner\n" );
	printf( " -------  ----   ------     ----    -----  -----\n" );
	
	for (i = 0; i < nextfree; i++)
	{
		printf( " %7u  %4u  %7u  %7u  %7u  %s\n",
			blocks[ i ].alloc,
			blocks[ i ].fast,
			blocks[ i ].module,
			blocks[ i ].program,
			blocks[ i ].alloc + blocks[ i ].fast + blocks[ i ].module + blocks[ i ].program,
			blocks[ i ].owner );
	}
	
	printf( "  ------  ----   ------   ------  -------\n" );

	printf( " %7u  %4u  %7u  %7u  %7u\n",
		alloc,  fast,  module,  program,
		alloc + fast + module + program );


	free( blocks );
	
	return true;

d525 2
d534 2
a535 2
	fprintf( stderr, "usage: %s [-s]\n", ProgName );
	
d538 2
d549 54
a602 39
	char *	arg;
	Output	output = Normal;
		

	ProgName = argv[ 0 ];

	while (argc > 1)
	{
		arg = *++argv;
		--argc;
		
		if (arg[ 0 ] == '-')
		{
			switch (arg[ 1 ])
			{
			default:
				usage();
				return -2;
				
			case 's':
				output = Short;
				break;
				
			case 'l':
				output = Long;
				break;
					
			case 'n':
				output = Normal;
				break;					
			}
		}
		else
		{
			usage();
			
			return -2;
		}
	}
d604 1
a604 10
	if (!scan( output ))
	{
		return -1;
	}
	else
	{
		return 0;
	}
	
} /* main */
@


1.9
log
@fixed for ONCHIPMEM on C40, removed for ARM
unless __ABC
@
text
@d7 1
a7 1
static char *rcsid = "$Header: /m/giga/HeliosRoot/Helios/cmds/private/RCS/free.c,v 1.8 1991/03/14 21:49:44 paul Exp paul $";
d377 4
@


1.8
log
@fix for new ARM (__MI) organisation of FreePool memory headers
Pool + RRDPool + MIInfo | Memory....
(ARM only)
@
text
@d7 1
a7 1
static char *rcsid = "$Header: /giga/HeliosRoot/Helios/cmds/com/RCS/free.c,v 1.7 91/03/11 11:29:15 paul Exp Locker: paul $";
d22 1
a22 1
#ifdef __ARM
d265 1
a265 1
#if defined(__TRAN) || defined (__ARM)
d304 1
a304 1
#if defined(__TRAN) || defined(__ARM)
d337 1
a337 1
#if defined(__TRAN) || defined(__ARM)
d388 1
a388 1
#if defined(__TRAN) || defined(__ARM)
d445 1
a445 1
#if defined(__TRAN) || defined(__ARM)
d457 1
a457 1
#if defined(__TRAN) || defined(__ARM)
@


1.7
log
@made to comply with new root.h
@
text
@d7 1
a7 1
static char *rcsid = "$Header: /giga/HeliosRoot/Helios/cmds/com/RCS/free.c,v 1.6 91/01/22 12:55:53 paul Exp Locker: paul $";
d22 13
d306 1
a306 2
#endif		
	last     = (Memory *)p->Memory.Head;
d308 2
a309 1
	m        = (Memory *)(p + 1);
@


1.6
log
@updated to enable fastram display for ARM version as well as TRAN
@
text
@d7 1
a7 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/free.c,v 1.5 90/11/22 00:27:43 paul Exp $";
d289 1
a289 1
	rrdpool	 = &Root->RRDPool;
@


1.5
log
@fixed memory size totals
@
text
@d7 1
a7 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/free.c,v 1.4 90/11/22 00:11:15 paul Exp $";
d252 1
a252 1
#ifdef __TRAN
d291 1
a291 1
#ifdef __TRAN
d324 1
a324 1
#ifdef __TRAN
d375 1
a375 1
#ifdef __TRAN
d432 1
a432 1
#ifdef __TRAN
d444 1
a444 1
#ifdef __TRAN
@


1.4
log
@fixed to work with robust ram disk
@
text
@d7 1
a7 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/free.c,v 1.3 90/11/07 00:58:28 paul Exp $";
d416 1
a416 1
	for (i = 1; i < nextfree; i++)
@


1.3
log
@slightly more specific error message
@
text
@d7 1
a7 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/free.c,v 1.2 90/08/23 10:16:05 james Exp $";
d29 1
a29 1
typedef struct _block
a154 1

d163 1
a163 1
		if (nextfree == table_size)
d178 1
a178 1
	}		
a180 1
		
d249 4
d254 1
d277 1
a277 1
	blocks[ nextfree++ ].owner = "Loader";
d279 3
a281 1

d286 1
a286 1
	syspool  = &(Root->SysPool);
d288 5
a292 2
#ifndef __HELIOSARM
	fastpool = &(Root->FastPool);
d300 1
a300 1
		uword 		size  = m->Size & (~15);
d324 1
a324 1
#ifndef __HELIOSARM
d375 1
a375 1
#ifndef __HELIOSARM
d381 6
a391 1
				
a393 1

d432 1
a432 1
#ifndef __HELIOSARM
d444 1
a444 1
#ifndef __HELIOSARM
d485 1
a485 1
 * expalin the usage of the program
@


1.2
log
@*** empty log message ***
@
text
@d7 1
a7 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/free.c,v 1.1 90/08/22 16:23:42 james Exp Locker: james $";
d332 1
a332 2
		if ((m->Pool == freepool &&  alloc) ||
	    	    (m->Pool != freepool && !alloc) ) 
d334 6
a339 1
			printf( "%p block is INCONSISTENT\n", m );
@


1.1
log
@Initial revision
@
text
@d7 1
a7 1
static char rcsid[] = "$Header$";
@
