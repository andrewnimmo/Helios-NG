head	1.2;
access;
symbols
	Helios_1_3_1:1.2
	Helios_C40_1_3_Official_Release:1.2
	Alenia_release:1.2
	Helios1_3:1.2
	C40_Field_Test_2:1.2
	C40_Field_Test_R1:1.2
	Helios13_beta:1.2
	Helios1_2_2:1.2
	Helios1_2_2Beta:1.2
	Helios1_2_1:1.2
	Helios1_2:1.2;
locks; strict;
comment	@ * @;


1.2
date	90.08.23.09.48.31;	author james;	state Exp;
branches;
next	1.1;

1.1
date	90.08.22.15.59.00;	author james;	state Exp;
branches;
next	;


desc
@@


1.2
log
@*** empty log message ***
@
text
@
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/boot.c,v 1.1 90/08/22 15:59:00 james Exp Locker: james $";

#include <syslib.h>
#include <config.h>
#include <servlib.h>
#include <gsp.h>
#include <root.h>

#ifdef Malloc
#undef Malloc
#endif

extern Object *CurrentDir;

Config configinit = {
		32,
		1,
		NULL,
		0,
		0,
		6,
		0,0,0,
		28,
		24,	
		4,
		{
			{0x00,2,6,0 },
			{0x00,2,6,1 },
			{0x00,2,6,2 },
			{0x00,2,6,3 }
		},
};

NameInfo	Info =
		{
			NullPort,
			0,
			DefDirMatrix,
			(word *)NULL
		};

static char myname[100];
static char childname[100];

static char linkname[NameMax];

main(int argc, char **argv)
{
	Object *nte;
	Stream *s;
	word size, rdsize;
	int link;
	byte *image = NULL;
	string name;
	int i;
	word e;
	Config *config;
	int confsize, mynamelen, childlen;

	if( argc != 3 ) 
	{
		printf("usage: boot <link> <name>\n");
		exit(1);
	}

	link = atoi(argv[1]);
	name = argv[2];

	if( link < 0 || link > 4 )
	{
		printf("Link number %d invalid\n",link);
		exit(1);
	}

	sprintf(linkname,"/link.%d",link);

#ifdef READIMAGE
	s = Open(CurrentDir,"/helios/lib/nucleus",O_ReadOnly);

	if( s == NULL )
	{
		printf("Cannot open Nucleus image\n");
		exit(1);
	}

	size = 100000;

	image = Malloc(size);

	if( image == NULL )
	{
		printf("Cannot allocate Nucleus image\n");
		exit(1);
	}

#if 0
	rdsize = Read(s,image,size,-1);
#else
	{
		word size;
		word pos = 0;
		until((size=Read(s,image+pos,4000,-1))!=4000)
		{
			pos += size;
		}
		rdsize = pos + size;
	}
#endif
#if 0	
	if( rdsize != size )
	{
		printf("Cannot read Nucleus image\n");
		exit(1);
	}
#endif

#endif
	MachineName(myname);
	strcpy(childname,myname);

	for( i = strlen(childname); childname[i] != c_dirchar ; i-- );
	childname[i+1] = '\0';
	strcat(childname,name);

	mynamelen = strlen(myname)+1;
	childlen = strlen(childname)+1;
	confsize = sizeof(Config)+mynamelen+childlen;

	config = Malloc(confsize);

	if( config == NULL )
	{
		printf("Cannot allocate config\n");
		exit(1);
	}

	memcpy(config,&configinit,sizeof(Config));
	strcpy((char *)config+sizeof(Config),childname);
	strcpy((char *)config+sizeof(Config)+childlen,myname);
	config->ParentName += childlen;
	config->Date = GetDate();

	BootLink(link,image,config,confsize);

#ifdef READIMAGE
	Free(image);
#endif

	Delay(OneSec);
#if 0
	Info.Port = Root->Links[link]->RemoteIOCPort;
	nte = Create(CurrentDir,childname,Type_Name,sizeof(NameInfo),(byte *)&Info);
#endif

	return 0;
}
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
static char rcsid[] = "$Header$";
@
