head	1.3;
access;
symbols
	Helios_1_3_1:1.2
	Helios_C40_1_3_Official_Release:1.1
	Alenia_release:1.1
	Helios1_3:1.1
	C40_Field_Test_2:1.1;
locks; strict;
comment	@ * @;


1.3
date	94.03.07.10.57.56;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	93.08.08.16.52.04;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	92.08.19.13.34.07;	author paul;	state Exp;
branches;
next	;


desc
@@


1.3
log
@added folding and updated to work with new RT kernel
@
text
@/*{{{  Incldues */

#ifdef NEW_SYSTEM
#include <message.h>
#else
#define in_kernel 1	/* trick root.h into letting us define PTE	*/
#if defined __C40 || defined __ARM
# define GetRoot() ((RootStruct *)GetRootBase())
#endif
#endif

#include <root.h>
#include <stdio.h>
#include <syslib.h>
#include <task.h>
#include <servlib.h>

/*}}}*/
/*{{{  Variables */

char lbuf[80];

/*}}}*/
/*{{{  Constants */

#define T_Free		0
#define T_Local 	1
#define T_Surrogate	2
#define T_Trail		3
#define T_Permanent	4

/*}}}*/
/*{{{  Types */

#ifndef NEW_SYSTEM
typedef struct PTE {
	byte		Type;
	byte		Cycle;
	byte		Flags;
	byte		Uses;
	word		Owner;
	word		TxId;
	word		RxId;
} PTE;
#endif

/*}}}*/
/*{{{  Code */

int
main(int argc,char **argv)
{
	RootStruct *root = GetRoot();
	PTE *p;
	PTE **basetab = (root->PortTable);
	word ptsize = root->PTSize/4 - 1;
	word i,j;
	int ports_local = 0;
	int ports_free  = 0;
	int ports_trail = 0;
	int ports_permanent = 0;
	int ports_surr = 0;
	char name[512];
#ifdef NEW_SYSTEM
  ExecInfo	sExecInfo;

  
  GetExecInfo( &sExecInfo );
#endif
	
	MachineName(name);
#ifdef NEW_SYSTEM
  WaitMutex( sExecInfo.PortsLock );
#endif
		
	for( j = 0; j < ptsize; j++ )
	{
		p = basetab[j];
		if( p == 0 ) break;
		if( p == (PTE *)(MinInt) ) continue;
		for( i = 0; i < 64; i++ )
		{
			PTE *pte = &p[i];
			switch (pte->Type)
			 { case T_Local : ports_local++; break;
			   case T_Free	: ports_free++; break;
			   case T_Trail : ports_trail++; break;
			   case T_Permanent : ports_permanent++; break;
			   case T_Surrogate : ports_surr++; break;
			}
		}
	}
	
#ifdef NEW_SYSTEM
  SignalMutex( sExecInfo.PortsLock );
#endif
            
	printf("Ports on %s : local %d, free %d, trail %d, permanent %d, surrogate %d\n",
	     name, ports_local, ports_free, ports_trail, ports_permanent, ports_surr);

}

/*}}}*/
@


1.2
log
@fixed for arm
@
text
@d1 5
a6 1
#include <root.h>
d10 1
d12 1
d18 3
d23 3
d32 4
d45 1
d47 4
d64 6
d72 3
d93 5
d102 2
@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
#ifdef __C40
@
