head	1.5;
access;
symbols
	Helios_1_3_1:1.5
	Helios_C40_1_3_Official_Release:1.4
	Alenia_release:1.3
	Helios1_3:1.3
	C40_Field_Test_2:1.3
	C40_Field_Test_R1:1.2
	Helios13_beta:1.2
	Helios1_2_2:1.2
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1;
locks; strict;
comment	@ * @;


1.5
date	93.08.12.16.57.00;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	93.02.17.11.14.43;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	92.10.08.13.08.58;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	91.11.04.10.30.42;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	90.09.26.19.02.46;	author paul;	state Exp;
branches;
next	;


desc
@@


1.5
log
@fixed compile time warnings (for C40)
@
text
@/****************************************************************/
/* File: output.c                                               */
/*                                                              */
/* Routines to manage the output of characters either to the    */
/* standard output or to a macro definition buffer.             */
/*                                                              */
/* Author: NHG 19-Feb-87                                        */
/****************************************************************/
#ifdef __TRAN
static char RcsId[] = "$Id: output.c,v 1.4 1993/02/17 11:14:43 paul Exp nickc $ Copyright (C) Perihelion Software Ltd.";
#endif
  
#include "ampp.h"

PUBLIC struct List *outbuf = NULL;
PUBLIC FILE *outfd = NULL;

#define LINEBUF_SIZE 128
PRIVATE BYTE linebuf[ LINEBUF_SIZE + 2 ];
PRIVATE INT linepos = 0;
PRIVATE INT lineempty = TRUE;

/********************************************************/
/* wrch                                                 */
/* wrstr                                                */
/*                                                      */
/* Write out a character and a string.                  */
/*                                                      */
/********************************************************/

PUBLIC void wrch(UBYTE ch )
{
  if ( outbuf == NULL )
    {
      /* This is a bit kludgy, but under certain circumstances */
      /* brackets will find themselves in the output           */

      if ( ch == c_lbra || ch == c_rbra ) return;
      
      linebuf[ linepos++ ] = ch & 0x7f;

      if ( ch == c_nl )
	{
	  if ( !lineempty )
	    {
	      linebuf[ linepos ] = '\0';
	      fputs( linebuf, outfd );
	      lineempty = TRUE;
	    }
	  linepos = 0;
	}
      else if ( ch != c_space && ch != c_tab ) lineempty = FALSE;

      if (linepos == LINEBUF_SIZE)
	{
	  linebuf[ linepos ] = '\0';
	  
	  fputs( linebuf, outfd );
	  
	  lineempty = TRUE;
	  linepos   = 0;	  
	}      
    }
#if 0
  /* '\' escapes characters only on first pass */
  else addch(outbuf,ch & 0x7f);
#else
  /* Permanently '\' escape characters. Macro definitions will output */
  /* expected text - PAB Jan '93. */
  else addch(outbuf, ch);
#endif
  
  /*
   * top bit stripping added by NC 4/11/91
   * top bit is used by lex to indicate a non-parseable character
   */
}

PUBLIC void wrstr(BYTE *s)
{
  while( *s )
    {
      wrch(*s++);
    }
}

/********************************************************/
/* wrnum                                                */
/*                                                      */
/* Write out a decimal number.                          */
/*                                                      */
/********************************************************/

PRIVATE void wrnum1(INT n )
{
        if( n == 0 ) return;
        wrnum1(n/10);
        wrch('0'+((UBYTE)n%10));
}

PUBLIC void wrnum(INT n)
{
        if( n < 0 ) wrch(c_minus);
        if( n == 0 ) wrch('0');
        else wrnum1(abs((int)n));
       
}

/********************************************************/
/* wrhex                                                */
/*                                                      */
/* Write out a hexadecimal number.                      */
/*                                                      */
/********************************************************/

PRIVATE void wrhex1(INT n )
{
        static char *hextab = "0123456789ABCDEF";
        if( n == 0 ) return;
        wrhex1((n>>4) & 0x0FFFFFFFL);
        wrch(hextab[n & 0xF]);
}

PUBLIC void wrhex(INT n)
{
        if( n == 0 ) wrch('0');
        else wrhex1(n);
}

@


1.4
log
@ Permanently '\' escape characters. Macro definitions will output expected text
@
text
@d9 4
a12 2
static char RcsId[] = "$Id: output.c,v 1.3 1992/10/08 13:08:58 nickc Exp paul $ Copyright (C) Perihelion Software Ltd.";

a22 3
PRIVATE wrnum1();
PRIVATE wrhex1();

d31 1
a31 2
PUBLIC void wrch(ch)
UBYTE ch;
d79 1
a79 2
PUBLIC void wrstr(s)
BYTE *s;
d94 8
a101 2
PUBLIC void wrnum(n)
INT n;
d105 1
a105 1
        else wrnum1(abs(n));
a108 8
PRIVATE wrnum1(n)
INT n;
{
        if( n == 0 ) return 0;
        wrnum1(n/10);
        wrch('0'+(n%10));
}

d116 1
a116 2
PUBLIC void wrhex(n)
INT n;
d118 8
a129 8
PRIVATE wrhex1(n)
INT n;
{
        static char *hextab = "0123456789ABCDEF";
        if( n == 0 ) return 0;
        wrhex1((n>>4) & 0x0FFFFFFFL);
        wrch(hextab[n & 0xF]);
}
@


1.3
log
@fixed bug overflowing line buffer
@
text
@d9 1
a9 1
static char RcsId[] = "$Id: output.c,v 1.2 1991/11/04 10:30:42 nickc Exp nickc $ Copyright (C) Perihelion Software Ltd.";
d66 2
d69 5
@


1.2
log
@added code to strpi top bit of output characters
@
text
@d9 1
a9 1
static char RcsId[] = "$Id: output.c,v 1.1 1991/11/04 10:28:41 nickc Exp $ Copyright (C) Perihelion Software Ltd.";
d15 3
a17 1
PRIVATE BYTE linebuf[128];
d35 37
a71 23
        if( outbuf == NULL )
        {
                /* This is a bit kludgy, but under certain circumstances */
                /* brackets will find themselves in the output           */
                if( ch == c_lbra || ch == c_rbra ) return;

                linebuf[linepos++] = ch & 0x7f;
                if( ch == c_nl ) {
                        if( !lineempty ) {
                                linebuf[linepos] = '\0';
                                fputs(linebuf,outfd);
                                lineempty = TRUE;
                        }
                        linepos = 0;
                }
                else if( ch != c_space && ch != c_tab ) lineempty = FALSE;
        }
        else addch(outbuf,ch & 0x7f);

	/*
	 * top bit stripping added by NC 4/11/91
	 * top bit is used by lex to indicate a non-parseable character
	 */
d77 4
a80 1
        while( *s ) wrch(*s++);
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
static char RcsId[] = "$Id$ Copyright (C) Perihelion Software Ltd.";
d39 1
a39 1
                linebuf[linepos++] = ch;
d50 6
a55 1
        else addch(outbuf,ch);
@
