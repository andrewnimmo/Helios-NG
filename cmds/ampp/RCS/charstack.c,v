head	1.2;
access;
symbols
	Helios_1_3_1:1.2
	Helios_C40_1_3_Official_Release:1.1
	Alenia_release:1.1
	Helios1_3:1.1
	C40_Field_Test_2:1.1
	C40_Field_Test_R1:1.1
	Helios13_beta:1.1
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1;
locks; strict;
comment	@ * @;


1.2
date	93.08.12.16.49.20;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	90.09.26.19.02.34;	author paul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fixed compile time warnings (for C40)
@
text
@/****************************************************************/
/* File: charstack.c                                            */
/*                                                              */
/* Maintains and manipulates character stacks both for macro    */
/* definitions and the putback facility                         */
/*                                                              */
/* Author: NHG 17-Feb-87                                        */
/****************************************************************/
#ifdef __TRAN
static char RcsId[] = "$Id: charstack.c,v 1.1 1990/09/26 19:02:34 paul Exp nickc $ Copyright (C) Perihelion Software Ltd.";
#endif
  
#include "ampp.h"

struct List freeq;

PUBLIC void initcs()
{
        InitList(&freeq);
}

/********************************************************/
/* addch                                                */
/*                                                      */
/* Add a character to a stack.                          */
/*                                                      */
/********************************************************/

PUBLIC void addch(
		  struct List *queue,
		  BYTE ch )
{
        struct Charbuf *buf = (struct Charbuf *)(queue->Head);
        INT size;

        if ( buf->node.Next == NULL || buf->size == charbuf_max )
        {
                buf = (struct Charbuf *)RemHead(&freeq);
                if( buf == NULL ) buf = New(struct Charbuf);
                AddHead(queue,(Node *)buf);
                size = 0;
        }
        else size = buf->size;

        buf->text[size] = ch;
        buf->size = size+1;
}

/********************************************************/
/* popchar                                              */
/*                                                      */
/* Remove the last char added to the stack              */
/*                                                      */
/********************************************************/

PUBLIC INT popch(struct List *queue)
{
        struct Charbuf *buf = (struct Charbuf *)(queue->Head);
        INT size;
        INT ch;

        if( buf->node.Next == NULL || buf->size <= 0 ) return -1;

        size = buf->size - 1;
        ch = buf->text[size];

        if( size == 0 )
        {
                AddHead(&freeq,RemHead(queue));
        }
        else buf->size = size;

        return( ch );
}

/********************************************************/
/* freebuf                                              */
/*                                                      */
/* Free all the buffers on the queue                    */
/*                                                      */
/********************************************************/

PUBLIC void freebuf(struct List *queue)
{
        struct Node *node;
        while( (node = RemHead(queue) )!= NULL ) AddHead(&freeq,node);
}
@


1.1
log
@Initial revision
@
text
@d9 4
a12 2
static char RcsId[] = "$Id$ Copyright (C) Perihelion Software Ltd.";

d17 1
a17 1
PUBLIC initcs()
d29 3
a31 3
PUBLIC void addch(queue,ch)
struct List *queue;
BYTE ch;
d56 1
a56 2
PUBLIC INT popch(queue)
struct List *queue;
d83 1
a83 2
PUBLIC void freebuf(queue)
struct List *queue;
@
