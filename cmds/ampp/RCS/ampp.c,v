head	1.11;
access;
symbols
	Helios_1_3_1:1.9
	Helios_C40_1_3_Official_Release:1.6
	Alenia_release:1.6
	Helios1_3:1.6
	C40_Field_Test_2:1.6
	C40_Field_Test_R1:1.4
	Helios13_beta:1.4
	Helios1_2_2:1.4
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1;
locks; strict;
comment	@ * @;


1.11
date	94.03.08.13.06.03;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	93.12.09.17.42.54;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	93.08.13.08.03.44;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	93.08.12.16.17.13;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	93.06.10.11.29.55;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	92.10.08.16.17.02;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	92.07.03.09.25.47;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	91.11.06.10.28.54;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	91.10.29.13.56.57;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	91.10.25.16.21.09;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	90.09.26.19.00.24;	author paul;	state Exp;
branches;
next	;


desc
@initial release for 1.2, fixes setjmp copy problems, arm C incompatibilities
@


1.11
log
@fixed compile time warning for ARM world
@
text
@/****************************************************************/
/* File: ampp.c                                                 */
/*                                                              */
/* Entry point for AMPP - Assembler Macro Pre-Preocessor for    */
/* the Helios assemblers. This preprocessor is based on that    */
/* given in Software Tools with a few syntactic changes and some*/
/* implementation improvements to make use of the facilities    */
/* available in C.                                              */
/*                                                              */
/* Author:   NHG  19-Feb-87                                     */
/* Modified: NOJC 25-Oct-91                                     */
/****************************************************************/

#ifdef NOT_USED
static char *RcsId = "$Id: ampp.c,v 1.10 1993/12/09 17:42:54 nickc Exp nickc $";
#endif

#include "ampp.h"
#include <ctype.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>
#include <stdlib.h>


PUBLIC FILE *		verfd;
PUBLIC jmp_buf 		error_level;
PRIVATE jmp_buf 	default_level;
PRIVATE INT 		maxerr = 0;

PUBLIC BYTE *		infile  = "<stdin>";
PUBLIC BYTE *		outfile = "<stdout>";
PUBLIC BYTE *		incpaths[ MAX_INCLUDE_PATHS ] = { DEFAULT_INCLUDE_PATH };
PUBLIC INT		in_line = 0;

PUBLIC INT 		traceflags;

#ifdef MWC
long			_stksize = 40000;
#endif

#define trace if (traceflags & db_fileop) _trace

static void
tidyup()
{
  if (outfd != NULL)
    fflush( outfd );

  if (verfd != NULL)
   fflush( verfd );

  if (infd != stdin && infd != NULL)
    fclose( infd );

  infile  = "<unknown>";
  in_line = 0;
  
  if (outfd != stdout && outfd != NULL)
    fclose( outfd );

  if (verfd != stderr && verfd != NULL)
    fclose( verfd );

  /* unload(); */

  longjmp( default_level, 1 );

  return;

} /* tidyup */


PUBLIC INT
max(
    INT a,
    INT b )
{
   return a > b ? a : b;

} /* max */


#ifdef __STDC__

PUBLIC void
error( BYTE * str, ... )
{
  if (str != NULL && verfd != NULL)
    {
      va_list ap;

  
      va_start( ap, str );

      if (infile != NULL && *infile != '\0')
	fprintf( verfd, "AMPP: Error: %s %ld : ", infile, in_line );
      else
	fprintf( verfd, "AMPP: Error: " );

      vfprintf( verfd, str, ap );

      va_end( ap );

      putc( '\n', verfd );
    }
  
  maxerr = max( maxerr, 20 );

  tidyup();

  /* exit( (int) maxerr ); */
}


PUBLIC void
warn( BYTE * str, ... )
{
  va_list ap;


  if (str == NULL || verfd == NULL)
    return;
  
  va_start( ap, str );

  if (infile != NULL && *infile != '\0')
    fprintf( verfd, "AMPP: Warning: %s %ld : ", infile, in_line );
  else
    fprintf( verfd, "AMPP: Warning: " );

  vfprintf( verfd, str, ap );

  va_end( ap );

  putc( '\n', verfd );

  maxerr = max( maxerr, 10 );

  return;
  
} /* warn */


PUBLIC void
report( BYTE * str, ... )
{
  va_list	ap;


  if (str == NULL || verfd == NULL)
    return;

  va_start( ap, str );

  vfprintf( verfd, str, ap );

  putc( '\n', verfd );

  va_end( ap );

  return;
  
} /* report */


PUBLIC void
_trace( BYTE * str, ... )
{
  va_list ap;


  if (str == NULL || verfd == NULL)
    return;
  
  va_start( ap, str );

  fprintf( verfd, "Trace: " );

  vfprintf( verfd, str, ap );

  putc( '\n', verfd );

  va_end( ap );

  return;
  
} /* _trace */


PUBLIC void
recover( BYTE * str, ... )
{
  if (str != NULL && verfd != NULL)
    {
      va_list	ap;


      va_start( ap, str );

      if (infile != NULL && *infile != '\0')
	fprintf( verfd, "AMPP: Warning: %s %ld : ", infile, in_line );
      else
	fprintf( verfd, "AMPP: Warning: " );

      vfprintf( verfd, str, ap );

      va_end( ap );

      putc( '\n', verfd );
    }

  maxerr = max( maxerr, 10 );

  longjmp( reclev, 1 );

  /* NOTREACHED */

} /* recover */

#else /* !__STDC__ */

PUBLIC
error( str, a, b, c, d, e, f )
  BYTE *	str;
  INT 		a, b, c, d, e, f;
{
  _fprintf(verfd,"AMPP: Error: %s %d :", infile, in_line );

  _fprintf(verfd,str,a,b,c,d,e,f);

  putc('\n',verfd);

  maxerr = max(maxerr,20);

  tidyup();
}

PUBLIC
warn( str, a, b, c, d, e, f )
  BYTE *	str;
  INT 		a, b, c, d, e, f;
{
  _fprintf(verfd,"AMPP: Warning: %s %d :",infile, in_line );

  _fprintf(verfd,str,a,b,c,d,e,f);

  putc('\n',verfd);

  maxerr = max(maxerr,10);
}

PUBLIC void
recover( str, a, b, c, d, e, f )
  BYTE *	str;
  INT 		a, b, c, d, e, f;
{
  warn( str, a, b, c, d, e, f );

  longjmp( reclev, 1 );
}

PUBLIC
_trace( str, a, b, c, d, e, f )
  BYTE *	str;
  INT 		a, b, c, d, e, f;
{
  _fprintf(verfd,"Trace: ");

  _fprintf(verfd,str,a,b,c,d,e,f);

  putc('\n',verfd);
}

PUBLIC
report(str,a,b,c,d,e,f)
  BYTE *str;
  INT a,b,c,d,e,f;
{
  _fprintf(verfd,str,a,b,c,d,e,f);

  putc('\n',verfd);
}


PRIVATE
_fprintf(fd,str,a,b,c,d,e,f)
  FILE *fd;
  BYTE *str;
  INT a,b,c,d,e,f;
{
  static BYTE fbuf[128];
  BYTE *t = fbuf;
  BYTE *s = str;


  while( *s != '\0' )
    {
      if ( *s == '%' ) 
	{
	  *t++ = *s++;
	  while( '0' <= *s && *s <= '9' ) *t++ = *s++;
	  switch( *s )
	    {
	    case 'x': 
	    case 'X': *t++ = 'l'; *t++ = 'x'; break;
	      
	    case 'd': 
	    case 'D': *t++ = 'l'; *t++ = 'd'; break;
	      
	    default: *t++ = *s; break;
	    }
	  s++;
	}
      
      *t++ = *s++;	
    }
  
  *t = '\0';
  
  fprintf(fd,fbuf,a,b,c,d,e,f);
}
#endif /* not __STDC__ */


#define _ARG_ 		if ( *++arg == 0 ) arg = *++argv;

bool
parsearg(
	 BYTE ***	aargv,
	 int		pass )
{
  char **	argv = *aargv;
  char *	arg   = *argv;


  if (pass == 1)
    {
      if ( *arg == '-' )
	{
	  arg++;
	  
	  switch ( locase( *arg ) )
	    {
	    case 't':
	      while ( *++arg != 0 )
		{
		  switch ( locase( *arg ) )
		    {
		    case 'l': traceflags |= db_lex;     break;
		    case 'p': traceflags |= db_parse;   break;
		    case 'b': traceflags |= db_builtin; break;
		    case 's': traceflags |= db_sym;     break;
		    case 'k': traceflags |= db_putback; break;
		    case 'i': traceflags |= db_fileop;  break;
		    default:
		      error( "unknown trace option -t%c", *arg );
		      break;
		    }
		}
	      break;
	      
	    case 'v':
		{
		  FILE *vfd;
		  
		  
		  _ARG_;
		  
		  if (arg == NULL)
		    error( "filename must follow -v option" );
		  
		  vfd = fopen( arg, "w" );
		  
		  if ( vfd == NULL )
		    error( "Cannot open %s for output", arg );
		  
		  verfd = vfd;
		  
		  break;
		}
	      
	    case 'd':
		{
		  char *		name;
		  char *		defn;
		  struct Symbol *	sym;
		  struct Macro *	macro = New( struct Macro   );
		  struct Charbuf *	buf   = New( struct Charbuf );
		  
		  
		  if (macro == NULL || buf == NULL)
		    error( "ran out of memory parsing arguments" );
		  
		  _ARG_;
		  
		  if (arg == NULL)
		    error( "macro name must follow -d option" );
		  
		  name = arg;
		  defn = *++argv;
		  
		  if (defn == NULL)
		    error( "no definition following macro name" );
		  
		  sym = insert( name );
		  
		  strcpy( buf->text, defn );
		  
		  buf->size = strlen( defn );
		  
		  InitList( &macro->def );
		  
		  macro->nargs = 0;
		  
		  AddHead( &macro->def, &buf->node );
		  
		  adddef( (INT)s_macro, sym, (INT)macro );
		  
		  break;
		}
	      
	    case 'i':
		{
		  struct stat	stat_buf;
		  int		i;
		  
		  
		  _ARG_;
		  
		  if (arg == NULL)
		    error( "filename must follow -i option" );
		  
		  if (stat( arg, &stat_buf ))
		    {
		      int	len = strlen( arg );
		      
		      
		      if (arg[ len -1 ] == '/')
			{
			  arg[ len - 1 ] = '\0';
			  
			  if (stat( arg, &stat_buf ))
			    error( "cannot find include directory %s", arg );
			}
		      else
			error( "cannot find include directory %s", arg );
		    }
		  
		  if (!S_ISDIR( stat_buf.st_mode ))
		    error( "file %s is not a directory", arg );

		  for (i = 0; i < MAX_INCLUDE_PATHS; i++)
		    if (incpaths[ i ] == NULL)
		      {
			incpaths[ i ] = arg;
			break;
		      }
		  
		  if (i == MAX_INCLUDE_PATHS)
		    error( "Too many include directories" );
		}
	      
	      break;
	      
	    case 'o':
	      _ARG_;
	      
	      if ( outfd != stdout )
		error("Give only one output file");
	      
	      if (arg == NULL)
		error( "filename must follow -o option" );
	      
	      outfile = arg;

	      trace( "Opening output file %s", outfile );
	      
	      outfd = fopen( outfile, "w" );
	      
	      if ( outfd == NULL )
		error( "Cannot open %s for output", outfile );
	      
	      break;
	      
	    case 'h':
	    case '?':
	      report( "ampp V1.3 (RCS version $Revision: 1.10 $)" );
	      report( "command line options ..." );
	      report( "-t{l,p,b,s,k,i}  - enable tracing of lex, parse, builtins, symbols, putbacks and file operations" );
	      report( "-v <filename>    - name of file in which messages should be placed" );
	      report( "-d <name> <body> - define a macro called <name> with definition <body>" );
	      report( "-i <dirname>     - specify directory to search for include files" );
	      report( "-o <filename>    - name of output file" );
	      report( "-help            - provide this description" );
	      report( "-                - read from stdin" );
	      report( "<filename>       - name of file to read" );

	      tidyup();
	      
	      break;
	      
	    case '\0':
	      *aargv = argv + 1;
	      
	      return TRUE;
	      
	    default:
	      error( "unknown command line option -%s", arg );
	      break;
	    }
	  
	  *aargv = argv + 1;
	  
	  return FALSE;
	}
      else
	{
	  *aargv = argv + 1;
	  
	  return TRUE;
	}
    }
  else /* pass == 2 */
    {
      if ( *arg == '-' )
	{
	  arg++;
	  
	  switch ( locase( *arg ) )
	    {
	    case '\0':
	      infile  = "<stdin>";
	      infd    = stdin;
	      in_line = 1;
	      
	      *aargv = argv + 1;
	      
	      return TRUE;
	      
	    case 'd':
	      _ARG_;
		  
	      ++argv;

	      break;
	      
	    case 'i':
	    case 'v':
	    case 'o':
	      _ARG_;
	      
	      break;
	      
	    default:
	      break;
	    }
	  
	  *aargv = argv + 1;
	  
	  return FALSE;

	}
      else
	{
	  if ( infd != NULL && infd != stdin )
	    fclose( infd );
	  
	  infile  = arg;
	  in_line = 1;
	  
	  trace( "Opening input file %s", infile );
	  
	  infd    = fopen( infile, "r" );

	  if (infd == NULL)
	    {
	      int	i;

	      
	      for (i = MAX_INCLUDE_PATHS; i--;)
		{
		  char path[ 128 ];
	      

		  if (incpaths[ i ] == NULL)
		    continue;
		  
		  strcpy( path, incpaths[ i ] );
	      
		  if ( path[ strlen( path ) ] != '/' )
		    strcat( path, "/" );
	      
		  strcat( path, infile );
	      
		  trace( "Open failed, trying %s", path );
	      
		  infd = fopen( path, "r" );

		  if (infd != NULL)
		    break;
		}
	    }
	  
	  if ( infd == NULL )
	    error( "Cannot open %s for input", infile );
	  else
	    trace( "Open succeeded" );
	  
	  *aargv = argv + 1;
	  
	  return TRUE;
	}
    }
  
} /* parsearg */


PUBLIC char *
alloc(   INT size )
{
  char *	v  = (char *) malloc( (int) size );


  if (v == NULL )
    error( "Cannot allocate %d bytes\n", size );

  /*_trace("alloc %d -> %x Malloc(-1) = %d",size,v,Malloc(-1));*/

  return v;
}


/********************************************************/
/* main                                                 */
/*                                                      */
/* Initialise everything and call the macro processor   */
/*                                                      */
/********************************************************/

PUBLIC int
main(
     int 	argc,
     BYTE **	argv )
{
  int 		infiles = 0;
  BYTE **	copy_argv;
  
  
  infd    = stdin;
  in_line = 1;
  outfd   = stdout;
  verfd   = stderr;
  
  if ( setjmp( error_level ) == 0 )
    {
      memcpy( default_level, error_level, sizeof (jmp_buf) );
      
      argv++;
      argc--;
      
#ifdef VERBOSE
      report( "Assembler Macro PreProcessor V1.3" );
      report( "Copyright (C) 1987 - 1992 Perihelion Software Ltd." );
#endif
      
      initcs();
      
      initpb();

      initsym();
      
      initbuiltin();
      
      symb = 0;

      copy_argv = argv;
      
      while ( *argv != NULL ) 
	{
	  (void) parsearg( &argv, 1 );
	}

      argv = copy_argv;
      
      while ( *argv != NULL ) 
	{
	  if ( parsearg( &argv, 2 ) )
	    {
	      macro();
	      
	      infiles++;
	    }
	}
      
      if ( infiles == 0 )
	{
	  infd    = stdin;
	  in_line = 1;
	  
	  macro();
	}
      
#ifdef VERBOSE
      /* report( "AMPP Finished" ); */
#endif
      
      tidyup();
    }
  
  exit( (int) maxerr );

} /* main */
@


1.10
log
@fixed -i to allow multiple -i on command line
@
text
@d15 1
a15 1
static char *RcsId = "$Id: ampp.c,v 1.9 1993/08/13 08:03:44 nickc Exp nickc $";
d488 1
a488 1
	      report( "ampp V1.3 (RCS version $Revision: 1.9 $)" );
d622 1
a622 1
  char *	v  = malloc( (int) size );
@


1.9
log
@fixed compile time error
@
text
@d15 1
a15 1
static char *RcsId = "$Id: ampp.c,v 1.8 1993/08/12 16:17:13 nickc Exp nickc $";
d33 1
a33 1
PUBLIC BYTE *		incdir  = NULL;
d42 1
d355 1
d426 1
d452 7
d460 2
a461 1
		  incdir = arg;
d476 2
d488 1
a488 1
	      report( "ampp V1.3 (RCS version $Revision: 1.8 $)" );
d490 1
a490 1
	      report( "-t{l,p,b,s,k}    - enable tracing of lex, parse, builtins, symbols and putbacks" );
d571 3
d575 2
a576 2
	  
	  if ( infd == NULL && incdir != NULL )
d578 2
a579 1
	      char path[ 128 ];
d581 3
d585 5
a589 1
	      strcpy( path, incdir );
d591 2
a592 2
	      if ( path[ strlen( path ) ] != '/' )
		strcat( path, "/" );
d594 1
a594 1
	      strcat( path, infile );
d596 1
a596 6
	      infd = fopen( path, "r" );
	    }
	  
	  if ( infd == NULL )
	    {
	      char path[ 128 ];
d598 5
a602 6
	      
	      strcpy( path, "/helios/include/ampp/" );
	      
	      strcat( path, infile );
	      
	      infd = fopen( path, "r" );
d607 2
@


1.8
log
@fixed compile time warnings
@
text
@d15 1
a15 1
static char *RcsId = "$Id: ampp.c,v 1.7 1993/06/10 11:29:55 nickc Exp nickc $";
d416 1
a416 1
		  adddef( (WORD)s_macro,sym, macro );
d475 1
a475 1
	      report( "ampp V1.3 (RCS version $Revision: 1.7 $)" );
@


1.7
log
@fixed compilation error on RS6000s
@
text
@d15 1
a15 1
static char *RcsId = "$Id: ampp.c,v 1.6 1992/10/08 16:17:02 nickc Exp nickc $";
d22 2
d25 1
d74 3
a76 2
max( a, b )
 INT a,b;
d96 1
a96 1
	fprintf( verfd, "AMPP: Error: %s %d : ", infile, in_line );
d127 1
a127 1
    fprintf( verfd, "AMPP: Warning: %s %d : ", infile, in_line );
d201 1
a201 1
	fprintf( verfd, "AMPP: Warning: %s %d : ", infile, in_line );
d328 3
a330 3
parsearg( aargv, pass )
  BYTE ***	aargv;
  int		pass;
d475 1
a475 1
	      report( "ampp V1.3 (RCS version $Revision: 1.6 $)" );
d600 1
a600 2
alloc( size )
  INT size;
d602 1
a602 1
  char *	v  = malloc( size );
d622 3
a624 3
main( argc, argv )
  int 		argc;
  BYTE **	argv;
d691 1
a691 1
  exit( maxerr );
@


1.6
log
@added identification of source to warning and error messages
@
text
@d15 1
a15 1
static char *RcsId = "$Id: ampp.c,v 1.5 1992/07/03 09:25:47 nickc Exp nickc $";
d471 1
a471 1
	      report( "ampp V1.3 (RCS version $Revision: 1.5 $)" );
d673 1
a673 1
      if ( infiles == NULL )
@


1.5
log
@added line number calculations
@
text
@d15 1
a15 1
static char *RcsId = "$Id: ampp.c,v 1.4 1991/11/06 10:28:54 nickc Exp nickc $";
d92 1
a92 1
	fprintf( verfd, "Error: %s %d : ", infile, in_line );
d94 1
a94 1
	fprintf( verfd, "Error: " );
d123 1
a123 1
    fprintf( verfd, "Warning: %s %d : ", infile, in_line );
d125 1
a125 1
    fprintf( verfd, "Warning: " );
d197 1
a197 1
	fprintf( verfd, "Warning: %s %d : ", infile, in_line );
d199 1
a199 1
	fprintf( verfd, "Warning: " );
d223 1
a223 1
  _fprintf(verfd,"Error: %s %d :", infile, in_line );
d239 1
a239 1
  _fprintf(verfd,"Warning: %s %d :",infile, in_line );
d471 1
a471 1
	      report( "ampp V1.3 (RCS version $Revision: 1.4 $)" );
@


1.4
log
@added inclusion of sys/types.h because sys/stat.h does not do this automatically (SHAME!)
@
text
@d15 1
a15 1
static char *RcsId = "$Id: ampp.c,v 1.3 1991/10/29 13:56:57 nickc Exp nickc $";
d31 1
d52 3
d92 1
a92 1
	fprintf( verfd, "Error: %s : ",infile );
d123 1
a123 1
    fprintf( verfd, "Warning: %s : ", infile );
d197 1
a197 1
	fprintf( verfd, "Warning: %s : ",infile );
d223 1
a223 1
  _fprintf(verfd,"Error: %s :",infile);
d239 1
a239 1
  _fprintf(verfd,"Warning: %s :",infile);
d471 1
a471 1
	      report( "ampp V1.2 (RCS version $Revision: 1.3 $)" );
d516 3
a518 2
	      infile = "<stdin>";
	      infd   = stdin;
d552 3
a554 3
	  infile = arg;
	  
	  infd = fopen( infile, "r" );
d627 4
a630 3
  infd  = stdin;
  outfd = stdout;
  verfd = stderr;
d640 2
a641 2
      report( "Assembler Macro PreProcessor V1.2" );
      report( "Copyright (C) 1987 - 1991 Perihelion Software Ltd." );
d675 2
a676 1
	  infd = stdin;
@


1.3
log
@added search of /helios/include/ampp for include files
@
text
@d15 1
a15 1
static char *RcsId = "$Id$";
d20 1
d467 1
a467 1
	      report( "ampp V1.2 (RCS version $Revision$)" );
@


1.2
log
@fixed so that command line options do NOT have to come before command line arguments
added -help command line option to describe the command line
added - command line option to read from stdin
added better checking of command line arguments
@
text
@d566 12
@


1.1
log
@Initial revision
@
text
@d5 1
a5 1
/* the transputer assembler. This preprocessor is based on that */
d10 2
a11 1
/* Author: NHG 19-Feb-87                                        */
a12 1
static char *RcsId = "$Id$ Copyright (C) Perihelion Software Ltd.";
d14 4
d20 1
d22 4
a25 4
PUBLIC FILE *verfd;
PUBLIC jmp_buf error_level;
PRIVATE jmp_buf default_level;
PRIVATE INT maxerr = 0;
d27 3
a29 3
PUBLIC BYTE *infile = "<stdin>";
PUBLIC BYTE *outfile = "<stdout>";
PUBLIC BYTE *incdir;
d31 1
a31 1
PUBLIC INT traceflags;
d34 1
a34 1
long	_stksize = 40000;
a36 1
static void tidyup();
d38 2
a39 10
/********************************************************/
/* main                                                 */
/*                                                      */
/* Initialise everything and call the macro processor   */
/*                                                      */
/********************************************************/

PUBLIC main(argc,argv)
int argc;
BYTE **argv;
d41 2
a42 5
	int infiles = 0;
	
        infd = stdin;
        outfd = stdout;
        verfd = stderr;
d44 2
a45 5
        incdir = 0;
    
        if( setjmp(error_level) == 0 )
        {
	        memcpy(default_level, error_level, sizeof(jmp_buf));
d47 2
a48 2
                argv++;
		argc--;
d50 2
a51 4
#ifdef VERBOSE
                report("Assembler Macro PreProcessor V1.2");
                report("Copyright (C) 1987, Perihelion Software Ltd.");
#endif
d53 2
a54 5
        	initcs();
	        initpb();
	       	initsym();
	        initbuiltin();
	        symb = 0;
d56 1
a56 8
                while( *argv != NULL ) 
		{
			if( parsearg(&argv) )
			{
                		macro();
                		infiles++;
                	}
		}
d58 1
a58 8
		if( infiles == 0 )
		{
			infd = stdin;
			macro();
		}
#ifdef VERBOSE
/*                report("AMPP Finished");*/
#endif
d60 1
a60 2
                tidyup();
        }
d62 1
a62 2
        exit(maxerr);
}
a63 1
#define _ARG_ if( *++arg == 0 ) arg = *++argv;
d65 3
a67 2
parsearg(aargv)
BYTE ***aargv;
d69 1
a69 2
	char **argv = *aargv;
	char *arg = *argv;
d71 1
a71 18
        if( *arg == '-' )
        {
        	arg++;
                switch( locase(*arg) )
                {
                case 't':
                        while( *++arg != 0 )
                        {
                                switch( locase(*arg) )
                                {
                                case 'l': traceflags |= db_lex;     break;
                                case 'p': traceflags |= db_parse;   break;
                                case 'b': traceflags |= db_builtin; break;
                                case 's': traceflags |= db_sym;     break;
				case 'k': traceflags |= db_putback; break;
                                }
                        }
                        break;
d73 9
a81 9
                case 'v':
                {
                        FILE *vfd;
			_ARG_;
			vfd = fopen(arg,"w");
                        if( vfd == 0 ) error("Cannot open %s for output",arg);
                        verfd = vfd;
                        break;
		}
d83 2
a84 6
		case 'd':
		{
			char *name, *defn;
			struct Symbol *sym;
			struct Macro *macro = New(struct Macro);
			struct Charbuf *buf = New(struct Charbuf);
d86 4
a89 3
			_ARG_;
			name = arg;
			defn = *++argv;
d91 1
a91 6
			sym = insert(name);
			strcpy(buf->text,defn);
			buf->size = strlen(defn);
			InitList(&macro->def);
			macro->nargs = 0;
			AddHead(&macro->def,&buf->node);
d93 1
a93 1
			adddef((WORD)s_macro,sym,macro);
d95 4
a98 35
			break;
		}			    
                case 'i':
			_ARG_;
                        incdir = arg;
                        break;
	
		case 'o':
			_ARG_;
                	if( outfd != stdout ) error("Give only one output file");
			outfile=arg;
                	outfd = fopen(outfile,"w");
                	if( outfd == 0 ) error("Cannot open %s for output",outfile);
			break;
                }
        }
        else {
		if( infd != NULL && infd != stdin ) fclose( infd );
                infile=arg;
                infd = fopen(infile,"r");
		if( infd == 0 && incdir != 0 )
		{
			char path[128];
			strcpy(path,incdir);
			if( path[strlen(path)] != '/' ) strcat(path,"/");
			strcat(path,infile);
			infd = fopen(path, "r");
		}
                if( infd == 0 ) error("Cannot open %s for input",infile);
		*aargv = argv+1;
		return TRUE;
        }
	*aargv = argv+1;
	return FALSE;
}
d100 1
d102 1
a102 7
PUBLIC char *alloc(size)
INT size;
{
	char *v  = malloc(size);
	if(v == NULL ) error("Cannot allocate %d bytes\n",size);
/*_trace("alloc %d -> %x Malloc(-1) = %d",size,v,Malloc(-1));*/
	return v;
d106 2
a107 2
#ifdef __STDC__
PUBLIC void error(BYTE *str,...)
d109 1
a109 1
	va_list ap;
a110 1
	va_start(ap,str);
d112 4
a115 4
	if(strlen(infile))
	        fprintf(verfd,"Error: %s : ",infile);
       else
      	        fprintf(verfd,"Error: ");
d117 4
a120 7
	vfprintf(verfd,str,ap);
	va_end(ap);
        putc('\n',verfd);
        maxerr = max(maxerr,20);
	tidyup();
/*	exit((int)maxerr);*/
}
d122 1
a122 3
PUBLIC void warn(BYTE *str, ...)
{
	va_list ap;
d124 1
a124 5
	va_start(ap,str);
	if(strlen(infile))
	        fprintf(verfd,"Warning: %s : ",infile);
	else
	        fprintf(verfd,"Warning: ");
d126 1
a126 5
        vfprintf(verfd,str,ap);
        va_end(ap);
        putc('\n',verfd);
        maxerr = max(maxerr,10);
}
d128 9
a136 1
PUBLIC void report(BYTE *str,...)
d138 1
a138 1
   va_list ap;
a139 5
   va_start(ap,str);
   vfprintf(verfd,str,ap);
   putc('\n',verfd);
   va_end(ap);
}
d141 2
d144 15
a158 1
PUBLIC void _trace(BYTE *str,...)
d160 1
a160 1
   va_list ap;
a161 6
   va_start(ap,str);
   fprintf(verfd,"Trace: ");
   vfprintf(verfd,str,ap);
   putc('\n',verfd);
   va_end(ap);
}
d163 4
d168 15
a182 1
PUBLIC void recover(BYTE *str,...)
d184 3
a186 1
	va_list ap;
a187 9
	va_start(ap,str);
	if(strlen(infile))
	        fprintf(verfd,"Warning: %s : ",infile);
	else
	        fprintf(verfd,"Warning: ");
        vfprintf(verfd,str,ap);
        va_end(ap);
        putc('\n',verfd);
        maxerr = max(maxerr,10);
d189 1
a189 2
        longjmp(reclev,1);
}
d191 20
d213 4
a216 3
PUBLIC error(str,a,b,c,d,e,f)
BYTE *str;
INT a,b,c,d,e,f;
d218 9
a226 5
        _fprintf(verfd,"Error: %s :",infile);
        _fprintf(verfd,str,a,b,c,d,e,f);
        putc('\n',verfd);
        maxerr = max(maxerr,20);
        tidyup();
d229 4
a232 3
PUBLIC warn(str,a,b,c,d,e,f)
BYTE *str;
INT a,b,c,d,e,f;
d234 7
a240 4
        _fprintf(verfd,"Warning: %s :",infile);
        _fprintf(verfd,str,a,b,c,d,e,f);
        putc('\n',verfd);
        maxerr = max(maxerr,10);
d243 4
a246 3
PUBLIC void recover(str,a,b,c,d,e,f)
BYTE *str;
INT a,b,c,d,e,f;
d248 3
a250 2
        warn(str,a,b,c,d,e,f);
        longjmp(reclev,1);
d253 4
a256 3
PUBLIC _trace(str,a,b,c,d,e,f)
BYTE *str;
INT a,b,c,d,e,f;
d258 5
a262 3
        _fprintf(verfd,"Trace: ");
        _fprintf(verfd,str,a,b,c,d,e,f);
        putc('\n',verfd);
d265 4
a268 3
PUBLIC report(str,a,b,c,d,e,f)
BYTE *str;
INT a,b,c,d,e,f;
d270 3
a272 2
        _fprintf(verfd,str,a,b,c,d,e,f);
        putc('\n',verfd);
d276 5
a280 4
PRIVATE _fprintf(fd,str,a,b,c,d,e,f)
FILE *fd;
BYTE *str;
INT a,b,c,d,e,f;
d282 8
a289 4
	static BYTE fbuf[128];
	BYTE *t = fbuf;
	BYTE *s = str;
	while( *s != '\0' )
d291 46
a336 1
		if ( *s == '%' ) 
d338 90
a427 3
			*t++ = *s++;
			while( '0' <= *s && *s <= '9' ) *t++ = *s++;
			switch( *s )
d429 4
a432 7
			case 'x': 
			case 'X': *t++ = 'l'; *t++ = 'x'; break;

			case 'd': 
			case 'D': *t++ = 'l'; *t++ = 'd'; break;

			default: *t++ = *s; break;
d434 8
a441 1
			s++;
d443 51
a493 1
		*t++ = *s++;	
d495 27
a521 4
	*t = '\0';
	fprintf(fd,fbuf,a,b,c,d,e,f);
}
#endif
d523 16
d540 40
a579 1
static void tidyup()
d581 9
a589 7
        fflush(outfd);
        fflush(verfd);
        if(infd != stdin && infd != 0) fclose(infd);
        if(outfd != stdout && outfd != 0) fclose(outfd);
        if(verfd != stderr && verfd != 0) fclose(verfd);
/*        unload(); */
        longjmp(default_level,1);
d592 12
a603 2
PUBLIC INT max(a,b)
INT a,b;
d605 66
a670 2
   return a>b ? a : b;
}
@
