head	1.7;
access;
symbols
	Helios_1_3_1:1.6
	Helios_C40_1_3_Official_Release:1.4
	Alenia_release:1.4
	Helios1_3:1.2
	C40_Field_Test_2:1.2
	C40_Field_Test_R1:1.2
	Helios13_beta:1.2;
locks; strict;
comment	@# @;


1.7
date	94.03.25.11.43.27;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	93.10.20.11.05.09;	author tony;	state Exp;
branches;
next	1.5;

1.5
date	93.10.20.11.02.05;	author tony;	state Exp;
branches;
next	1.4;

1.4
date	92.12.16.14.13.33;	author al;	state Exp;
branches;
next	1.3;

1.3
date	92.12.15.17.10.46;	author al;	state Exp;
branches;
next	1.2;

1.2
date	92.06.27.12.17.12;	author bart;	state Exp;
branches;
next	1.1;

1.1
date	90.08.28.13.24.47;	author james;	state Exp;
branches;
next	;


desc
@@


1.7
log
@fixed typo in makefile
@
text
@#-----------------------------------------------------------------------------
# Helios generic make system - GENERIC COMPONENT MAKEFILE -
#-----------------------------------------------------------------------------
# Helios generic component make rules for: GNU tar
#
# File: /HSRC/cmds/gnu/tar/makefile
#
# These are the host/processor independent rules and variables for this
# component of Helios. It is included by the processor specific makefile
# That may add to some of its functionality. You should only alter this
# makefile by using "ifneq ($(HPROC),YYY)" clauses for a specific processor.
#
# SccsId: %W% %G%
# RcsId: $Id: makefile,v 1.6 1993/10/20 11:05:09 tony Exp nickc $
#		(C) Copyright 1990 Perihelion Software
#
# WARNING: assumes you are using GNUmake.
#-----------------------------------------------------------------------------

ifndef InProcMake
# This part of the makefile is run in the components generic source directory

# The variables HPROC, HHOST, HSRC, and HPROD should already be set by 
# your make script or environment, if not then get local defaults from
# $(HSRC)/makeinc/DFLT.mak. Note that the following pathname cannot use $(HSRC).
ifndef HPROC
include ../makeinc/DFLT.mak
endif

.PHONY: notarget
notarget:
	@@$(MAKE) -C $(HPROC)

.DEFAULT:
	@@$(MAKE) -C $(HPROC) $@@

else
#-----------------------------------------------------------------------------
# This part of the makefile is always run in a processor specific subdirectory.

# Manditory variables for a component:
# name of this dir relative to $(HSRC)
COMPONENT = cmds/gnu/tar

# Manditory includes
include $(HSRC)/makeinc/$(HHOST).mak	# Default host system variables
include $(HSRC)/makeinc/$(HPROC).mak	# Default processor rules and vars.

# Manditory phoney targets
.PHONY: default clean Xdefault Xclean
# "default"    - should make this component in its proc subdir
# "install"    - copy the new component to $(HPROD) production directory
# "installdef" - If component is a library, make .def file and install in LIB
# "clean"      - remove all intermediate and executable files from proc subdir
# Phoney targets prefixed by X are for adding processor specific targets.
#
# Processor specific sources are held in the processor specific subdir.,
# generic ones in the directory above it.
HVPATH := $(HSRC)/$(COMPONENT)

ifdef RSRC
HVPATH := $(RSRC)/$(COMPONENT)/$(HPROC):$(HSRC)/$(COMPONENT):$(RSRC)/$(COMPONENT)
endif

vpath %.h $(HVPATH)
vpath %.a $(HVPATH)
vpath %.c $(HVPATH)

#-----------------------------------------------------------------------------
# Generic component make rules and variables added below here

# Note all final generic targets here
TARGETS = tar

default : $(TARGETS) Xdefault

# The powers that be have decided to place tar in
#	/hprod/C40_public_domain_disk/tar
# instead of the normal place for the C40 object

ifeq ($(HPROC),C40)
install	: $(TARGETS) Xinstall
	$(CP) $(TARGETS) /hprod/C40_public_domain_disk/tar
	(cd .. ; cp $(SOURCES.odd) /hprod/C40_public_domain_disk/tar)
	/bin/rm -f /hprod/C40_public_domain_disk/tar/makefile
	$(TOUCH) install
else
install	: $(TARGETS) Xinstall
	$(CP) $(TARGETS) $(HPROD)/local/bin
	(cd .. ; cp $(SOURCES.odd) $(HPROD)/local/bin)
	$(TOUCH) install
endif

clean	: Xclean
	-$(RM)	$(OBJECTS) $(TARGETS) $(XOBJECTS) $(XTARGETS) mkout \
		core ../mkout install installdef Xinstall


#-----------------------------------------------------------------------------
# for archive, backup and cleaning purposes,
# note all generic SOURCE and OBJECT files:

# Note all sources
SOURCES		= $(SOURCES.c) $(SOURCES.a) \
		  $(HEADERS.c) $(HEADERS.m) \
		  $(SOURCES.odd)

OBJECTS	= tar.o create.o extract.o buffer.o getoldop.o list.o \
	names.o diffarch.o port.o wildmat.o getopt.o

# C source files
SOURCES.c	= tar.c create.c extract.c buffer.c getoldop.c list.c \
	 	  names.c diffarch.c port.c wildmat.c getopt.c

# AMPP source files
SOURCES.a	=

# C header files
HEADERS.c	= tar.h port.h open3.h tarpriv.h

# AMPP macro files
HEADERS.m	=

# Any other source files
SOURCES.odd	= makefile tar.1 tar.2 tar.3 tar.5 tar1.tex tar5.tex \
		  readme todo

#-----------------------------------------------------------------------------
# Other generic component variables:

defines = -DPOSIX -DNONAMES -DHELIOS -D_BSD \
	-DDEFBLOCKING=20 -DDEF_AR_FILE=\"/tape\"

# Set any flags required
ifeq ($(HPROC),ARM)
  NCFLAGS := $(NCFLAGS) $(defines) -w
else
  NCFLAGS := $(NCFLAGS) $(defines) -wvdf
endif

LINKFLAGS := $(LINKFLAGS) -v -s20000

#-----------------------------------------------------------------------------

tar: $(OBJECTS)
	$(LINK) $(LINKFLAGS) -o tar $(LIB)/cstart.o $(OBJECTS) -l$(LIB)/bsd.lib

#-----------------------------------------------------------------------------
endif #InProcMake	# This line must be at EOF

@


1.6
log
@makefile removed from production directory
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.5 1993/10/20 11:02:05 tony Exp tony $
d145 1
a145 1
make: $(OBJECTS)
@


1.5
log
@C40 versions are now placed in /hprod/C40_public_domain_disk
Sources.odd are also copied to the production directory (tar.1, etc)
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.4 1992/12/16 14:13:33 al Exp tony $
d85 1
@


1.4
log
@My last fix fixed sparky but broke snake.  Revered backto old to allow
snake to build but not sparky.   Will submit bug report.
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.3 1992/12/15 17:10:46 al Exp al $
d73 1
a73 1
TARGETS = make
d77 10
d88 2
a89 1
	$(CP) tar $(HPROD)/local/bin
d91 1
d112 1
a112 1
	names.c diffarch.c port.c wildmat.c getopt.c
d124 2
a125 1
SOURCES.odd	= makefile
@


1.3
log
@Fixed TARGET to be tar instead make !!!
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.2 1992/06/27 12:17:12 bart Exp al $
d73 1
a73 1
TARGETS = tar
@


1.2
log
@Now works under make system
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.6 1992/06/27 11:40:24 bart Exp $
d73 1
a73 1
TARGETS = make
@


1.1
log
@Initial revision
@
text
@d1 18
a18 2
# Makefile for public domain tar program.
# @@(#)Makefile 1.30	87/11/11
d20 2
a21 1
# $Header$
d23 6
a28 14
# Helios version
DEFS = -DPOSIX -DNONAMES -DHELIOS
LDFLAGS =
LIBS = 
LINT = lint
LINTFLAGS = -abchx
DEF_AR_FILE = \"/tape\"
DEFBLOCKING = 20
O = o
C = c
LIB = /helios/lib
CSTART = $(LIB)/cstart.o
COPTS = -wvdf
LINK = asm
d30 3
a32 3
.SUFFIXES: .c .o
.c.o:
	$(C) $(CFLAGS) -c $*.c
d34 2
a35 9
# Berserkeley version
#DEFS = -DBSD42
#LDFLAGS =
#LIBS = 
#LINT = lint
#LINTFLAGS = -abchx
#DEF_AR_FILE = \"/dev/rst0\"
#DEFBLOCKING = 126
#O = o
d37 3
a39 9
# USG version
#DEFS = -DUSG
#LDFLAGS =
#LIBS = -lndir
#LINT = lint
#LINTFLAGS = -p
#DEF_AR_FILE = \"/dev/rmt8\"
#DEFBLOCKING = 20
#O = o
d41 3
a43 9
# UniSoft's Uniplus SVR2 with NFS
#DEFS = -DUSG -DUNIPLUS -DNFS -DSVR2
#LDFLAGS =
#LIBS = -lndir
#LINT = lint
#LINTFLAGS = -bx
#DEF_AR_FILE = \"/dev/rmt8\"
#DEFBLOCKING = 20
#O = o
d45 3
a47 10
# MASSCOMP version
#CC = ucb cc
#DEFS = -DBSD42
#LDFLAGS =
#LIBS = 
#LINT = lint
#LINTFLAGS = -bx
#DEF_AR_FILE = \"/dev/rmt0\"
#DEFBLOCKING = 20
#O = o
d49 11
a59 10
# (yuk) MS-DOS (Microsoft C) version
#MODEL = S
#DEFS = -DNONAMES -A$(MODEL) -nologo
#LDFLAGS =
#LIBS = $(MODEL)dir.lib
#LINT =	$(CC)
#LINTFLAGS = -W3
#DEF_AR_FILE = \"tar.out\"
#DEFBLOCKING = 20
#O = obj
d61 3
a63 11
# V7 version
# Pick open3 emulation or nonexistence.  See open3.h, port.c.
##DEFS = -DV7 -DEMUL_OPEN3 -Dvoid=int
##DEFS = -DV7 -DNO_OPEN3 -Dvoid=int
#LDFLAGS =
#LIBS = -lndir
#LINT = lint
#LINTFLAGS = -abchx
#DEF_AR_FILE = \"/dev/rmt8\"
#DEFBLOCKING = 20
#O = o
d65 3
a67 18
# Minix version
# No lint, so no lintflags.  Default file is stdin/out.  (Minix "tar"
# doesn't even take an "f" flag, it assumes argv[2] is the archive name!)
# Minix "make" doesn't expand macros right, so Minix users will have
# to expand CFLAGS, SRCS, O, etc by hand, or fix your make.  Not my problem!
# You'll also need to come up with getopt() and ctime(), the directory
# library, and a fixed doprintf() that handles %*s.  Put this stuff in
# the "SUBSRC/SUBOBJ" macro below if you didn't put it in your C library.
# Note that Minix "cc" produces ".s" files, not .o's, so O = s has been set.
#
# Pick open3 emulation or nonexistence.  See open3.h, port.c.
##DEFS = -DV7 -DMINIX -DEMUL_OPEN3
##DEFS = -DV7 -DMINIX -DNO_OPEN3
#LDFLAGS =
#LIBS =
#DEF_AR_FILE = \"-\"
#DEFBLOCKING = 8	/* No good reason for this, change at will */
#O = s
d69 2
a70 9
# Xenix version
#DEFS = -DUSG -DXENIX
#LDFLAGS = 
#LIBS = -lx
#LINT = lint
#LINTFLAGS = -p
#DEF_AR_FILE = \"/dev/rmt8\"
#DEFBLOCKING = 20
#O = o
d72 2
d75 1
a75 8
CFLAGS = $(COPTS) $(ALLDEFS)
ALLDEFS = $(DEFS) \
	-DDEF_AR_FILE=$(DEF_AR_FILE) \
	-DDEFBLOCKING=$(DEFBLOCKING)
# next line for Debugging
#COPTS = -g
# next line for Production
#COPTS = -O
d77 3
a79 4
# Add things here like getopt, readdir, etc that aren't in your
# standard libraries.  (E.g. MSDOS needs getopt, msd_dir.c, msd_dir.obj)
SUBSRC=	getopt.c
SUBOBJ=	getopt.o
d81 3
a83 4
# Destination directory and installation program for make install
DESTDIR = /usr/local/bin
INSTALL = cp
RM = rm -f
a84 8
SRC1 =	tar.c create.c extract.c buffer.c getoldopt.c
SRC2 =	list.c names.c diffarch.c port.c wildmat.c $(SUBSRC)
SRCS =	$(SRC1) $(SRC2)
OBJ1 =	tar.$O create.$O extract.$O buffer.$O getoldopt.$O list.$O
OBJ2 =	names.$O diffarch.$O port.$O wildmat.$O $(SUBOBJ)
OBJS =	$(OBJ1) $(OBJ2)
AUX =	README PORTING Makefile TODO tar.1 tar.5 tar.h port.h open3.h \
	msd_dir.h msd_dir.c
d86 3
a88 1
all:	tar
d90 4
a93 8
tar:	$(OBJS)
	$(LINK) -o tar $(CSTART) $(OBJS) $(LIBS)
# command is too long for Messy-Dos (128 char line length limit) so
# this kludge is used...
#	@@echo $(OBJ1) + > command
#	@@echo $(OBJ2) >> command
#	link @@command, $@@,,$(LIBS) /NOI;
#	@@$(RM) command
d95 2
a96 6
install: all
	$(RM) $(DESTDIR)/tar
#	$(RM) $(DESTDIR)/.man/tar.[15]
	$(INSTALL) tar   $(DESTDIR)/tar
#	$(INSTALL) tar.1 $(DESTDIR)/.man/tar.1
#	$(INSTALL) tar.5 $(DESTDIR)/.man/tar.5
d98 3
a100 2
#lint:	$(SRCS)
#	$(LINT) $(LINTFLAGS) $(ALLDEFS) $(SRCS)
d102 2
a103 2
clean:
	$(RM) errs $(OBJS) tar
d105 2
a106 4
#tar.shar: $(SRCS) $(AUX)
#	shar >tar.shar1 $(AUX)
#	shar >tar.shar2 $(SRC1)
#	shar >tar.shar3 $(SRC2)
d108 2
a109 2
#tar.tar.Z: $(SRCS) $(AUX)
#	/bin/tar cf - $(AUX) $(SRCS) | compress -v >tar.tar.Z
d111 26
a136 3
$(OBJS): tarpriv.h port.h
tarpriv.h: tar.h
	touch tarpriv.h
@
