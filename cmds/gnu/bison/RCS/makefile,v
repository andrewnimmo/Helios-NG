head	1.4;
access;
symbols;
locks; strict;
comment	@# @;


1.4
date	93.10.20.11.22.14;	author tony;	state Exp;
branches;
next	1.3;

1.3
date	93.10.19.10.56.52;	author tony;	state Exp;
branches;
next	1.2;

1.2
date	93.03.31.10.41.28;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	93.03.31.10.32.41;	author nickc;	state Exp;
branches;
next	;


desc
@,.
@


1.4
log
@C40 productions goes to /hprod/C40_public_domain_disk/bison
SOURCES.odd also copied there
@
text
@#-----------------------------------------------------------------------------
# Helios generic make system - GENERIC COMPONENT MAKEFILE -
#-----------------------------------------------------------------------------
# Helios generic component make rules for: cmds/gnu/bison/bison
#
# File: /HSRC/cmds/gnu/bison/makefile
#
# These are the host/processor independent rules and variables for this
# component of Helios. It is included by the processor specific makefile
# That may add to some of its functionality. You should only alter this
# makefile by using "ifneq ($(HPROC),YYY)" clauses for a specific processor.
#
# SccsId: %W% %G%
# RcsId: $Id: makefile,v 1.3 1993/10/19 10:56:52 tony Exp tony $
#		(C) Copyright 1990 Perihelion Software
#
# WARNING: assumes you are using GNUmake.
#-----------------------------------------------------------------------------

ifndef InProcMake
# This part of the makefile is run in the components generic source directory

# The variables HPROC, HHOST, HSRC, and HPROD should already be set by 
# your make script or environment, if not then get local defaults from
# makeinc/DFLT.mak. Note that the following pathname cannot use $(HSRC).
ifndef HPROC
include ../makeinc/DFLT.mak
endif

.PHONY: notarget
notarget:
	@@$(MAKE) -C $(HPROC)

.DEFAULT:
	@@$(MAKE) -C $(HPROC) $@@

else
#-----------------------------------------------------------------------------
# This part of the makefile is always run in a processor specific subdirectory.

# Manditory variables for a component:
# name of this dir relative to $(HSRC)
COMPONENT = cmds/gnu/bison

# Manditory includes
include $(HSRC)/makeinc/$(HHOST).mak	# Default host system variables
include $(HSRC)/makeinc/$(HPROC).mak	# Default processor rules and vars.

# Manditory phoney targets
.PHONY: default clean Xdefault Xclean
# "default"    - should make this component in its proc subdir
# "install"    - copy the new component to $(HPROD) production directory
# "clean"      - remove all intermediate and executable files from proc subdir
# Phoney targets prefixed by X are for adding processor specific targets.
#
# Processor specific sources are held in the processor specific subdir.,
# generic ones in the directory above it.
VPATH := $(HSRC)/$(COMPONENT)

ifdef RSRC
VPATH := $(RSRC)/$(COMPONENT)/$(HPROC):$(VPATH):$(RSRC)/$(COMPONENT)
endif

#-----------------------------------------------------------------------------
# Generic component make rules and variables added below here

# Note all final generic targets here
TARGETS = bison

default : $(TARGETS) Xdefault

ifeq ($(HPROC),C40)
install	: $(TARGETS) Xinstall
	$(CP) $(TARGETS) /hprod/C40_public_domain_disk/bison
	(cd .. ; $(CP) $(SOURCES.odd) /hprod/C40_public_domain_disk/bison)
	/bin/rm -f /hprod/C40_public_domain_disk/bison/makefile*
	$(TOUCH) install
else
install	: $(TARGETS) Xinstall
	$(CP) $(TARGETS) $(HPROD)/local/bin
	$(TOUCH) install
endif

clean	: Xclean
	-$(RM)	$(OBJECTS) $(TARGETS) $(XOBJECTS) $(XTARGETS) mkout \
		core ../mkout install Xinstall


#-----------------------------------------------------------------------------
# for archive, backup and cleaning purposes,
# note all generic SOURCE and OBJECT files:

# Note all sources
SOURCES		= $(SOURCES.c) $(SOURCES.a) \
		  $(HEADERS.c) $(HEADERS.m) \
		  $(SOURCES.odd)

OBJECTS	= $(SOURCES.c:.c=.o) $(SOURCES.a:.a=.o)

# C source files
SOURCES.c	=  lr0.c allocate.c closure.c conflict.c derives.c files.c    \
                   getargs.c gram.c lalr.c			   	      \
		   lex.c main.c nullable.c output.c print.c reader.c symtab.c \
		   warshall.c

# AMPP source files
SOURCES.a	= 

# C header files
HEADERS.c	= files.h gram.h lex.h machine.h new.h state.h \
		  symtab.h types.h

# AMPP macro files
HEADERS.m	=

# Any other source files
SOURCES.odd	= makefile makefile.old hairy.bis simple.bis bison.man


#-----------------------------------------------------------------------------
# Other generic component variables:

# Set any flags required
NCFLAGS := $(NCFLAGS) -DSTACK_DIRECTION=-1 -DPOSIX -DBSD43 -DSIGVOID -D_BSD -DINTERNATIONAL


#-----------------------------------------------------------------------------
# Generic targets and their dependencies:

bison: $(OBJECTS)
ifeq ($(HPROC),ARM) #@@ quick bodge while -l option to armlink isn't working
	$(LINK) -s10000 $(LINKFLAGS) -o bison $(LIB)/cstart.o $(LIB)/fplib.def $(OBJECTS) -l$(LIB)/bsd.lib -l$(LIB)/curses.lib -l$(LIB)/termcap.lib
else
	$(LINK) -s10000 $(LINKFLAGS) -o bison $(LIB)/cstart.o $(OBJECTS) -l$(LIB)/bsd.lib -l$(LIB)/curses.lib -l$(LIB)/termcap.lib -l$(LIB)/fplib.def
endif
ifeq ($(HHOST),HELIOSTRAN)
#	$(RM) /lib/curses.lib
#	$(CP) curses.lib /lib/curses.lib
endif


#-----------------------------------------------------------------------------
endif #InProcMake	# This line must be at EOF
@


1.3
log
@Changed to new improved helios makefile
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.11 1992/08/11 10:32:13 paul Exp $
d72 1
d74 6
d82 1
d117 1
a117 1
SOURCES.odd	= makefile makefile.old hairy.bis simple.bis
@


1.2
log
@fixed for C40 compilation
@
text
@d1 113
a113 1
.SUFFIXES: .c .o
d115 2
a116 2
# REMOTE gives the prefix to cc and asm command
# so they can be executed on remote processors
a117 2
#REMOTE = remote 01
REMOTE =
d119 2
a120 5
#CC = $(REMOTE) c
#LD = $(REMOTE) asm
#CFLAGS = -wvdf
#LIB = /helios/lib
#LOCALDIR = /helios/local
d122 10
a131 26
CC       = c
LD       = ldc40
CFLAGS   = -wvdf -c
LIB      = /hprod/C40/lib
LOCALDIR = /hprod/C40/local

.c.o:
#	$(CC) $(CFLAGS) $*.c | asm -p -o $*.o
	$(CC) $(CFLAGS) $*.c

# Now Really!      LPRFLAGS = -Pucbvax

OBJECTS = lr0.o allocate.o closure.o conflict.o derives.o files.o	\
	  getargs.o gram.o lalr.o					\
	  lex.o main.o nullable.o output.o print.o reader.o symtab.o	\
	  warshall.o alloca.o

CFILES  = lr0.c allocate.c closure.c conflict.c derives.c files.c	\
	  getargs.c gram.c lalr.c					\
	  lex.c main.c nullable.c output.c print.c reader.c symtab.c	\
	  warshall.c

FILES   = Makefile files.h gram.h lex.h machine.h new.h state.h		\
	  symtab.h types.h $(CFILES)

start: bison
a132 20
files.o:  files.h

lex.o:  lex.h

symtab.o:  symtab.h
alloca.o: alloca.c
#	$(CC) $(CFLAGS) -DSTACK_DIRECTION=-1 alloca.c | asm -p -o alloca.o
	$(CC) $(CFLAGS) -DSTACK_DIRECTION=-1 alloca.c

listing:
	pr $(FILES) | lpr $(LPRFLAGS)

#lint:
#	lint $(CFILES)

clean:
	rm -f *.o

bison: $(OBJECTS)
	$(LD) -s10000 -o bison $(LIB)/cstart.o $(OBJECTS)
d134 2
a135 3
install: bison hairy.bis simple.bis
	cp hairy.bis simple.bis $(LOCALDIR)/lib/bison
	cp bison $(LOCALDIR)/bin
@


1.1
log
@Initial revision
@
text
@d1 65
a65 56
.SUFFIXES: .c .o

# REMOTE gives the prefix to cc and asm command
# so they can be executed on remote processors

#REMOTE = remote 01
REMOTE = 
CC = $(REMOTE) cc
ASM = $(REMOTE) asm
CFLAGS = -wvdf
LIB = /helios/lib
LOCALDIR = /helios/local

.c.o:
	$(CC) $(CFLAGS) $*.c | asm -p -o $*.o

# Now Really!      LPRFLAGS = -Pucbvax

OBJECTS = LR0.o allocate.o closure.o conflicts.o derives.o files.o	\
	  getargs.o gram.o lalr.o					\
	  lex.o main.o nullable.o output.o print.o reader.o symtab.o	\
	  warshall.o alloca.o

CFILES  = LR0.c allocate.c closure.c conflicts.c derives.c files.c	\
	  getargs.c gram.c lalr.c					\
	  lex.c main.c nullable.c output.c print.c reader.c symtab.c	\
	  warshall.c

FILES   = Makefile files.h gram.h lex.h machine.h new.h state.h		\
	  symtab.h types.h $(CFILES)

start: bison

files.o:  files.h

lex.o:  lex.h

symtab.o:  symtab.h
alloca.o: alloca.c
	$(CC) $(CFLAGS) -DSTACK_DIRECTION=-1 alloca.c | asm -p -o alloca.o

listing:
	pr $(FILES) | lpr $(LPRFLAGS)

#lint:
#	lint $(CFILES)

clean:
	rm -f *.o

bison: $(OBJECTS)
	$(ASM) -s10000 -o bison $(LIB)/cstart.o $(OBJECTS)

install: bison hairy.bis simple.bis
	cp hairy.bis simple.bis $(LOCALDIR)/lib/bison
	cp bison $(LOCALDIR)/bin
@
