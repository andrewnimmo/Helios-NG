head	1.15;
access;
symbols
	Helios_1_3_1:1.13
	Helios_C40_1_3_Official_Release:1.11
	Alenia_release:1.11
	Helios1_3:1.11
	C40_Field_Test_2:1.9
	C40_Field_Test_R1:1.7
	Helios13_beta:1.7
	Helios1_2_2:1.3
	Helios1_2_2Beta:1.3
	Helios1_2_1:1.3;
locks; strict;
comment	@# @;


1.15
date	94.05.17.08.38.50;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	94.02.17.17.42.31;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	93.10.20.13.35.17;	author tony;	state Exp;
branches;
next	1.12;

1.12
date	93.08.08.14.13.29;	author paul;	state Exp;
branches;
next	1.11;

1.11
date	92.11.02.15.05.23;	author martyn;	state Exp;
branches;
next	1.10;

1.10
date	92.11.02.10.25.32;	author martyn;	state Exp;
branches;
next	1.9;

1.9
date	92.10.01.14.40.24;	author martyn;	state Exp;
branches;
next	1.8;

1.8
date	92.08.11.10.32.53;	author paul;	state Exp;
branches;
next	1.7;

1.7
date	92.06.29.08.45.49;	author bart;	state Exp;
branches;
next	1.6;

1.6
date	92.06.27.11.40.24;	author bart;	state Exp;
branches;
next	1.5;

1.5
date	92.06.25.13.19.34;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	92.06.25.11.07.17;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	91.03.19.15.49.32;	author martyn;	state Exp;
branches;
next	1.2;

1.2
date	91.03.10.18.05.38;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	91.03.08.22.30.38;	author paul;	state Exp;
branches;
next	;


desc
@checkpoint
@


1.15
log
@made rules silent
@
text
@#-----------------------------------------------------------------------------
# Helios generic make system - GENERIC COMPONENT MAKEFILE -
#-----------------------------------------------------------------------------
# Helios generic component make rules for: GNU Make
#
# File: /HSRC/cmds/gnu/gmake/makefile
#
# These are the host/processor independent rules and variables for this
# component of Helios. It is included by the processor specific makefile
# That may add to some of its functionality. You should only alter this
# makefile by using "ifneq ($(HPROC),YYY)" clauses for a specific processor.
#
# RcsId: $Id: makefile,v 1.14 1994/02/17 17:42:31 nickc Exp nickc $
#		(C) Copyright 1990 Perihelion Software
#	(C) Copyright 1994 Perihelion Distributed Software
#
# WARNING: assumes you are using GNUmake.
#-----------------------------------------------------------------------------

ifndef InProcMake
# This part of the makefile is run in the components generic source directory

# The variables HPROC, HHOST, HSRC, and HPROD should already be set by 
# your make script or environment, if not then get local defaults from
# $(HSRC)/makeinc/DFLT.mak. Note that the following pathname cannot use $(HSRC).
ifndef HPROC
include ../makeinc/DFLT.mak
endif

.PHONY: notarget
notarget:
	@@$(MAKE) -C $(HPROC)

.DEFAULT:
	@@$(MAKE) -C $(HPROC) $@@

else
#-----------------------------------------------------------------------------
# This part of the makefile is always run in a processor specific subdirectory.

# Manditory variables for a component:
# name of this dir relative to $(HSRC)
COMPONENT = cmds/gnu/gmake

# Manditory includes
include $(HSRC)/makeinc/$(HHOST).mak	# Default host system variables
include $(HSRC)/makeinc/$(HPROC).mak	# Default processor rules and vars.

# Manditory phoney targets
.PHONY: default clean Xdefault Xclean
# "default"    - should make this component in its proc subdir
# "install"    - copy the new component to $(HPROD) production directory
# "installdef" - If component is a library, make .def file and install in LIB
# "clean"      - remove all intermediate and executable files from proc subdir
# Phoney targets prefixed by X are for adding processor specific targets.
#
# Processor specific sources are held in the processor specific subdir.,
# generic ones in the directory above it.
HVPATH := $(HSRC)/$(COMPONENT)

ifdef RSRC
HVPATH := $(RSRC)/$(COMPONENT)/$(HPROC):$(HSRC)/$(COMPONENT):$(RSRC)/$(COMPONENT)
endif

vpath %.h $(HVPATH)
vpath %.a $(HVPATH)
vpath %.c $(HVPATH)

#-----------------------------------------------------------------------------
# Generic component make rules and variables added below here

# Note all final generic targets here
 TARGETS = make

default : $(TARGETS) Xdefault

install	: $(TARGETS) Xinstall
	$(CP) make $(HPROD)/local/bin/gmake
	$(TOUCH) install

clean	: Xclean
	-$(RM)	$(OBJECTS) $(TARGETS) $(XOBJECTS) $(XTARGETS) mkout \
		core ../mkout install installdef Xinstall *.ghof


#-----------------------------------------------------------------------------
# for archive, backup and cleaning purposes,
# note all generic SOURCE and OBJECT files:

# Note all sources
SOURCES		= $(SOURCES.c) $(SOURCES.a) \
		  $(HEADERS.c) $(HEADERS.m) \
		  $(SOURCES.odd)
#ifeq ($(HPROC),C40)
  ALLOCA=alloca.o
#endif

OBJECTS	=	glob.o commands.o job.o dir.o file.o load.o misc.o main.o \
		read.o remake.o remote.o rule.o implicit.o default.o \
		variable.o expand.o function.o vpath.o version.o \
		$(ARCHIVES) $(ALLOCA) $(extras)

# C source files
SOURCES.c	= glob.c commands.c job.c dir.c file.c load.c misc.c main.c \
		read.c remake.c remote.c rule.c implicit.c default.c \
		variable.c expand.c function.c vpath.c version.c $(ALLOCASRC) \
		$(ARCHIVES_SRC) remote-stub.c

# AMPP source files
SOURCES.a	=

# C header files
HEADERS.c	= commands.h dep.h file.h job.h make.h rule.h variable.h

# AMPP macro files
HEADERS.m	=

# Any other source files
SOURCES.odd	= makefile README CHANGES TAGS makefile.hel makefile.sun \
		make-3.57-3.58 makefile.bsd


#-----------------------------------------------------------------------------
# Other generic component variables:

defines = -DDIRENT -DHELIOS -DNO_ARCHIVES -DHAVE_VFORK \
 -DHAVE_DUP2 -DPOSIX -DSTACK_DIRECTION=-1 -D_BSD -DHAVE_SYS_WAIT

# Set any flags required
ifeq ($(HPROC),ARM)
  NCFLAGS := $(NCFLAGS) $(defines) -w
else
  NCFLAGS := $(NCFLAGS) $(defines) -wvdf
endif

LINKFLAGS := $(LINKFLAGS) -s20000

#-----------------------------------------------------------------------------

make: $(OBJECTS)
	@@ echo Linking $@@ ...
	@@ $(LINK) $(LINKFLAGS) -o make $(LIB)/cstart.o $(OBJECTS) -l $(LIB)/bsd.lib

ifeq ($(HPROC),TRAN)
load.o: load.c
	$(NC) $(NCFLAGS) $(LOAD_AVG) $< | asm -p -o load.o

remote.o: remote.c
	$(NC) $(NCFLAGS) $(REMOTE) $< | asm -p -o remote.o
else
load.o: load.c
	@@ echo Compiling $(<F) ...
	@@ $(NC) $(NCFLAGS) $(LOAD_AVG) -c ../load.c

remote.o: remote.c
	@@ echo Compiling $(<F) ...
	@@ $(NC) $(NCFLAGS) $(REMOTE) -c ../remote.c
endif

#-----------------------------------------------------------------------------
# Original GNU makefile (with a few hacks of course):
#-----------------------------------------------------------------------------

# Copyright (C) 1988, 1989 Free Software Foundation, Inc.
# This file is part of GNU Make.
# 
# GNU Make is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 1, or (at your option)
# any later version.
#
# GNU Make is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with GNU Make; see the file COPYING.  If not, write to
# the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

#
#	Makefile for GNU Make
#

CFLAGS = $(defines) -wvdf
LDFLAGS = -s20000

# Define nothing for BSD, USG for System V, and USGr3 (as well as USG) for
# SVR3, HPUX for HP-UX (as well as USG or USGr3 as appropriate).  If you have a
# USG hybrid with <sys/wait.h> and wait3, define HAVE_SYS_WAIT.  If you are USG
# but have sys_siglist, define HAVE_SIGLIST.  If you are USG, and not USGr3,
# but have dup2, define HAVE_DUP2.  If your `cc' command doesn't grok -o
# options with -c (true for many 4.2 BSD derivatives), define
# NO_MINUS_C_MINUS_O.  If you don't want archive support, define NO_ARCHIVES.
# If you want to avoid use of floating-point numbers, define NO_FLOAT.  If your
# compiler can handle `enum' bitfields (and it's not GCC), define
# ENUM_BITFIELDS.
defines = -DDIRENT -DUSG -DHELIOS -DNO_ARCHIVES -DHAVE_VFORK\
 -DHAVE_DUP2 -DPOSIX -DSTACK_DIRECTION=-1

# Define UMAX here to use Encore's inq_stats call.  If the load average is in a
# symbol in /dev/kmem, define KERNEL_FILE_NAME if not "/vmunix", LDAV_SYMBOL if
# not "_avenrun", LDAV_TYPE if not `long int', and LDAV_CVT to convert the
# LDAV_TYPE value from LDAV_SYMBOL (in `load') to a double if this is not
# "(double) load".  If a `struct nlist' (as defined in <nlist.h>) has a `n_un'
# union, rather than a simple `n_name' member, define NLIST_NAME_UNION.  If the
# `n_name' member of a `struct nlist' is an array that must be copied into,
# define NLIST_NAME_ARRAY.  Otherwise, define NO_LDAV.
LOAD_AVG = -DNO_LDAV

# If you don't want archive support, comment these out.
#ARCHIVES = arscan.o ar.o
#ARCHIVES_SRC = arscan.c ar.c

# If your system needs extra libraries loaded in, define them here.
# System V probably need -lPW for alloca.
FPFILES =
LOADLIBES = $(LIB)/c0.o -lhelios

# If your system doesn't have alloca, or the one provided is bad,
# get it from the Emacs distribution and define these.
ALLOCA = alloca.o
ALLOCASRC = alloca.c

# If there are remote execution facilities defined,
# enable them with switches here (see remote-*.c).
REMOTE =

# Any extra object files your system needs.
extras =

# Directory to install `make' in.
bindir = $(prefix)/usr/perihelion/bin
# Directory to install the man page in.
mandir = $(prefix)/usr/local/man/man1
# Number to put on the man page filename.
manext = 1

objs = glob.o commands.o job.o dir.o file.o load.o misc.o main.o read.o \
       remake.o remote.o rule.o implicit.o default.o variable.o expand.o \
       function.o vpath.o version.o $(ARCHIVES) $(ALLOCA) $(extras)
srcs = glob.c commands.c job.c dir.c file.c load.c misc.c main.c read.c \
       remake.c remote.c rule.c implicit.c default.c variable.c expand.c \
       function.c vpath.c version.c $(ALLOCASRC) $(ARCHIVES_SRC) \
       commands.h dep.h file.h job.h make.h rule.h variable.h


.SUFFIXES:
.SUFFIXES: .o .c .h .ps .dvi .texinfo


ifeq ($(HPROC),TRAN)
LINK = asm
endif

.PHONY: all doc
all: make
doc: make-info make.dvi


# Take your pick.
#makeinfo = emacs -batch make.texinfo -f texinfo-format-buffer -f save-buffer
makeinfo = makeinfo make.texinfo

make-info: make.texinfo
	$(makeinfo)


make.dvi: make.texinfo
	-tex make.texinfo
	texindex make.cp make.fn make.ky make.pg make.tp make.vr
	-tex make.texinfo

make.ps: make.dvi
	dvi2ps make.dvi > make.ps

#make: $(objs)
#	$(LINK) $(LOADLIBES) $(LDFLAGS) $(objs) -o make.new

#load.o: load.c
#	$(CC) $(CFLAGS) $(LOAD_AVG) -c load.c
#remote.o: remote.c
#	$(CC) $(CFLAGS) $(REMOTE) -c remote.c

TAGS: $(srcs)
	etags -tw $(srcs)
tags: $(srcs)
	ctags -tw $(srcs)

#.PHONY: install
#install: $(bindir)/make $(mandir)/make.$(manext)

$(bindir)/make: make
	cp make $@@.new
	mv $@@.new $@@

$(mandir)/make.$(manext): make.man
	cp make.man $@@

.PHONY: clean realclean
#clean:
#	-rm -f make *.o core
realclean: clean
	-rm -f TAGS tags make.info* make-* make.dvi
	-rm -f make.?? make.??s make.log make.toc make.*aux

# Automatically generated dependencies.
glob.o : glob.c 
commands.o : commands.c make.h dep.h commands.h file.h variable.h job.h 
job.o : job.c make.h commands.h job.h file.h variable.h 
dir.o : dir.c make.h 
file.o : file.c make.h commands.h dep.h file.h variable.h 
load.o : load.c make.h commands.h job.h 
misc.o : misc.c make.h dep.h 
main.o : main.c make.h commands.h dep.h file.h variable.h job.h 
read.o : read.c make.h commands.h dep.h file.h variable.h 
remake.o : remake.c make.h commands.h job.h dep.h file.h 
remote.o : remote.c remote-stub.c make.h commands.h 
rule.o : rule.c make.h commands.h dep.h file.h variable.h rule.h 
implicit.o : implicit.c make.h rule.h dep.h file.h 
default.o : default.c make.h rule.h dep.h file.h commands.h variable.h 
variable.o : variable.c make.h commands.h variable.h dep.h file.h 
expand.o : expand.c make.h commands.h file.h variable.h 
function.o : function.c make.h variable.h dep.h commands.h job.h 
vpath.o : vpath.c make.h file.h variable.h 
version.o : version.c 
arscan.o : arscan.c 
ar.o : ar.c make.h file.h 


#-----------------------------------------------------------------------------
endif #InProcMake	# This line must be at EOF

@


1.14
log
@removed direct install into pd disk directory for C40s
@
text
@d13 1
a13 2
# SccsId: %W% %G%
# RcsId: $Id: makefile,v 1.13 1993/10/20 13:35:17 tony Exp nickc $
d15 1
d83 1
a83 1
		core ../mkout install installdef Xinstall
d136 1
a136 1
LINKFLAGS := $(LINKFLAGS) -v -s20000
d141 2
a142 1
	$(LINK) $(LINKFLAGS) -o make $(LIB)/cstart.o $(OBJECTS) -l $(LIB)/bsd.lib
d152 2
a153 1
	$(NC) $(NCFLAGS) $(LOAD_AVG) -c ../load.c
d156 2
a157 1
	$(NC) $(NCFLAGS) $(REMOTE) -c ../remote.c
d186 1
a186 1
LDFLAGS = -v -s20000
@


1.13
log
@C40 version now goes to /hprod/C40_public_domain_disk
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.12 1993/08/08 14:13:29 paul Exp tony $
a76 1
ifeq ($(HPROC),C40)
a77 4
	$(CP) make /hprod/C40_public_domain_disk/gmake/gmake
	$(TOUCH) install
else
install	: $(TARGETS) Xinstall
a79 1
endif
@


1.12
log
@integrated with latest arm port
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.11 1992/11/02 15:05:23 martyn Exp $
d77 1
d79 4
d85 1
@


1.11
log
@copy finished product to /hprod
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.10 1992/11/02 10:25:32 martyn Exp $
a140 3
ifeq ($(HPROC),ARM) # fplib not inc as std in cstart and @@@@@@ BODGE for linker -l
	$(LINK) $(LINKFLAGS) -o make $(LIB)/cstart.o $(LIB)/fplib.def $(OBJECTS) $(LIB)/bsd.lib
else
a141 2
endif

@


1.10
log
@remote-stub.c wasn't being included in sources.
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.9 1992/10/01 14:40:24 martyn Exp martyn $
a77 2
ifeq ($(HHOST),HELIOSTRAN)
else
a78 1
endif
@


1.9
log
@allow make system to build make.
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.8 1992/08/11 10:32:53 paul Exp martyn $
d110 1
a110 1
		$(ARCHIVES_SRC)
@


1.8
log
@fixed installation
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.7 1992/06/29 08:45:49 bart Exp $
a72 3
ifeq ($(HHOST),HELIOSTRAN)
 TARGETS =
else
a73 1
endif
@


1.7
log
@Temporary patch, now does nothing when building under Helios
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.6 1992/06/27 11:40:24 bart Exp $
a83 1
 ifeq ($(HPROC),TRAN)
a84 3
 else
	$(CP) make $(BIN)
 endif
@


1.6
log
@Added HAS_SYS_WAIT
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.5 1992/06/25 13:19:34 nickc Exp bart $
d73 5
a77 1
TARGETS = make
d82 3
a84 1
ifeq ($(HPROC),TRAN)
d86 1
a86 1
else
d88 1
@


1.5
log
@added inclusion of alloca
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.4 1992/06/25 11:07:17 nickc Exp nickc $
d78 5
a82 1
	$(CP) $(TARGETS) $(BIN)
d98 1
a98 1
ifeq ($(HPROC),C40)
d100 1
a100 1
endif
d131 1
a131 1
 -DHAVE_DUP2 -DPOSIX -DSTACK_DIRECTION=-1 -D_BSD
d152 1
d154 6
d164 1
a164 1

@


1.4
log
@fixed for C40 compilation
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.3 1991/03/19 15:49:32 martyn Exp nickc $
d94 3
@


1.3
log
@missing \ in clean rule
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.2 1991/03/10 18:05:38 paul Exp martyn $
d146 1
a146 1
	$(NC) $(NCFLAGS) $(LOAD_AVG) -c load.c
d149 1
a149 1
	$(NC) $(NCFLAGS) $(REMOTE) -c remote.c
d243 2
d246 2
@


1.2
log
@fixed a name in sources.odd
@
text
@d14 1
a14 1
# RcsId: $Id: makefile,v 1.1 91/03/08 22:30:38 paul Exp Locker: paul $
d95 1
a95 1
OBJECTS	=	glob.o commands.o job.o dir.o file.o load.o misc.o main.o
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
# RcsId: $Id: generic.template,v 1.1 91/02/12 17:11:17 nick Exp $
d117 1
a117 1
		make3.57-3.58 makefile.bsd
@
