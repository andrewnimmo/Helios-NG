head	1.1;
access;
symbols
	Helios_1_3_1:1.1
	Helios_C40_1_3_Official_Release:1.1
	Alenia_release:1.1
	Helios1_3:1.1
	C40_Field_Test_2:1.1
	C40_Field_Test_R1:1.1
	Helios13_beta:1.1
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1;
locks; strict;
comment	@ * @;


1.1
date	90.09.26.18.56.18;	author paul;	state Exp;
branches;
next	;


desc
@generic code and headers for some commands
@



1.1
log
@Initial revision
@
text
@#include <ttypes.h>

static char SccsId[] = "@@(#)encode.c	1.3\t5/8/87 Copyright (C) Perihelion Software Ltd.";

#define f_pfix 0x20
#define f_nfix 0x60

/********************************************************/
/* pfsize                                               */
/*                                                      */
/* Calculates how many bytes the supplied value can be  */
/* encoded in.                                          */
/********************************************************/

WORD pfsize(n)
WORD n;
{
        WORD pfx = 0;

        if( n < 0 )
        {
                pfx = 1;
                n = (~n) >> 4;
        }

        for(; pfx <= TargetBytesPerWord*2; pfx++)
        {
                n = n>>4;
                if( n == 0 ) return pfx+1;
        }
        return pfx;
}

/********************************************************/
/* encode                                               */
/*                                                      */
/* Generates a prefix encoded version of the given op   */
/* and argument, outputting the bytes via the supplied  */
/* function.                                            */
/********************************************************/

#define pbyte(x) (*pbytefn)(x)

encode(op,arg,pbytefn)
WORD op;
WORD arg;
void (*pbytefn)();
{
        if ( arg < 0 ) encodestep( (~arg)>>4, TRUE, pbytefn);
        else if ( arg > 15 ) encodestep( arg>>4, FALSE, pbytefn);
        pbyte( (WORD)(op | ( arg & 0xf ) ));
}

encodestep( arg, negative, pbytefn)
WORD arg, negative;
void (*pbytefn)();
{
        if( arg > 15 )
        {
                encodestep( arg>>4, negative, pbytefn);
                pbyte( (WORD)(f_pfix | ((negative ? ~arg : arg) & 0xf)) );
        }
        else pbyte((WORD)((negative ? f_nfix : f_pfix ) | (arg & 0xf)) );
}
@
