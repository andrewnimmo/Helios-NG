head	1.8;
access;
symbols
	Helios_C40_1_3_Official_Release:1.8
	Helios-C40:1.8
	Alenia_release:1.7;
locks; strict;
comment	@# @;


1.8
date	93.01.15.15.50.39;	author paul;	state Exp;
branches;
next	1.7;

1.7
date	92.04.21.17.49.51;	author paul;	state Exp;
branches;
next	1.6;

1.6
date	91.10.09.11.09.43;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	91.10.09.09.25.29;	author paul;	state Exp;
branches;
next	1.4;

1.4
date	91.03.05.19.09.00;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	90.10.30.14.33.01;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	90.10.30.14.19.55;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	90.10.22.15.49.17;	author paul;	state Exp;
branches;
next	;


desc
@Acorn R140 host specific makefile
@


1.8
log
@fixed for multiple cpu target on single host and fixed cyclic dependency
@
text
@# @@@@@@ Need to be updated to cope with target processors other than ARM
#------------------------------------------------------------------------------
# Helios generic make system - NATIVE HOST MAKEFILE -
#-----------------------------------------------------------------------------
# R140 Host specific make rules to make NATIVE HOST version of Generic Linker
#
# File: /HSRC/cmds/linker/R140/makefile
#
# This file contains ALL the definitions and rules that are
# required to make a NATIVE HOST version of this component.
# IT IS NOT COMPLIMENTARY TO THE GENERIC VERSION.
#
# This makefile is always executed within this host specific subdir.
# All host specific source files should be kept here.
# All intermediate, object and binary files should be made in here.
#
# SccsId: %W% %G%
# RcsId: $Id: makefile,v 1.7 1992/04/21 17:49:51 paul Exp paul $
#		(C) Copyright 1990 Perihelion Software
#
# WARNING: assumes you are using GNUmake.
#-----------------------------------------------------------------------------
# Manditory variables for a component:
# name of COMPONENT directory relative to $(HSRC)
COMPONENT = cmds/linker

# Manditory includes
include $(HSRC)/makeinc/$(HHOST).mak	# Default host system variables

# Manditory phoney targets
.PHONY: default clean
# "default" - should make this component in its proc subdir
# "install" - copy the new component to $(HHOSTBIN) directory
# "clean"   - remove all intermediate and executable files from host subdir

VPATH := $(HSRC)/$(COMPONENT)

#-----------------------------------------------------------------------------
# Note all final targets here

# Note all target CPUs that are built on this host (prefixed with 'build_')
POSSIBLECPUTARGETS = build_ARM build_C40

ifeq ($(HPROC),ARM)
TARGETS = build_ARM ldarm objdumparm imdump disasarm
else
  ifeq ($(HPROC),C40)
     TARGETS = build_C40 ldc40 objdumpc40 imdump disasc40
  endif
endif

default : $(TARGETS)

install	: $(TARGETS)
	$(CP) $(TARGETS) $(HHOSTBIN)
	$(TOUCH) install

clean	:
	-$(RM)	$(OBJECTS) $(TARGETS) mkout core ../mkout install \
	$(POSSIBLECPUTARGETS)

# Note all sources
SOURCES		= $(SOURCES.c) $(HEADERS.c) $(SOURCES.odd)

# Object files
L.OBJECTS	= sym.o objed.o module.o mem.o scancode.o link.o readfile.o \
		vm.o genimage.o queue.o

OBJECTS		= $(L.OBJECTS) armdisas.o ARMshape.o imdump.o objdump.o

# C source files
SOURCES.c	= sym.c objed.c module.c mem.c scancode.c link.c readfile.c \
		vm.c genimage.c queue.c hash.c ARMshape.c armdisas.c

# C header files
HEADERS.c	= vm.h link.h ARMshape.h

# Any other source files
SOURCES.odd	= makefile


#-----------------------------------------------------------------------------
# Native Host targets and their dependencies:

NEWINCLUDE = .,/usr/include/ansi,/usr/include,$(INCLUDE)
#NEWINCLUDE = .,$(INCLUDE)
ifeq ($(HPROC),ARM)
  # platform = arm bsd4.3 -> target = ARM
  HOSTCFLAGS  := $(HOSTCFLAGS) -j$(NEWINCLUDE) -ansi -DNOPOSIX -DARM -DARMBSD -D__HELIOSARM
else
  ifeq ($(HPROC),C40)
      HOSTCFLAGS  := $(HOSTCFLAGS) -j$(NEWINCLUDE) -ansi -DNOPOSIX -DARM -DARMBSD -D__HELIOSC40
  endif
endif

$(L.OBJECTS) : link.h 
vm.o : vm.h
link.o : hash.c

ARMshape.o: ARMshape.c
	$(HOSTCC) $(HOSTCFLAGS) -c $<

ldarm : $(L.OBJECTS)
	$(HOSTCC) $(HOSTCFLAGS) -o$@@ $^

ldc40 : $(L.OBJECTS)
	$(HOSTCC) $(HOSTCFLAGS) -o$@@ $^

# ARM version (includes disassembler)
objdumparm : objdump.c ARMshape.o
	$(HOSTCC) $(HOSTCFLAGS) -c $<
	$(HOSTCC) $(HOSTCFLAGS) -o$@@ ARMshape.o objdump.o 

# C40 version (includes disassembler)
objdumpc40 : objdump.c c40objdis.c
	$(HOSTCC) $(HOSTCFLAGS) -o$@@ c40objdis.c objdump.c

imdump : imdump.c
	$(HOSTCC) $(HOSTCFLAGS) -o$@@ $<

disasarm : armdisas.c ARMshape.o
	$(HOSTCC) $(HOSTCFLAGS) -c $<
	$(HOSTCC) $(HOSTCFLAGS) -o$@@ armdisas.o ARMshape.o

disasc40 : c40disas.c
	$(HOSTCC) $(HOSTCFLAGS) -o$@@ c40disas.c


#-----------------------------------------------------------------------------
@


1.7
log
@convert to HOSTCFLAGS
@
text
@d18 1
a18 1
# RcsId: $Id: makefile,v 1.6 1991/10/09 11:09:43 paul Exp $
d41 3
d45 1
a45 1
TARGETS = armld armobjdump imdump armdisas
d48 1
a48 1
     TARGETS = c40ld c40objdump imdump c40disas
d59 2
a60 1
	-$(RM)	$(OBJECTS) $(TARGETS) mkout core ../mkout install
d103 1
a103 1
armld : $(L.OBJECTS)
d106 1
a106 1
c40ld : $(L.OBJECTS)
d110 1
a110 1
armobjdump : objdump.c ARMshape.o
d115 1
a115 1
c40objdump : objdump.c c40objdis.c
d121 1
a121 1
armdisas : armdisas.c ARMshape.o
d125 1
a125 1
c40disas : c40disas.c
@


1.6
log
@fixed for new names of executables and srcs
@
text
@d18 1
a18 1
# RcsId: $Id: makefile,v 1.5 1991/10/09 09:25:29 paul Exp $
d41 7
a47 1
TARGETS = armld objdump imdump armdisas
d83 8
a91 3
# platform = arm bsd4.3 -> target = ARM
HOSTCFLAGS  := $(HOSTCFLAGS) -j$(NEWINCLUDE) -ansi -DNOPOSIX -DARM -DARMBSD -D__HELIOSARM

d97 1
a97 2
	$(HOSTCC) $(HOSTCFLAGS) -c -o$@@ $<
#	$(HOSTCC) -lansi -c -o$@@ $<
d102 3
d106 2
a107 2
objdump : objdump.c ARMshape.o
	$(HOSTCC) $(HOSTCFLAGS) -D__HELIOSARM -c $<
d110 3
a112 2
#	$(HOSTCC) -D__HELIOSARM -c $<
#	$(HOSTCC) -o $@@ ARMshape.o objdump.o 
a113 1
# Have to define SMT and __HELIOSARM for split module table function of imdump
d115 1
a115 3
	$(HOSTCC) $(HOSTCFLAGS) -DORION -D__HELIOSARM -o$@@ $<

#	$(HOSTCC) -I.,/usr/include,$(INCLUDE) -DORION -o$@@ $<
d121 2
a122 2
#	$(HOSTCC) -lansi -o$@@ disass.o ARMshape.o

@


1.5
log
@changed name of linker armlink -> armld
@
text
@d18 1
a18 1
# RcsId: $Id: makefile,v 1.4 1991/03/05 19:09:00 paul Exp paul $
d41 1
a41 1
TARGETS = armld objdump imdump armdisa
d59 1
a59 1
OBJECTS		= $(L.OBJECTS) disass.o ARMshape.o imdump.o objdump.o
d63 1
a63 1
		vm.c genimage.c queue.c hash.c
d66 1
a66 1
HEADERS.c	= vm.h link.h
d106 1
a106 1
armdisa : disass.c ARMshape.o
d108 1
a108 1
	$(HOSTCC) $(HOSTCFLAGS) -o$@@ disass.o ARMshape.o
@


1.4
log
@fixed for rename of link to linker
@
text
@d18 1
a18 1
# RcsId: $Id: makefile,v 1.3 90/10/30 14:33:01 paul Exp $
d41 1
a41 1
TARGETS = armlink objdump imdump armdisa
d89 1
a89 1
armlink : $(L.OBJECTS)
@


1.3
log
@fixed clean: by adding other $(OBJECTS) .o's
@
text
@d7 1
a7 1
# File: /HSRC/cmds/link/R140/makefile
d18 1
a18 1
# RcsId: $Id: makefile,v 1.2 90/10/30 14:19:55 paul Exp $
d25 1
a25 1
COMPONENT = cmds/link
@


1.2
log
@fix HOSTCFLAGS to use R140.mak's defaults
@
text
@d18 1
a18 1
# RcsId: $Id: makefile,v 1.1 90/10/22 15:49:17 paul Exp $
d56 1
a56 1
OBJECTS		= sym.o objed.o module.o mem.o scancode.o link.o readfile.o \
d58 3
a60 1
       
d81 1
a81 1
$(OBJECTS) : link.h 
d89 1
a89 1
armlink : $(OBJECTS)
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
# RcsId: $Id$
d77 1
a77 1
HOSTCFLAGS  = -j$(NEWINCLUDE) -ansi -DNOPOSIX -DARM -DARMBSD
d100 1
a100 1
	$(HOSTCC) $(HOSTCFLAGS) -DORION -DSMT -D__HELIOSARM -o$@@ $<
@
