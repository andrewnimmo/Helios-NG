head	1.14;
access;
symbols
	Helios_1_3_1:1.12
	Helios_C40_1_3_Official_Release:1.7
	Alenia_release:1.7
	C40_Field_Test_2:1.6
	C40_Field_Test_R1:1.6;
locks; strict;
comment	@ * @;


1.14
date	93.12.17.12.48.14;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	93.12.10.09.09.21;	author nickc;	state Exp;
branches;
next	1.12;

1.12
date	93.09.10.09.35.10;	author nickc;	state Exp;
branches;
next	1.11;

1.11
date	93.08.27.13.30.00;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	93.08.27.12.03.24;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	93.08.27.11.26.13;	author nickc;	state Exp;
branches;
next	1.8;

1.8
date	93.08.04.15.37.45;	author bart;	state Exp;
branches;
next	1.7;

1.7
date	92.12.08.09.43.36;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	92.07.01.12.39.33;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	91.12.12.09.19.14;	author paul;	state Exp;
branches;
next	1.4;

1.4
date	91.10.11.14.02.33;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	91.10.09.08.50.59;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	90.10.30.11.16.34;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	90.10.22.15.46.44;	author paul;	state Exp;
branches;
next	;


desc
@@


1.14
log
@added code to detect Helios and ARM format object files
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--				IMDUMP.C				--
--                     ---------------------------                      --
--                                                                      --
--             Copyright (C) 1987 - 1993, Perihelion Software Ltd.      --
--                        All Rights Reserved.                          --
--                                                                      --
--	Displays human readable form of Helios image file		--
--									--
--	Author:  PAB 25/1/89						--
--	Upgrades by NJOC 27/8/93					--
--                                                                      --
------------------------------------------------------------------------*/
/* RcsId: $Id: imdump.c,v 1.13 1993/12/10 09:09:21 nickc Exp nickc $ Copyright (C) 1987, Perihelion Software Ltd.\n */
  
#ifndef __STDC__
#define void int
#define const
unsigned char *malloc();
#endif

/*--------------------------------------------------------
-- 		     Include Files			--
--------------------------------------------------------*/

#include <stdio.h>
#include <helios.h>	/* standard header */
#include <module.h>
#include <stdlib.h>
#include <string.h>

typedef struct Image_Magics
  {
    word	ImageMagic;
    bool	invert_swap;
    bool	smtopt;
  }
Image_Magics;

int	hexopt = FALSE;

#ifdef HOSTISBIGENDIAN
int	swapopt = TRUE;	/* default to swapping */
#else
int	swapopt = FALSE;
#endif

#ifdef __SMT
word	smtopt = TRUE;
#else
word	smtopt = FALSE;
#endif

void usage()
{
	fprintf(stderr,"Usage: imdump [-h] <imagefile>\n");
	exit(1);
}

word
swapword( word it )
{
	if (!swapopt)	return (it);
	{
		byte	from[4];
		byte	to[4];

		*((word *)from) = it;

		to[0] = from[3];
		to[1] = from[2];
		to[2] = from[1];
		to[3] = from[0];

		return(*((word *)to));
	}
}


/*--------------------------------------------------------
-- LoadImage						--
--							--
-- Read an image file into memory. 			--
--							--
--------------------------------------------------------*/

unsigned char *
LoadImage(
	  ImageHdr *	Hdr,
	  char	*	name )
{
	unsigned char *	image;
	FILE *		fp;
	word		imsize;

#ifdef __STDC__
	if( (fp = fopen(name, "rb")) == NULL)
#else
	if( (fp = fopen(name, "r")) == NULL)
#endif
	{
		fprintf(stderr,"imdump: file not found\n");
		exit(1);
	}

	if (fread((char *)Hdr,1,sizeof(ImageHdr),fp) != sizeof(ImageHdr))
	{
		fprintf(stderr,"imdump: Cannot read image file header\n");
		exit(1);
	}

	  {
	    static Image_Magics Magics[] =
	      {
		/*
		 * XXX - the following have been extracted from /hsrc/include/module.h
		 *       make sure that they are kept up to date
		 */

		{ 0x12345678L, FALSE,   FALSE },	/* Transputer */
		{ 0xc4045601L, FALSE,   TRUE  },	/* TMS320C40  */
		{ 0x0a245601L, FALSE,   TRUE  },	/* ARM	      */
		{ 0x86045601L, FALSE,   TRUE  },	/* i860	      */
#ifdef HOSTISBIGENDIAN
		{ 0x01560468L, TRUE, 	FALSE },	/* 68K (on a big-endian host) */
#endif
		{ 0x68045601L, FALSE,   FALSE }		/* 68K	      */
	      };
	    word	Magic = swapword( Hdr->Magic );
	    int		i;

	    
	    for (i = sizeof (Magics) / sizeof (Magics[ 0 ] );
		 i--;)
	      {
		if (Magic == Magics[ i ].ImageMagic)
		  {
		    smtopt = Magics[ i ].smtopt;
		    
		    if (Magics[ i ].invert_swap)
		      swapopt = !swapopt;
		    
		    break;
		  }
	      }	    

	    if (i < 0)
	      {
		if (Magic == 0xC3CBC6C5)
		  {
		    fprintf( stderr, "imdump: file is an ARM Object Format file!\n" );
		  }
		else if (Magic == 0xC5C6CBC3)
		  {
		    fprintf( stderr, "imdump: file is a byte swapped ARM Object Format file!\n" );
		  }
		else if ( (Magic & 0x00FFFFFF) == 0x00014120)
		  {
		    fprintf( stderr, "imdump: file is an Helios Object Format file!\n" );
		  }
		else
		  {
		    fprintf(stderr,"imdump: file is not an image file\n");
		    fprintf(stderr, "Magic %lx is not a Helios Magic number\n", Magic);
		  }
		fclose(fp);
		exit(1);
	      }
	  }
	
	imsize = swapword(Hdr->Size);
	
	if((image = (unsigned char *)malloc((int)imsize)) == NULL )
	{
		fprintf(stderr,"imdump: out of mem\n");
		fclose(fp);
		exit(1);
	}

	if( fread(image,1,(int)imsize,fp) != imsize) 
	{
		free(image);
		fprintf(stderr,"imdump: size of image file is wrong\n");
		fclose(fp);
		exit(1);
	}
	fclose(fp);
	return image;
}


void
DisplayHex(
	   ImageHdr *		Hdr,
	   unsigned char *	image )
{
	int i,offs = 0;
	word imsize = swapword(Hdr->Size);
#	define NOPERLINE 16

	printf("HEX DISPLAY OF IMAGE HEADER:\n");
	printf("Magic = %lx\n", swapword(Hdr->Magic));
	printf("Flags = %lx\n", swapword(Hdr->Flags));
	printf("Size  = %lx\n", imsize);

	printf("\nHEX DISPLAY OF IMAGE BODY:\n");
	for(;;)
	{
		printf("%04x: ",offs);
		for (i=0; i < NOPERLINE ; i++)
		{
			if (imsize--)
				printf(" %02.2x", *image++);
			else
			{
				putchar('\n');
				exit(0);
			}
		}
		putchar('\n');
		offs += NOPERLINE;
	}
}

void
DisplayHdr( ImageHdr * Hdr )
{
	printf("IMAGE HEADER:\n");
	printf("Magic = %lx\n", swapword(Hdr->Magic));
	printf("Flags = %lx\n", swapword(Hdr->Flags));
	printf("Size  = %#lx (%ld)\n", swapword(Hdr->Size),swapword(Hdr->Size));
}

void
DisplayMods(
	    ImageHdr *		Hdr,
	    unsigned char *	image )
{
	Module *mod = (Module *)image;
	word	swap, type, size, imsize;

	printf("\nIMAGE BODY:\n");
	imsize = swapword(Hdr->Size);

	while ((unsigned char *)mod < image + imsize)
	{
	putchar('\n');
	type = swapword(mod->Type);

	switch(type)
		{
		case T_Program:
			printf("Type      = Program\n");
			goto bypass;
		case T_Module:
			printf("Type      = Code Module\n");
		bypass:
			size = swapword(mod->Size);
			printf("Size      = %#lx (%ld)\n",size,size);

			printf("Name      = \"%s\"\n",mod->Name);

			swap = swapword(mod->Id);
			printf("Slot      = %#lx (%ld)\n",swap,swap);

			swap = swapword(mod->Version);
			printf("Version   = %#lx (%ld)\n",swap,swap);

			swap = swapword(mod->MaxData);
			printf("MaxData   = %#lx (%ld)\n",swap,swap);

			swap = swapword(mod->Init);
			printf("Init RPTR = %#lx (%ld)\n",swap,swap);

			if (smtopt) {
				/* Cheat slightly, so we can have one version */
				/* of imdump even if the Module struct has no */
				/* MaxCodeP field. */
				swap = swapword(*(((word *)(&mod->Init)) + 1));
				printf("MaxCodeP  = %#lx (%ld)\n",swap,swap);
			}

			if(type == T_Module)
				break;

			swap = swapword(((Program *)mod)->Stacksize);
			printf("Stacksize = %#lx (%ld)\n",swap,swap);

			swap = swapword(((Program *)mod)->Heapsize);
			printf("Heapsize  = %#lx (%ld)\n",swap,swap);

			swap = swapword(((Program *)mod)->Main);
			printf("Main RPTR = %#lx (%ld)\n",swap,swap);
			break;

		case T_ResRef:
			printf("Type      = ResRef\n");

			size = swapword(((ResRef *)mod)->Size);
			printf("Size      = %#lx (%ld)\n",size,size);

			printf("Require   = \"%s\"\n",((ResRef *)mod)->Name);

			swap = swapword(((ResRef *)mod)->Id);
			printf("Slot      = %#lx (%ld)\n",swap,swap);

			swap = swapword(((ResRef *)mod)->Version);
			printf("Version   = %#lx (%ld)\n",swap,swap);

			break;

 	        case T_Device:
			/* This relies on the "Module" structure and
			 * "Device" structure identity for the most part.
			 * (Since <device.h> has too many Helios definitions
			 * for a HOSTed version of this program)
			 */
                        printf("Type      = Device\n") ;

			size = swapword(mod->Size);
			printf("Size      = %#lx (%ld)\n",size,size) ;

			printf("Name      = \"%s\"\n",mod->Name) ;

			swap = swapword(mod->Version);
	                printf("Version   = %#lx (%ld)\n",swap,swap) ;

                	swap = swapword(mod->MaxData);
        	        printf("DevOpen   = %#lx (%ld)\n",swap,swap) ;
	                break ;

		case 0L:
			/* module 0 = last module */
			return;

		default:
			fprintf(stderr, "WARNING: Unknown module type %#lx - skipping\n",type);
			size = mod->Size; /* a definite maybe */
 			if (size <= 0) size = 4;
			break;
		}

		mod = (Module *)((char *)mod + size);
	}
	fprintf(stderr, "imdump exit - no last module indication\n");
}


int
main(
     int 	argc,
     char **	argv )
{
	ImageHdr Hdr;
	unsigned char	*image;
	char	*imname = NULL;

	switch (argc)
	{
	case 2:
		imname = argv[1];
		break;
	case 3:
		if (strcmp(argv[1], "-h") == 0)
			hexopt = TRUE;
		else if (strcmp(argv[1], "-nsmt") == 0)
			smtopt = FALSE;
		else if (strcmp(argv[1], "-smt") == 0)
			smtopt = TRUE;
		else	usage();
		imname = argv[2];
		break;
	case 4:
		if (strcmp(argv[1], "-h") == 0)
			hexopt = TRUE;
		else if (strcmp(argv[1], "-nsmt") == 0)
			smtopt = FALSE;
		else if (strcmp(argv[1], "-smt") == 0)
			smtopt = TRUE;
		else	usage();

		if (strcmp(argv[2], "-h") == 0)
			hexopt = TRUE;
		else if (strcmp(argv[2], "-nsmt") == 0)
			smtopt = FALSE;
		else	usage();

		imname = argv[3];
		break;
	default:
		usage();
	}

	if ((image = LoadImage(&Hdr,imname)) != NULL)
	{
		if(hexopt)
			DisplayHex(&Hdr, image);
		else
		{
			DisplayHdr(&Hdr);
			DisplayMods(&Hdr,image);
		}
		free(image);
	}
}


/* -- End of imdump.c */
@


1.13
log
@fixed compile time warning
@
text
@d15 1
a15 1
/* RcsId: $Id: imdump.c,v 1.12 1993/09/10 09:35:10 nickc Exp nickc $ Copyright (C) 1987, Perihelion Software Ltd.\n */
d150 18
a167 2
		fprintf(stderr,"imdump: file is not an image file\n");
		fprintf(stderr, "Magic %lx is not a Helios Magic number\n", Magic);
d177 1
d185 1
@


1.12
log
@added a space to improve output format
@
text
@d15 1
a15 1
/* RcsId: $Id: imdump.c,v 1.11 1993/08/27 13:30:00 nickc Exp nickc $ Copyright (C) 1987, Perihelion Software Ltd.\n */
d50 1
a50 1
int	smtopt = TRUE;
d52 1
a52 1
int	smtopt = FALSE;
@


1.11
log
@fixed automatic detextion of SMT
@
text
@d15 1
a15 1
/* RcsId: $Id: imdump.c,v 1.10 1993/08/27 12:03:24 nickc Exp nickc $ Copyright (C) 1987, Perihelion Software Ltd.\n */
d263 1
a263 1
				printf("MaxCodeP = %#lx (%ld)\n",swap,swap);
@


1.10
log
@fixed byte swapping for all kinds of hosts ...
@
text
@d15 1
a15 1
/* RcsId: $Id: imdump.c,v 1.9 1993/08/27 11:26:13 nickc Exp nickc $ Copyright (C) 1987, Perihelion Software Ltd.\n */
d33 8
d57 1
a57 1
	fprintf(stderr,"Usage: imdump [-h] [-nsmt] [-s] <imagefile>\n");
d114 1
a114 1
	    static word Image_Magics[] =
d121 4
a124 4
		  0x12345678L,	/* Transputer */
		  0xc4045601L,	/* TMS320C40  */
		  0x0a245601L,	/* ARM	      */
		  0x86045601L,	/* i860	      */
d126 1
a126 9
		  /*
		   * The 68K is big endian, so the Image magic is stored in big endian
		   * format.  Imdump, however, always byte swaps when running on a big
		   * endian host, so we must detect this and re byte swap!
		   * Hence the reassession of swapopt below ...
		   */
		  0x01560468L	/* 68K	      */
#else
		  0x68045601L	/* 68K	      */
d128 2
a129 1
		};
d134 1
a134 1
	    for (i = sizeof (Image_Magics) / sizeof (Image_Magics[ 0 ] );
d137 9
a145 2
		if (Magic == Image_Magics[ i ])
		  break;
a153 4
	    else if (Image_Magics[i] == 0x01560468)
	      {
		swapopt = FALSE;
	      }	    
a348 2
		else if (strcmp(argv[1], "-s") == 0)
			swapopt = ~swapopt;
d351 2
a358 2
		else if (strcmp(argv[1], "-s") == 0)
			swapopt = ~swapopt;
d361 2
a366 2
		else if (strcmp(argv[2], "-s") == 0)
			swapopt = ~swapopt;
@


1.9
log
@fixed so that it recognises all forms of Helios Image Magic
@
text
@d15 1
a15 1
/* RcsId: $Id: imdump.c,v 1.8 1993/08/04 15:37:45 bart Exp nickc $ Copyright (C) 1987, Perihelion Software Ltd.\n */
d113 15
a127 5
		  0x12345678L,
		  0xc4045601L,
		  0x0a245601L,
		  0x86045601L,
		  0x68045601L
d146 4
d318 1
@


1.8
log
@Changed RCS ID from a string to a comment
@
text
@d6 1
a6 1
--             Copyright (C) 1987 - 1992, Perihelion Software Ltd.      --
d12 1
d15 1
a15 1
/* RcsId: $Id: imdump.c,v 1.7 1992/12/08 09:43:36 nickc Exp $ Copyright (C) 1987, Perihelion Software Ltd.\n */
d105 27
a131 2
	if( swapword(Hdr->Magic) != Image_Magic ) 
	{
d133 1
a133 1
		fprintf(stderr, "Magic is %lx should be %lx\n",swapword(Hdr->Magic), Image_Magic);
d135 3
a137 2
	}

@


1.7
log
@removed compile time warnings
@
text
@d14 1
a14 3
#ifdef __TRAN
static char *RcsId = "$Id: imdump.c,v 1.6 1992/07/01 12:39:33 paul Exp nickc $ Copyright (C) 1987, Perihelion Software Ltd.\n";
#endif
d214 4
a217 1
				swap = swapword(mod->MaxCodeP);
@


1.6
log
@fixed swapping and improved error msgs
@
text
@d6 1
a6 1
--             Copyright (C) 1987, Perihelion Software Ltd.             --
d14 4
a17 2
static char *RcsId = "$Id: imdump.c,v 1.5 1991/12/12 09:19:14 paul Exp $ Copyright (C) 1987, Perihelion Software Ltd.\n";

d31 2
d54 2
a55 2
int swapword(it)
word it;
d81 4
a84 3
unsigned char *LoadImage(Hdr, name)
ImageHdr *Hdr;
char	*name;
d86 3
a88 3
	unsigned char	*image;
	FILE	*fp;
	int	imsize;
d114 2
a115 1
	if( !(image = (unsigned char *)malloc(imsize)) )
d121 1
a121 1
	if( fread(image,1,imsize,fp) != imsize) 
d132 4
a135 3
DisplayHex(Hdr,image)
ImageHdr *Hdr;
unsigned char *image;
d138 1
a138 1
	int imsize = swapword(Hdr->Size);
d165 2
a166 3

DisplayHdr(Hdr)
ImageHdr *Hdr;
d174 4
a177 3
DisplayMods(Hdr,image)
ImageHdr *Hdr;
unsigned char *image;
d285 4
a288 4

main (argc, argv)
int argc;
char **argv;
d292 1
a292 1
	char	*imname;
d332 1
a332 1
	if ((image = LoadImage(&Hdr,imname)))
@


1.5
log
@ added automatic default choice of correct endianess depending on
HOSTISBIGENDIAN flag
@
text
@d14 1
a14 1
static char *RcsId = "$Id: imdump.c,v 1.4 1991/10/11 14:02:33 paul Exp paul $ Copyright (C) 1987, Perihelion Software Ltd.\n";
a53 1

d182 1
d216 1
a216 1
			swap = ((Program *)mod)->Stacksize;
d219 1
a219 1
			swap = ((Program *)mod)->Heapsize;
d222 1
a222 1
			swap = ((Program *)mod)->Main;
d229 1
a229 1
			size = ((ResRef *)mod)->Size;
d234 1
a234 1
			swap = ((ResRef *)mod)->Id;
d237 1
a237 1
			swap = ((ResRef *)mod)->Version;
a241 1
#if 1
d250 1
a250 1
			size = mod->Size ;
d255 1
a255 1
			swap = mod->Version ;
d258 3
a260 4
	                swap = mod->MaxData ;
	                printf("DevOpen   = %#lx (%ld)\n",swap,swap) ;
                        break ;
#endif
d267 1
a267 1
			printf("WARNING: Unknown module type %#lx - skipping\n",type);
d271 1
d274 1
d276 1
@


1.4
log
@fixed for automatic __SMT definition in HOSTCFLAGS
@
text
@d14 1
a14 1
static char *RcsId = "$Id: imdump.c,v 1.3 1991/10/09 08:50:59 paul Exp $ Copyright (C) 1987, Perihelion Software Ltd.\n";
d31 4
d36 2
d295 1
a295 1
			swapopt = TRUE;
d305 1
a305 1
			swapopt = TRUE;
d313 1
a313 1
			swapopt = TRUE;
@


1.3
log
@NickC's bug fixes
@
text
@d14 1
a14 1
static char *RcsId = "$Id: imdump.c,v 1.1 1991/08/22 15:05:01 nickc Exp $ Copyright (C) 1987, Perihelion Software Ltd.\n";
a27 5

#if defined(__HELIOSARM) || defined(__HELIOSC40)
# define SMT		/* shared module tables */
#endif

d32 1
d34 3
@


1.2
log
@added device driver support
@
text
@d14 1
a14 1
static char *RcsId = "$Id: imdump.c,v 1.1 90/10/22 15:46:44 paul Exp $ Copyright (C) 1987, Perihelion Software Ltd.\n";
d28 5
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
static char *RcsId = "$Id$ Copyright (C) 1987, Perihelion Software Ltd.\n";
d231 22
@
