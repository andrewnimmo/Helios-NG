head	1.31;
access;
symbols
	Helios_1_3_1:1.27
	Helios_C40_1_3_Official_Release:1.22
	Alenia_release:1.22
	C40_Field_Test_2:1.22
	C40_Field_Test_R1:1.14;
locks; strict;
comment	@ * @;


1.31
date	94.01.07.14.28.30;	author nickc;	state Exp;
branches;
next	1.30;

1.30
date	94.01.05.16.30.15;	author nickc;	state Exp;
branches;
next	1.29;

1.29
date	94.01.05.14.43.25;	author nickc;	state Exp;
branches;
next	1.28;

1.28
date	93.12.20.19.21.21;	author nickc;	state Exp;
branches;
next	1.27;

1.27
date	93.09.14.09.27.45;	author nickc;	state Exp;
branches;
next	1.26;

1.26
date	93.09.13.12.04.16;	author nickc;	state Exp;
branches;
next	1.25;

1.25
date	93.08.18.18.27.22;	author paul;	state Exp;
branches;
next	1.24;

1.24
date	93.06.25.12.12.22;	author paul;	state Exp;
branches;
next	1.23;

1.23
date	93.06.16.13.52.04;	author nickc;	state Exp;
branches;
next	1.22;

1.22
date	92.10.01.10.23.29;	author nickc;	state Exp;
branches;
next	1.21;

1.21
date	92.09.21.16.51.24;	author martyn;	state Exp;
branches;
next	1.20;

1.20
date	92.09.15.08.37.15;	author nickc;	state Exp;
branches;
next	1.19;

1.19
date	92.08.17.16.19.18;	author paul;	state Exp;
branches;
next	1.18;

1.18
date	92.08.04.16.24.47;	author nickc;	state Exp;
branches;
next	1.17;

1.17
date	92.07.13.08.55.10;	author nickc;	state Exp;
branches;
next	1.16;

1.16
date	92.07.08.14.05.20;	author nickc;	state Exp;
branches;
next	1.15;

1.15
date	92.07.07.15.30.09;	author nickc;	state Exp;
branches;
next	1.14;

1.14
date	92.06.22.13.55.01;	author nickc;	state Exp;
branches;
next	1.13;

1.13
date	92.06.15.12.03.49;	author paul;	state Exp;
branches;
next	1.12;

1.12
date	92.04.16.18.56.39;	author paul;	state Exp;
branches;
next	1.11;

1.11
date	92.04.16.17.02.33;	author nickc;	state Exp;
branches;
next	1.10;

1.10
date	92.01.28.13.09.53;	author nickc;	state Exp;
branches;
next	1.9;

1.9
date	91.12.12.09.17.51;	author paul;	state Exp;
branches;
next	1.8;

1.8
date	91.11.06.15.03.36;	author paul;	state Exp;
branches;
next	1.7;

1.7
date	91.10.18.15.16.23;	author paul;	state Exp;
branches;
next	1.6;

1.6
date	91.10.09.10.54.20;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	91.10.09.08.47.51;	author paul;	state Exp;
branches;
next	1.4;

1.4
date	91.10.08.15.52.43;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	91.05.07.09.28.02;	author ben;	state Exp;
branches;
next	1.2;

1.2
date	91.04.11.19.17.25;	author ben;	state Exp;
branches;
next	1.1;

1.1
date	90.10.22.15.47.29;	author paul;	state Exp;
branches;
next	;


desc
@@


1.31
log
@added new ARM AOF patchesa
@
text
@/************************************************************************/
/* Helios Linker							*/
/*                                                                      */
/* File: link.h                                                         */
/*                                                                      */
/*                                                                      */
/* Copyright (c) 1987, Perihelion Software Ltd. All Rights Reserved.    */
/* Copyright (c) 1991, Perihelion Software Ltd. All Rights Reserved.    */
/* Copyright (c) 1992, Perihelion Software Ltd. All Rights Reserved.    */
/* Copyright (c) 1993, Perihelion Software Ltd. All Rights Reserved.    */
/************************************************************************/
/* RcsId: $Id: link.h,v 1.30 1994/01/05 16:30:15 nickc Exp nickc $ */

#include <stdio.h>
#include <setjmp.h>
#ifdef __STDC__
#include <stdlib.h>
#include <string.h>
#else
#include <strings.h>
#endif

#ifndef __STDC__
typedef char * VoidStar;
#define void int
#endif

#include <helios.h>

#ifdef __STDC__
# include <queue.h>
#else
# include "queue.nonansi"
#endif

#include "vm.h"

#ifdef __STDC__
extern VMRef VMNew( int size );
#else
extern VMRef VMNew();
#endif

#define locase( c ) (isupper( c ) ? tolower( c ) : c)
#define eqs( a, b ) (strcmp( a, b ) == 0)
#define use( x )    (x) = (x)

/* HASHSIZE must be a prime number */
/* some primes: 19 31 41 53 61 71 83 97 101 151 199  251 307 401 503 */

#define LOCAL_HASHSIZE		31
#define GLOBAL_HASHSIZE		541

#ifdef __C40
# define NEW_STUBS		/* enables new, demand generated calling stubs */
#endif

typedef union
  {
    VMRef	v;
    word   	w;		/* complicated by the fact that orion cannot pass unions as arguments ! */
    long   	fill;
  }
Value;

/* Modules */

typedef struct STEntry
  {
    VMRef	head;
    int		entries;
  }
STEntry;

typedef struct asm_Module
  {
    VMRef  	next;                  	/* link in modlist         */
    VMRef  	start;                 	/* code start		   */
    VMRef  	end;			/* code end		   */
    VMRef  	refs;		      	/* list of references	   */
    WORD   	id;                    	/* module table slot       */
    WORD   	linked;               	/* true if added to link   */
    WORD   	length;		      	/* length of module 	   */
    STEntry   	symtab[ LOCAL_HASHSIZE ];/* module symbol table     */
    char *	file_name;		/* name of the file starting the module */
  }
asm_Module;

#define NEW_REF

typedef struct Symbol
  {
    VMRef	next;		/* next symbol in hash chain	*/
    VMRef	prev;		/* prev symbol in hash chain	*/
    INT		type;           /* symbol type                  */
    unsigned int global:1,	/* true if global, else false	*/
                 referenced:1,	/* true if referenced		*/
                 AOFassumedData:1; /* true if check_symbol() assumes the symbol is data */
#ifdef NEW_REF
    VMRef	fwd_ref;	/* link into forward ref chain	*/
#endif
    VMRef	module;		/* defining module		*/

/* ************** NB different from ASM version, where value is called def */
    Value	value;            /* its definition               */
/* *********************************************************************** */

    char *	file_name;	/* name of file containing definition of symbol */
    
    char	name[ 1 ];      /* symbol (actually variable)   */
  }
Symbol;


typedef struct
  {
    UBYTE	type;      /* code object type     */
    UBYTE	size;      /* size in bytes        */
    UBYTE	vtype;     /* value type           */
    WORD	loc;       /* offset in module     */
    Value	value;     /* value                */
  }
Code;

typedef struct
  {
    byte	type;      /* patch sub op         */
    word	word;      /* word value to patch  */
    Value	value;     /* value                */
  }
Patch;

#define OBJCODE      	0x01
#define OBJBSS        	0x02
#define OBJINIT       	0x03

#define OBJBYTE       	0x09	   	/* ls 3 bits = size      */
#define OBJSHORT      	0x0a
#define OBJWORD       	0x0c

#define OBJCODESYMB   	0x0d		/* was funcref */
#define OBJMODSIZE  	0x0e		/* was OBJIMAGESIZE */
#define OBJLABELREF   	0x0f
#define OBJDATASYMB   	0x10		/* was dataref */
#define OBJDATAMODULE 	0x11
#define OBJMODNUM     	0x12

#define OBJPATCH      	0x13   		/* PATCHES are 0x13 - 0x1f */
#define OBJPATCHMAX   	0x1f

#define OBJMODULE     	0x20
#define OBJBYTESEX	0x21

#define OBJGLOBAL     	0x22
#define OBJLABEL      	0x23
#define OBJDATA       	0x24
#define OBJCOMMON     	0x25
#define OBJCODETABLE  	0x26		/* was OBJCODE or t_func */
#define OBJREF        	0x27		/* force reference to another library */

#ifdef __C40
#define OBJCODESTUB	0x28		/* addr of fn or stub, cf OBJLABELREF */
#define OBJADDRSTUB	0x29		/* address of stub returning address of function */
#endif

#define OBJNEWSEG	0x30
#define OBJEND		0x31
#define OBJLITERAL	0x32	   	/* OBJCODE of <= 4 bytes */

#define S_UNBOUND    	0x40
#define S_CODESYMB   	0x41 		/* label */
#define S_FUNCSYMB   	0x42 		/* smt codesymb */
#define S_DATASYMB   	0x43
#define S_COMMSYMB   	0x44
#define S_DATADONE   	0x45
#define S_FUNCDONE   	0x46
#define S_COMMDONE   	0x47

#define PATCHADD  	0x13 		/* patch = val1 +  val2 */
#define PATCHSHIFT	0x14 		/* patch = val2 << val1 */ /* right shift for -ve val1 */
#define PATCHSWAP	0x1E		/* pathc = byte_swap( val1 ) */
#define PATCHOR		0x1f		/* patch = val1 | val2 */

#ifdef __ARM
#define PATCHARMDT	0x15
#define PATCHARMDP	0x16
#define PATCHARMJP	0x17
#define PATCHARMDPLSB	0x18
#define PATCHARMDPREST	0x19
#define PATCHARMDPMID	0x1a
#define PATCHARMAOFLSB	0x1b		/* patch required by AOF converter.  See mcpatch() */
#define PATCHARMAOFMID	0x1c		/* patch required by AOF converter.  See mcpatch() */
#define PATCHARMAOFREST	0x1d		/* patch required by AOF converter.  See mcpatch() */
#endif

#ifdef __C40
#define PATCHC40DATAMODULE1	0x15
#define PATCHC40DATAMODULE2	0x16
#define PATCHC40DATAMODULE3	0x17
#define PATCHC40DATAMODULE4	0x18
#define PATCHC40DATAMODULE5	0x19
#define PATCHC40MASK24ADD	0x1a
#define PATCHC40MASK16ADD	0x1b
#define PATCHC40MASK8ADD	0x1c
#endif

#define i_helios   	'h'

/* traceing */

extern word traceflags;

#define db_gencode   	0x0008
#define db_genimage  	0x0010
#define db_files     	0x0400
#define db_mem       	0x0800
#define db_sym       	0x1000
#define db_modules   	0x2000
#define db_scancode  	0x4000
#ifdef NEW_STUBS
#define db_stubs	0x8000
#endif
#if defined __ARM && (defined RS6000 || defined __SUN4)
#define db_aof	       0x10000
#endif

/* externals */

extern word 	vmpagesize;
extern word 	codesize;
extern word 	heapsize;
extern word 	symsize;
extern VMRef 	curmod;
extern VMRef 	module0;
extern FILE *	infd;
extern int  	outf;
extern word 	smtopt;
extern word	gen_image_header;
extern VMRef 	firstmodule;
extern VMRef 	tailmodule;
extern word 	inlib;
extern word 	curloc;
extern word 	totalcodesize;
extern WORD 	codepos;
extern BYTE *	infile_duplicate;
#if defined __ARM && (defined RS6000 || defined __SUN4)
extern word	bSharedLib;
extern word	bDeviceDriver;
extern word	bTinyModel;
#endif

#ifdef __STDC__
extern void *	alloc( INT n );
#else
extern VoidStar	alloc();
#endif

#ifdef __STDC__
extern void 	error(  BYTE *, ... );
extern void 	report( BYTE *, ... );
extern void 	warn(   BYTE *, ... );
extern void 	inform( BYTE *, ... );
extern void 	initmem( void );
extern void 	initcode( void );
extern void 	initmodules( void );
extern void 	setmodules( void );
extern void 	initsym( void );
extern void 	readfile( void );
extern void 	genend( void );
extern void 	genimage( void );
extern void 	objed( int, char *, long, long );
extern VMRef 	codeptr( void );
extern void 	_trace( char *, ... );
extern void 	cps( char *, char * );
extern VMRef 	lookup( char * );
extern VMRef 	insert( byte *, word );
extern void 	movesym( VMRef );
extern void 	refsymbol( VMRef, word );
extern VMRef 	newcode( WORD, WORD, WORD, WORD, WORD );
extern void 	scancode( void );
extern void 	genimage( void );
extern void	endmodule(void);
extern void	refsymbol_nondef(VMRef v);
extern void	refsymbol_def(VMRef v);
extern void	outword( WORD );
#ifdef NEW_STUBS
extern WORD	new_stub( VMRef, bool );
extern void	build_stubs( void );
extern void	flush_output_buffer( void );
extern void	RequestBranchStub( VMRef );
extern WORD	FindSymbolOffset( VMRef );
#endif
#else
extern void 	error();
extern void 	report();
extern void 	warn();
extern void 	initmem();
extern void 	initcode();
extern void 	initmodules();
extern void 	setmodules();
extern void 	initsym();
extern void 	readfile();
extern void 	genend();
extern void 	genimage();
extern void 	objed();
extern VMRef 	codeptr();
extern void 	_trace();
extern void 	cps();
extern VMRef 	lookup();
extern VMRef 	insert();
extern void	movesym();
extern void 	refsymbol();
extern VMRef 	newcode();
extern void 	scancode();
extern void 	genimage();
extern void	endmodule();
extern void	refsymbol_nondef();
extern void	refsymbol_def();
extern void	outword();
extern WORD	new_stub();
extern void	build_stubs();
extern void	flush_output_buffer();
#endif
@


1.30
log
@added extra flag field to Symbol strcuture (only used by AOF conversion code)
@
text
@d12 1
a12 1
/* RcsId: $Id: link.h,v 1.29 1994/01/05 14:43:25 nickc Exp nickc $ */
d191 3
@


1.29
log
@changed 'sparc' to '__SUN4' in #if defined
@
text
@d12 1
a12 1
/* RcsId: $Id: link.h,v 1.28 1993/12/20 19:21:21 nickc Exp nickc $ */
a95 4
#ifdef __ARM
    WORD	global;		/* true if global, else false	*/
    WORD	referenced;	/* true if referenced		*/
#else
d97 2
a98 2
                 referenced:1;	/* true if referenced		*/
#endif
@


1.28
log
@added tracing for ARM AOF conversion
@
text
@d12 1
a12 1
/* RcsId: $Id: link.h,v 1.27 1993/09/14 09:27:45 nickc Exp nickc $ */
d224 1
a224 1
#if defined __ARM && (defined RS6000 || defined sparc)
d247 1
a247 1
#if defined __ARM && (defined RS6000 || defined sparc)
@


1.27
log
@removed hexopt option
@
text
@d12 1
a12 1
/* RcsId: $Id: link.h,v 1.26 1993/09/13 12:04:16 nickc Exp nickc $ */
d224 3
d247 5
@


1.26
log
@added prototypes for new branch stub generating functions
@
text
@d12 1
a12 1
/* RcsId: $Id: link.h,v 1.25 1993/08/18 18:27:22 paul Exp nickc $ */
a234 1
extern word 	hexopt;
@


1.25
log
@Now supports -i option to disable the generation of std image header and
zero byte tail.
(used for ROM bootstrap).
@
text
@d12 1
a12 1
/* RcsId: $Id: link.h,v 1.24 1993/06/25 12:12:22 paul Exp $ */
d280 1
d284 3
@


1.24
log
@m68k now defines __BIGENDIAN as standard
@
text
@d12 1
a12 1
/* RcsId: $Id: link.h,v 1.23 1993/06/16 13:52:04 nickc Exp $ */
d237 1
@


1.23
log
@added 68K bigendian assertion
@
text
@d12 1
a12 1
/* RcsId: $Id: link.h,v 1.22 1992/10/01 10:23:29 nickc Exp nickc $ */
a20 4
#endif

#if defined __68K && !defined __BIGENDIAN
#define __BIGENDIAN
@


1.22
log
@added support for address stub creation
@
text
@d10 1
d12 1
a12 1
/* RcsId: $Id: link.h,v 1.21 1992/09/21 16:51:24 martyn Exp nickc $ */
d23 4
d48 1
a48 1
#define locase( c ) (isupper( c )? tolower( c ) : c)
d50 1
a50 1
#define use( x ) (x) = (x)
@


1.21
log
@added code to buffer image file writes to 4K.
@
text
@d11 1
a11 1
/* RcsId: $Id: link.h,v 1.20 1992/09/15 08:37:15 nickc Exp $ */
d163 2
d166 2
d278 1
a278 1
extern WORD	new_stub( VMRef );
@


1.20
log
@changed output file descriptor to be a POSIX handle rather than a C file descriptor
@
text
@d11 1
a11 1
/* RcsId: $Id: link.h,v 1.19 1992/08/17 16:19:18 paul Exp nickc $ */
d276 1
d306 1
@


1.19
log
@NEW_STUBS should only have been defined for C40
@
text
@d11 1
a11 1
/* RcsId: $Id: link.h,v 1.18 1992/08/04 16:24:47 nickc Exp paul $ */
d229 1
a229 1
extern FILE *	outfd;
d259 1
a259 1
extern void 	objed( FILE *, char *, long, long );
@


1.18
log
@added prototype for inform()
@
text
@d11 1
a11 1
/* RcsId: $Id: link.h,v 1.17 1992/07/13 08:55:10 nickc Exp nickc $ */
d53 3
a55 1
#define NEW_STUBS		/* enables new, demand generated calling stubs */
@


1.17
log
@fixed to support new patch CODESTUB
@
text
@d11 1
a11 1
/* RcsId: $Id: link.h,v 1.16 1992/07/08 14:05:20 nickc Exp nickc $ */
d245 4
a248 3
extern void 	error( BYTE *, ... );
extern void 	report( BYTE  *,  ... );
extern void 	warn( BYTE *,  ... );
@


1.16
log
@chamged name of Module to asm_Module, and improved has table use
@
text
@d11 1
a11 1
/* RcsId: $Id: link.h,v 1.15 1992/07/07 15:30:09 nickc Exp nickc $ */
d53 2
d214 3
d270 3
d299 3
@


1.15
log
@added OBJCODESTUB for new style stub generation support
@
text
@d9 1
d11 1
a11 1
/* RcsId: $Id: link.h,v 1.14 1992/06/22 13:55:01 nickc Exp nickc $ */
d50 2
a51 1
#define HASHSIZE 101
d70 1
a70 1
typedef struct Module
d73 2
a74 2
    VMRef  	start;                 	/* code start and end...   */
    VMRef  	end;
d79 1
a79 1
    STEntry   	symtab[ HASHSIZE ];	/* module symbol table     */
d82 1
a82 1
Module;
a112 14
/*
typedef struct Symbol
{
  VMRef     next;
  VMRef     prev;
  word      type;
  word      global;
  word      referenced;
  VMRef     module;
  Value     value;
  char      name[ Variable ];
}
Symbol;
*/
d116 4
a119 4
    byte	type;      /* code object type     */
    ubyte	size;      /* size in bytes        */
    byte	vtype;     /* value type           */
    word	loc;       /* offset in module     */
@


1.14
log
@added file_name field to module structure
@
text
@d10 1
a10 1
/* RcsId: $Id: link.h,v 1.13 1992/06/15 12:03:49 paul Exp nickc $ */
d171 1
@


1.13
log
@fixed for std __proc names
@
text
@d10 1
a10 1
/* RcsId: $Id: link.h,v 1.12 1992/04/16 18:56:39 paul Exp paul $ */
d78 1
@


1.12
log
@fixed typo
@
text
@d10 1
a10 1
/* RcsId: $Id: link.h,v 1.11 1992/04/16 17:02:33 nickc Exp paul $ */
d189 1
a189 1
#ifdef __HELIOSARM
d198 1
a198 1
#ifdef __HELIOSC40
@


1.11
log
@added new field to symbol structure
@
text
@d10 1
a10 1
/* RcsId: $Id: link.h,v 1.10 1992/01/28 13:09:53 nickc Exp nickc $ */
d240 1
a240 1
extern WORD 	codepos
@


1.10
log
@changed bit fields to be int'[D[D[D[C['int' not 'long'
@
text
@d10 1
a10 1
/* RcsId: $Id: link.h,v 1.9 1991/12/12 09:17:51 paul Exp nickc $ */
d104 2
d152 1
a152 1
#define OBJMODSIZE  	0x0e
d240 2
a241 1
extern WORD 	codepos;
@


1.9
log
@added PATCHC40MASK8ADD c40 patch
@
text
@d10 1
a10 1
/* RcsId: $Id: link.h,v 1.8 1991/11/06 15:03:36 paul Exp $ */
d92 2
a93 2
    UWORD	global:1,	/* true if global, else false	*/
                referenced:1;	/* true if referenced		*/
@


1.8
log
@changed name of IMAGESIZE directive to MODSIZE (as thats what it is!)
@
text
@d10 1
a10 1
/* RcsId: $Id: link.h,v 1.7 1991/10/18 15:16:23 paul Exp paul $ */
d204 1
@


1.7
log
@simplified - no need to work out if unix system is being used, bigendian
global make system flag now used.
@
text
@d10 1
a10 1
/* RcsId: $Id: link.h,v 1.6 1991/10/09 10:54:20 paul Exp $ */
d150 1
a150 1
#define OBJIMAGESIZE  	0x0e
@


1.6
log
@added missing prototypes
@
text
@d10 1
a10 1
/* RcsId: $Id: link.h,v 1.5 1991/10/09 08:47:51 paul Exp $ */
d23 1
a23 3
# ifndef ORION
#   define void int
# endif
a35 21
/* some of the platforms ... */

#ifdef ORION
#define UNIX 1
#endif
#ifdef ARMBSD
#define UNIX 1
#endif
#ifdef SUNOS
#define UNIX 1
#endif

/* Other platforms include Tripos, PC & ST */
/* (athough last compilation on PC/ST was a while back) */

/* Target processors... */

#ifdef M68K
#define BYTESEX_ODD /* else assume bytesex even (arm,tran,i860,8086,etc) */
#endif

a41 3
#ifdef MWC
#define locase( c ) (isupper( c ) ? _tolower( c ) : c)
#else
a42 2
#endif

a43 1

@


1.5
log
@NickC's changes for the 'C40 + some bug fixes
@
text
@d10 1
a10 1
/* RcsId: $Id: link.h,v 1.4 1991/10/08 13:01:36 nickc Exp $ */
d217 6
a222 6
#define PATHCARMLDR    0x15		/* aka armdt		*/
#define PATCHARMADD    0x16		/* aka armdp 		*/
#define PATCHARMBL     0x17		/* aka armjp 		*/
#define PATCHARMADDLO  0x18		/* aka armdplsb 	*/
#define PATCHARMADDHI  0x19		/* aka armdprest 	*/
#define PATCHARMADDMID 0x1a		/* aka armdpmid 	*/
d297 3
d323 3
@


1.4
log
@added new ref code
@
text
@d8 1
d10 1
a10 1
/* RcsId: $Id: link.h,v 1.2 1991/04/11 19:17:25 ben Exp $ */
d60 1
a60 1
extern VMRef VMNew(int size);
d62 1
a62 1
extern VMRef VMNew(/* int size */);
d66 1
a66 1
#define locase(c) (isupper(c)?_tolower(c):c)
d68 1
a68 1
#define locase(c) (isupper(c)?tolower(c):c)
d71 1
a71 1
#define eqs(a,b) (strncmp(a,b,31)==0)
d73 1
a73 1
#define use(x) (x)=(x)
d77 1
d80 7
a86 6
typedef union {
   VMRef   v;
   word   w;
/* complicated by the fact that orion cannot pass unions as arguments ! */
   long   fill;
} Value ;
d90 19
a108 15
typedef struct STEntry {
   VMRef   head;
   int   entries;
}STEntry;

typedef struct Module {
        VMRef  next;                  /* link in modlist         */
        VMRef  start;                 /* code start and end...   */
        VMRef  end;
    	VMRef  refs;		      /* list of references	 */
        WORD   id;                    /* module table slot       */
        WORD   linked;                /* true if added to link   */
	WORD   length;		      /* length of module 	 */
        STEntry   symtab[HASHSIZE];   /* module symbol table     */
} Module;
d121 2
a122 2
    UINT	global:1,	/* true if global, else false	*/
    		referenced:1;	/* true if referenced		*/
d138 12
a149 10
typedef struct Symbol {
   VMRef     next;
   VMRef     prev;
   word      type;
   word      global;
   word      referenced;
   VMRef     module;
   Value     value;
   char      name[Variable];
} Symbol;
d152 82
a233 66
typedef struct {
   byte      type;      /* code object type      */
   byte      size;      /* size in bytes      */
   byte      vtype;     /* value type         */
   word      loc;       /* offset in module      */
   Value     value;     /* value         */
} Code;

typedef struct {
   byte      type;      /* patch sub op         */
   word      word;      /* word value to patch      */
   Value     value;     /* value         */
} Patch;

#define t_code      0x01
#define t_bss       0x02
#define t_init      0x03

#define t_byte      0x09   /* ls 3 bits = size      */
#define t_short     0x0a
#define t_word      0x0c

#define t_funcref   0x0d
#define t_imagesize 0x0e
#define t_labelref  0x0f
#define t_dataref   0x10
#define t_datamod   0x11
#define t_modnum    0x12

#define t_patch     0x13
#define t_maxpatch  0x1f

#define t_patch_m68kadd		0x13
#define t_patch_m68kshift	0x14
#define t_patch_armdt	0x15	/* patch data xfer */
#define t_patch_armdp	0x16	/* patch data proc */
#define t_patch_armjp	0x17	/* patch jmp */
#define t_patch_armdplsb 0x18	/* patch data proc lsbyte */
#define t_patch_armdprest 0x19	/* patch data proc residue from above */
#define t_patch_armdpmid 0x1a	/* patch data proc lsb + 1 */

#define t_patch_swap	0x1e
#define t_patch_pgc1	0x1f

#define t_module   0x20
#define t_bytesex  0x21
 
#define t_global   0x22
#define t_label    0x23
#define t_data     0x24
#define t_common   0x25
#define t_func     0x26
#define t_ref      0x27	/* force reference to another library */

#define t_newseg   0x30
#define t_end      0x31
#define t_literal  0x32   /* t_code of <= 4 bytes */

#define s_unbound    0x40
#define s_codesymb   0x41 /* label */
#define s_funcsymb   0x42 /* smt codesymb */
#define s_datasymb   0x43
#define s_commsymb   0x44
#define s_datadone   0x45
#define s_funcdone   0x46
#define s_commdone   0x47
d235 1
a235 1
#define i_helios   'h'
d241 7
a247 7
#define db_gencode   0x008
#define db_genimage  0x010
#define db_files     0x400
#define db_mem       0x800
#define db_sym       0x1000
#define db_modules   0x2000
#define db_scancode  0x4000
d251 16
a266 16
extern word vmpagesize;
extern word codesize;
extern word heapsize;
extern word symsize;
extern VMRef curmod;
extern VMRef module0;
extern FILE *infd;
extern FILE *outfd;
extern word hexopt;
extern word smtopt;
extern VMRef firstmodule;
extern VMRef tailmodule;
extern word inlib;
extern word curloc;
extern word totalcodesize;
extern WORD codepos;
d269 1
a269 1
extern void *alloc(INT n);
d271 1
a271 1
extern VoidStar alloc();
d275 22
a296 22
extern void error(BYTE *, ...);
extern void report(BYTE  *,  ...);
extern void warn(BYTE *,  ...);
extern void initmem(void);
extern void initcode(void);
extern void initmodules(void);
extern void setmodules(void);
extern void initsym(void);
extern void readfile(void);
extern void genend(void);
extern void genimage(void);
extern void objed(FILE *, char *, long, long);
extern VMRef codeptr(void);
extern void _trace(char *, ...);
extern void cps(char *, char *);
extern VMRef lookup(char *);
extern VMRef insert(byte *, word);
extern void movesym(VMRef);
extern void refsymbol(VMRef, word);
extern VMRef newcode(WORD,WORD,WORD,WORD,WORD);
extern void scancode(void);
extern void genimage(void);
d298 22
a319 22
extern void error();
extern void report();
extern void warn();
extern void initmem();
extern void initcode();
extern void initmodules();
extern void setmodules();
extern void initsym();
extern void readfile();
extern void genend();
extern void genimage();
extern void objed();
extern VMRef codeptr();
extern void _trace();
extern void cps();
extern VMRef lookup();
extern VMRef insert();
extern void movesym();
extern void refsymbol();
extern VMRef newcode();
extern void scancode();
extern void genimage();
@


1.3
log
@*** empty log message ***
@
text
@d96 1
d103 28
d141 1
d195 1
@


1.2
log
@Added module length to Module struct to remedy scanned libs bug
@
text
@d9 1
a9 1
/* RcsId: $Id: link.h,v 1.1 90/10/22 15:47:29 paul Exp $ */
@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
/* RcsId: $Id$ */
d98 1
@
