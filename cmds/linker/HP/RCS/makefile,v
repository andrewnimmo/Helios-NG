head	1.7;
access;
symbols;
locks; strict;
comment	@# @;


1.7
date	93.01.15.15.38.59;	author paul;	state Exp;
branches;
next	1.6;

1.6
date	92.08.20.08.55.35;	author paul;	state Exp;
branches;
next	1.5;

1.5
date	92.07.13.08.59.38;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	92.06.16.09.07.42;	author paul;	state Exp;
branches;
next	1.3;

1.3
date	92.01.28.15.10.39;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	92.01.28.15.09.56;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	91.10.09.11.11.57;	author paul;	state Exp;
branches;
next	;


desc
@hpux specific makefile for linker and assoc. tools
@


1.7
log
@fixed for multiple build targets with no cyclic dependency
@
text
@#------------------------------------------------------------------------------
# Helios generic make system - NATIVE HOST MAKEFILE -
#-----------------------------------------------------------------------------
# HPUX Host specific make rules to make NATIVE HOST version of Generic Linker
#
# File: /HSRC/cmds/linker/HP/makefile
#
# This file contains ALL the definitions and rules that are
# required to make a NATIVE HOST version of this component.
# IT IS NOT COMPLIMENTARY TO THE GENERIC VERSION.
#
# This makefile is always executed within this host specific subdir.
# All host specific source files should be kept here.
# All intermediate, object and binary files should be made in here.
#
# SccsId: %W% %G%
# RcsId: $Id: makefile,v 1.6 1992/08/20 08:55:35 paul Exp $
#		(C) Copyright 1990 Perihelion Software
#
# WARNING: assumes you are using GNUmake.
#-----------------------------------------------------------------------------
# Manditory variables for a component:
# name of COMPONENT directory relative to $(HSRC)
COMPONENT = cmds/linker

# Manditory includes
include $(HSRC)/makeinc/$(HHOST).mak	# Default host system variables

# Manditory phoney targets
.PHONY: default clean
# "default" - should make this component in its proc subdir
# "install" - copy the new component to $(HHOSTBIN) directory
# "clean"   - remove all intermediate and executable files from host subdir

VPATH := $(HSRC)/$(COMPONENT)

#-----------------------------------------------------------------------------
# Note all final targets here

# Note all target CPUs that are built on this host (prefixed with 'build_')
POSSIBLECPUTARGETS = build_ARM build_C40

ifeq ($(HPROC),C40)
TARGETS = build_C40 ldc40 objdumpc40 imdump disasc40
else
 ifeq ($(HPROC),ARM)
 TARGETS = build_ARM ldarm objdumparm imdump disasarm
 endif
endif

default : $(TARGETS)

install	: $(TARGETS)
	$(CP) $(TARGETS) $(HHOSTBIN)
	$(TOUCH) install

clean	:
	-$(RM)	$(OBJECTS) $(TARGETS) mkout core ../mkout install \
	$(POSSIBLECPUTARGETS)

# If we build for a new processor target clean out the old target proc. objects
build_$(HPROC):
	$(MAKE) clean
	touch	build_$(HPROC)

# Note all sources
SOURCES		= $(SOURCES.c) $(HEADERS.c) $(SOURCES.odd)

# Object files
L.OBJECTS	= sym.o objed.o module.o mem.o scancode.o link.o readfile.o \
		vm.o genimage.o queue.o stubs.o

OBJECTS		= $(L.OBJECTS) c40disas.o c40objdis.o imdump.o objdump.o stubs.o

# C source files
SOURCES.c	= sym.c objed.c module.c mem.c scancode.c link.c readfile.c \
		vm.c genimage.c queue.c hash.c stubs.c

# C header files
HEADERS.c	= vm.h link.h c40ops.h c40target.h

# Any other source files
SOURCES.odd	= makefile


#-----------------------------------------------------------------------------
# Native Host targets and their dependencies:

ifeq ($(HPROC),C40)
HOSTCFLAGS	:= $(HOSTCFLAGS) -D__C40 -D__HELIOSC40 -I/usr/include -I$(INCLUDE)
else
  ifeq ($(HPROC),ARM)
  HOSTCFLAGS	:= $(HOSTCFLAGS) -D__ARM -D__HELIOSARM -I/usr/include -I$(INCLUDE)
  endif
endif

$(L.OBJECTS) : link.h 
vm.o : vm.h
link.o : hash.c

ldc40 : $(L.OBJECTS)
	$(HOSTCC) $(HOSTCFLAGS) -o$@@ $^

ldarm: $(L.OBJECTS)
	$(HOSTCC) $(HOSTCFLAGS) -o$@@ $^

# C40 version (includes disassembler)
objdumpc40 : objdump.c c40objdis.c
	$(HOSTCC) $(HOSTCFLAGS) -o$@@ $^

# ARM version (includes disassembler)
objdumparm : objdump.c ARMshape.o
	$(HOSTCC) $(HOSTCFLAGS) -c $<
	$(HOSTCC) $(HOSTCFLAGS) -o$@@ ARMshape.o objdump.o 

imdump : imdump.c
	$(HOSTCC) $(HOSTCFLAGS) -o$@@ $<

disasc40 : c40disas.c
	$(HOSTCC) $(HOSTCFLAGS) -o$@@ $<

disasarm : armdisas.c ARMshape.o
	$(HOSTCC) $(HOSTCFLAGS) -c $<
	$(HOSTCC) $(HOSTCFLAGS) -o$@@ armdisas.o ARMshape.o

#-----------------------------------------------------------------------------
@


1.6
log
@fixed to cleanly compile for different target processors
@
text
@d17 1
a17 1
# RcsId: $Id: makefile,v 1.5 1992/07/13 08:59:38 nickc Exp $
d40 3
d58 2
a59 1
	-$(RM)	$(OBJECTS) $(TARGETS) mkout core ../mkout install
d62 1
a62 1
build_$(HPROC): build_C40 build_ARM	# add any new processor names here
@


1.5
log
@added source file stubs.c which supports new style stub generation
@
text
@d17 1
a17 1
# RcsId: $Id: makefile,v 1.4 1992/06/16 09:07:42 paul Exp nickc $
d41 1
a41 1
TARGETS = ldc40 objdumpc40 imdump disasc40
d44 1
a44 1
 TARGETS = ldarm objdumparm imdump disasarm
d57 5
d98 3
@


1.4
log
@fixed for std __PROC names
@
text
@d17 1
a17 1
# RcsId: $Id: makefile,v 1.3 1992/01/28 15:10:39 nickc Exp $
d62 1
a62 1
		vm.o genimage.o queue.o
d64 1
a64 1
OBJECTS		= $(L.OBJECTS) c40disas.o c40objdis.o imdump.o objdump.o
d68 1
a68 1
		vm.c genimage.c queue.c hash.c
@


1.3
log
@removed definition of __C40 on command line as this define declares the HOST of the compiled program
@
text
@d17 1
a17 1
# RcsId: $Id: makefile,v 1.2 1992/01/28 15:09:56 paul Exp nickc $
d81 1
a81 1
HOSTCFLAGS	:= $(HOSTCFLAGS) -D__HELIOSC40 -I/usr/include -I$(INCLUDE)
@


1.2
log
@changed name of target commands
@
text
@d17 1
a17 1
# RcsId: $Id: makefile,v 1.1 1991/10/09 11:11:57 paul Exp $
d81 1
a81 1
HOSTCFLAGS	:= $(HOSTCFLAGS) -D__C40 -D__HELIOSC40 -I/usr/include -I$(INCLUDE)
@


1.1
log
@Initial revision
@
text
@d17 1
a17 1
# RcsId: $Id: makefile,v 1.4 1991/03/05 19:09:00 paul Exp $
d40 7
a46 1
TARGETS = c40ld objdump imdump c40disas
d80 7
a86 3
HOSTCFLAGS	:= $(HOSTCFLAGS) -D__C40 -D__HELIOSC40 \
		-D_INCLUDE_POSIX_SOURCE -DUNIX -DBYTESEX_ODD \
		-I/usr/include -I/helios/include
d92 1
a92 1
c40ld : $(L.OBJECTS)
d96 1
a96 1
objdump : objdump.c c40objdis.c
d99 5
d107 1
a107 1
c40disas : c40disas.c
d110 3
@
