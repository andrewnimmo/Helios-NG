head	1.2;
access;
symbols
	Helios_1_3_1:1.1
	Helios_C40_1_3_Official_Release:1.1
	Alenia_release:1.1
	Helios1_3:1.1
	C40_Field_Test_2:1.1
	C40_Field_Test_R1:1.1
	Helios13_beta:1.1
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1;
locks; strict;
comment	@ * @;


1.2
date	94.03.14.17.02.25;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	91.03.08.17.24.28;	author paul;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fixed compile time warnings
@
text
@/*
 * A safer saner malloc, for careless programmers
 * $Revision: 1.1 $
 */

#include <stdio.h>
#include <curses.h>
#include <stdlib.h>

#ifdef SYSV3
extern void free();
extern void exit();
#endif

extern void deraw( void );

void
fatal(str)
char *str;
{
    deraw();
    (void) fprintf(stderr,"%s\n", str);
    exit(1);
}

char *
xmalloc(n)
unsigned n;
{
register char *ptr;

if ((ptr = (char *)malloc(n + sizeof(double))) == NULL)
    fatal("xmalloc: no memory");
*((int *) ptr) = 12345;		/* magic number */
return(ptr + sizeof(double));
}

void
xfree(p)
char *p;
{
if (p == NULL)
    fatal("xfree: NULL");
p -= sizeof(double);
if (*((int *) p) != 12345)
    fatal("xfree: storage not malloc'ed");
free(p);
}

@


1.1
log
@Initial revision
@
text
@d3 1
a3 1
 * $Revision: 6.1 $
d8 1
a9 2
extern char *malloc();

d15 11
d32 1
a32 1
if ((ptr = malloc(n + sizeof(double))) == NULL)
d38 1
a49 7
fatal(str)
char *str;
{
    deraw();
    (void) fprintf(stderr,"%s\n", str);
    exit(1);
}
@
