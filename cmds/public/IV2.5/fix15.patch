Message interviews:24 -  Read
From:    John Vlissides <vlis@interviews.stanford.edu>
To:      InterViews Mailing List <interviews@interviews.stanford.edu>
Cc:      John Vlissides <vlis@lurch.stanford.edu>
Subject: libgraphic memory leak fix

In two places in base.c, a transformer is created and passed to a
graphic via SetTransformer.  Unfortunately, the graphic that creates
the transformer (i.e., *this) isn't the graphic that uses it, and the
creator doesn't decrement the transformer's reference count
accordingly.  Thus the transformer becomes garbage once the graphic
that uses it is deleted.  The solution is to make the creator delete
the transformer following the SetTransformer call.

This patch is available for ftp as fix15
---
Apply with ``cd iv; patch -p -N < diffs'' to patch files:

        src/libgraphic/base.c

*** /tmp/da9472	                Fri Jul 14 09:28:06 1989
--- src/libgraphic/base.c	Fri Jul 14 08:42:42 1989
***************
*** 36,42 ****
      t = p->GetTransformer();
      if (t == nil) {
  	if (gs->t != nil) {
! 	    p->SetTransformer(new Transformer(gs->t));
  	}
      } else {
  	if (gs->t == nil) {
--- 36,44 ----
      t = p->GetTransformer();
      if (t == nil) {
  	if (gs->t != nil) {
! 	    Transformer* newt = new Transformer(gs->t);
! 	    p->SetTransformer(newt);
! 	    delete newt;
  	}
      } else {
  	if (gs->t == nil) {
***************
*** 314,319 ****
--- 316,322 ----
      if (td == nil) {
          td = new Transformer;
          dest->SetTransformer(td);
+ 	delete td;
      }

      concatGS(a, b, dest);
