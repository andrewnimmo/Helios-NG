Message interviews:22 -  Read
From:    John Vlissides <S=vlis;OU=stanford;OU=interviews;ORG=edu;PRMD=switch;A
         DMD=arcom;C=ch>
To:      InterViews Mailing List <S=interviews;OU=stanford;OU=interviews;ORG=ed
         u;PRMD=switch;ADMD=arcom;C=ch>
Cc:      John Vlissides <S=vlis;OU=stanford;OU=lurch;ORG=edu;PRMD=switch;ADMD=a
         rcom;C=ch>
Subject: MarginFrame

This patch introduces MarginFrame, a new Frame subclass that surrounds
its component with horizontal and vertical glue.  See the Frame man
page for details.

This patch is available for ftp as fix17.
---
Apply with ``cd iv; patch -p -N < diffs'' to patch files:

        src/InterViews/frame.h
        src/libInterViews/frame.c
        src/man/libInterViews/Frame.n

*** /tmp/da8373	Tue Aug  1 07:42:30 1989
--- src/InterViews/frame.h	Tue Aug  1 07:33:26 1989
***************
*** 76,79 ****
--- 76,100 ----
      void Init(Interactor*, int h, int v);
  };

+ class MarginFrame : public Frame {
+ public:
+     MarginFrame(Interactor* = nil, int margin = 0);
+     MarginFrame(const char*, Interactor* = nil, int margin = 0);
+     MarginFrame(Interactor*, int margin, int shrink, int stretch);
+     MarginFrame(Interactor*, int hmargin, int vmargin);
+     MarginFrame(Interactor*,
+         int hmargin, int hshrink, int hstretch,
+         int vmargin, int vshrink, int vstretch
+     );
+ protected:
+     virtual void Reconfig();
+     virtual void Resize();
+     virtual void Redraw(Coord, Coord, Coord, Coord);
+ protected:
+     int hmargin, hshrink, hstretch;
+     int vmargin, vshrink, vstretch;
+ private:
+     void Init(int, int, int, int, int, int);
+ };
+
  #endif
*** /tmp/da8375	Tue Aug  1 07:42:34 1989
--- src/libInterViews/frame.c	Tue Aug  1 07:41:19 1989
***************
*** 142,147 ****
--- 142,152 ----
      banner->Draw();
  }

+ /*
+  * A border frame draws an outline using a solid pattern when
+  * it contains the input focus and using a gray pattern otherwise.
+  */
+
  BorderFrame::BorderFrame (Interactor* i, int w) : (i, w) {
      Init();
  }
***************
*** 268,270 ****
--- 273,351 ----
          output->FillRect(canvas, xmax - h + 1, ymax - v + 1, xmax, ymax);
      }
  }
+
+ /*
+  * A margin frame surrounds its component with horizontal and vertical
+  * glue.
+  */
+
+ MarginFrame::MarginFrame (Interactor* i, int margin) : (i, 0) {
+     Init(margin, 0, 0, margin, 0, 0);
+ }
+
+ MarginFrame::MarginFrame (
+     const char* name, Interactor* i, int margin
+ ) : (name, i, 0) {
+     Init(margin, 0, 0, margin, 0, 0);
+ }
+
+ MarginFrame::MarginFrame (
+     Interactor* i, int margin, int shrink, int stretch
+ ) : (i, 0) {
+     Init(margin, shrink, stretch, margin, shrink, stretch);
+ }
+
+ MarginFrame::MarginFrame (Interactor* i, int hmargin, int vmargin) : (i, 0) {
+     Init(hmargin, 0, 0, vmargin, 0, 0);
+ }
+
+ MarginFrame::MarginFrame (Interactor* i,
+     int hmargin, int hshrink, int hstretch,
+     int vmargin, int vshrink, int vstretch
+ ) : (i, 0) {
+     Init(hmargin, hshrink, hstretch, vmargin, vshrink, vstretch);
+ }
+
+ void MarginFrame::Init (int h, int hshr, int hstr, int v, int vshr, int vstr)
 {
+     SetClassName("MarginFrame");
+     hmargin = h * 2;
+     hshrink = hshr * 2;
+     hstretch = hstr * 2;
+     vmargin = v * 2;
+     vshrink = vshr * 2;
+     vstretch = vstr * 2;
+ }
+
+ void MarginFrame::Reconfig () {
+     Frame::Reconfig();
+     shape->width += hmargin;
+     shape->height += vmargin;
+     shape->hshrink += hshrink;
+     shape->hstretch += hstretch;
+     shape->vshrink += vshrink;
+     shape->vstretch += vstretch;
+ }
+
+ void MarginFrame::Resize () {
+     canvas->SetBackground(output->GetBgColor());
+
+     Coord hextra = (xmax+1) - shape->width;
+     Coord h = hmargin;
+     if (hextra > 0 && shape->hstretch != 0) {
+         h += int(float(hstretch) / float(shape->hstretch) * float(hextra));
+     } else if (hextra < 0 && shape->hshrink != 0) {
+         h += int(float(hshrink) / float(shape->hshrink) * float(hextra));
+     }
+
+     Coord vextra = (ymax+1) - shape->height;
+     Coord v = vmargin;
+     if (vextra > 0 && shape->vstretch != 0) {
+         v += int(float(vstretch) / float(shape->vstretch) * float(vextra));
+     } else if (vextra < 0 && shape->vshrink != 0) {
+         v += int(float(vshrink) / float(shape->vshrink) * float(vextra));
+     }
+
+     Place(component, h/2, v/2, xmax-h/2, ymax-v/2);
+ }
+
+ void MarginFrame::Redraw (Coord, Coord, Coord, Coord) { }
*** /tmp/da8377	Tue Aug  1 07:43:16 1989
--- src/man/libInterViews/Frame.n	Tue Aug  1 07:41:34 1989
***************
*** 1,6 ****
  .TH Frame 3I "15 June 1987" "InterViews" "InterViews Reference Manual"
  .SH NAME
! Frame, TitleFrame, BorderFrame, ShadowFrame \- surrounding interactor
  .SH SYNOPSIS
  .B #include <InterViews/frame.h>
  .SH DESCRIPTION
--- 1,7 ----
  .TH Frame 3I "15 June 1987" "InterViews" "InterViews Reference Manual"
  .SH NAME
! Frame, TitleFrame, BorderFrame, ShadowFrame, MarginFrame \-
! surrounding interactor
  .SH SYNOPSIS
  .B #include <InterViews/frame.h>
  .SH DESCRIPTION
***************
*** 11,16 ****
--- 12,19 ----
  it contains the input focus and
  using a gray pattern otherwise.
  A shadow frame draws an outline with a drop shadow.
+ A margin frame surrounds its component with horizontal and vertical
+ glue.
  .SH PUBLIC OPERATIONS
  .TP
  .B "Frame(Interactor*, int width = 1)"
***************
*** 31,36 ****
--- 34,57 ----
  parameters specify shadows falling to the right and below the interactor,
  respectively; negative values specify shadows falling to the left and above.
  .TP
+ .B "MarginFrame(Interactor* = nil, int margin = 0)"
+ .ns
+ .TP
+ .B "MarginFrame(Interactor*, int margin, int shrink, int stretch)"
+ .ns
+ .TP
+ .B "MarginFrame(Interactor*, int hmargin, int vmargin)"
+ .ns
+ .TP
+ .B "MarginFrame(Interactor*, int hm, int hshr, int hstr, int vm, int vshr, in
t vstr)"
+ Construct a margin frame.  The first constructor puts rigid,
+ fixed-sized glue around the component, while the second surrounds it
+ with fixed-sized glue of the given shrinkability and stretchability.
+ Independent horizontal and vertical margins are set with the third
+ constructor.  The last constructor allows full specification of the
+ margin frame's horizontal and vertical margins, shrinkabilities, and
+ stretchabilities.
+ .TP
  .B "virtual void HandleInput(Event&)"
  A frame listens for OnEvent and OffEvent to detect when it has input focus.
  When an OnEvent is received, Frame::Handle calls Highlight(true);
***************
*** 47,50 ****
  of each line in the outline.  The integers specify the width of the
  left, bottom, right, and top lines, respectively.
  .SH SEE ALSO
! Banner(3I), Event(3I), Scene(3I)
--- 68,71 ----
  of each line in the outline.  The integers specify the width of the
  left, bottom, right, and top lines, respectively.
  .SH SEE ALSO
! Banner(3I), Event(3I), Glue(3I), Scene(3I)
