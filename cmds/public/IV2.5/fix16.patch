Message interviews:23 -  Read
From:    John Vlissides <vlis@interviews.stanford.edu>
To:      InterViews Mailing List <interviews@interviews.stanford.edu>
Cc:      John Vlissides <vlis@lurch.stanford.edu>
Subject: patch

This patch does four things:

1.  It adds a default "tolerance" parameter to the
    Transformer::{Translated,Scaled,Stretched,Rotated,Rotated90}
    function that specifies the function's sensitivity to small
    transformations.  The smaller the tolerance, the closer the
    transformation must be to the identity transformation for the
    function to return false.

2.  Inlines two Transformer::Transform functions that are called
    frequently.

3.  Adds a performance enhancement to libgraphic/base.c.

4.  Inlines one of Ref's constructors and the Ref::ref() operation,
    both of which are called frequently.

This patch is available for ftp as fix16
---
Apply with ``cd iv; patch -p -N < diffs'' to patch files:

        src/InterViews/transformer.h
        src/libInterViews/transformer.c
        src/libgraphic/base.c
        src/InterViews/Graphic/ref.h
        src/libgraphic/ref.c

*** /tmp/da1090	Thu Jul 20 15:26:40 1989
--- src/InterViews/transformer.h	Thu Jul 20 15:06:34 1989
***************
*** 28,38 ****
      void Translate(float dx, float dy);
      void Scale(float sx, float sy);
      void Rotate(float angle);
!     boolean Translated () { return mat20 != 0 || mat21 != 0; }
!     boolean Scaled () { return mat00 != 1 || mat11 != 1; }
!     boolean Stretched () { return mat00 != mat11; }
!     boolean Rotated () { return mat01 != 0 || mat10 != 0; }
!     boolean Rotated90 () { return Rotated() && mat00 == 0 && mat11 == 0; }

      void Transform(Coord& x, Coord& y);
      void Transform(Coord x, Coord y, Coord& tx, Coord& ty);
--- 28,38 ----
      void Translate(float dx, float dy);
      void Scale(float sx, float sy);
      void Rotate(float angle);
!     boolean Translated (float = 1e-6);
!     boolean Scaled (float = 1e-6);
!     boolean Stretched (float = 1e-6);
!     boolean Rotated (float = 1e-6);
!     boolean Rotated90 (float = 1e-6);

      void Transform(Coord& x, Coord& y);
      void Transform(Coord x, Coord y, Coord& tx, Coord& ty);
***************
*** 52,57 ****
--- 52,92 ----

  inline float Transformer::Det (Transformer *t) {
      return t->mat00*t->mat11 - t->mat01*t->mat10;
+ }
+
+ inline boolean Transformer::Translated (float tol) {
+     return -tol > mat20 || mat20 > tol || -tol > mat21 || mat21 > tol;
+ }
+
+ inline boolean Transformer::Scaled (float tol) {
+     float l = 1 - tol, u = 1 + tol;
+
+     return l > mat00 || mat00 > u || l > mat11 || mat11 > u;
+ }
+
+ inline boolean Transformer::Stretched (float tol) {
+     float diff = mat00 - mat11;
+
+     return -tol > diff || diff > tol;
+ }
+
+ inline boolean Transformer::Rotated (float tol) {
+     return -tol > mat01 || mat01 > tol || -tol > mat10 || mat10 > tol;
+ }
+
+ inline boolean Transformer::Rotated90 (float tol) {
+     return Rotated(tol) && -tol <= mat00 && mat00 <= tol &&
+         -tol <= mat11 && mat11 <= tol;
+ }
+
+ inline void Transformer::Transform (Coord x, Coord y, Coord& tx, Coord& ty) {
+     tx = round(x*mat00 + y*mat10 + mat20);
+     ty = round(x*mat01 + y*mat11 + mat21);
+ }
+
+ inline void Transformer::Transform (float x, float y, float& tx, float& ty) {
+     tx = x*mat00 + y*mat10 + mat20;
+     ty = x*mat01 + y*mat11 + mat21;
  }

  #endif
*** /tmp/da1092	Thu Jul 20 15:27:08 1989
--- src/libInterViews/transformer.c	Thu Jul 20 15:07:04 1989
***************
*** 125,140 ****
      y = round(tx*mat01 + y*mat11 + mat21);
  }

- void Transformer::Transform (Coord x, Coord y, Coord& tx, Coord& ty) {
-     tx = round(x*mat00 + y*mat10 + mat20);
-     ty = round(x*mat01 + y*mat11 + mat21);
- }
-
- void Transformer::Transform (float x, float y, float& tx, float& ty) {
-     tx = x*mat00 + y*mat10 + mat20;
-     ty = x*mat01 + y*mat11 + mat21;
- }
-
  void Transformer::InvTransform (Coord& tx, Coord& ty) {
      float d = Det(this);
      float a = (float(tx) - mat20) / d;
--- 125,130 ----
*** /tmp/da1103	Thu Jul 20 15:28:25 1989
--- src/libgraphic/base.c	Thu Jul 20 15:10:21 1989
***************
*** 331,337 ****
  void Graphic::uncacheChildren () { }

  void Graphic::uncacheParents () {
!     for (Graphic* p = Parent(); p != nil; p = p->Parent()) {
          p->uncacheExtent();
      }
  }
--- 331,339 ----
  void Graphic::uncacheChildren () { }

  void Graphic::uncacheParents () {
!     Graphic* p;
!
!     for (p = Parent(); p != nil && p->extentCached(); p = p->Parent()) {
          p->uncacheExtent();
      }
  }
*** /tmp/da1109	Thu Jul 20 15:28:59 1989
--- src/InterViews/Graphic/ref.h	Thu Jul 20 15:09:11 1989
***************
*** 61,66 ****
--- 61,70 ----
   * inlines
   */

+ inline Ref::Ref (Persistent* obj) {
+     refto = (obj == nil) ? (Persistent*) INVALIDUID : obj;
+ }
+
  inline UID Ref::uid () { return _uid; }
  inline void Ref::uid (UID u) { _uid = u; }

***************
*** 71,76 ****
--- 75,91 ----
  inline boolean Ref::isCluster () { return (uid() & CLUSTERBITMASK) != 0; }
  inline void Ref::setClusterBit () { _uid |= CLUSTERBITMASK; }
  inline void Ref::resetClusterBit () { _uid &= ~CLUSTERBITMASK; }
+
+ inline Persistent* Ref::ref () {
+     if (uid() == INVALIDUID) {
+ 	return (Persistent*) nil;
+     } else if (refto != nil && !inMemory() && !TheManager->Find( this ) ) {
+ 	Panic( "unable to find object ", uid() );
+ 	return (Persistent*) nil;	// so the compiler won't squawk
+     } else {
+ 	return refto;
+     }
+ }

  inline Persistent* Ref::operator() () { return ref(); }
  inline boolean Ref::Valid () { return uid() != INVALIDUID && refto != nil; }
*** /tmp/da1112	Thu Jul 20 15:29:36 1989
--- src/libgraphic/ref.c	Thu Jul 20 15:09:21 1989
***************
*** 8,17 ****
  Ref::Ref () { uid(INVALIDUID); }
  Ref::Ref (UID u) { uid(u); }

- Ref::Ref (Persistent* obj) {
-     refto = (obj == nil) ? (Persistent*) INVALIDUID : obj;
- }
-
  UID Ref::getUID () {
      return inMemory() &&
  	(refto != nil) ? refto->getUID() : (uid() & ~CLUSTERBITMASK);
--- 8,13 ----
***************
*** 27,43 ****
      fprintf(stderr, msg, n);
      fprintf(stderr, "\n");
      exit(2);
- }
-
- Persistent* Ref::ref () {
-     if (uid() == INVALIDUID) {
- 	return (Persistent*) nil;
-     } else if (refto != nil && !inMemory() && !TheManager->Find( this ) ) {
- 	Panic( "unable to find object ", uid() );
- 	return (Persistent*) nil;	// so the compiler won't squawk
-     } else {
- 	return refto;
-     }
  }

  Persistent* Ref::refObjects () {
--- 23,28 ----
