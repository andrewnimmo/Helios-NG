head	1.7;
access;
symbols
	Helios_1_3_1:1.7
	Helios_C40_1_3_Official_Release:1.6
	Alenia_release:1.3
	Helios1_3:1.3
	C40_Field_Test_2:1.3
	Helios13_beta:1.2
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1
	Helios1_2:1.1;
locks; strict;
comment	@ * @;


1.7
date	93.08.02.12.25.56;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	93.04.14.17.19.40;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	93.04.14.16.46.19;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	93.02.09.15.52.05;	author bart;	state Exp;
branches;
next	1.3;

1.3
date	92.08.03.16.40.18;	author bart;	state Exp;
branches;
next	1.2;

1.2
date	92.06.11.11.35.08;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	90.08.28.10.40.11;	author james;	state Exp;
branches;
next	;


desc
@@


1.7
log
@fixed RS6000 problem
@
text
@/**
*
* Title:  CDL Compiler - Task Force Execution.
*
* Author: Andy England
*
* Date:   June 1988
*
*         (c) Copyright 1988, Perihelion Software Ltd.
*
*         All Rights Reserved.
*
**/
/* static char *rcsid = "$Header: /hsrc/cmds/cdl/RCS/exec.c,v 1.6 1993/04/14 17:19:40 nickc Exp nickc $"; */

#include "cdl.h"

#include <helios.h>
#include <syslib.h>
#include <servlib.h>
#include <nonansi.h>
#include <posix.h>
#include <signal.h>
#include <sys/wait.h>
#include <errno.h>
#include <unistd.h>


static int pid = -1;

void signal_handler(int x)
{
  if (pid != -1)
   kill(pid, x);
}

int waitforcmd(void)
{
  int wpid, status;
  until ((wpid = wait(&status)) == pid OR ((wpid == -1) && (errno != EINTR)));
  return(status);
}

int exectaskforce()
{
  FILE *file;
  static int tfcount = 1;
  char tfname[NUMSTR_MAX + 14];
  struct sigaction old, new;
  int sigs_installed = -1;
  int exit_status = 0;
  
  new.sa_handler = &signal_handler;
#ifdef RS6000
  SIGINITSET( new.sa_mask );  
#else
  new.sa_mask    = 0;
#endif
  new.sa_flags   = 0;
  sigs_installed = sigaction(SIGINT, &new, &old);
  
  sprintf(tfname, "/fifo/cdl.tf.%d", tfcount++);
  if ((file = fopen(tfname, "wb")) == NULL) fatal("Unable to open fifo");
  putcode(file);
  fclose(file);
  if ((pid = vfork()) == 0)
  {
    char *argv[2];

    argv[0] = tfname;
    argv[1] = NULL;
#ifdef __HELIOS
    _posixflags(PE_BLOCK, PE_RemExecute);
#endif
    execv(tfname, argv);
    perror(tfname);
    _exit(errno);
  }
  if (pid == -1)
  { if (sigs_installed != -1) sigaction(SIGINT, &old, Null(struct sigaction));
    perror(tfname);
    return(EXIT_FAILURE);
  }
  
  exit_status = waitforcmd();
  
  if (sigs_installed != -1)
   sigaction(SIGINT, &old, Null(struct sigaction));

  return(exit_status);
}
@


1.6
log
@fixed some Helios dependencies
@
text
@d14 1
a14 1
/* static char *rcsid = "$Header: /hsrc/cmds/cdl/RCS/exec.c,v 1.5 1993/04/14 16:46:19 nickc Exp nickc $"; */
d54 3
d58 1
@


1.5
log
@fixed for SUn4 compilation
@
text
@d14 1
a14 1
/* static char *rcsid = "$Header: /hsrc/cmds/cdl/RCS/exec.c,v 1.4 1993/02/09 15:52:05 bart Exp nickc $"; */
a27 5
#ifndef PE_BLOCK
#define		PE_BLOCK	1
#define		PE_RemExecute	1
#endif

d68 1
d70 1
@


1.4
log
@The code that waits for task termination is no longer fooled by incoming
signals aborting the wait() call.
@
text
@d14 1
a14 1
/* static char *rcsid = "$Header: /users/bart/hsrc/cmds/cdl/RCS/exec.c,v 1.3 1992/08/03 16:40:18 bart Exp $"; */
d26 7
@


1.3
log
@Various patches, mostly to do with program termination codes. Also, a colon
is no longer a meta character.
@
text
@d14 1
a14 1
/* static char *rcsid = "$Header: /hsrc/cmds/cdl/RCS/exec.c,v 1.2 1992/06/11 11:35:08 nickc Exp $"; */
d25 1
d38 1
a38 1
  until ((wpid = wait(&status)) == pid OR wpid == -1);
@


1.2
log
@fixed compiler detected errors and warnings
@
text
@d14 1
a14 1
/* static char *rcsid = "$Header: /m/giga/HeliosRoot/Helios/cmds/cdl/RCS/exec.c,v 1.1 1990/08/28 10:40:11 james Exp nickc $"; */
d34 1
a34 1
void waitforcmd(void)
a36 1

d38 1
d41 1
a41 1
void exectaskforce()
d48 1
d73 1
a73 1
    return;
d76 1
a76 1
  waitforcmd();
d80 2
@


1.1
log
@Initial revision
@
text
@d14 1
a14 1
static char *rcsid = "$Header$";
d24 1
d28 1
a28 1
void *signal_handler(int x)
@
