head	1.2;
access;
symbols
	Helios_1_3_1:1.2
	Helios_C40_1_3_Official_Release:1.2
	Alenia_release:1.2
	Helios1_3:1.2
	C40_Field_Test_2:1.2
	Helios13_beta:1.2
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1
	Helios1_2:1.1;
locks; strict;
comment	@ * @;


1.2
date	92.06.11.11.41.24;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	90.08.28.10.44.08;	author james;	state Exp;
branches;
next	;


desc
@@


1.2
log
@fixed compiler warnings and errors
@
text
@/**
*
* Title:  CDL Compiler - Validatate Fifo Usage.
*
* Author: Andy England
*
* Date:   January 1989
*
*         (c) Copyright 1989 - 1992, Perihelion Software Ltd.
*
*         All Rights Reserved.
*
**/
/* static char *rcsid = "$Header: /hsrc/cmds/cdl/RCS/valid.c,v 1.1 1990/08/28 10:44:08 james Exp nickc $"; */

#include "cdl.h"
#include "cdlobj.h"

word countobjects(COMPONENT *component)
{
  channelcount += lenargv((ARGV)component->chanv->channels);
  attribcount += component->attribcount;
  componentcount++;

  return 0;
}

word checkfifo(FIFO *fifo)
{
  if ((fifo->flags & SF_EXTERNAL) == SF_EXTERNAL) return 0;
  if (fifo->usage[READ] == 1 AND fifo->usage[WRITE] == 1) return 0;
  if (fifo->usage[READ] == 0)
    error("stream '%s' has no reader", fifo->name);
  if (fifo->usage[READ] > 1)
    error("stream '%s' has more than one reader", fifo->name);
  if (fifo->usage[WRITE] == 0)
    error("stream '%s' has no writer", fifo->name);
  if (fifo->usage[WRITE] > 1)
    error("stream '%s' has more than one writer", fifo->name);

  return 0;
}

CMD *buildtaskforce(CMD *cmd)
{
  CMD *tf = expandcmd(cmd);

  freecmd(cmd);
  allocchannels(tf);
  componentcount = channelcount = attribcount = 0;
  (void) WalkList(&componentlist, countobjects);
  WalkList(&fifolist, checkfifo);
  return tf;
}


@


1.1
log
@Initial revision
@
text
@d9 1
a9 1
*         (c) Copyright 1989, Perihelion Software Ltd.
d14 1
a14 1
static char *rcsid = "$Header$";
d19 1
a19 13
CMD *buildtaskforce(CMD *cmd)
{
  CMD *tf = expandcmd(cmd);

  freecmd(cmd);
  allocchannels(tf);
  componentcount = channelcount = attribcount = 0;
  WalkList(&componentlist, countobjects);
  WalkList(&fifolist, checkfifo);
  return tf;
}

void countobjects(COMPONENT *component)
d21 1
a21 1
  channelcount += lenargv(component->chanv->channels);
d24 2
d28 1
a28 1
void checkfifo(FIFO *fifo)
d30 2
a31 2
  if ((fifo->flags & SF_EXTERNAL) == SF_EXTERNAL) return;
  if (fifo->usage[READ] == 1 AND fifo->usage[WRITE] == 1) return;
d40 2
d43 14
@
