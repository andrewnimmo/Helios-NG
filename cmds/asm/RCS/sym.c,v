head	1.9;
access;
symbols
	Helios1_3:1.8
	Helios13_beta:1.8
	Helios1_2_2:1.8
	Helios1_2_2Beta:1.8
	Helios1_2_1:1.6;
locks; strict;
comment	@ * @;


1.9
date	94.08.09.16.43.25;	author al;	state Exp;
branches;
next	1.8;

1.8
date	91.06.07.16.03.41;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	91.06.07.07.30.14;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	91.03.28.15.29.49;	author nick;	state Exp;
branches;
next	1.5;

1.5
date	91.03.28.15.15.05;	author nick;	state Exp;
branches;
next	1.4;

1.4
date	90.09.28.13.42.40;	author nick;	state Exp;
branches;
next	1.3;

1.3
date	90.09.28.13.22.57;	author nick;	state Exp;
branches;
next	1.2;

1.2
date	90.09.11.18.36.55;	author jon;	state Exp;
branches;
next	1.1;

1.1
date	90.08.24.16.39.16;	author james;	state Exp;
branches;
next	;


desc
@@


1.9
log
@Ported to MS-DOS under WATCOM
@
text
@/****************************************************************/
/* File: sym.c                                                  */
/*                                                              */
/* Routines to manipulate the symbol table                      */
/*                                                              */
/* Author: NHG 17-Feb-87                                        */
/****************************************************************/
/* $Id: sym.c,v 1.8 1991/06/07 16:03:41 nickc Exp $ */

#include "asm.h"
#include <ctype.h>

#define static

#define trace if(traceflags&db_sym) _trace

PRIVATE VMRef symheap;
PRIVATE VMRef globheap;

PUBLIC STEntry Symtab[ GLOBAL_HASHSIZE ];
PUBLIC WORD symsize;

#ifdef __DOS386
UWORD hash(char *s);
#else /* !__DOS386 */
UWORD hash(ellipsis);
#endif /* __DOS386 */

/********************************************************/
/* initsym                                              */
/*                                                      */
/* Initialize the symbol table.                         */
/*                                                      */
/********************************************************/

PUBLIC void initsym()
{
	int i;
	
	for (i = 0; i < GLOBAL_HASHSIZE ; i++)
	{
		Symtab[i].head = NullVMRef;
		Symtab[i].entries = 0;
	}
        
	symheap = VMPage();
	globheap = VMPage();
	symsize = 0;
}

/********************************************************/
/* lookup                                               */
/*                                                      */
/* Lookup a symbol in the hash tables.                  */
/* it checks the local, module symbol table first,      */
/* followed by the global one.                          */
/* Returns the symbol if present, otherwise NULL.       */
/*                                                      */
/********************************************************/

PUBLIC VMRef
lookup( name )
  BYTE *	name;
{
  UWORD		hs = hash( name );
  UWORD 	h  = (hs % LOCAL_HASHSIZE);
  VMRef 	sym;
  int 		loops = 0;
  int 		entries = 0;
  asm_Module *	m;
  

/*  trace( "looking for %s", name ); */
  
  if ( !VMSame( curmod, module0 ) )
    {
      m       = VMAddr( asm_Module, curmod );
      
      sym     = m->symtab[ h ].head;
      entries = m->symtab[ h ].entries;
      
      while ( !NullRef( sym ) )
	{
	  Symbol *	s;
	  
	  if ( !VMcheck( sym ) ) 
	    error( "badvm l %x %x %s %d", sym, curmod, name, h );
	  
	  s = VMAddr( Symbol, sym );
	  
	  trace( "mod lookup sym %x %s == %s", sym, name, s->name );
	  
	  if ( !VMSame( curmod, s->module ) || s->global ) 
	    warn( "global or external symbol found in local symbol table: %s", s->name );
	  
	  if ( eqs( name, s->name ) )
	    {
	      return sym;
	    }
	  
	  sym = s->next;
	  
	  if ( loops++ == entries + 10 )
	    {
	      report( "possible loop in symtab loop = %d entries = %d", loops, entries );
	      
	      traceflags |= db_sym;
	    }
	  else if ( loops == entries * 2 )
	    error( "quitting" );
	}
    }
  
  h = (hs % GLOBAL_HASHSIZE);
  
  sym     = Symtab[ h ].head;
  loops   = 0;
  entries = Symtab[ h ].entries;

/*  trace( "checking global table, h = %lu", h ); */
  
  while ( !NullRef( sym ) )
    {
      Symbol *	s;
      
      
      if ( !VMcheck( sym ) ) 
	error( "badvm g %x %x %s %d", sym, curmod, name, h );
      
      s = VMAddr( Symbol, sym );
      
      trace( "glob lookup sym %x %s == %s", sym, name, s->name );
      
      
      if ( !s->global && !VMSame( curmod, module0 ) )
	warn( "local symbol found in global symbol table: %s", s->name );
      
      if ( eqs( name, s->name ) )
	{
	  return sym;
	}
      
      sym = s->next;
      
      if ( loops++ == entries + 10 )
	{
	  report( "possible loop in global symtab loops = %d entries = %d", loops, entries );
	  
	  traceflags |= db_sym;
	}
      else if ( loops == 2 * entries )
	error( "quitting" );
    }

/*  trace( "lookup: failed" ); */
  
  return NullVMRef;
}

/********************************************************/
/* insert                                               */
/*                                                      */
/* insert a symbol in the table.                        */
/*                                                      */
/********************************************************/

PUBLIC VMRef insert(name,local)
BYTE *name;
WORD local;
{
        UWORD h = hash(name);
        VMRef sym;
	Symbol *s;
	asm_Module *m;
	int size = sizeof(Symbol) + strlen(name);

	if( local )
	{
		sym = VMalloc(size,symheap);

		if( NullRef(sym) ) 
		{
 			symheap = VMPage();
			sym = VMalloc(size,symheap);
		}
	}
	else
	{
		sym = VMalloc(size,globheap);

		if( NullRef(sym) ) 
		{
 			globheap = VMPage();
			sym = VMalloc(size,globheap);
		}
	}

	symsize += size;

	trace("insert %s %d sym = %x",name,local,sym);

	s = VMAddr(Symbol,sym);
	VMDirty(sym);
	VMlock(sym);
	
        strcpy(s->name,name);
	
        s->type       = 0;
        s->def.w      = NULL;
	s->referenced = 0;

#ifdef NEW_REF
	s->fwd_ref = NullVMRef;
#endif
	
        if( local && !VMSame(curmod,module0) )
        {
        	VMRef headref;
        	m = VMAddr(asm_Module,curmod);
        	
		h %= LOCAL_HASHSIZE;
	  
        	headref = m->symtab[h].head;

        	s->next = headref;
        	s->prev = NullVMRef;
	        s->module = curmod;
		s->global = FALSE;

		if( !NullRef(headref) )
		{
	        	Symbol *head = VMAddr(Symbol,headref);
        		head->prev = sym;
        		VMDirty(headref);
        	}

		m = VMAddr(asm_Module,curmod);	/* just in case */        	
		m->symtab[h].head = sym;
		m->symtab[h].entries++;
		VMDirty(curmod);
        }
        else
        {
	  VMRef headref;
	  

		h %= GLOBAL_HASHSIZE;

		headref  = Symtab[h].head;
	  
        	s->next = headref;
        	s->prev = NullVMRef;
	        s->module = NullVMRef;
		s->global = TRUE;        	
		
		if( !NullRef(headref) )
		{
	        	Symbol *head = VMAddr(Symbol,headref);
        		head->prev = sym;
        		VMDirty(headref);
        	}
        	Symtab[h].head = sym;
        	Symtab[h].entries++;
        }

	VMunlock(sym);
        return sym;
}

/********************************************************/
/* movesym                                              */
/*                                                      */
/* Remove symbol from current symbol table and place    */
/* in global table.                                     */
/*                                                      */
/********************************************************/

PUBLIC void
movesym( sym )
  VMRef sym;
{
  UWORD		hs;
  UWORD 	h;
  Symbol *	s;
  asm_Module *	m;

  
  s = VMAddr( Symbol, sym );
  
  if ( s->global || VMSame( s->module, module0 ))		/* already moved */
    {
      s->global = TRUE;
      
      VMDirty( sym );
      
      return;
    }
  
  hs = hash( s->name );  
  h  = (hs % LOCAL_HASHSIZE);
  
  /* else move symbol from local to global table */
  
  VMlock( sym );
  
  trace( "movesym ref %x name %s links %x %x", sym, s->name, s->next, s->prev );
  
  if ( NullRef( s->prev ) )
    {
      /* at head of list, step list head pointer over us */
      
      m = VMAddr( asm_Module, s->module );
      
      m->symtab[ h ].head = s->next;
      m->symtab[ h ].entries--;
    }
  else 
    {
      Symbol *	prev = VMAddr( Symbol, s->prev );


      /* else step prev's next pointer over us */
      
      prev->next = s->next;
      
      VMDirty( s->prev );
      
      m = VMAddr( asm_Module, s->module );
      
      m->symtab[ h ].entries--;
    }
      
  VMDirty( s->module );

  if ( !NullRef(s->next) )
    {
      Symbol *	next = VMAddr( Symbol, s->next );

      
      /* if not at tail of list, patch next's prev pointer */
      
      next->prev = s->prev;
      
      VMDirty( s->next );
    }	
  
  h = (hs % GLOBAL_HASHSIZE);
  
  /* finally set up our pointers */
  
  s->next   = Symtab[ h ].head;
  s->prev   = NullVMRef;
  s->global = TRUE;
  
  VMDirty( sym );
  
  if ( !NullRef( Symtab[ h ].head ) )
    {
      Symbol *	head = VMAddr( Symbol, Symtab[ h ].head );
      

      /* if list is not empty, patch prev of old head */
      
      head->prev = sym;
      
      VMDirty( Symtab[ h ].head );
    }
  
  Symtab[ h ].head = sym;
  Symtab[ h ].entries++;
  
  VMunlock( sym );

  return;
}

/********************************************************/
/* show_unref						*/
/*							*/
/* print a warning for each unreferenced symbol defined	*/
/* in the program.					*/
/********************************************************/

void show_unref()
{
	STEntry *tab = Symtab;
	int h;
	VMRef sym;
		
	for( h = 0; h < GLOBAL_HASHSIZE; h++ )
	{
        	sym = tab[h].head;

                while ( !NullRef(sym) )
                {
                	Symbol *s;
			asm_Module *m = NULL;
			char *type;

			if( !VMcheck(sym) ) error("badvm %x %d",sym,h);

			VMlock(sym);

			s = VMAddr(Symbol,sym);
#if 0
_trace("%x %x t %x g %d r %d m %x d %d %s",sym,s,s->type,s->global,s->referenced,
			s->module,s->def,s->name);
#endif
			if( !NullRef(s->module) ) m = VMAddr(asm_Module,s->module);			

			switch( s->type )
			{
			case s_datasymb:
			case s_datadone:
					type = "data"; break;
			case s_commsymb:
			case s_commdone:
					type = "common"; break;
			case s_codesymb:
					type = "code"; break;
			default:
					type = "unknown"; break;
			}

			if( s->referenced == 0 && m != NULL && 
			    m->linked && m->id == -1)
			{
				strcpy(infile,m->file);
				warn(" %s symbol %s unreferenced",type,s->name);
			}

			VMunlock(sym);
                        sym = s->next;
                }
        }
}

/********************************************************/
/* printtab						*/
/*							*/
/* print out symbol table				*/
/********************************************************/

void printtab(tab)
STEntry *tab;
{
	int h;
	VMRef sym;
		
	for( h = 0; h < LOCAL_HASHSIZE; h++ )
	{
        	sym = tab[h].head;

                while ( !NullRef(sym) )
                {
                	Symbol *s;
			asm_Module *m = NULL;
			char *type;

			if( !VMcheck(sym) ) error("badvm %x %d",sym,h);

			VMlock(sym);

			s = VMAddr(Symbol,sym);
#if 0
_trace("%x %x t %x g %d r %d m %x d %d %s",sym,s,s->type,s->global,s->referenced,
			s->module,s->def,s->name);
#endif
			if( !NullRef(s->module) ) m = VMAddr(asm_Module,s->module);
			
			switch( s->type )
			{
			case s_datasymb:
			case s_datadone:
					type = "data   "; break;
			case s_commsymb:
			case s_commdone:
					type = "common "; break;
			case s_codesymb:
					type = "code   "; break;
			default:
					type = "unknown"; break;
			}
			
			if( m == NULL )
			     report("%30s %s %4d no module",s->name,type,
			     		s->referenced);
			else report("%30s %s %4d [%d,%d]",s->name,type,
					s->referenced,m->id,s->def);

			VMunlock(sym);
                        sym = s->next;
                }
        }
}

@


1.8
log
@oops, fixed bug in insert() whereby wrong hash value was used for module0
@
text
@d8 1
a8 1
/* $Id: sym.c,v 1.6 1991/03/28 15:29:49 nick Exp $ */
d23 3
d27 1
@


1.7
log
@new improved version (50% faster)
@
text
@d68 2
d115 2
d150 2
a174 2
	  h %= LOCAL_HASHSIZE;
	  
a184 2
	  h %= GLOBAL_HASHSIZE;
	  
d217 2
d240 2
a241 1
        	VMRef headref = Symtab[h].head;
d243 4
@


1.6
log
@cps removed, replaced with a call to strcpy().
@
text
@d8 1
a8 1
/* $Id: sym.c,v 1.5 1991/03/28 15:15:05 nick Exp nick $ */
d20 1
a20 1
PUBLIC STEntry Symtab[HASHSIZE];
d23 1
a23 4
#if 0
WORD eqs(ellipsis);
#endif
WORD hash(ellipsis);
d35 2
a36 1
	for (i=0; i<HASHSIZE ; i++)
d57 3
a59 2
PUBLIC VMRef lookup(name)
BYTE *name;
d61 88
a148 37
        WORD h = hash(name);
        VMRef sym;
	int loops = 0;
	int entries = 0;
	WORD oldtrace = traceflags;
	Module *m;
	
        if( !VMSame(curmod,module0) )
        {
        	m = VMAddr(Module,curmod);
        	sym = m->symtab[h].head;
		entries = m->symtab[h].entries;

                while ( !NullRef(sym) )
                {
                	Symbol *s;

			if( !VMcheck(sym) ) 
				error("badvm l %x %x %s %d",sym,curmod,name,h);

			s = VMAddr(Symbol,sym);
			trace("mod lookup sym %x %s == %s",sym,name,s->name);

			if( !VMSame(curmod,s->module) || s->global ) 
				warn("global or external symbol found in local symbol table: %s",s->name);

                        if( eqs(name,s->name) ) return sym;
                        sym = s->next;
         
                        if( loops++ == entries+10 )
                        {
                        	report("possible loop in symtab loop = %d entries = %d",loops,entries);
                        	traceflags |= db_sym;
                        }
                        else if ( loops == entries*2 ) error("quitting");
                }
        }
a149 32
        sym = Symtab[h].head;
	loops = 0;
	entries = Symtab[h].entries;
	
        while ( !NullRef(sym) )
        {
               	Symbol *s;

		if( !VMcheck(sym) ) 
			error("badvm g %x %x %s %d",sym,curmod,name,h);

		s = VMAddr(Symbol,sym);
		trace("glob lookup sym %x %s == %s",sym,name,s->name);


		if( !s->global && !VMSame(curmod,module0) )
			warn("local symbol found in global symbol table: %s",s->name);

                if( eqs(name,s->name) ) return sym;
                sym = s->next;

                if( loops++ == entries+10 )
                {
                      	report("possible loop in global symtab loops = %d entries = %d",loops,entries);
                       	traceflags |= db_sym;
                }
                else if ( loops == 2*entries ) error("quitting");
        }
        
        return NullVMRef;
}

d161 1
a161 1
        WORD h = hash(name);
d164 1
a164 1
	Module *m;
d168 3
a170 1
	{	
d181 2
d201 3
a203 2
        s->type = 0;
        s->def.w = NULL;
d205 5
a209 1
		
d213 1
a213 1
        	m = VMAddr(Module,curmod);
d229 1
a229 1
		m = VMAddr(Module,curmod);	/* just in case */        	
d265 3
a267 2
PUBLIC void movesym(sym)
VMRef sym;
d269 4
a272 38
	Symbol *s;
	int h;
	Module *m;
	s = VMAddr(Symbol,sym);
	
	if( s->global || VMSame(s->module,module0))		/* already moved */
	{
		s->global = TRUE;
		VMDirty(sym);
		return;
	}
	
	h = hash(s->name);
	
	/* else move symbol from local to global table */
	
	VMlock(sym);
		
	trace("movesym ref %x name %s links %x %x",sym,s->name,s->next,s->prev);
	
	if( NullRef(s->prev) )
	{
		/* at head of list, step list head pointer over us */
		m = VMAddr(Module,s->module);
		m->symtab[h].head = s->next;
		m->symtab[h].entries--;
		VMDirty(s->module);
	}
	else 
	{
		/* else step prev's next pointer over us */
		Symbol *prev = VMAddr(Symbol,s->prev);
		prev->next = s->next;
		VMDirty(s->prev);
		m = VMAddr(Module,s->module);
		m->symtab[h].entries--;
		VMDirty(s->module);
	}
d274 33
a306 7
	if( !NullRef(s->next) )
	{
		/* if not at tail of list, patch next's prev pointer */
		Symbol *next = VMAddr(Symbol,s->next);
		next->prev = s->prev;
		VMDirty(s->next);
	}	
d308 54
a361 18
	/* finally set up our pointers */
       	s->next = Symtab[h].head;
       	s->prev = NullVMRef;
	s->global = TRUE;
	VMDirty(sym);
	
	if( !NullRef(Symtab[h].head) )
	{
		/* if list is not empty, patch prev of old head */
	       	Symbol *head = VMAddr(Symbol,Symtab[h].head);
        	head->prev = sym;
		VMDirty(Symtab[h].head);
        }
       	Symtab[h].head = sym;
       	Symtab[h].entries++;
       	
       	VMunlock(sym);
       	
d377 1
a377 1
	for( h = 0; h < HASHSIZE; h++ )
d384 1
a384 1
			Module *m = NULL;
d396 1
a396 1
			if( !NullRef(s->module) ) m = VMAddr(Module,s->module);			
d437 1
a437 1
	for( h = 0; h < HASHSIZE; h++ )
d444 1
a444 1
			Module *m = NULL;
d456 1
a456 1
			if( !NullRef(s->module) ) m = VMAddr(Module,s->module);
a483 26
/********************************************************/
/* eqs                                                  */
/* cps                                                  */
/*                                                      */
/* String manipulation routines, only the first 31 chars*/
/* of any string are compared or copied.                */
/*                                                      */
/********************************************************/

#ifdef never
PUBLIC INT eqs(s,t)
BYTE *s, *t;
{
        return strncmp(s,t,31) == 0;
}

PUBLIC void cps(src,dst)
BYTE *src, *dst;
{
        int i;
        for( i = 0 ; src[i] && i <= 31 ; i++ )
                dst[i] = src[i];
        dst[i] = '\0';
}

#endif
@


1.5
log
@function show_unref added
@
text
@d8 1
a8 1
/* $Id: sym.c,v 1.4 90/09/28 13:42:40 nick Exp $ */
d178 1
a178 1
        cps(name,s->name);
d315 1
a315 1
void show_unref(void)
a442 1
#endif
d453 1
@


1.4
log
@*** empty log message ***
@
text
@d8 1
a8 1
/* $Id: sym.c,v 1.3 90/09/28 13:22:57 nick Exp Locker: nick $ */
d306 61
@


1.3
log
@globals now allocated to their own VM pages to make searching faster
@
text
@d8 1
a8 1
/* $Id$ */
d10 1
a10 1
#include <asm.h>
@


1.2
log
@mod <asm.h> to "asm.h"
@
text
@d8 1
a8 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/asm/RCS/sym.c,v 1.1 90/08/24 16:39:16 james Exp Locker: jon $";
d10 1
a10 1
#include "asm.h"
d18 1
d45 1
d148 12
a159 4
	
	sym = VMalloc(size,symheap);
	
	if( NullRef(sym) ) 
d161 7
a167 2
		symheap = VMPage();
		sym = VMalloc(size,symheap);
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
static char *rcsid = "$Header$";
d10 1
a10 1
#include <asm.h>
@
