head	1.3;
access;
symbols
	Helios_1_3_1:1.2
	Helios_C40_1_3_Official_Release:1.1
	Alenia_release:1.1
	Helios1_3:1.1
	C40_Field_Test_2:1.1
	Helios13_beta:1.1
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1;
locks; strict;
comment	@ * @;


1.3
date	94.03.08.16.09.25;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	93.08.04.15.28.34;	author bart;	state Exp;
branches;
next	1.1;

1.1
date	90.08.28.14.13.58;	author james;	state Exp;
branches;
next	;


desc
@@


1.3
log
@fixed compile time warnings
@
text
@/*
 *	Macro control for make
 */


#include "h.h"

/* RCSID: $Header: /hsrc/cmds/make/RCS/macro.c,v 1.2 1993/08/04 15:28:34 bart Exp nickc $ */

struct macro   *macrohead;
static char *MEMERROR = "No memory for macro";

struct macro   *
getmp(name)
    char           *name;
{
    register struct macro *rp;

    for (rp = macrohead; rp; rp = rp->m_next)
	if (strcmp(name, rp->m_name) == 0)
	    return rp;
    return (struct macro *) 0;
}


char *
getmacro(name)
    char           *name;
{
    struct macro   *mp;

    if ((mp = getmp(name)) != NULL)
	return mp->m_val;
    else
	return "";
}


struct macro   *
setmacro(name, val)
    char           *name;
    char           *val;
{
    register struct macro *rp;
    register char  *cp;


    /* Replace macro definition if it exists  */
    for (rp = macrohead; rp; rp = rp->m_next)
	if (strcmp(name, rp->m_name) == 0) {
	    free(rp->m_val);	/* Free space from old  */
	    break;
	}
    if (!rp) {			/* If not defined, allocate space for new  */
	if ((rp = (struct macro *) malloc(sizeof(struct macro)))
	    == (struct macro *) 0)
	    fatal(MEMERROR);

	rp->m_next = macrohead;
	macrohead = rp;
	rp->m_flag = FALSE;

	if ((cp = (char *)malloc((unsigned) strlen(name) + 1)) == (char *) 0)
	    fatal(MEMERROR);
	strcpy(cp, name);
	rp->m_name = cp;
    }
    if ((cp = (char *)malloc((unsigned) strlen(val) + 1)) == (char *) 0)
	fatal(MEMERROR);
    strcpy(cp, val);		/* Copy in new value  */
    rp->m_val = cp;

    return rp;
}


/*
 *	Do the dirty work for expand
 */
void
doexp(to, from, len, buf)
    char          **to;
    char           *from;
    int            *len;
    char           *buf;
{
    register char  *rp;
    register char  *p;
    register char  *q;
    register struct macro *mp;


    rp = from;
    p = *to;
    while (*rp) {
	if (*rp != '$') {
	    *p++ = *rp++;
	    (*len)--;
	} else {
	    q = buf;
	    if (*++rp == '{')
		while (*++rp && *rp != '}')
		    *q++ = *rp;
	    else if (*rp == '(')
		while (*++rp && *rp != ')')
		    *q++ = *rp;
	    else if (!*rp) {
		*p++ = '$';
		break;
	    } else
		*q++ = *rp;
	    *q = '\0';
	    if (*rp)
		rp++;
	    if ((mp = getmp(buf)) == NULL)
		mp = setmacro(buf, "");
	    if (mp->m_flag)
		fatal("Infinitely recursive macro %s", mp->m_name);
	    mp->m_flag = TRUE;
	    *to = p;
	    doexp(to, mp->m_val, len, buf);
	    p = *to;
	    mp->m_flag = FALSE;
	}
	if (*len <= 0)
	    error("Expanded line too line");
    }
    *p = '\0';
    *to = p;
}


/*
 *	Expand any macros in str.
 */
void
expand(str)
    char           *str;
{
    static char     a[LZ];
    static char     b[LZ];
    char           *p = str;
    int             len = LZ - 1;

    strcpy(a, str);
    doexp(&p, a, &len, b);
}
@


1.2
log
@Changed RcsID's from string variables to comments, to reduce code and
data requirements.
@
text
@d8 1
a8 1
/* RCSID: $Header: /hsrc/cmds/make/RCS/macro.c,v 1.1 1990/08/28 14:13:58 james Exp $ */
d26 1
a26 1
char           *
d32 1
a32 1
    if (mp = getmp(name))
d63 1
a63 1
	if ((cp = malloc((unsigned) strlen(name) + 1)) == (char *) 0)
d68 1
a68 1
    if ((cp = malloc((unsigned) strlen(val) + 1)) == (char *) 0)
d115 1
a115 1
	    if (!(mp = getmp(buf)))
@


1.1
log
@Initial revision
@
text
@d8 1
a8 1
static char *rcsid = "$Header$";
d11 1
a12 1

d57 1
a57 1
	    fatal("No memory for macro");
d64 1
a64 1
	    fatal("No memory for macro");
d69 1
a69 1
	fatal("No memory for macro");
@
