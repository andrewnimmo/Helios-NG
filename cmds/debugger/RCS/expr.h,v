head	1.1;
access;
symbols
	Helios_1_3_1:1.1
	Helios_C40_1_3_Official_Release:1.1
	Alenia_release:1.1
	Helios13_beta:1.1
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1;
locks; strict;
comment	@ * @;


1.1
date	90.08.28.16.35.48;	author james;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/**
*
* Title:  Helios Debugger - Expression Evaluation
*
* Author: Andy England
*
* Date:   May 1989
*
*         (C) Copyright 1989, Perihelion Software Limited.
*
*         All Rights Reserved.
*
* $Header$
*
**/

#define OCTAL   8
#define DECIMAL 10
#define HEX     16

#define UPTOCOMMA 3
#define PASTCOMMA 2

typedef enum
{
  T_Auto, T_Break, T_Case, T_Char, T_Const, T_Continue, T_Default, T_Do,
  T_Double, T_Else, T_Enum, T_Extern, T_Float, T_For, T_Goto, T_If, T_Int,
  T_Long, T_Register, T_Return, T_Short, T_Signed, T_Sizeof, T_STATIC,
  T_Struct, T_Switch, T_Typedef, T_Union, T_Unsigned, T_Void, T_Volatile,
  T_While, T_Identifier, T_Constant, T_String, T_LBracket, T_RBracket,
  T_LParen, T_RParen, T_Dot, T_Arrow, T_PlusPlus, T_MinusMinus, T_BitAnd,
  T_Times, T_Plus, T_Minus, T_BitNot, T_LogNot, T_Divide, T_Remainder,
  T_LShift, T_RShift, T_LT, T_GT, T_LE, T_GE, T_EQ, T_NE, T_BitXOr, T_BitOr,
  T_LogAnd, T_LogOr, T_Conditional, T_Assign, T_TimesEq, T_DivideEq,
  T_RemainderEq, T_PlusEq, T_MinusEq, T_LShiftEq,
  T_RShiftEq, T_BitAndEq, T_BitXOrEq, T_BitOrEq, T_Comma,
  T_LBrace, T_RBrace, T_Colon, T_Semicolon, T_Ellipsis,

  T_Subscript, T_Call, T_Function, T_Pointer, T_Array, T_UPlus,
  T_UMinus, T_Address, T_Indirect, T_PostInc, T_PostDec, T_Convert,
  T_Cast, T_Error, T_Member, T_Parameter, T_Tag, T_End, T_List
} TOKEN;

typedef union
{
  int integral;
  float floating4;
  double floating8;
} VALUE;

typedef union expr
{
  struct
  {
    TOKEN op;
    union type *type;
    union expr *expr1, *expr2, *expr3;
  } generic;
  struct
  {
    TOKEN token;
    union type *type;
    struct entry *entry;
  } identifier;
  struct
  {
    TOKEN token;
    union type *type;
    VALUE value;
  } constant;
  struct
  {
    TOKEN token;
    union type *type;
    char *value;
  } string;
  struct
  {
    TOKEN op;
    union type *type;
    union expr *expr;
  } cast;
} EXPR;

typedef union
{
  long number;
  EXPR *expr;
  ENTRY *entry;
} VAL;

typedef struct
{
  TOKEN token;
  VAL value;
} LEXICON;

extern char *tokennames[];

PUBLIC BOOL evalcond(struct eval *, char *, BLOCK *);
PUBLIC EXPR *parseexpr(struct eval *, char *, BLOCK *);
PUBLIC void *evaladdr(struct eval *, EXPR *);
PUBLIC void putexpr(EXPR *, FILE *);
@
