head	1.1;
access;
symbols
	Helios_1_3_1:1.1
	Helios_C40_1_3_Official_Release:1.1
	Alenia_release:1.1
	Helios13_beta:1.1
	Helios1_2_2:1.1
	Helios1_2_2Beta:1.1
	Helios1_2_1:1.1;
locks; strict;
comment	@ * @;


1.1
date	90.08.28.16.51.42;	author james;	state Exp;
branches;
next	;


desc
@@



1.1
log
@Initial revision
@
text
@/**
*
* Title:  Helios Debugger - Symbol Support
*
* Author: Andy England
*
* Date:   May 1989
*
*         (C) Copyright 1989, Perihelion Software Limited.
*
*         All Rights Reserved.
*
* $Header$
*
**/

#include "table.h"

#define NAME_MAX 256

#define GetTypeEntry(t) ((ENTRY *)((word *)(t) - 2))

typedef USHORT LINENO;

typedef enum
{
  C_Auto, C_Common, C_Display, C_Enum, C_Extern, C_Member, C_Param, C_Register,
  C_Static, C_Tag, C_Typedef
} CLASS;

typedef enum
{
  TI_Array, TI_Enum, TI_Float, TI_Function, TI_Integral, TI_Pointer, TI_ReUse,
  TI_Struct, TI_Ace, TI_Tag, TI_Typedef
} TYPEID;

typedef struct block
{
  LINK link;
  struct block *parent;
  CHAIN blocklist;
  struct entry *entry;
  struct module *module;
  int lines;
  LINENO *linevec;
} BLOCK;

typedef struct
{
  TYPEID id;
  union type *type;
} REUSE;

typedef struct
{
  TYPEID id;
  union type *type;
} TYPENAME;

typedef struct
{
  TYPEID id;
  union type *host;
} POINTER;

typedef struct
{
  TYPEID id;
  union type *host;
  int size, first;
} ARRAY;

typedef struct
{
  TYPEID id;
  struct entry *tag;
  CHAIN memberlist;
} STRUCTURE;

typedef struct
{
  TYPEID id;
  union type *host;
  CHAIN paramlist;
} FUNCTION;

typedef struct
{
  TYPEID id;
  CHAIN constlist;
} ENUMERATION;

typedef struct
{
  TYPEID id;
  short size;
  short issigned;
} BASETYPE;

typedef union type
{
  struct
  {
    TYPEID id;
    union type *host;
  } generic;
  REUSE reuse;
  TYPENAME typename;
  POINTER pointer;
  ARRAY array;
  STRUCTURE structure;
  FUNCTION function;
  ENUMERATION enumeration;
  BASETYPE basetype;
} TYPE;

typedef struct 
{
  LINK link;
  char *name;
  CLASS class;
  TYPE *type;
#ifdef OLDCODE
  BLOCK *block;
#endif
} TYPEDEF;

typedef struct
{
  LINK link;
  char *name;
  CLASS class;
  TYPE *type;
  int offset;
} MEMBER;

typedef struct
{
  LINK link;
  char *name;
  CLASS class;
  TYPE *type;
  int offset;
} ENUMCONST;

typedef struct
{
  LINK link;
  char *name;
  CLASS class;
  TYPE *type;
  int offset;
} PARAM;

typedef struct
{
  LINK link;
  char *name;
  CLASS class;
  TYPE *type;
  int offset;
  BLOCK *block;
} LOCAL;

typedef struct entry
{
  LINK link;
  char *name;
  CLASS class;
  TYPE *type;
  int offset;
  BLOCK *block;
} ENTRY;

PUBLIC ENTRY *declarevar(TABLE, BLOCK *, char *, CLASS, TYPE *, int, BLOCK *);
PUBLIC ENTRY *declarelocal(TABLE, BLOCK *, char *, TYPE *, int);
PUBLIC ENTRY *declaretype(TABLE, BLOCK *, char *, TYPE *);
PUBLIC ENTRY *declaretag(TABLE, BLOCK *, char *, TYPE *);
PUBLIC ENTRY *declareparam(TABLE, TYPE *, char *, TYPE *, int);
PUBLIC ENTRY *declareenum(TABLE, TYPE *, char *, TYPE *, int);
PUBLIC ENTRY *declaremember(TABLE, TYPE *, char *, TYPE *, int);
PUBLIC ENTRY *findvar(TABLE, BLOCK *, char *);
PUBLIC ENTRY *findtype(TABLE, BLOCK *, char *);
PUBLIC ENTRY *findtypeid(TABLE, BLOCK *, int);
PUBLIC ENTRY *findtag(TABLE, BLOCK *, char *);
PUBLIC ENTRY *findmember(TYPE *, char *);
PUBLIC ENTRY *findenumconst(TYPE *, int);
PUBLIC ENTRY *whichentry(BLOCK *, byte *);
PUBLIC ENTRY *whichmember(TYPE *, int);
PUBLIC TYPE *newpointer(TYPE *);
PUBLIC TYPE *newarray(TYPE *, int, int);
PUBLIC TYPE *newstruct(void);
PUBLIC TYPE *newfunction(TYPE *);
PUBLIC TYPE *newenumeration(void);
PUBLIC TYPE *newtag(ENTRY *);
PUBLIC TYPE *newtypedef(ENTRY *);
PUBLIC TYPE *newbasetype(TYPEID, int, BOOL);
PUBLIC TYPE *newintegraltype(int, BOOL);
PUBLIC TYPE *newfloatingtype(int);
PUBLIC TYPE *reusetype(TYPE *);
PUBLIC TYPE *skipreuse(TYPE *);
PUBLIC TYPE *skiptypedef(TYPE *);
PUBLIC TYPE *hosttype(TYPE *);
PUBLIC BLOCK *newblock(BLOCK *);
PUBLIC void addline(BLOCK *, int);
PUBLIC void walkblock(BLOCK *, void (*)(), long);
PUBLIC BLOCK *searchblock(BLOCK *, BOOL (*)(), long);
PUBLIC BLOCK *findblock(LOCATION);
PUBLIC ENTRY *findfunction(struct module *, int);
PUBLIC BOOL validline(LOCATION);
PUBLIC void freetype(TYPE *);
PUBLIC void freeblock(BLOCK *);
PUBLIC void freesymbol(SYMBOL *);
PUBLIC void freeentry(ENTRY *);
PUBLIC void putblock(BLOCK *, FILE *);
PUBLIC void putentry(ENTRY *, FILE *);
PUBLIC void putsymbol(SYMBOL *, FILE *);
@
