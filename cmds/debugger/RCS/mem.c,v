head	1.6;
access;
symbols
	Helios_1_3_1:1.6
	Helios_C40_1_3_Official_Release:1.4
	Alenia_release:1.3
	Helios13_beta:1.2
	Helios1_2_2:1.2
	Helios1_2_2Beta:1.2
	Helios1_2_1:1.1;
locks; strict;
comment	@ * @;


1.6
date	93.07.12.15.48.35;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	93.05.18.11.30.56;	author bart;	state Exp;
branches;
next	1.4;

1.4
date	93.03.17.17.41.27;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	92.10.27.15.04.09;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	91.08.19.09.44.04;	author craig;	state Exp;
branches;
next	1.1;

1.1
date	90.08.28.16.45.13;	author james;	state Exp;
branches;
next	;


desc
@@


1.6
log
@fixed compile time warning
@
text
@/**
*
* Title:  Helios Debugger - Memory allocation routines.
*
* Author: Andy England
*
* Date:   February 1989
*
*         (c) Copyright 1989 - 1993, Perihelion Software Limited.
*
*         All Rights Reserved.
*
**/

#ifdef __TRAN
static char *rcsid = "$Header: /hsrc/cmds/debugger/RCS/mem.c,v 1.5 1993/05/18 11:30:56 bart Exp nickc $";
#endif

#include "tla.h"

PRIVATE word totalmem = 0;
PRIVATE word numblocks = 0;

#ifdef MEMCHECK

#define MAGIC 0xdeadffcc
#define WORDS(n) ((n + 3) >> 2)

typedef struct
{
  NODE node;
  word size;
  word buffer;
  word store[1];
} MEM;

PRIVATE LIST memlist;
PRIVATE Semaphore memlock;

PRIVATE void memcheck(MEM *mem)
{
  unless (mem->buffer == MAGIC AND mem->store[WORDS(mem->size)] == MAGIC)
    {
      exit(1);
    }
}

PRIVATE void memchecker(void)
{
  forever
  {
    Delay(2000000);
    Wait(&memlock);
    
    (void)WalkList(&memlist, (WordFnPtr)memcheck, 0);

    Signal(&memlock);
  }
}

/**
*
* initmem(memchecking)
*
* Initialise the memory routines.
*
**/
PUBLIC void initmem(BOOL memchecking)
{
  totalmem = numblocks = 0;
  InitSemaphore(&memlock, 1);
  InitList(&memlist);
  if (memchecking)
    {
      IOdebug( "TLA: Memory Checking Enabled" );
      
      Fork(5000, memchecker, 0);
    }
  
}

PUBLIC void *newmem(int size)
{
  MEM *mem;

  Wait(&memlock);
  if ((mem = (MEM *)malloc(sizeof(MEM) + (WORDS(size) << 2))) == NULL)
  {
    IOdebug( "TLA: OUT OF MEMORY" );
    exit(1);
  }
  totalmem += mem->size = size;
  numblocks++;
  mem->buffer = MAGIC;
  mem->store[WORDS(size)] = MAGIC;
  AddTail(&memlist, &mem->node);
  /* IOdebug( "alloc  %x, size %x %s", mem, mem->size, mem->size < 10 ? procname( NULL ) : "" );*/
  
  Signal(&memlock);
  return &mem->store[0];
}

PUBLIC void freemem(void *store)
{
  MEM *  mem;

  
  mem = (MEM *)(((byte *)store) - sizeof(MEM) + sizeof(word));

  Wait(&memlock);

  if (mem->buffer != MAGIC)
    {
      IOdebug( "TLA: Memory Error @@ %x (in freemem) [no starting magic] (size %x)",
	      mem, mem->size );
#ifndef __TRAN
      back_trace();
#endif
      
      exit(1);
    }
  else if (mem->store[WORDS(mem->size)] != MAGIC)
    {
      IOdebug( "TLA: Memory Error @@ %x (in freemem) [no ending magic]", mem );
      exit(1);
    }

  totalmem -= mem->size;
  numblocks--;
  Remove(&mem->node);
  /* IOdebug( "* free %x, size %x %s", mem, mem->size, mem->size < 10 ? procname( NULL ) : "" );*/
  free(mem);
  Signal(&memlock);
}
#else /* not MEMCHECK */
/**
*
* mem = newmem(size);
*
* Allocate memory.
*
**/
PUBLIC void *newmem(int size)
{
  int *mem;

  if ((mem = malloc(size + sizeof(int))) == NULL)
  {
#ifdef OLDCODE
    error("Out of memory");
    return NULL;
#else
    IOdebug( "TLA: OUT OF MEMORY" );
    exit(1);
#endif
  }
  *mem++ = size;
  totalmem += size;
  numblocks++;
  return mem;
}

/**
*
* freemem(mem);
*
* Deallocate memory.
*
**/
PUBLIC void freemem(void *mem)
{
  int * ptr = (int *)mem;
  
  totalmem -= *--ptr;
  numblocks--;
  
  IOdebug( "free %x, size %x", ptr, *ptr );
  
  free(ptr);
}


/**
*
* initmem(memchecking)
*
* Initialise the memory routines.
*
**/
PUBLIC void initmem(BOOL memchecking)
{
  totalmem = numblocks = 0;

  return;
}

#endif /* not MEMCHECK */

/**
*
* putmem();
*
* Display memory usage.
*
**/
PUBLIC void putmem(void)
{
  debugf("%d bytes in %d blocks", totalmem, numblocks);
}

@


1.5
log
@Removed call to back_trace() when building transputer version
@
text
@d16 1
a16 1
static char *rcsid = "$Header: /hsrc/cmds/debugger/RCS/mem.c,v 1.4 1993/03/17 17:41:27 nickc Exp bart $";
d87 1
a87 1
  if ((mem = malloc(sizeof(MEM) + (WORDS(size) << 2))) == NULL)
@


1.4
log
@minor cosmetic changes
@
text
@d16 1
a16 1
static char *rcsid = "$Header: /hsrc/cmds/debugger/RCS/mem.c,v 1.3 1992/10/27 15:04:09 nickc Exp nickc $";
d116 1
d118 1
@


1.3
log
@fixed compile time warnings
@
text
@d9 1
a9 1
*         (C) Copyright 1989 - 1992, Perihelion Software Limited.
d16 1
a16 1
static char *rcsid = "$Header: /hsrc/cmds/debugger/RCS/mem.c,v 1.2 1991/08/19 09:44:04 craig Exp nickc $";
d26 1
a26 1
#define MAGIC 0x12345678
d97 2
d112 14
a125 5
  unless (mem->buffer == MAGIC AND mem->store[WORDS(mem->size)] == MAGIC)
  {
    IOdebug( "TLA: Memory Error @@ %x (in freemem)", mem );
    exit(1);
  }
d129 1
d174 3
@


1.2
log
@Major fixes to V1.1 for V2.0 (see documentation for details)
@
text
@d9 1
a9 1
*         (C) Copyright 1989, Perihelion Software Limited.
d15 3
a17 1
static char *rcsid = "$Header: /hsrc/cmds/debugger/RCS/mem.c,v 1.1 1990/08/28 16:45:13 james Exp craig $";
d21 2
a22 2
PRIVATE totalmem = 0;
PRIVATE numblocks = 0;
d43 3
a45 4
  {
    IOdebug("Memory Error @@ %x", mem);
    exit(1);
  }
d54 1
d56 1
d73 7
a79 1
  if (memchecking) Fork(5000, memchecker, 0);
d89 1
a89 1
    IOdebug("OUT OF MEMORY");
d103 4
a106 1
  MEM *mem = (MEM *)(((byte *)store) - sizeof(MEM) + sizeof(word));
d109 1
d112 1
a112 1
    IOdebug("Memory Error @@ %x (in freemem)", mem);
d121 1
a121 1
#else
d139 1
a139 1
    IOdebug("OUT OF MEMORY");
d156 1
a156 1
PUBLIC void freemem(int *mem)
d158 3
a160 1
  totalmem -= *--mem;
d162 16
a177 1
  free(mem);
d179 2
a180 1
#endif
d193 1
@


1.1
log
@Initial revision
@
text
@d15 1
a15 3
#include <stdlib.h>
#include "debug.h"
#include "display.h"
d17 1
a17 1
static char *rcsid = "$Header$";
@
