head	1.2;
access;
symbols
	Helios_C40_1_3_Official_Release:1.2
	Helios-C40:1.2
	Alenia_release:1.2
	Helios1_2_1:1.2;
locks; strict;
comment	@ * @;


1.2
date	91.01.23.12.27.01;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	91.01.22.13.43.55;	author paul;	state Exp;
branches;
next	;


desc
@translate a binary file (to be downloaded) into a series of write hex
at location" commands that the ABC monitor understands - this is a real
BODGE guys - takes ages to translate and takes ages to send down the
link.
@


1.2
log
@
@
text
@/* Munge a binary file into a file of `w' and `+' commands for 		*/
/* downloading into screen memory on the functional prototype board.	*/
/* The file should be a multiple of 4 bytes in length and in little	*/
/* endian format.							*/
/*									*/
/* Syntax: mungebin [address]						*/
/* address defaults to base of screen memory.				*/

/* Brian Knight,  	April 1990 */
/* James G. Smith,	December 1990 */

/*----------------------------------------------------------------------*/

#include <stdio.h>

/*----------------------------------------------------------------------*/

#define SCREENBASE (0x00740000)	/* Where screen memory starts */
#define BUFFSIZE   (0x00010000)	/* 64K file buffer */

/*----------------------------------------------------------------------*/

main(int argc,char **argv)
{
 int   address ;
 int   first = -1 ;
 int  *buffer ;

 if (argc < 2)
  address = SCREENBASE ;
 else
  sscanf(argv[1],"%x",&address) ;

 buffer = (int *)malloc(BUFFSIZE) ;
  
 for (;;)
  {
   if (buffer == NULL)
    {
     int w ;

     if (fread(&w,1,4,stdin) != 4)
      break ; /* for loop */

     if (first)
      {
       first = 0 ;
       printf("w %x %x\n",address,w) ;
      }
     else
      printf("+%x\n",w) ;
    }
   else
    {
     int loop ;
     int amount ;
     int endit = 0 ;

     /* non-complete buffer read terminates program */
     if ((amount = fread((char *)buffer,1,BUFFSIZE,stdin)) != BUFFSIZE)
      endit = -1 ;

     loop = 0 ;

     if (first)
      {
       first = 0 ;
       printf("w %x %x\n",address,buffer[loop++]) ;
      }

     for (; (loop < (amount / sizeof(int))); loop++)
      printf("+%x\n",buffer[loop]) ;

     if (endit)
      break ;
    }
  }

 return(0) ;
}
@


1.1
log
@Initial revision
@
text
@@
