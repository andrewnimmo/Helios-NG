head	1.2;
access;
symbols
	Helios_C40_1_3_Official_Release:1.2
	Helios-C40:1.2
	Alenia_release:1.2
	Helios1_2_1:1.2;
locks; strict;
comment	@ * @;


1.2
date	91.01.23.12.25.18;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	91.01.22.13.33.58;	author paul;	state Exp;
branches;
next	;


desc
@boot initial test world running on R140 (obsolete)
@


1.2
log
@*** empty log message ***
@
text
@/* ABC prototype booter */
/* taken from standalone library sarcmd.c sarun.c */

#include <stdio.h>
#include <fcntl.h>
#include <dev/link.h>

#define BUFSIZE 2048
char ibuf[BUFSIZE];

int main(argc, argv)
int argc;
char **argv;
{
	int e;

	if( argc > 2 ) {
		fprintf(stderr,"usage: bootabc bootfile\n");
		exit(1);
	}

	if( argc < 2 ) argv[1] = "nucleus";

	if( (e=abcrun(argv[1])) ) {
		fprintf(stderr,"abcboot: error %d\n",e);
		exit(1);
	}
	
	return(0);
}

int abcrun(sysfile)
char *sysfile;
{	
	int stat;
	int fd;
	int lfd;
	int size;
	unsigned char c;
				
	lfd = open("/dev/link",O_RDWR);

	ioctl(lfd,LIOSLRESET,0);
	ioctl(lfd,LIOCLRESET,0);
	
	ioctl(lfd,LIOSPEED20,0);
/*	ioctl(lfd,LIOSPEED10,0);*/

	if( lfd == -1 ) return -2;
	
#if 0
	/* read initial startup message */
	while(read(lfd,&c,1) > 0 && c != 0x0)
		putchar(c);
	putchar('\n');
#endif
		
	fd = open(sysfile,O_RDONLY);
	
	if( fd == -1 ) return -3;

	/* and send image    */
	while((size=read(fd,ibuf,BUFSIZE))>0)
	{
		if( write(lfd,ibuf,size) != size ) {
			close(fd);
			close(lfd);
			return -8;
		}
	}
	
	close(fd);

	/* print out link traffic until error or 0xff byte */
	while((stat = read(lfd,&c,1)) == 1 && c != 0xff)
	{
		if (c == 0)
		 	putchar('\n');
		else
			putchar(c);
	}
	putchar('\n');
	if(stat != 1)
		printf("\nError reading link!!!!\n");

	printf("\nFinished!!!!\n");
	close(lfd);
	return 0;
}
@


1.1
log
@Initial revision
@
text
@@
