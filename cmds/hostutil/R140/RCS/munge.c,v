head	1.3;
access;
symbols
	Helios_C40_1_3_Official_Release:1.3
	Helios-C40:1.3
	Alenia_release:1.3
	Helios1_2_1:1.2;
locks; strict;
comment	@ * @;


1.3
date	91.06.20.18.00.43;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	91.01.23.12.27.36;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	91.01.22.13.41.26;	author paul;	state Exp;
branches;
next	;


desc
@translate (munge) arm riscix a.out format files into Helios portable object
files.
@


1.3
log
@added support for "uses" object directive.
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--				MUNGE.C					--
--                     ---------------------------                      --
--                                                                      --
--             Copyright (C) 1989, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
--                                                                      --
-- Converts an ARM assembler a.out file into a Helios object file.	--
--                                                                      --
-- The assembly file must have been 'preprocessed' by the ampp munge 	--
-- macros. These macros incorporate pseudo Helios object directives	--
-- into the symbol table. The munger then converts these pseudo		--
-- directives into true Helios directives, leaving behind the unix	--
-- header, symbol and relocation info in the process.			--
--									--
--									--
--	Author:  PAB 10/4/89						--
--	Updated: PAB 16/8/90 for split module table			--
--                                                                      --
------------------------------------------------------------------------*/

static char *SccsId = " %W% %G% Copyright (C) 1987, Perihelion Software Ltd.\n";

#include <stdio.h>
#include <a.out.h>
#include <stab.h>
#include <alloc.h>

#define	FALSE	0
#define TRUE	1

/* Helios object code directives */
#define OBJCODE		0x01
#define OBJBSS 		0x02
#define OBJINIT		0x03
#define OBJBYTE		0x09
#define OBJSHORT	0x0a
#define OBJWORD 	0x0c
#define OBJIMAGESIZE	0x0e
#define OBJLABELREF	0x0f
#define OBJMODULE	0x20
#define OBJGLOBAL	0x22
#define OBJLABEL 	0x23
#define OBJDATA  	0x24
#define OBJCODETABLE	0x26
#define OBJLIBREF	0x27
#define OBJCOMMON	0x25
#define OBJDATASYMB	0x10
#define OBJCODESYMB	0x0d
#define OBJDATAMODULE	0x11
#define OBJMODNUM    	0x12
#define PATCHMIN     	0x13
#define PATCHMAX     	0x1f

#define PATCH_SHIFT	0x014  /* patch shift (shifts next patch value by specified amount) */
#define	PATCH_ARM_DT	0x015  /* Data transfer instruction patch (bits 0-11) */
#define	PATCH_ARM_DP	0x016  /* Data processing instruction patch (bits 0-8 + shift of instruction) */
#define	PATCH_ARM_JP	0x017  /* Branch instruction patch (bits 0-23 rshift 2) */
#define	PATCH_ARM_DP_LSB  0x018  /* Data processing instruction patch (bits 0-7 of patch value) */
#define	PATCH_ARM_DP_REST 0x019  /* Data processing instruction patch (bits 8-16) */

/* macros to determine the file position of different segments in a.out */
#define TextREL(x) (N_TXTOFF(x) + (x).a_text+(x).a_data)
#define DataREL(x) (N_TXTOFF(x) + (x).a_text+(x).a_data + (x).a_trsize)
#define SYMTAB(x) (N_TXTOFF(x) + (x).a_text+(x).a_data + (x).a_trsize + \
	(x).a_drsize)
#define STRTAB(x) (N_TXTOFF(x) + (x).a_text+(x).a_data + (x).a_trsize + \
	(x).a_drsize + (x).a_syms)

#define PARTCMP(x,y)	(strncmp(x, y, sizeof(y) -1 ) == 0)

#define ENC_MORE 0x80	/* number encoding - another byte to follow */
#define ENC_NEG  0x40	/* number encoding - number is neg */
#define BOT6BITS 0x3f
#define BOT7BITS 0x7f

void write_enc();
unsigned Enc();
int read_enc();
void read_and_check_header();
void printsyms();
int cmp_symbols();
void sort_symbols();
void munge();

void
usage()
{
	fprintf(stderr,
"Usage: munge [-s] [-o helios-objectfile] bsd-objectfile\n");
	exit(1);
}

int	opt_printsyms = FALSE;

int
main(argc, argv)
int argc;
char **argv;
{
	FILE	*outf = stdout;
	FILE	*inf = stdin;
	struct exec ohead;
	int	i;
	char	*cp, *text_seg;
	int num_symbols, str_tab_size;
	struct nlist *symbol_table;
	char *symbol_names;

	for (i=1; i < argc ; i++)
	{
		if (argv[i][0] == '-')
		{
			switch(argv[i][1])
			{
			case 'o':
				if (argv[i][2] == '\0')
					cp = argv[++i];
				else
					cp = &argv[i][2];
#ifdef __STDC__ /* ANSI */
				if ((outf = fopen(cp,"wb")) == NULL)
#else
				if ((outf = fopen(cp,"w")) == NULL)
#endif
				{
					fprintf(stderr,"munge: Cannot open output file\n");
					exit(2);
				}
				break;
			
			case 's':
				opt_printsyms = TRUE;
				break;
				
		default:
				usage();

			}
		}
		else
		{
			if((inf=fopen(argv[i],"r")) == NULL)
			{
				fprintf(stderr,"munge: cannot open input file\n");
				exit(3);
			}
		}
	}

/* end of arg processing */

	read_and_check_header(inf, &ohead);


/* read in a.out text segment */

	if (ohead.a_text != 0)
	{
		if ((text_seg = malloc((unsigned)ohead.a_text)) == NULL)
		{
			fprintf(stderr,"munge: out of memory\n");
			exit(4);
		}

		if (fread(text_seg, ohead.a_text, 1, inf) != 1)
		{
			fprintf(stderr,"munge: Couldn't read text segment from input file\n");
			exit(4);
		}
	}
	else
		fprintf(stderr,"munge: Warning no text segment in input file\n");


/* read in a.out symbol table */

	if (ohead.a_syms == 0)
	{
		fprintf(stderr,"munge: Warning input file has no symbol table\n");
	}

	symbol_table = (struct nlist *)malloc(ohead.a_syms);
	num_symbols = ohead.a_syms / sizeof(struct nlist);

	if (fseek(inf, SYMTAB(ohead), 0)
	   || (fread((char *)symbol_table, sizeof(struct nlist), num_symbols, inf) != num_symbols) )
	{
		printf("munge: Error reading symbol table\n");
		exit(8);
	}


/* read in string table (names of symbols) */

	if(fread(&str_tab_size, sizeof(long), 1, inf) != 1)
	{
		printf("munge: error reading string table size\n");
		exit(9);
	}
	symbol_names = (char *)malloc(str_tab_size);
	if(str_tab_size <= 4) /* size includes itself */
		fprintf(stderr, "munge: Warning, input file contains no string table\n");
	else
	{
		if (fseek(inf, STRTAB(ohead), 0)
		    || (fread(symbol_names, 1, str_tab_size, inf) != str_tab_size) )
		{
			printf("munge: Error reading string table\n");
			exit(10);
		}
	}


/* sort symbols into pc offset order */
	sort_symbols(symbol_table, num_symbols, symbol_names);

	if (opt_printsyms)
		printsyms(symbol_table, num_symbols, symbol_names);
	else
/* munge the arm a.out text segment to a Helios one outputing result in outf */
		munge(text_seg, ohead.a_text, symbol_table, num_symbols, symbol_names, outf);

/* tidy up */
	free(symbol_table);
	free(symbol_names);
	free(text_seg);
	fclose(inf);
	fclose(outf);
	exit(0);
	SccsId = SccsId; /* remove warn. */
}


void read_and_check_header(FILE *inf, struct exec *ohead)
{
	if(fread((char *)ohead, sizeof(struct exec), 1, inf) != 1)
	{
		fprintf(stderr,"munge: Error - Could not read input file header\n");
		exit(4);
	}

	if (ohead->a_magic != OMAGIC)
	{
		fprintf(stderr,"munge: Error - Input file is not RISC-iX assembler a.out file\n");
		exit(5);
	}

	if (ohead->a_trsize != 0)
	{
		fprintf(stderr,"munge: Error - Input file contains text relocation information\n");
		exit(6);
	}
	if (ohead->a_drsize != 0)
	{
		fprintf(stderr,"munge: Error - Input file contains data relocation information\n");
		exit(6);
	}
	if (ohead->a_data + ohead->a_bss != 0)
	{
		fprintf(stderr,"munge: Error - Input file contains data and/or bss segments\n");
		exit(7);
	}
}


void
printsyms(symbol_table,num_symbols,symbol_names)
struct nlist *symbol_table;
int num_symbols;
char *symbol_names;
{
	int item;

	printf("\nSymbol Table:\n");
	printf("-------------\n");

	for (item = 0; item < num_symbols; item++)
	{
		printf("\nSymbol No: %d\n",item+1);
		{
			char *name=&symbol_names[symbol_table[item].n_un.n_strx];

			if (name == NULL)
				printf("Symbol has no name\n");
			else
				printf("Name: %s\n",name);
		}
		printf("n_type: ");
		switch (symbol_table[item].n_type & N_TYPE)
		{
			case N_UNDF:
			printf("Undefined");
			break;

			case N_ABS:
			printf("Absolute");
			break;

			case N_TEXT:
			printf("Text");
			break;

			case N_DATA:
			printf("Data");
			break;

			case N_BSS:
			printf("BSS");
			break;

			case N_COMM:
			printf("Common (internal to ld)");
			break;

			case N_FN:
			printf("File name symbol");
			break;

			default:
			printf("UNKNOWN n_type");
		}
		if (symbol_table[item].n_type & N_EXT)
			printf(" - Externally defined (global)\n");
		else
			putchar('\n');

		switch(symbol_table[item].n_type & N_STAB)
		{
			case N_GSYM:
			printf("Stab = N_GSYM - global symbol: name,,0,type,0\n");
			break;

			case N_FNAME:
			printf("Stab = N_FNAME - procedure name (f77 kludge): name,,0\n");
			break;

			case N_FUN:
			printf("Stab = N_FUN - procedure: name,,0,linenumber,address\n");
			break;

			case N_STSYM:
			printf("Stab = N_STSYM - static symbol: name,,0,type,address\n");
			break;

			case N_LCSYM:
			printf("Stab = N_LCSYM - .lcomm symbol: name,,0,type,address\n");
			break;

			case N_RSYM:
			printf("Stab = N_RSYM - register sym: name,,0,type,register\n");
			break;

			case N_SLINE:
			printf("Stab = N_SLINE - src line: 0,,0,linenumber,address\n");
			break;

			case N_SSYM:
			printf("Stab = N_SSYM - structure elt: name,,0,type,struct_offset\n");
			break;

			case N_SO:
			printf("Stab = N_SO - source file name: name,,0,0,address\n");
			break;

			case N_LSYM:
			printf("Stab = N_LSYM - local sym: name,,0,type,offset\n");
			break;

			case N_SOL:
			printf("Stab = N_SOL - #included file name: name,,0,0,address\n");
			break;

			case N_PSYM:
			printf("Stab = N_PSYM - parameter: name,,0,type,offset\n");
			break;

			case N_ENTRY:
			printf("Stab = N_ENTRY - alternate entry: name,linenumber,address\n");
			break;

			case N_LBRAC:
			printf("Stab = N_LBRAC - left bracket: 0,,0,nesting level,address\n");
			break;

			case N_RBRAC:
			printf("Stab = N_RBRAC - right bracket: 0,,0,nesting level,address\n");
			break;

			case N_BCOMM:
			printf("Stab = N_BCOMM - begin common: name,,\n");
			break;

			case N_ECOMM:
			printf("Stab = N_ECOMM - end common: name,,\n");
			break;

			case N_ECOML:
			printf("Stab = N_ECOML - end common (local name): ,,address\n");
			break;

			case N_LENG:
			printf("Stab = N_LENG - second stab entry with length information\n");
			break;

			case N_PC:
			printf("Stab = N_PC - global pascal symbol: name,,0,subtype,line\n");
			break;

			default:
			printf("No stab bits set\n");
		}

		printf("n_type: %#x, n_other: %#x, n_desc: %#x\n",
			symbol_table[item].n_type, symbol_table[item].n_other,
			symbol_table[item].n_desc);
		printf("Value of symbol (or offset): %#x\n",symbol_table[item].n_value);
	}
}


/* compare offsets of two symbols */
/* return -neg if (A < B), 0 if == or > 0 if (A > B) */
int
cmp_symbols(a, b)
struct nlist *a;
struct nlist *b;
{
	return (a->n_value - b->n_value);
}

/* Sort symbols into pc offset order */
/* Unfortunately the ARM assembler throws out its symbols in a completely */
/* aribitary order, so we have to sort via pc offset and fix some problems */
/* of ordering within each pc offset */
void
sort_symbols(symbol_table, num_symbols, symbol_names)
struct nlist *symbol_table;
int num_symbols;
char *symbol_names;
{
	int thisoffset;
	struct nlist *last_free_pos;
	struct nlist tmp;
	int	i=0;

	int oldposX, posX = 0;
	int dataNlen, dataN = 1;
	char dataWanted[50];

	/* sort into pc offset order */
	qsort(symbol_table, num_symbols, sizeof(struct nlist), cmp_symbols);

	/* make sure that if a module directive is at offset 0, that it is
	   the first directive to be output to the object file */

	/* if any labels at offset 0 and first is not a module directive */
	/* (must also check for any absolute symbol (equ) that may be at  */
	/*  start as this doesn't contain a valid offset) */
	if ((symbol_table->n_type & N_TYPE) != N_TEXT || (symbol_table->n_value == 0 &&
	     ! PARTCMP(&symbol_names[symbol_table->n_un.n_strx], ".H_module_")))
	{
		/* look at all symbols at offset 0 */
		for (i=1; i < num_symbols && (symbol_table[i].n_value == 0
		          || (symbol_table[i].n_type & N_TYPE) != N_TEXT); i++)
		{
/*debug - fprintf(stderr,"look at->%s\n",&symbol_names[symbol_table[i].n_un.n_strx]);*/
			/* if we found it */
			if (PARTCMP(&symbol_names[symbol_table[i].n_un.n_strx], ".H_module_"))
			{
				/* swap module directive to first label */
				tmp = *symbol_table;
				*symbol_table = symbol_table[i];
				symbol_table[i] = tmp;
				break;
			}
		}
		if (!PARTCMP(&symbol_names[symbol_table[0].n_un.n_strx], ".H_module_"))
		{
			fprintf(stderr,"munge: Warning - no module directive at offset zero\n");
			i=0;
		}
		else
			i=1; /* skip past module diretive */
	}

	/* make sure that any offsets that share a number of directives */
	/* always have their labels defined first so that subsequent */
	/* directives at the same offset dont change the offset */
	/* under the labels feet so to speak! */
	while (i < num_symbols )
	{
		last_free_pos = NULL;
		thisoffset = symbol_table[i].n_value;
	
		/* while multiple directives/labels at same offset */
		while(symbol_table[i].n_value == thisoffset)
		{
			/* if not a real label */
			if(PARTCMP(&symbol_names[symbol_table[i].n_un.n_strx], ".H_"))
			{
				if (!last_free_pos)
					last_free_pos = &symbol_table[i];
			}
			/* is a label and directives preceed it */
			else if (last_free_pos)
			{
				/* swap label to first free non label pos */
				/* at this offset */
				tmp = *last_free_pos;
				*last_free_pos = symbol_table[i];
				symbol_table[i] = tmp;
				/* find next free pos */
				/* guaranteed to find one at this offset */
				/* as we have just swapped */
				while (!PARTCMP(&symbol_names[
				       (++last_free_pos)->n_un.n_strx], ".H_")) ; /*null stat*/
			}
			if (++i >= num_symbols)
				break;
		}		
	}
	
	/* make sure that any data directives in the symbol table are */
	/* in the correct order (otherwise .def files and their associated */
	/* libraries will be inconsistent! */

	while(posX < num_symbols)
	{
	  /* work out target data directive */
	  dataNlen = sprintf(dataWanted,".H_data_%d_",dataN);

	  /* find next data directive */
	  while(!PARTCMP(&symbol_names[symbol_table[posX].n_un.n_strx], ".H_data_"))
	  {
	     if(++posX >= num_symbols)
	       goto NoMoreSyms;
	  }

	  /* is the data directive in correct sequence? */
	  if(strncmp(&symbol_names[symbol_table[posX].n_un.n_strx],
                    dataWanted, dataNlen) != 0)
	  {

/*debug -  fprintf(stderr,"+++ looking for %s\n",dataWanted);*/

	     /* not in sequence, so find correct data dir and swap */
	     oldposX = posX; /* remember out of seq pos */
	     while(strncmp(&symbol_names[symbol_table[posX].n_un.n_strx],
                    dataWanted, dataNlen) != 0)
             {
	       if(++posX >= num_symbols)
	         goto NoMoreSyms;
             }	  	

            /* swap next data directive in sequnce with out of seq dir. */
            tmp = symbol_table[posX];
            symbol_table[posX] = symbol_table[oldposX];
            symbol_table[oldposX] = tmp;

/*debug   fprintf(stderr, "+++ swapping with %s\n",&symbol_names[symbol_table[posX].n_un.n_strx]);*/

            posX=oldposX; /* find next dir after one we swapped */
          }

          else {
/*debug -   fprintf(stderr, "+++ in sequence >%s\n",&symbol_names[symbol_table[posX].n_un.n_strx]);*/
	  }          	
         
          posX++;
          dataN++; /* look for next data dir in sequence */
	}
NoMoreSyms:;

	/* now make sure that any CODETABLE directives in the symbol table */
	/* are in the correct order (otherwise .def files and their */
	/* associated libraries will be inconsistent! - an SMT addition. */

	posX = 0;
	dataN = 1;
	
	while(posX < num_symbols)
	{
	  /* work out target data directive */
	  dataNlen = sprintf(dataWanted,".H_codetable_%d_",dataN);

	  /* find next data directive */
	  while(!PARTCMP(&symbol_names[symbol_table[posX].n_un.n_strx], ".H_codetable_"))
	  {
	     if(++posX >= num_symbols)
	       goto NoMoreCodeSyms;
	  }

	  /* is the CODETABLE directive in correct sequence? */
	  if(strncmp(&symbol_names[symbol_table[posX].n_un.n_strx],
                    dataWanted, dataNlen) != 0)
	  {

/*debug -  fprintf(stderr,"+++ looking for codesym %s\n",dataWanted);*/

	     /* not in sequence, so find correct data dir and swap */
	     oldposX = posX; /* remember out of seq pos */
	     while(strncmp(&symbol_names[symbol_table[posX].n_un.n_strx],
                    dataWanted, dataNlen) != 0)
             {
	       if(++posX >= num_symbols)
	         goto NoMoreCodeSyms;
             }	  	

            /* swap next data directive in sequnce with out of seq dir. */
            tmp = symbol_table[posX];
            symbol_table[posX] = symbol_table[oldposX];
            symbol_table[oldposX] = tmp;

/*debug   fprintf(stderr, "+++ swapping with codesym %s\n",&symbol_names[symbol_table[posX].n_un.n_strx]);*/

            posX=oldposX; /* find next dir after one we swapped */
          }

          else {
/*debug -   fprintf(stderr, "+++ codesym in sequence >%s\n",&symbol_names[symbol_table[posX].n_un.n_strx]);*/
	  }          	
         
          posX++;
          dataN++; /* look for next data dir in sequence */
	}
NoMoreCodeSyms:;
}

void
munge(text_seg, text_size, symbol_table, num_symbols, symbol_names, outf)
char	*text_seg;
int	text_size;
struct nlist	*symbol_table;
int	num_symbols;
char	*symbol_names;
FILE	*outf;
{
	int	next_dir_offset = symbol_table->n_value; /* offset of first directive */
	int	current_dir = 0;
	int	text_offset = 0;
	int	block;
	char	*name;

	while (text_offset < text_size || current_dir < num_symbols)
	{
		if (text_offset < next_dir_offset)
		{
			/* generate a CODE block */
			block = next_dir_offset - text_offset;	/* size of code block */
#if 0
/* debug - printf("+++ generate a CODE block size = %d\n",block); */
/*debug*/			printf("+++ text_offset = %d\n",text_offset);
/*debug*/			printf("+++ text_size= %d\n",text_size);
/*debug*/			printf("+++ next_dir_offset = %d\n",next_dir_offset);
/*debug*/			printf("+++ current_dir, num_symb= %d,%d\n",current_dir, num_symbols);
#endif
			putc(OBJCODE, outf);			/* code block header */
			write_enc(block, outf);			/* encoded size */

			if (fwrite(&text_seg[text_offset], block, 1, outf) != 1)
			{
				fprintf(stderr,"munge: Error writing output file\n");
				exit(11);
			}

			text_offset += block;
		}
		else
		{
			/* generate Helios directives */
			
			/* extract name of symb from string table */
			name = &symbol_names[symbol_table[current_dir].n_un.n_strx];
			
			if (!PARTCMP(name, ".H_")) /* embedded directive? */
			{
				if ((symbol_table[current_dir].n_type & N_TYPE) == N_TEXT)
				{
					/* generate a LABELREF for a normal symbol */
					putc(OBJLABEL, outf);
					fputs(name, outf);
					fputc('\0', outf);
				}
			}
			else
			{
				/* generate a directive embedded in symbol name */
				name += 3; /* skip .H_ prefix */

				if (PARTCMP(name, "init"))
				{
					putc(OBJINIT, outf);
					text_offset += 4; /* remove place holder (used to keep pc relative addressing correct) */
				}

#if 0
				else if (PARTCMP(name, "bss"))
				{
					putc(OBJBSS, outf);
					/* write out size */
					/* & inc text_offset */
					
				}
#endif
				else if (PARTCMP(name, "module"))
				{
					putc(OBJMODULE, outf);

					/* skip past 'module_xxx_' */
					name += sizeof("module_") - 1;
					while (*name++ != '_') ;/*null stat*/
					if (strcmp(name, "undef") == 0)
						write_enc(-1, outf);
					else
						write_enc(atoi(name), outf);
				}
				else if (PARTCMP(name, "data"))
				{
					putc(OBJDATA, outf);
					name += sizeof("data_") - 1;
					while (*name++ != '_'); /* step over number */
					write_enc(atoi(name), outf); /* size of data */
					while(*name++ != '_') ;/*null stat*/
					fputs(name, outf); /* data label */
					fputc('\0', outf);
				}
				else if (PARTCMP(name, "common"))
				{
					putc(OBJCOMMON, outf);
					name += sizeof("common_") - 1;
					write_enc(atoi(name), outf); /* size of common */
					while(*name++ != '_') ;/*null stat*/
					fputs(name, outf); /* common data label */
					fputc('\0', outf);
				}
				else if (PARTCMP(name, "global"))
				{
					putc(OBJGLOBAL, outf);
					name += sizeof("global_") - 1;
					while(*name++ != '_') ;/*null stat*/
					fputs(name, outf);
					fputc('\0', outf);
				}
				else if (PARTCMP(name, "codetable"))
				{
					putc(OBJCODETABLE, outf);
					name += sizeof("codetable_") - 1;
					while(*name++ != '_') ;/*null stat*/
					fputs(name, outf);
					fputc('\0', outf);
				}
				else if (PARTCMP(name, "libref"))
				{
					putc(OBJLIBREF, outf);
					name += sizeof("libref_") - 1;
					while(*name++ != '_') ;/*null stat*/
					fputs(name, outf);
					fputc('\0', outf);
				}
				else if (PARTCMP(name, "patch_"))
				{
					name += sizeof("patch_") - 1;

					if (PARTCMP(name, "byte"))
					{
						putc(OBJBYTE, outf);
						text_offset++; /* adjust pc rel place holder */
						name += sizeof("byte_") - 1;
					}
					else if (PARTCMP(name, "shrt"))
					{
						putc(OBJSHORT, outf);
						text_offset += 2;
						name += sizeof("shrt_") - 1;
					}
					else if (PARTCMP(name, "word"))
					{
						putc(OBJWORD, outf);
						text_offset += 4;
						name += sizeof("word_") - 1;
					}
					else if (PARTCMP(name, "armdt"))
					{
						putc(OBJWORD, outf);
						putc(PATCH_ARM_DT, outf);
						name += sizeof("armdt_") - 1;
						/* write out data for patch to work on */
						write_enc(*(long *)&text_seg[text_offset], outf);
						text_offset += 4;
					}
					else if (PARTCMP(name, "armdp_"))
					{
						putc(OBJWORD, outf);
						putc(PATCH_ARM_DP, outf);
						name += sizeof("armdp_") - 1;
						write_enc(*(long *)&text_seg[text_offset], outf);
						text_offset += 4;
					}
					else if (PARTCMP(name, "armlsbdp_"))
					{
						putc(OBJWORD, outf);
						putc(PATCH_ARM_DP_LSB, outf);
						name += sizeof("armlsbdp_") - 1;
						write_enc(*(long *)&text_seg[text_offset], outf);
						text_offset += 4;
					}
					else if (PARTCMP(name, "armrestdp_"))
					{
						putc(OBJWORD, outf);
						putc(PATCH_ARM_DP_REST, outf);
						name += sizeof("armrestdp_") - 1;
						write_enc(*(long *)&text_seg[text_offset], outf);
						text_offset += 4;
					}
					else if (PARTCMP(name, "armjp"))
					{
						putc(OBJWORD, outf);
						putc(PATCH_ARM_JP, outf);
						name += sizeof("armjp_") - 1;
						write_enc(*(long *)&text_seg[text_offset], outf);
						text_offset += 4;
					}
					else
					{
						fprintf(stderr,"munge: Error, unrecognised patch type\n");
						exit(13);
					}


					/* generate common parts of patch directives */

					if (PARTCMP(name, "imagesize"))
						putc(OBJIMAGESIZE, outf);

					else if (PARTCMP(name, "modnum"))
						putc(OBJMODNUM, outf);

					else if (PARTCMP(name, "modtaboff"))
					{
						putc(PATCH_SHIFT, outf);
						putc(2, outf);
						putc(OBJMODNUM, outf);
					}
					else if (PARTCMP(name, "mod3taboff"))
					{
						putc(PATCH_SHIFT, outf);
						putc(3, outf);
						putc(OBJMODNUM, outf);
					}
					else if (PARTCMP(name, "datasymb"))
					{
						putc(OBJDATASYMB, outf);
						name += sizeof("datasymb_") - 1;
						while(*name++ != '_') ;/*null stat*/
						fputs(name, outf);
						fputc('\0', outf);
					}
					else if (PARTCMP(name, "codesymb"))
					{
						putc(OBJCODESYMB, outf);
						name += sizeof("codesymb_") - 1;
						while(*name++ != '_') ;/*null stat*/
						fputs(name, outf);
						fputc('\0', outf);
					}

					else if (PARTCMP(name, "datamodule"))
					{
						putc(OBJDATAMODULE, outf);
						name += sizeof("datamodule_") - 1;
						while(*name++ != '_') ;/*null stat*/
						fputs(name, outf);
						fputc('\0', outf);
					}

					else if (PARTCMP(name, "labelref"))
					{
						putc(OBJLABELREF, outf);
						name += sizeof("labelref_") - 1;
						while(*name++ != '_') ;/*null stat*/
						fputs(name, outf);
						fputc('\0', outf);
					}
					else
					{
						fprintf(stderr, "munge: Error, unknown patch type in patch\n");
						exit(12);
					}
				}
				else
				{
					fprintf(stderr, "munge: Error, unknown Helios directive embedded in symbol table\n");
					exit(15);
				}
			}

			if(++current_dir < num_symbols)
				while ((symbol_table[current_dir].n_type & N_TYPE) != N_TEXT
				       && (++current_dir < num_symbols) ) ; /*null stat*/

			if(current_dir < num_symbols)
				next_dir_offset = symbol_table[current_dir].n_value;
			else
				next_dir_offset = text_size; /* code block size is distance to next symbol */
		}
	}
}

/************************************************************************/
/* Write/Read in a number out in Helios encoded format.			*/
/* This is similar to the encoding of the transputer instruction set.	*/
/* Only use as many bytes as necessary to describe a number:		*/
/* Set top bit of byte if another follows it, set penultimate top bit	*/
/* of first byte if number is negative, continue setting top bit of	*/
/* byte and shifting the number ad infinitum until number complete	*/
/* the 'Helios Link Format for Non-Transputer Processors' document	*/
/* describes this in more detail					*/
/************************************************************************/
void
write_enc(n, fp)
int n;
FILE *fp;
{
	putc( n < 0 ? Enc(-n, ENC_NEG, fp) : Enc(n, 0, fp), fp);
}

unsigned Enc(n, nflag, fp)
unsigned n;
int nflag;
FILE *fp;
{
	if (n >> 6 == 0)
		return ((n & BOT6BITS) | nflag);

	putc( Enc(n >> 7, nflag, fp) | ENC_MORE, fp);

	return(n & BOT7BITS);
}

#if 0
/* read in an encoded number */
int read_enc(FILE *fp)
{
   int ch = getc(fp);
   int nflag = (ch & ENC_NEG) != 0;
   int r = ch & BOT6BITS;

   while( (ch & ENC_MORE) != 0 )
   {
	ch = getc(fp);
	r  = (r << 7) + (ch & BOT7BITS);
   }
   return nflag? -r: r;
}
#endif

@


1.2
log
@*** empty log message ***
@
text
@d48 1
d755 8
a762 1

@


1.1
log
@Initial revision
@
text
@@
