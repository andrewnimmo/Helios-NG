head	1.6;
access;
symbols
	Helios_1_3_1:1.6
	Helios_C40_1_3_Official_Release:1.6
	Alenia_release:1.6
	Helios1_3:1.6
	C40_Field_Test_2:1.6
	C40_Field_Test_R1:1.5
	Helios13_beta:1.5
	Helios1_2_2:1.3
	Helios1_2_2Beta:1.3
	Helios1_2_1:1.2
	Helios1_2:1.2;
locks; strict;
comment	@ * @;


1.6
date	92.10.12.15.39.34;	author bart;	state Exp;
branches;
next	1.5;

1.5
date	92.04.08.09.33.55;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	92.04.07.16.18.23;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	91.04.14.16.02.23;	author bart;	state Exp;
branches;
next	1.2;

1.2
date	90.08.23.09.52.40;	author james;	state Exp;
branches;
next	1.1;

1.1
date	90.08.22.16.01.49;	author james;	state Exp;
branches;
next	;


desc
@catenate and prints files
@


1.6
log
@Removed spurious conditional compilation, plus Close() of an
uninitialised variable.
@
text
@/***************************************************************************
 ***************************************************************************
 **	CAT COMMAND for HELIOS                                            **
 **	Russell Bradford - University of Bath				  **
 **	2 March 1988	                                                  **
 ***************************************************************************
 ***************************************************************************/

/* Revision history:
 * Started somtime in the past
 * Brought up to spec of SUN man page 2 March 88
 * Helios-ized by John Fitch 19 April 1988
 * Stdin to work with redirection, and use flags  PAB 19/5/88
 * Opened file in text mode to stop appending of ^m on end of line JMP 07/11/89
 * Checked equality of input and output to give warning, BLV 14/4/91
 */

/* Notes:
 *   Extras are multiple flags, eg 'cat -sv foo', rather than 'cat -s -v foo';
 *   also, eg 'cat foo -n foo' will cat two copies of foo, the second with line
 *   numbers.
 *   A bit more fussy about catting non-files
 */

static char *rcsid = "$Header: /users/bart/hsrc/cmds/com/RCS/cat.c,v 1.5 1992/04/08 09:33:55 nickc Exp bart $";

#include <stdio.h>
#include <unistd.h>
#include <syslib.h>
#include <gsp.h>
#include <string.h>
#include <nonansi.h>
#include <servlib.h>

long uflag = FALSE;
long nflag = FALSE;
long sflag = FALSE;
long vflag = FALSE;
long bflag = FALSE;
long tflag = FALSE;
long eflag = FALSE;
long new_line = FALSE;


/* output a char, taking into account the -s, -n, -b, or -e flags */

void
out_char( char ch )
{
  static int 	squish_count = 0;
  static int 	line_count   = 1;
  char 		num[ 10 ];
  int 		i;

  
  if (sflag) 			/* squish multiple newlines */
    {
      if (ch == '\n')
	{
	  squish_count++;
	  
	  if (squish_count > 2)
	    return;
	}
      else
	{
	  squish_count = 0;
	}
    }

  if (nflag && new_line) 		/* number a new line */
    {
      if (!bflag || ch != '\n') 	/* but not if it is blank */
	{
	  sprintf( num, "%6d  ", line_count++ );

	  for (i = 0; i < 8; i++)
	    putchar( num[ i ] );
	}

      new_line = FALSE;
    }

  if (ch == '\n')
    {
      if (eflag)
	putchar( '$' );	/* put a $ at EOL */

      new_line = TRUE;
    }
  
  putchar( ch );

  return;
  
} /* out_char */


/* output an ASCII character, prefacing it with ^ or M- as necessary */

void
out_escaped_char( char ch )
{
  if (ch & 0200)
    {
      out_char( 'M' );
      out_char( '-' );
      
      ch &= 0177;			/* clear top bit */
    }

  if ((ch >= ' ' && ch < 0177) || ch == '\n')
    {
      out_char( ch );
    }
  else if (ch == 0177) 	/* ch = delete */
    {
      out_char( '^' );
      out_char( '?' );
    }
  else 			/* control char */
    {
      if (ch == '\t' && !tflag)
	{
	  out_char( ch );
	}
      else
	{
	  out_char( '^' );
	  out_char( ch + '@@' );
	}
    }

  return;
  
} /* out_escaped */

    
/* output a buffer, determining whether to translate control chars */

void
out(
    char *	buf,
    long 	nbytes )
{
  long 		i;


  if (vflag)			/* translate output */
    for (i = 0; i < nbytes; i++)
      out_escaped_char( buf[ i ] );
  else
    for (i = 0; i < nbytes; i++)
      out_char( buf[ i ] );

  return;
  
} /* out */


/* open, copy, and close a file */

void
copy_file( char * f )
{
  byte 		buf[ BUFSIZ ];
  word 		bytes;
  word		i;
  FILE   *	fd;
  Object *	o;


  if ((o = Locate( CurrentDir, f )) == NULL)
    {
      fprintf( stderr, "cat: Can't find '%s'\n", f );

      return;
    }

  unless (o->Type & Type_File)
    {
      fprintf( stderr, "cat: Can't cat '%s': not a file\n", f );
      
      return;
    }

  /* BLV - check for cat'ing a file to itself.	*/
  
  if (!isatty( 1 ))
    if (!strcmp( o->Name, Heliosno( stdout )->Name ))
      {
	fprintf( stderr, "cat: input %s is output\n", objname( o->Name ) );

	return;
      }
    
  if ((fd = fopen( f, "r" )) == NULL)
    {
      fprintf( stderr, "cat: Can't access '%s'\n", f );

      return;
    }

  if (uflag || nflag || sflag || vflag || bflag || tflag || eflag)
    {
      do
	{
	  bytes = fread( buf, 1, BUFSIZ, fd );
	  out( buf, bytes );
	}
      while (bytes > 0);
    }
  else
    {
      while ((bytes = fread( buf, 1, BUFSIZ, fd )) > 0)
	{
	  for (i = 0; i < bytes; i++)
	    {	      
	      putchar( buf[ i ] );
	    }
	}
    }

  fclose( fd );

  Close( o );

  return;
  
} /* out_file */


/* copy across stdin as a special case - we don't want to close it on EOF */
/* PAB fixed redirection and now uses flags correctly */
/* BLV - check for the case "cat < xyz > xyz" */

void
copy_stdin( void )
{
  byte buff[ BUFSIZ ];


  if (!isatty( 0 ))
    if (!strcmp( Heliosno( stdin )->Name, Heliosno( stdout )->Name))
      {
	fputs("cat: input - is output\n", stderr);

	return;
      }
       
  while (fgets( buff, BUFSIZ, stdin ))
    out( buff, strlen( buff ) );

  return;
  
} /* copy_stdin */


void
bad_arg( char a )
{
  fprintf( stderr, "cat: Bad arg -'%c'\n", a );

  return;
  
} /* bad_arg */


int
main(
  int 		argc,
  char **	argv )
{
  long i, file;

  
  file = FALSE;			/* true if a file in the arglist */

  for (i = 1; i < argc; i++)
    if (argv[ i ][ 0 ] == '-')
      {
	switch (argv[ i ][ 1 ])
	  {
	  case 'u':
	    uflag = TRUE;
	    break;
	    
	  case 'n':
	    nflag    = TRUE;
	    new_line = TRUE;
	    break;
	    
	  case 's':
	    sflag = TRUE;
	    break;
	    
	  case 'v':
	    vflag = TRUE;
	    break;
	    
	  case 'b':
	    bflag    = TRUE;
	    nflag    = TRUE;
	    new_line = TRUE;
	    break;

	  case 't':
	    tflag = TRUE;
	    vflag = TRUE;
	    break;

	  case 'e':
	    eflag = TRUE;
	    vflag = TRUE;
	    break;

	  case 0:			/* lone '-' */
	    copy_stdin();
	    file = TRUE;
	    break;

	  default:
	    bad_arg( argv[ i ][ 1 ] );
	    break;
	  }
	
	if (argv[ i ][ 1 ] != 0 &&
	    argv[ i ][ 2 ] != 0)
	  {
	    /* multiple arg */

	    argv[i]++;
	    argv[i][0] = '-';	/* nudge it along */
	    i--;			/* defeat loop counter */
	  }
      }
    else
      {
	copy_file( argv[ i ] );
	
	file = TRUE;
      }

  if (!file)
    copy_stdin();

  return 0;

} /* main */
@


1.5
log
@minor cosmetic changes
@
text
@d25 1
a25 1
static char *rcsid = "$Header: /hsrc/cmds/com/RCS/cat.c,v 1.4 1992/04/07 16:18:23 nickc Exp nickc $";
a168 1
  Stream *	d;
a196 3
#ifdef BUG
  if ((d = Open( o, NULL, O_ReadOnly )) == NULL)
#else
a197 1
#endif
a207 3
#ifdef BUG
	  bytes = Read( d, buf, BUFSIZ, -1 );
#else
a208 1
#endif
a214 3
#ifdef BUG
      while ((bytes = Read( d, buf, BUFSIZ, -1 )) > 0)
#else
a215 1
#endif
a223 1
#ifndef BUG
d225 1
a225 3
#endif
  
  Close( d );
@


1.4
log
@removed warning produced by new Norcroft compiler
@
text
@d25 1
a25 1
static char *rcsid = "$Header: /users/bart/hsrc/cmds/com/RCS/cat.c,v 1.3 1991/04/14 16:02:23 bart Exp $";
d35 7
a41 2
long uflag = FALSE, nflag = FALSE, sflag = FALSE, vflag = FALSE,
    bflag = FALSE, tflag = FALSE, eflag = FALSE;
a43 7
				/* Forward definitions */
void copy_stdin(void);
void out(char *buf,long nbytes);
void out_escaped_char(char ch);
void out_char(char ch);
void copy_file(char *f);
void bad_arg(char a);
d45 1
d47 2
a48 3
int main(argc,argv)
int argc;
char **argv;
d50 38
a87 1
  long i, file;
d89 1
a89 43
  file = FALSE;			/* true if a file in the arglist */
  for (i = 1; i < argc; i++)
    if (argv[i][0] == '-') {
      switch (argv[i][1]) {
      case 'u':
	uflag = TRUE;
	break;
      case 'n':
	nflag = TRUE;
	new_line = TRUE;
	break;
      case 's':
	sflag = TRUE;
	break;
      case 'v':
	vflag = TRUE;
	break;
      case 'b':
	bflag = TRUE;
	nflag = TRUE;
	new_line = TRUE;
	break;
      case 't':
	tflag = TRUE;
	vflag = TRUE;
	break;
      case 'e':
	eflag = TRUE;
	vflag = TRUE;
	break;
      case 0:			/* lone '-' */
	copy_stdin();
	file = TRUE;
	break;
      default:
	bad_arg(argv[i][1]);
	break;
      }
      if (argv[i][1] != 0 && argv[i][2] != 0) { /* multiple arg */
	argv[i]++;
	argv[i][0] = '-';	/* nudge it along */
	i--;			/* defeat loop counter */
      }
d91 2
a92 5
  else {
    copy_file(argv[i]);
    file = TRUE;
  }
  if (!file) copy_stdin();
d94 6
a99 2
  return 0;
}
d101 2
a102 4
/* copy across stdin as a special case - we don't want to close it on EOF */
/* PAB fixed redirection and now uses flags correctly */
/* BLV - check for the case "cat < xyz > xyz" */
void copy_stdin()
d104 7
a110 1
  byte buff[BUFSIZ];
d112 20
a131 4
  if (!isatty(0))
   if (!strcmp(Heliosno(stdin)->Name, Heliosno(stdout)->Name))
    { fputs("cat: input - is output\n", stderr);
      return;
d133 27
a159 4
       
  while (fgets(buff,BUFSIZ,stdin))
 	out(buff,strlen(buff));
}
d162 3
a164 2
void copy_file(f)
char *f;
d166 19
a184 19
  byte buf[BUFSIZ];
  word bytes, i;
  Stream *d;
  FILE   *fd;
  Object *o;

  if ((o = Locate(CurrentDir,f)) == NULL) {
    fprintf(stderr,"cat: Can't find '%s'\n",f);
    return;
  }
  unless (o->Type & Type_File) {
    fprintf(stderr,"cat: Can't cat '%s': not a file\n",f);
    return;
  }

	/* BLV - check for cat'ing a file to itself.	*/
  if (!isatty(1))
   if (!strcmp(o->Name, Heliosno(stdout)->Name))
    { fprintf(stderr, "cat: input %s is output\n", objname(o->Name));  
d187 10
d198 2
a199 5
#ifndef BUG
  if ((fd = fopen(f,"r")) == NULL) {
    fprintf(stderr,"cat: Can't access '%s'\n",f);
    return;
  }
d201 1
a201 4
  if ((d = Open(o,NULL,O_ReadOnly)) == NULL) {
    fprintf(stderr,"cat: Can't open '%s'\n",f);
    return;
  }
d203 6
d210 5
a214 3
    do {
#ifndef BUG
      bytes = fread(buf,1,BUFSIZ,fd);
d216 1
a216 1
      bytes = Read(d,buf,BUFSIZ,-1);
d218 4
a221 2
      out(buf,bytes);
    } while (bytes > 0);
d223 3
a225 2
#ifndef BUG
    while ((bytes = fread(buf,1,BUFSIZ,fd)) > 0)
d227 1
a227 1
    while ((bytes = Read(d,buf,BUFSIZ,-1)) > 0)
d229 7
a235 2
	for (i = 0; i < bytes; i++)
		putchar(buf[i]);
d238 9
a246 5
  fclose(fd);
#endif 
  Close(d);
  Close(o);
}
d248 7
a254 4
/* output a buffer, determining whether to translate control chars */
void out(buf,nbytes)
char *buf;
long nbytes;
d256 13
a268 1
  long i;
d270 4
a273 7
  if (vflag)			/* translate output */
    for (i = 0; i < nbytes; i++)
      out_escaped_char(buf[i]);
  else
    for (i = 0; i < nbytes; i++)
      out_char(buf[i]);
}
d275 2
a276 2
/* output an ASCII character, prefacing it with ^ or M- as necessary */
void out_escaped_char(char ch)
d278 6
a283 20
  if (ch & 0200) {
    out_char('M');
    out_char('-');
    ch &= 0177;			/* clear top bit */
  }
  if ((ch >= ' ' && ch < 0177) || ch == '\n')
    out_char(ch);
  else if (ch == 0177) {	/* ch = delete */
    out_char('^');
    out_char('?');
  }
  else {			/* control char */
    if (ch == '\t' && !tflag)
      out_char(ch);
    else {
      out_char('^');
      out_char(ch + '@@');
    }
  }
}
d285 4
a288 2
/* output a char, taking into account the -s, -n, -b, or -e flags */
void out_char(char ch)
d290 1
a290 25
  static int squish_count = 0;
  static int line_count = 1;
  char num[10];
  int i;

  if (sflag) {			/* squish multiple newlines */
    if (ch == '\n') {
      squish_count++;
      if (squish_count > 2) return;
    }
    else squish_count = 0;
  }
  if (nflag && new_line) {	/* number a new line */
    if (!bflag || ch != '\n') {	/* but not if it is blank */
      sprintf(num,"%6d  ",line_count++);
      for (i = 0; i < 8; i++) putchar(num[i]);
    }
    new_line = FALSE;
  }
  if (ch == '\n') {
    if (eflag) putchar('$');	/* put a $ at EOL */
    new_line = TRUE;
  }
  putchar(ch);
}
d292 74
a365 4
void bad_arg(char a)
{
  fprintf(stderr,"cat: Bad arg -'%c'\n",a);
}
@


1.3
log
@Now compares input and output streams and produces a warning if these
are the same, as per Unix cat.
@
text
@d25 1
a25 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/cat.c,v 1.2 90/08/23 09:52:40 james Exp $";
d35 1
a35 1
int uflag = FALSE, nflag = FALSE, sflag = FALSE, vflag = FALSE,
d37 1
a37 1
int new_line = FALSE;
d41 1
a41 1
void out(char *buf,int nbytes);
d52 1
a52 1
  int i, file;
d189 1
a189 1
int nbytes;
d191 1
a191 1
  int i;
@


1.2
log
@*** empty log message ***
@
text
@d15 1
d25 1
a25 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/cat.c,v 1.1 90/08/22 16:01:49 james Exp Locker: james $";
d28 1
d32 2
d109 1
d113 7
a119 1
  
d142 8
a149 1
  
@


1.1
log
@Initial revision
@
text
@d24 1
a24 1
static char rcsid[] = "$Header$";
@
