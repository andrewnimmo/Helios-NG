head	1.3;
access;
symbols
	Helios_1_3_1:1.3
	Helios_C40_1_3_Official_Release:1.2
	Alenia_release:1.2
	Helios1_3:1.2
	C40_Field_Test_2:1.2
	C40_Field_Test_R1:1.2
	Helios13_beta:1.2
	Helios1_2_2:1.2
	Helios1_2_2Beta:1.2
	Helios1_2_1:1.2
	Helios1_2:1.2;
locks; strict;
comment	@ * @;


1.3
date	93.07.12.12.26.32;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	90.08.23.10.31.48;	author james;	state Exp;
branches;
next	1.1;

1.1
date	90.08.22.16.37.23;	author james;	state Exp;
branches;
next	;


desc
@directory deletion routine
@


1.3
log
@fixed compile time warnings
@
text
@/***************************************************************************
*
*   rmdir - remove redundant directory.
*	    Directory must be empty before attempting to remove.
*
*   Written by : paulh aka PRH - by judiciously hacking the rm utility 
*   Date       : 21/8/90
****************************************************************************/

static char *rcsid = "$Header: /hsrc/cmds/com/RCS/rmdir.c,v 1.2 1990/08/23 10:31:48 james Exp nickc $";

#include <stdio.h>
#include <stdlib.h>
#include <syslib.h>
#include <gsp.h>
#include <string.h>

int     errors = 0;
int     pflag = 0;
char*	progname;

void usage () {
    fprintf(stderr,"Usage: %s [-p] <directory list>\n", progname);
    exit (1);
}

void del( char *name )
{ 
  if (strcmp ("..", name) && strcmp (".", name))
  {
    word e;
    e = Delete(CurrentDir,name);
    if ( e < 0  ) 
    { fprintf(stderr,"%s: Cannot remove %s: %lx\n", progname, name, e);
      errors++;
    }
  }
}

char* dirname ( char* name )
{
	int index = strlen ( name ) - 1;

	if ((strcmp (name , "/") == 0) || (strcmp (name , "//") == 0)) {
		return ( "/" );
	}
	
	while ( index && (name[index] == '/') ) {	/* Ommit trailing / */
		name[index] = '\0';
		index--;
	}
		
	while ( ( name[index] != '/' ) && ( index > 0 ) )
		index--;

	if (!index)
	{
		strcpy ( name , "." );
		strcat ( name , "\0" );
	}
	else
	{
		name[index] = '\0';
	}
	return ( name );
}

void rm (char   *name )
{
	int no_entries;
	word dirsize;
	Stream *s;
	int     isdir;

	Object *o = Locate(CurrentDir,name);

	if( o == Null(Object) )
	{	fprintf(stderr,"Cannot find %s : %lx\n",name, Result2(CurrentDir));
		errors++;
		return;
	}

	isdir = (int)(o->Type & Type_Directory);

    	if (!isdir) 
	{ 	fprintf(stderr,"%s: %s is not a directory\n", progname, name);
		errors++;
		return;
		}
		
	Close (o);
	del(name); 
	
	while ( pflag && ( strcmp ( ( name = dirname (name) ) , "." ) != 0 ) ) {
		o = Locate(CurrentDir,name);
		if( o == Null(Object) )
		{	fprintf(stderr,"Cannot find %s : %lx\n",name, Result2(CurrentDir));
			errors++;
			return;
		}
		
		s = Open(o,NULL,O_ReadOnly);
			
		if( s == Null(Stream) )
		{
			fprintf(stderr,"Cannot open %s : %lx\n",name,Result2(o));
			errors++;
			return;
		}
		
		dirsize = GetFileSize(s);
		
		Close(s);
		Close(o);
					
		no_entries = (int)dirsize/sizeof(DirEntry);
		if (no_entries == 2)
			del (name);
			/* Having only two entries namely . and .. the directory 'name' will be deleted */
			/* without complaint from 'delete'. 						*/
		}	
	return;
}

int main (
	  int     argc,
	  char   *argv[] )
{
  int exstatus;
    char   *opt;

    progname =*argv;
    if (argc < 2)
	usage ();
    argv++;
    --argc;
    while (**argv == '-') {
	opt = *argv;
	while (*++opt != '\0')
	    switch (*opt) {
		case 'p': 
		    pflag++;
		    break;
		default: 
		    fprintf(stderr,"%s: unknown option %c\n", progname, *opt);
		    usage ();
		    break;
	    }
	argc--;
	++argv;
    }
    if (argc < 1) usage ();
    while (argc--) rm (*argv++);
    exstatus = (errors == 0 ? 0 : 1);
    return (exstatus);
}
@


1.2
log
@*** empty log message ***
@
text
@d10 1
a10 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/rmdir.c,v 1.1 90/08/22 16:37:23 james Exp Locker: james $";
a17 2
extern Object *CurrentDir;

d22 4
a25 10
void usage (void);
void rm (char *);
void delete (char *);
char* dirname ( char * ); /* N.B. Performs function of dirname shell utility as per POSIX specification */

int main (argc, argv)
int     argc;
char   *argv[];
{   int exstatus;
    char   *opt;
d27 9
a35 19
    progname =*argv;
    if (argc < 2)
	usage ();
    argv++;
    --argc;
    while (**argv == '-') {
	opt = *argv;
	while (*++opt != '\0')
	    switch (*opt) {
		case 'p': 
		    pflag++;
		    break;
		default: 
		    fprintf(stderr,"%s: unknown option %c\n", progname, *opt);
		    usage ();
		    break;
	    }
	argc--;
	++argv;
d37 1
a37 4
    if (argc < 1) usage ();
    while (argc--) rm (*argv++);
    exstatus = (errors == 0 ? 0 : 1);
    return (exstatus);
d40 26
a65 3
void usage () {
    fprintf(stderr,"Usage: %s [-p] <directory list>\n", progname);
    exit (1);
d68 1
a68 2
void rm (name)
char   *name;
d78 1
a78 1
	{	fprintf(stderr,"Cannot find %s : %x\n",name, Result2(CurrentDir));
d83 1
a83 1
	isdir = o->Type & Type_Directory;
d92 1
a92 1
	delete(name); 
d97 1
a97 1
		{	fprintf(stderr,"Cannot find %s : %x\n",name, Result2(CurrentDir));
d106 1
a106 1
			fprintf(stderr,"Cannot open %s : %x\n",name,Result2(o));
d116 1
a116 1
		no_entries = dirsize/sizeof(DirEntry);
d118 1
a118 1
			delete (name);
d125 3
a127 13
void delete( name )
char *name;
{ int e;
  if (strcmp ("..", name) && strcmp (".", name))
  { e = Delete(CurrentDir,name);
    if ( e < 0  ) 
    { fprintf(stderr,"%s: Cannot remove %s: %x\n", progname, name, e);
      errors++;
    }
  }
}

char* dirname ( char* name )
d129 2
a130 1
	int index = strlen ( name ) - 1;
d132 24
a155 22
	if ((strcmp (name , "/") == 0) || (strcmp (name , "//") == 0)) {
		return ( "/" );
	}
	
	while ( index && (name[index] == '/') ) {	/* Ommit trailing / */
		name[index] = '\0';
		index--;
	}
		
	while ( ( name[index] != '/' ) && ( index > 0 ) )
		index--;

	if (!index)
	{
		strcpy ( name , "." );
		strcat ( name , "\0" );
	}
	else
	{
		name[index] = '\0';
	}
	return ( name );
a156 1

@


1.1
log
@Initial revision
@
text
@d10 1
a10 1
static char rcsid[] = "$Header$";
@
