head	1.5;
access;
symbols
	Helios_1_3_1:1.4
	Helios_C40_1_3_Official_Release:1.4
	Alenia_release:1.4
	Helios1_3:1.4
	C40_Field_Test_2:1.4
	C40_Field_Test_R1:1.4
	Helios13_beta:1.4
	Helios1_2_2:1.4
	Helios1_2_2Beta:1.4
	Helios1_2_1:1.2
	Helios1_2:1.2;
locks; strict;
comment	@ * @;


1.5
date	94.03.14.14.47.24;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	91.06.05.13.32.32;	author martyn;	state Exp;
branches;
next	1.3;

1.3
date	91.04.14.16.14.04;	author bart;	state Exp;
branches;
next	1.2;

1.2
date	90.08.23.09.51.20;	author james;	state Exp;
branches;
next	1.1;

1.1
date	90.08.22.16.00.51;	author james;	state Exp;
branches;
next	;


desc
@makes executables permanently memory resident
@


1.5
log
@fixed compile time warnings
@
text
@
#include <stdio.h>
#include <syslib.h>
#include <stdlib.h>
#include <string.h>
#include <posix.h>
#include <gsp.h>
#include <unistd.h>

char lname[100];
char path[100];
int  load_immediately = 0;

void usage(void)
{
	fprintf(stderr, "usage: cache [-m mc] [-l] cmd...\n");
	exit(1);
}

int main(int argc, char **argv)
{
	Object *loader, *prog;
	char *cmd;
	char *mc = NULL;
	
	if (argc < 2) usage();
	argv++;

	while (**argv == '-')
	 { if ((*argv)[1] == 'm')
	    {
		mc = (*argv) + 2;
		if (*mc == '\0') mc = *(++argv);
		argv++;	
	    }
	   else if ((*argv)[1] == 'l')
	    { load_immediately = 1; argv++; }
           else
            usage();
         }
	if (*argv == NULL) usage();

	strcpy(lname, "/");
	if (mc != NULL)
	{
		strcat(lname, mc);
		strcat(lname, "/");
	}
	strcat(lname, "loader");

	if ((loader = Locate(NULL, lname)) == NULL) 
	{
		fprintf(stderr, "Cannot locate loader %s\n", lname);
		exit(20);
	}
			
	while ((cmd = *argv++) != NULL)
	{
		find_file(path, cmd);

		  /* Get to final part of name */
		{ char *tmp = &(cmd[strlen(cmd)]);
		  while ((*tmp != '/') && (tmp >= cmd)) tmp--;
		  cmd = ++tmp;
		}

		if ((prog = Locate(CurrentDir, path)) == NULL) 
		 { Object *HeliosBin = Locate(Null(Object), "/helios/bin");
		   if (HeliosBin != Null(Object))
		    prog = Locate(HeliosBin, cmd);
		   Close(HeliosBin);
		 }
		if (prog == Null(Object))
		{
			fprintf(stderr, "Cannot locate %s\n", cmd);
			continue;
		}

		if (prog->Type & Type_Directory)
		{
			fprintf(stderr, "Cannot cache directory %s\n", cmd);
			continue;
		}
		
		if (Link(loader, cmd, prog) < 0 )
		{
			fprintf(stderr, "Cannot cache %s\n", cmd);
			continue;
		}

		if (load_immediately)
		 { Stream	*stream = Open(loader, cmd, O_ReadOnly);
		   if (stream != Null(Stream)) Close(stream);
		 }
	}
	return 0;
}

@


1.4
log
@test for directory before Linking !!
fixes bug #367
@
text
@d8 1
@


1.3
log
@1) removed all traces or pre-loading taskforces, because this is not
   going to be supported by the networking software in the foreseeable
   future.
2) added the -l option to pre-load programs immediately instead of
   waiting for them to be accessed
3) commands can now be cached from places other than /helios/bin.
   Absolute pathnames are permitted, and find_file() is used for inside
   shell sessions.
@
text
@d7 1
d75 6
@


1.2
log
@*** empty log message ***
@
text
@a1 2
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/cache.c,v 1.1 90/08/22 16:00:51 james Exp Locker: james $";

d4 3
d10 1
d14 1
a14 5
#ifndef NOTSUPPORTED
	fprintf(stderr, "usage: cache [-m mc] cmd...\n");
#else
	fprintf(stderr, "usage: cache [-m mc | -t] cmd...\n");
#endif
d20 1
a20 1
	Object *tfm, *loader, *prog;
a22 1
	int usetfm = FALSE;
d26 4
a29 3
	
	if (**argv == '-' && (*argv)[1] == 'm')
	{
d33 6
a38 12
	}
	else if (**argv == '-' && (*argv)[1] == 't')
	{
#ifndef NOTSUPPORTED
	        fprintf(stderr, "cache: -t option not supported in this release\n");
		usage();
#else
		usetfm = TRUE;
		argv++;
#endif
	}

d41 2
a42 1
	if (usetfm)
d44 2
a45 5
		if ((tfm = Locate(NULL, "/tfm")) == NULL)
		{
			fprintf(stderr, "Cannot locate TFM\n");
			exit(20);
		}
d47 3
a49 1
	else
d51 2
a52 13
		strcpy(lname, "/");
		if (mc != NULL)
		{
			strcat(lname, mc);
			strcat(lname, "/");
		}
		strcat(lname, "loader");
	
		if ((loader = Locate(NULL, lname)) == NULL) 
		{
			fprintf(stderr, "Cannot locate loader %s\n", lname);
			exit(20);
		}
d59 6
d66 6
d77 1
a77 1
		if (usetfm)
d79 2
a80 5
			if (Load(tfm, prog) == NULL)
			{
				fprintf(stderr, "Cannot cache %s\n", cmd);
				continue;
			}
d82 5
a86 8
		else
		{
			if (Link(loader, cmd, prog) < 0 )
			{
				fprintf(stderr, "Cannot cache %s\n", cmd);
				continue;
			}
		}
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
static char rcsid[] = "$Header$";
@
