head	1.4;
access;
symbols
	Helios_1_3_1:1.4
	Helios_C40_1_3_Official_Release:1.3
	Alenia_release:1.3
	Helios1_3:1.3
	C40_Field_Test_2:1.3
	C40_Field_Test_R1:1.3
	Helios13_beta:1.3
	Helios1_2_2:1.3
	Helios1_2_2Beta:1.2
	Helios1_2_1:1.2
	Helios1_2:1.2;
locks; strict;
comment	@ * @;


1.4
date	93.07.12.11.48.25;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	91.10.21.15.21.18;	author martyn;	state Exp;
branches;
next	1.2;

1.2
date	90.08.23.10.40.22;	author james;	state Exp;
branches;
next	1.1;

1.1
date	90.08.22.16.43.04;	author james;	state Exp;
branches;
next	;


desc
@determines which version of a given command is in use from
the current location
@


1.4
log
@fixed bug in findfile() - this program should never have worked
@
text
@/**
*
* Title:  which
*
* Author: Andy England
*
* Date:   29th April 1988
*
**/

static char *rcsid = "$Header: /hsrc/cmds/com/RCS/which.c,v 1.3 1991/10/21 15:21:18 martyn Exp nickc $";

#include <helios.h>
#include <syslib.h>
#include <gsp.h>
#include <stdio.h>
#include <string.h>
#include <posix.h>
#include <limits.h>

typedef int BOOL;

#define AND &&
#define OR  ||

int which(char *basename);
void formfilename(char *name, char *path, char *basename);
BOOL findfile(char *name);

int main(int argc, char **argv)
{
  int error = 0;

  while (--argc > 0) error += which(*++argv);
  return error;
}

static char name[PATH_MAX + 1];
static char path[PATH_MAX + 1];

int which(char *basename)
{
  char *value, *pathenv;

  unless ((pathenv = value = getenv("PATH")) == NULL)
  {
    int c;

    forever
    {
      int index = 0;

      until ((c = *value++) == ':' OR c == '\0') path[index++] = c;

      path[index] = '\0';
      formfilename(name, path, basename);

      if (findfile(name))
      {
        return 0;
      }

      unless (c == ':') break;
    }
    printf("no %s in ", basename);
    until ((c = *pathenv++) == '\0')
    {
      if (c == ':') putchar(' ');
      else putchar(c);
    }
    putchar('\n');
  }
  return 1;
}

void formfilename(char *name, char *path, char *basename)
{
  if (path[0] == '\0' OR basename[0] == '/') strcpy(name, basename);
  else
  {
    strcpy(name, path);
    strcat(name, "/");
    strcat(name, basename);
  }
}

BOOL findfile(char *name)
{
  Object *cmd;

  if ((cmd = Locate(CurrentDir, name)) == NULL)
    return FALSE;
  Close(cmd);
  if ( cmd->Type & Type_Directory )
    printf("%s is a directory\n", name);
  else
    printf("%s\n",name);
  return TRUE;
}

@


1.3
log
@Jon fixed locate bug and generat not found when locating directories
@
text
@d11 1
a11 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/which.c,v 1.1.1.1 90/09/06 16:53:04 jon Exp $";
a89 1
  BOOL ans;
d91 2
a92 1
  if ((cmd = Locate(CurrentDir, name)) == NULL) return FALSE;
d95 4
a98 4
        printf("%s not found\n", name);
  elif( ans )
  	printf("%s\n",name);
  return ans;
@


1.2
log
@*** empty log message ***
@
text
@d11 1
a11 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/which.c,v 1.1 90/08/22 16:43:04 james Exp Locker: james $";
a59 1
        printf("%s\n", name);
a92 1
  ans = cmd->Type & Type_Directory;
d94 4
@


1.1
log
@Initial revision
@
text
@d11 1
a11 1
static char rcsid[] = "$Header$";
@
