head	1.3;
access;
symbols
	Helios_1_3_1:1.3
	Helios_C40_1_3_Official_Release:1.3
	Alenia_release:1.3
	Helios1_3:1.3
	C40_Field_Test_2:1.3
	C40_Field_Test_R1:1.2
	Helios13_beta:1.2
	Helios1_2_2:1.2
	Helios1_2_2Beta:1.2
	Helios1_2_1:1.2
	Helios1_2:1.2;
locks; strict;
comment	@ * @;


1.3
date	92.07.31.09.16.55;	author nickc;	state Exp;
branches;
next	1.2;

1.2
date	90.08.23.10.10.02;	author james;	state Exp;
branches;
next	1.1;

1.1
date	90.08.22.16.20.55;	author james;	state Exp;
branches;
next	;


desc
@gives a hex dump of a given file
@


1.3
log
@improved command line interpretation
@
text
@
static char *rcsid = "$Header: /hsrc/cmds/com/RCS/dump.c,v 1.2 1990/08/23 10:10:02 james Exp nickc $"; 

#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <nonansi.h>


void
printhex( char c )
{
  if (c < 10)
    putchar( c + '0' );
  else
    putchar( c - 10 + 'A' );
}


void
dump( FILE * f )
{
  int		i;
  int		buffer[ 16 ];
  unsigned	offset = 0;


  for (;;)
    {
      for (i = 0; i < 16; i++)
	buffer[ i ] = fgetc( f );

      if (buffer[ 0 ] == -1)
	break;	/* done				*/

      printf( "%04x: ", offset );

      for (i = 0; i < 16; i++)
	if (buffer[ i ] != -1)
	  {
	    char c = buffer[ i ];


	    printhex( c >> 4 );
	    printhex( c & 0xf);
	    
	    putchar( ' ' );
	  }
	else
	  printf( "   " );

      printf( "   " );

      for (i = 0; i < 16; i++)
	{
	  if (buffer[ i ] != -1)
	    {
	      if (!isprint( buffer[ i ] ))
		buffer[ i ] = '.';
	      
	      putchar( buffer[ i ] );
	    }
	  else
	    putchar( ' ' );
	}
      
      putchar( '\n' );

      offset += 16;
    }

  return;
  
} /* dump */
  

int
main(
     int 	argc,
     char *	argv[] )
{
  FILE *	f;


  if (argc < 2)
    {
      f = freopen( Heliosno( stdin )->Name, "rb", stdin );

      if (f == NULL)
	{
	  fprintf( stderr, "dump: failed to reopen stdin\n" );

	  return EXIT_FAILURE;	  
	}
      
      dump( f );
    }
  else
    {
      int	i;

      
      for (i = 1; i < argc; i++)
	{
	  f = fopen(argv[ i ], "rb" );		/* open file for binary read	*/

	  if (f == NULL)
	    {
	      fprintf( stderr, "dump: Can't open file '%s'\n", argv[ i ] );

	      return EXIT_FAILURE;
	    }

	  dump( f );

	  fclose( f );	  
	}
    }

  return EXIT_SUCCESS;

  rcsid = rcsid;
  
} /* main */

@


1.2
log
@*** empty log message ***
@
text
@d2 1
a2 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/dump.c,v 1.1 90/08/22 16:20:55 james Exp Locker: james $"; 
d4 4
a7 2
#include	<stdio.h>
#include	<ctype.h>
a8 1
void printhex();
d10 17
a26 16
main(argc,argv)
int argc;
char *argv[];
{ FILE *f;
  int i, buffer[16];
  unsigned offset = 0;

  if (argc != 2)
  {	printf("Usage: dump <filename>\n");
	exit(1);
  }
  f = fopen(argv[1],"rb");		/* open file for binary read	*/
  if (!f)
  {	printf("Can't open file '%s'\n",argv[1]);
	exit(1);
  }
d29 75
a103 15
  {	for (i = 0; i < 16; i++)
		buffer[i] = fgetc(f);
	if (buffer[0] == -1) break;	/* done				*/
	printf("%04x: ",offset);
	for (i = 0; i < 16; i++)
		if (buffer[i] != -1)
		{	char c = buffer[i];
			printhex(c>>4);
			printhex(c&0xf);
			putchar(' ');
		}
		else
			printf("   ");
	printf("   ");
	for (i = 0; i < 16; i++)
d105 12
a116 6
		if (buffer[i] != -1)
		{	if (!isprint(buffer[i])) buffer[i] = '.';
			putchar(buffer[i]);
		}
		else
			putchar(' ');
d118 7
a124 5
	putchar('\n');
	offset += 16;
  }
return 0;
}
a125 5
void printhex(c)
char c;
{ if (c<10) putchar(c+'0');
  else putchar(c-10+'A');
}
@


1.1
log
@Initial revision
@
text
@d2 1
a2 1
static char rcsid[] = "$Header$"; 
@
