head	1.6;
access;
symbols
	Helios_1_3_1:1.4
	Helios_C40_1_3_Official_Release:1.3
	Alenia_release:1.2
	Helios1_3:1.2
	C40_Field_Test_2:1.2
	C40_Field_Test_R1:1.1;
locks; strict;
comment	@ * @;


1.6
date	94.03.10.10.03.41;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	94.03.08.10.11.50;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	93.07.12.12.00.11;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	93.03.29.09.29.47;	author richardp;	state Exp;
branches;
next	1.2;

1.2
date	92.09.22.16.09.17;	author paul;	state Exp;
branches;
next	1.1;

1.1
date	92.07.01.12.32.02;	author paul;	state Exp;
branches;
next	;


desc
@set or return status of timeslicing mechanism
@


1.6
log
@added warning about unrecognised command line arguments
@
text
@/*{{{  Header */

/*------------------------------------------------------------------------
--                                                                      --
--                      H E L I O S  C O M M A N D                      --
--                      --------------------------                      --
--                                                                      --
--             Copyright (C) 1992 - 1994, Perihelion Software Ltd.      --
--                        All Rights Reserved.                          --
--                                                                      --
-- slice.c								--
--									--
-- Enable/Disable/Report timeslice state.				--
--									--
--                                                                      --
-- This command will only work for processors with the generic		--
-- executive.								--
--                                                                      --
-- Author: PAB 25/4/92							--
--                                                                      --
------------------------------------------------------------------------*/
/* RcsId: $Id: slice.c,v 1.5 1994/03/08 10:11:50 nickc Exp nickc $ */

/*}}}*/
/*{{{  Includes */

#include "../../kernel/gexec.h"
#include <stdio.h>
#include <process.h>
#include <stdlib.h>

/*}}}*/
/*{{{  Code */

int
main (int argc, char **argv)
{
  while (*(++argv) != NULL)
    {
      if ((*argv)[0] == '-' && (*argv)[1] == 'h')
	{
	  printf( "use: slice [quantum <value>] [on/off]\n" );
	  return EXIT_SUCCESS;
	}
      
      if (strcmp(*argv, "quantum") == 0)
	{
	  int quan;
  
	  quan = atoi(*(++ argv));
	  SliceQuantum((int)OneSec/1000*quan);
	  return 0;
	}
      
      if (strcmp(*argv, "on") == 0)
	{
	  GetExecRoot()->SliceEnabled = TRUE;
	  printf("time slicing has been enabled\n");
	  return 0;
	}
      
      if (strcmp(*argv, "off") == 0)
	{
	  GetExecRoot()->SliceEnabled = FALSE;
	  printf("time slicing has been disabled\n");
	  return 0;
	}

      printf( "Unknown command line argument '%s' - ignored\n", *argv );
    }
  
  printf( "time slicing is %s with quantum %d\n",
	 (GetExecRoot()->SliceEnabled == TRUE) ? "enabled" : "disabled",
	 SliceQuantum(0)  );
  
  return 0;
}

/*}}}*/

/* end of slice.c */
@


1.5
log
@Added folding and fixed to compile in new RT world
@
text
@d22 1
a22 1
/* RcsId: $Id: slice.c,v 1.4 1993/07/12 12:00:11 nickc Exp nickc $ */
d68 2
d72 1
a72 1
  printf("time slicing is %s with quantum %d\n",
@


1.4
log
@fixed compile time warnings
@
text
@d1 2
d8 1
a8 1
--             Copyright (C) 1992, Perihelion Software Ltd.             --
d22 4
a25 1
/* RcsId: $Id: slice.c,v 1.3 1993/03/29 09:29:47 richardp Exp nickc $ */
d27 1
a27 1
#include "../../kernel/kernel.h" 
d32 5
a36 1
int main (int argc, char **argv)
d38 29
a66 18
	int quan;

	while (*(++argv) != NULL) {
		if (strcmp(*argv, "quantum") == 0) {
                        quan = atoi(*(++ argv));
                        SliceQuantum((int)OneSec/1000*quan);
			return 0;
		}
		if (strcmp(*argv, "on") == 0) {
			GetExecRoot()->SliceEnabled = TRUE;
			printf("time slicing has been enabled\n");
			return 0;
		}
		if (strcmp(*argv, "off") == 0) {
			GetExecRoot()->SliceEnabled = FALSE;
			printf("time slicing has been disabled\n");
			return 0;
		}
d68 7
a74 5

	printf("time slicing is %s with quantum %d\n",
            (GetExecRoot()->SliceEnabled == TRUE) ? "enabled" : "disabled",
		SliceQuantum(0)  );
	return 0;
d77 1
@


1.3
log
@allow quantum option to change slice quantum,  and also print
the quantum if slice is entered with no arguments
@
text
@d20 1
a20 1
/* RcsId: $Id: slice.c,v 1.2 1992/09/22 16:09:17 paul Exp $ */
d24 2
a26 1

d34 1
a34 1
                        SliceQuantum(OneSec/1000*quan);
@


1.2
log
@fixed for new name for GetExecRoot()
@
text
@d20 1
a20 1
/* RcsId: $Id: slice.c,v 1.1 1992/07/01 12:32:02 paul Exp paul $ */
d28 2
d31 5
d48 3
a50 1
	printf("time slicing is %s\n", (GetExecRoot()->SliceEnabled == TRUE) ? "enabled" : "disabled");
@


1.1
log
@Initial revision
@
text
@d20 1
a20 1
/* RcsId: $Id$ */
d30 1
a30 1
			ExecRoot()->SliceEnabled = TRUE;
d35 1
a35 1
			ExecRoot()->SliceEnabled = FALSE;
d41 1
a41 1
	printf("time slicing is %s\n", (ExecRoot()->SliceEnabled == TRUE) ? "enabled" : "disabled");
@
