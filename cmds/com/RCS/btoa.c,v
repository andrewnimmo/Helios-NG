head	1.4;
access;
symbols
	Helios_1_3_1:1.4
	Helios_C40_1_3_Official_Release:1.3
	Alenia_release:1.3
	Helios1_3:1.3
	C40_Field_Test_2:1.3
	C40_Field_Test_R1:1.3
	Helios13_beta:1.3
	Helios1_2_2:1.3
	Helios1_2_2Beta:1.3
	Helios1_2_1:1.2
	Helios1_2:1.2;
locks; strict;
comment	@ * @;


1.4
date	93.07.12.10.50.45;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	91.06.06.12.01.41;	author martyn;	state Exp;
branches;
next	1.2;

1.2
date	90.08.23.09.49.40;	author james;	state Exp;
branches;
next	1.1;

1.1
date	90.08.22.17.11.32;	author jon;	state Exp;
branches;
next	;


desc
@convert binary to 7-bit ASCII
@


1.4
log
@fixed compile time warnings
@
text
@/* btoa: version 4.0
 * stream filter to change 8 bit bytes into printable ascii
 * computes the number of bytes, and three kinds of simple checksums
 * incoming bytes are collected into 32-bit words, then printed in base 85
 *  exp(85,5) > exp(2,32)
 * the ASCII characters used are between '!' and 'u'
 * 'z' encodes 32-bit zero; 'x' is used to mark the end of encoded data.
 *
 *  Paul Rutter		Joe Orost
 *  philabs!per		petsd!joe
 *
 *  WARNING: this version is not compatible with the original as sent out
 *  on the net.  The original encoded from ' ' to 't'; which cause problems
 *  with some mailers (stripping off trailing blanks).
 */

/*
 * Hacked by PAB 3/9/88 for Helios and ANSI
 */

static char *rcsid = "$Header: /hsrc/cmds/com/RCS/btoa.c,v 1.3 1991/06/06 12:01:41 martyn Exp nickc $";

#include <stdio.h>
#include <stdlib.h>
#include <nonansi.h>

#define MAXPERLINE 78

long int Ceor = 0;
long int Csum = 0;
long int Crot = 0;

long int ccount = 0;
long int bcount = 0;
long int cword;

#define EN(c)	(int) ((c) + '!')

void encode(int c);
void wordout(long cword);
void charout(int c);

void encode(int c)
{
  Ceor ^= c;
  Csum += c;
  Csum += 1;
  if ((Crot & 0x80000000)) {
    Crot <<= 1;
    Crot += 1;
  } else {
    Crot <<= 1;
  }
  Crot += c;

  cword <<= 8;
  cword |= c;
  if (bcount == 3) {
    wordout(cword);
    bcount = 0;
  } else {
    bcount += 1;
  }
}

void wordout(long cword)
{
  if (cword == 0) {
    charout('z');
  } else {
    int tmp = 0;
    
    if(cword < 0) {	/* Because some don't support unsigned long */
      tmp = 32;
      cword = cword - (long)(85 * 85 * 85 * 85 * 32);
    }
    if(cword < 0) {
      tmp = 64;
      cword = cword - (long)(85 * 85 * 85 * 85 * 32);
    }
    charout(EN((cword / (long)(85 * 85 * 85 * 85)) + tmp));
    cword %= (long)(85 * 85 * 85 * 85);
    charout(EN(cword / (85 * 85 * 85)));
    cword %= (85 * 85 * 85);
    charout(EN(cword / (85 * 85)));
    cword %= (85 * 85);
    charout(EN(cword / 85));
    cword %= 85;
    charout(EN(cword));
  }
}

void charout(int c)
{
  putchar(c);
  ccount += 1;
  if (ccount == MAXPERLINE) {
    putchar('\n');
    ccount = 0;
  }
}

int main(
  int argc,
  char **argv )
{
  int c;
  long n;

  if (argc != 1) {
    fprintf(stderr,"btoa: bad args to %s\n", argv[0]);
    exit(2);
  }

  if(freopen(Heliosno(stdin)->Name, "rb", stdin) == NULL)
	{
	fprintf(stderr, "Failed to reopen stdin\n");
	exit(1);
	}

  printf("xbtoa Begin\n");
  n = 0;
  while ((c = getchar()) != EOF) {
    encode(c);
    n += 1;
  }
  while (bcount != 0) {
    encode(0);
  }
  /* n is written twice as crude cross check*/
  printf("\nxbtoa End N %ld %lx E %lx S %lx R %lx\n", n, n, Ceor, Csum, Crot);
  exit(0);
}
@


1.3
log
@reopen streams in binary mode to cater for MS-DOS sillies
@
text
@d21 1
a21 1
static char *rcsid = "$Header: /giga/HeliosRoot/Helios/cmds/com/RCS/btoa.c,v 1.2 1990/08/23 09:49:40 james Exp $";
d43 1
a43 2
void encode(c)
  int c;
d66 1
a66 2
void wordout(cword)
  long cword;
d93 1
a93 2
void charout(c)
  int c;
d103 3
a105 3
int main(argc,argv) 
  int argc;
  char **argv;
@


1.2
log
@*** empty log message ***
@
text
@d21 1
a21 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/btoa.c,v 1.1 90/08/22 17:11:32 jon Exp Locker: james $";
d25 1
d35 1
a35 1
long int word;
d40 1
a40 1
void wordout(long word);
d57 2
a58 2
  word <<= 8;
  word |= c;
d60 1
a60 1
    wordout(word);
d67 2
a68 2
void wordout(word)
  long word;
d70 1
a70 1
  if (word == 0) {
d75 1
a75 1
    if(word < 0) {	/* Because some don't support unsigned long */
d77 1
a77 1
      word = word - (long)(85 * 85 * 85 * 85 * 32);
d79 1
a79 1
    if(word < 0) {
d81 1
a81 1
      word = word - (long)(85 * 85 * 85 * 85 * 32);
d83 9
a91 9
    charout(EN((word / (long)(85 * 85 * 85 * 85)) + tmp));
    word %= (long)(85 * 85 * 85 * 85);
    charout(EN(word / (85 * 85 * 85)));
    word %= (85 * 85 * 85);
    charout(EN(word / (85 * 85)));
    word %= (85 * 85);
    charout(EN(word / 85));
    word %= 85;
    charout(EN(word));
d117 7
@


1.1
log
@Initial revision
@
text
@d21 1
a21 1
static char rcsid[] = "$Header: /usr/perihelion/Helios/cmds/com/RCS/btoa.c,v 1.1 90/08/22 16:00:09 james Exp Locker: jon $";
@
