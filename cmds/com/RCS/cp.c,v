head	1.8;
access;
symbols
	Helios_1_3_1:1.4
	Helios_C40_1_3_Official_Release:1.3
	Alenia_release:1.3
	Helios1_3:1.3
	C40_Field_Test_2:1.3
	C40_Field_Test_R1:1.3
	Helios13_beta:1.3
	Helios1_2_2:1.3
	Helios1_2_2Beta:1.3
	Helios1_2_1:1.3
	Helios1_2:1.3;
locks; strict;
comment	@ * @;


1.8
date	94.12.08.18.11.10;	author nickc;	state Exp;
branches;
next	1.7;

1.7
date	94.03.08.11.36.56;	author nickc;	state Exp;
branches;
next	1.6;

1.6
date	93.11.22.16.22.57;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	93.11.18.17.58.37;	author nickc;	state Exp;
branches;
next	1.4;

1.4
date	93.07.12.12.08.00;	author nickc;	state Exp;
branches;
next	1.3;

1.3
date	90.09.20.11.39.34;	author james;	state Exp;
branches;
next	1.2;

1.2
date	90.08.23.10.02.54;	author james;	state Exp;
branches;
next	1.1;

1.1
date	90.08.22.16.15.16;	author james;	state Exp;
branches;
next	;


desc
@file copying routine
@


1.8
log
@Fixed bug copying using absolute paths
@
text
@/***************************************************************************
 ***************************************************************************
 **	CP COMMAND for HELIOS                                             **
 **	John Fitch - University of Bath and Fitch-Norman                  **
 **	23 February 1988                                                  **
 ***************************************************************************
 ***************************************************************************/

/* Revision history:
   Started 23 February 1988
   Added recursive case 28 February 1988
   Conversion to Helios 19 April 1988
   Revised to use Objects rather than keep strings 1988 May 2
   Tested and updated PAB 25/5/88
   Big buffer copy PAB 22/11/88
   Recursive calls do locate before create JMP 30/03/89
*/

#ifdef __TRAN
static char *rcsid = "$Header: /dsl/HeliosARM/Working/RTNucleus/cmds/com/cp.c,v 1.1.1.1 1994/05/10 09:20:23 nickc Exp $";
#endif

#include <stdlib.h>
#include <stdio.h>
#include <ctype.h>
#include <syslib.h>
#include <gsp.h>
#include <string.h>
#include <helios.h>
#include <stdarg.h>

#define USAGE "Usage: %s <src> <dest>; or cp [-i -r] <src1 src2... srcn> <dir>\n"

#define TIMEOUT -1	/* infinity */  /* 10*OneSec	10 seconds */

#define	MAXPATH	200	/* maximum path length */

bool		interactive = FALSE;
bool		recursive   = FALSE;
bool		direct      = FALSE;
bool		textcopy    = FALSE;
char *		ProgName    = "<Unknown>";
DirEntry 	Dirbuf;
char		dname[ MAXPATH ];

static void
warn( char * pWarnMessage, ... )
{
  va_list	vArgs;


  va_start( vArgs, pWarnMessage );

  fprintf( stderr, "%s: Warning: ", ProgName );
  vfprintf( stderr, pWarnMessage, vArgs );
  fputc( '\n', stderr );
  
  va_end( vArgs );

  return;
  
} /* warn */
  
static void
fail( char * pErrMessage, ... )
{
  va_list	vArgs;


  va_start( vArgs, pErrMessage );

  fprintf( stderr, "%s: ", ProgName );
  vfprintf( stderr, pErrMessage, vArgs );
  fputc( '\n', stderr );

  va_end( vArgs );

  exit (1);
  
} /* fail */
  

/*
 * Copy srcpath object into dstdir object with the name dst.
 */

#define BUFFERSIZE	(16 * 1024)

static char 	aFileBuffer[ BUFFERSIZE ];

static void
copyfile(
	 Object *	srcpath,
	 Object *	dstdir,
	 char *		dst )
{
  Stream *	inf;
  char		fulldst[ MAXPATH ];
  

  /*  fprintf(stderr,"recursive=%d, Type=%8x\n",recursive,o->Type);*/
  
  if (srcpath->Type & Type_Directory)
    {
      /* if src is a directory */

      if (recursive)
	{
	  int	i;
	  int	len;

	  
	  /* Must work recusively; first create destination directory */
	  /* and then work through directory */
	  
	  unless (Locate( dstdir, dst ))
	    {
	      unless (Create( dstdir, dst, Type_Directory, 0, 0 ))
		{
		  fail( "Cannot create %s : %lx", dst, Result2( dstdir ) );
		}
	    }
	  
	  dstdir = Locate( dstdir, dst );
	  inf    = Open( srcpath, NULL, O_ReadOnly );
	  len    = (int) GetFileSize( inf ) / sizeof (DirEntry);
	  
	  for (i = 0; i < len; i++)
	    {
	      word	size;
	      Object *	srcobj;

	      
	      size = Read( inf, (byte*)&Dirbuf, sizeof (DirEntry), TIMEOUT );
	      
	      if (size != sizeof (DirEntry))
		{
		  fail( "Read failure on directory '%s': fault = %lx",
		       srcpath->Name, Result2( inf ) );
		}
	      
	      if (Dirbuf.Name[ 0 ]=='.')
		{
		  if (Dirbuf.Name[ 1 ]=='\0')
		    continue;
		  elif ((Dirbuf.Name[ 1 ] == '.')
			&& (Dirbuf.Name[ 2 ] == '\0'))
		    continue;
		}
	      
	      /* recursive entry */
	      /*** JMP bug fix 09/08/89 locate object close in recursive calls ***/
	      
	      srcobj = Locate( srcpath, Dirbuf.Name );
	      
	      copyfile( srcobj, dstdir, Dirbuf.Name );
	      
	      Close( srcobj );
	    }
	  
	  Close( inf );

	  return;
	}
      else
	{
	  warn( "directory %s not copied (use -r option)", srcpath->Name );
	  
	  return;
	}
    }
  
  /* construct full dst path to check for copy to same name */
  if (*dst != '/')
   {
	  strcpy( fulldst, dstdir->Name );
	  strcat( fulldst, "/" );
	  strcat( fulldst, dst );
   }
  else
  {
	  strcpy( fulldst, dst );
  }
  
  if (strcmp( fulldst, srcpath->Name ) == 0)
    {
      fail( "Cannot copy file to itself" );
    }
  
  if (interactive)
    {
      int	c;

      
      if (direct) /* if last arg was a dir. */
	fprintf( stderr, "Copy %s to %s ? (y/n)[n] ", srcpath->Name, fulldst );
      else	
	fprintf( stderr, "Copy %s to %s ? (y/n)[n] ", srcpath->Name, dst );
      
      fflush( stderr );

      c = getchar();

      if (c != EOF)
	{
	  /* eat rest of line typed in by user */
	  
	  while (getchar() != '\n')
	    ;
	}

      if (c == EOF || tolower( c ) != 'y')
	{
	  fprintf( stderr, "Not copied\n" );
	  
	  return;
	}
    }

  /* Copy file 'srcpath' to 'dstdir'/'dst' */

  if (textcopy)
    {
      FILE *	in;
      FILE *	out;
      int	read;
      
      
      if ((in = fopen( srcpath->Name, "r" )) == NULL)
	{
	  warn( "File '%s' not found", srcpath );
	  return;
	}
      
      if ((out = fopen( fulldst, "w" )) == NULL)
	{
	  warn( "Failed to open %s for writing", fulldst );
	  return;
	}

      do
	{
	  int	written;

	  
	  if ((read = fread( aFileBuffer, 1, BUFFERSIZE, in )) < 1)
	    {
	      break;
	    }
	  
	  if ((written = fwrite( aFileBuffer, 1, read, out )) < 1)
	    {
	      fail( "Write failed" );
	    }
	}
      while (read == BUFFERSIZE);

      fclose( in  );
      fclose( out );
    }
  else
    {
      Stream *	outf;
      word	buffsize;

      
      if ((inf = Open( srcpath, NULL, O_ReadOnly )) == NULL)
	{
	  warn( "Cannot open '%s': fault = %lx\n", srcpath->Name, Result2( srcpath ) );
	  
	  return;
	}
      
      /***  14-03-89 JMP did not truncate file on opening ***/
      
      if ((outf = Open( dstdir, dst, O_Create | O_Truncate | O_WriteOnly)) == NULL)
	{
	  warn( "Unable to create '%s': fault = %lx", dst, Result2( dstdir ) );
	  
	  return;
	}
      
      if ((buffsize = GetFileSize( inf )) == 0) /* zero sized file has been copied ok !*/
	{
	  Close( inf );
	  Close( outf );
	  
	  return;
	}

      /*** JMP fix to get around Write bug 04/08/89 ***/
#if 0      
      while (buffsize > 16000)
	{
	  buffsize /= 2;
	  buffsize++;             /* stop one byte transfers on odd files */
	}
#else
      /* XXX - new version by NC 17/11/93 */

      if (buffsize > 16000)
	buffsize = 16000;
#endif
      
      forever
	{
	  int	n;
	  
	  
	  outf->Result2 = 0;        /* BLV : clear the error flag */
	  
	  n = (int) Read( inf, aFileBuffer, buffsize, TIMEOUT );
	  
	  if (n <= 0)
	    {
	      /* n == 0 means timeout with no chars read */
	      /* n == -1 means no more data to read      */

	      if (n != -1)
		warn( "Error whilst reading '%s': fault = %lx",
		     srcpath->Name, Result2( (Object *)inf ) );
	      
	      Close( inf  );
	      Close( outf );
	      
	      return;
	    }
	  
	  /**
	   *** BLV : bug in the 1.1 release for Write(). it returns n even if the
	   *** server gave an error message such as disk full. Result2 is filled in.
	   **/
	  
	  elif ((Write( outf, aFileBuffer, n, TIMEOUT ) != n) ||
		(outf->Result2 != 0))
	    {
	      warn( "Error whilst writing '%s': fault = %lx",
		   dstdir->Name, Result2( (Object *)outf) );
	      
	      Close( inf  );
	      Close( outf );
	      
	      return;
	    }
	}
    }

  return;
  
} /* copyfile */

static void
usage( char * message, ... )
{
  va_list	args;

  
  va_start( args, message );
  
  if (message != NULL)
    {
      fprintf( stderr, "%s: ", ProgName );
      vfprintf( stderr, message, args );
      fputc( '\n', stderr );
    }
  
  fail( USAGE );
}


int
main(
     int 	argc,
     char **	argv )
{
  Object *	TargetObj;
  Object *	SrcObj;
  char *	dest;
  int		i;
  int		l;


  
  ProgName = strrchr( argv[ 0 ], '/' );

  if (ProgName == NULL)
    ProgName = argv[ 0 ];
  else
    ProgName++;

  if (!strcmp( ProgName, "tcp" ))
    textcopy = TRUE;
  
  if (argc < 3)
    {
      usage( "Insufficient arguments" );
    }
  
  while (*(++argv)[0] == '-')
    {
      if (strcmp(*argv,"-i") == 0)
	interactive = TRUE;
      elif (strcmp(*argv,"-r") == 0)
	recursive = TRUE;
      else
	{
	  usage( "Unknown option %s",*argv );
	}
      
      argc--;
    }
  
  argc--;
  
  if (argc < 2)
    {
      /* Have we still got enough arguments? */
      
      usage( "Too few arguments" );
    }
  
  /* Check if destination is a directory */
  
  if ((TargetObj = Locate( CurrentDir, argv[ argc - 1 ])) != NULL
      && TargetObj->Type & Type_Directory)
    direct = TRUE;
  
  if (argc!=2 && direct == FALSE)
    {
      usage( "Destination must be a directory when using more than two arguments" );
    }
  
  if (direct)
    {
      /* file1 ... filen -> dir copy */
      
      for (i = 0; i < argc - 1; i++)
	{
	  if ((SrcObj = Locate( CurrentDir, argv[ i ] )) == NULL)
	    {
	      fail( "File %s does not exist", argv[i] );
	    }
	  
	  /* check if src dir contains target dir! */
	  if (recursive && (l = strlen(SrcObj->Name)) <= strlen(TargetObj->Name)
	      && strncmp(SrcObj->Name, TargetObj->Name, l) == 0
	      && (TargetObj->Name[l] == '/' || TargetObj->Name[l] == '\0'))
	    /*
	     * last test is to make sure src dir is not a
	     * partial name of target i.e. fred in freddy
	     */
	    {
	      fail( "Cannot recursively copy directory into itself" );
	    }
	  else
	    {
	      /* get  last part of name */
	      
	      if ((dest = strrchr(SrcObj->Name,'/')) == NULL)
		dest = SrcObj->Name;  /* no '/' so use entire name */
	      else
		++dest;	/* inc past last '/' */
	      
	      copyfile( SrcObj, TargetObj, dest );
	    }
	}
    }
  else
    {
      /* file -> file copy */
      
      if ((SrcObj = Locate(CurrentDir, *argv)) == NULL)
	{
	  fail( "File %s does not exist", *argv );
	}
      
      /* Modification to deal with recursive copy to new directory */
      
      if ( (! (recursive)) && (SrcObj->Type & Type_Directory) ) 
	{
	  /* PRH 4/7/90 */
	  
	  fail( "Cannot copy a directory to a file" );
	}
      
      copyfile( SrcObj, CurrentDir, argv[ 1 ] );
    }

  return 0;
  
} /* main */
@


1.7
log
@fixed compile time warning
@
text
@d20 1
a20 1
static char *rcsid = "$Header: /users/nickc/RTNucleus/cmds/com/RCS/cp.c,v 1.6 1993/11/22 16:22:57 nickc Exp nickc $";
d174 10
a183 4
  
  strcpy( fulldst, dstdir->Name );
  strcat( fulldst, "/" );
  strcat( fulldst, dst );
@


1.6
log
@changed buffer size to 16K (so that it is a multiple of the Helios Filing System's 4K block) and made the buffer fixed, rather than allowing to grow when copying big files.
@
text
@d19 2
a20 2
#ifndef __C40
static char *rcsid = "$Header: /hsrc/cmds/com/RCS/cp.c,v 1.5 1993/11/18 17:58:37 nickc Exp nickc $";
@


1.5
log
@improved memory alloaction on multiple copies and changed so that if the program is called 'tcp' it copies in text mode - hence there is no need for a seperate tcp program
@
text
@d20 1
a20 1
static char *rcsid = "$Header: /hsrc/cmds/com/RCS/cp.c,v 1.4 1993/07/12 12:08:00 nickc Exp nickc $";
d87 1
a87 1
#define INITIALBUFFERSIZE	(10 * 1024)
d89 1
a89 3
static char *	pFileBuffer = NULL;
static word	iBufferLen  = 0;
static bool	bMaxBuffer  = FALSE;
a234 11
      if (iBufferLen == 0)
	{
	  iBufferLen = INITIALBUFFERSIZE;
	  
	  while ((pFileBuffer = Malloc( iBufferLen )) == NULL)
	    {
	      if ((iBufferLen >>= 1) < 1024)
		fail( "No memory available for file buffer" );
	    }
	}
      
d240 1
a240 1
	  if ((read = fread( pFileBuffer, 1, (size_t)iBufferLen, in )) < 1)
d245 1
a245 1
	  if ((written = fwrite( pFileBuffer, 1, read, out )) < 1)
d250 1
a250 1
      while (read == iBufferLen);
d295 2
a296 5
      if (buffsize > 1600)
	buffsize = 1600;

      if (buffsize < INITIALBUFFERSIZE)
	buffsize = INITIALBUFFERSIZE;
a297 38

      while (iBufferLen < buffsize)
	{
	  if (iBufferLen > 0)
	    {
	      /* Check to see if we are unable to allocate a bigger buffer */
	      
	      if (bMaxBuffer)
		break;

	      /* See if we already have a sufficiently large buffer */
	      
	      if (iBufferLen > INITIALBUFFERSIZE)
		break;

	      /* Release the already allocated buffer */
	      
	      Free( pFileBuffer );
	      
	      iBufferLen = 0;
	    }
	  
	  if ((pFileBuffer = (char *)Malloc( buffsize )) != NULL)
	    {
	      iBufferLen = buffsize;
	    }
	  else
	    {
	      if (buffsize <= 2000)
		{
		  fail( "Cannot allocate memory for file buffer" );
		}
	  
	      buffsize /= 2;  /* try again with buffer half that size */
	      
	      bMaxBuffer = TRUE;
	    }
	}
d306 1
a306 1
	  n = (int) Read( inf, pFileBuffer, buffsize, TIMEOUT );
d328 1
a328 1
	  elif ((Write( outf, pFileBuffer, n, TIMEOUT ) != n) ||
@


1.4
log
@fixed compile time warnings
@
text
@d19 3
a21 1
static char *rcsid = "$Header: /hsrc/cmds/com/RCS/cp.c,v 1.3 1990/09/20 11:39:34 james Exp nickc $";
d30 1
d32 1
a32 1
#define USAGE "Usage: cp <src> <dest>; or cp [-i -r] <src1 src2... srcn> <dir>\n"
d38 7
a44 3
int interactive = FALSE;
int recursive = FALSE;
int direct = FALSE;
d46 5
a50 2
DirEntry Dirbuf;
char dname[MAXPATH];
d52 1
d54 12
a65 7
/*
 * Copy srcpath object into dstdir object with the name dst.
 */
int copyfile(
	     Object *	srcpath,
	     Object *	dstdir,
	     char *     dst )
d67 1
a67 61
  Stream	*inf, *outf;
  int	n, i, len;
  word	size;
  char	fulldst[MAXPATH];
  long	buffsize;
  char	*filebuf;
  Object  *srcobj;

/*  fprintf(stderr,"recursive=%d, Type=%8x\n",recursive,o->Type);*/
if (srcpath->Type & Type_Directory)
	{ /* if src is a directory */
	if (recursive)
		{
		/* Must work recusively; first create destination directory */
		/* and then work through directory */
		unless (Locate(dstdir, dst))
			{
			unless (Create(dstdir, dst, Type_Directory,0,0))
				{
				fprintf(stderr,"cp: Cannot create %s : %lx\n",
							dst, Result2(dstdir));
				exit(1);
				}
			}
		dstdir = Locate(dstdir, dst);
		inf = Open(srcpath,NULL,O_ReadOnly);
		len = (int) GetFileSize(inf)/sizeof(DirEntry);

		for(i = 0; i < len; i++)
			{
			size = Read(inf, (byte*)&Dirbuf, sizeof(DirEntry), TIMEOUT);
			if ( size != sizeof(DirEntry))
				{
				fprintf(stderr,
				"cp: Read failure on directory %s : %lx\n", srcpath->Name, Result2(inf));
				exit(1);
				}
			if (Dirbuf.Name[0]=='.')
				{
				if (Dirbuf.Name[1]=='\0')
					continue;
				elif ((Dirbuf.Name[1] == '.')
				       && (Dirbuf.Name[2] == '\0'))
					continue;
				}
			/* recursive entry */
/*** JMP bug fix 09/08/89 locate object close in recursive calls ***/
                        srcobj = Locate(srcpath, Dirbuf.Name);
			copyfile(srcobj, dstdir, Dirbuf.Name);
                        Close(srcobj);
			}
		Close(inf);
		return (TRUE);
		}
	else
		{
		fprintf(stderr,
		 "cp: Warning, directory %s not copied (use -r option)\n", srcpath->Name);
		return(TRUE);
		}
	}
a68 39
/* construct full dst path to check for copy to same name */
strcpy(fulldst, dstdir->Name);
strcat(fulldst, "/");
strcat(fulldst, dst);
if (strcmp(fulldst, srcpath->Name) == 0)
	{
	fprintf(stderr,"cp: Cannot copy file to itself\n");
	exit(1);
	}

if (interactive)
	{
	if (direct) /* if last arg was a dir. */
		fprintf(stderr,"Copy %s to %s/%s ? ", srcpath->Name, dstdir->Name, dst); 
	else	
		fprintf(stderr,"Copy %s to %s ? ", srcpath->Name, dst);
	fflush(stderr);
	if (tolower(getchar()) != 'y')
		{
		while (getchar() != '\n') ;
		fprintf(stderr,"Not copied\n");
		return (TRUE);
		}
	else
		while (getchar() != '\n') ;
	}
if ((inf = Open(srcpath, NULL, O_ReadOnly)) == NULL)
	{
	fprintf(stderr,
	  "cp: Cannot open %s : %lx\n", srcpath->Name, Result2(srcpath));
	return (TRUE);
	}
/***  14-03-89 JMP did not truncate file on opening ***/
if ((outf = Open(dstdir, dst, O_Create|O_Truncate|O_WriteOnly)) == NULL)
	{
	fprintf(stderr,
	  "cp: Error trying to create %s : %lx \n", dst, Result2(dstdir));
	return (TRUE);
	}
d70 1
a70 6
if ((buffsize = GetFileSize(inf)) == 0) /* zero sized file has been copied ok !*/
		{
		Close(inf);
		Close(outf);
		return (TRUE);
		}
d72 3
a74 1
/*** JMP fix to get around Write bug 04/08/89 ***/
d76 1
a76 5
while (buffsize > 16000)
        {
	buffsize /= 2;
        buffsize++;             /* stop one byte transfers on odd files */
        }
d78 4
a81 10
  while ((filebuf = (char *)Malloc(buffsize)) == NULL)
	{
	if (buffsize <= 2000)
		{
		fprintf(stderr,"cp: Cannot allocate memory for file buffer\n");
		exit(2);
		}
 	buffsize /= 2;  /* try again with buffer half that size */
        buffsize++;     /* stop one byte transfers on odd files */
	}
d83 3
a85 3
forever
	{
        outf->Result2 = 0;        /* BLV : clear the error flag */
d87 1
a87 34
	n = (int) Read(inf, filebuf, buffsize, TIMEOUT);
	if (n == -1)
		{
		Free(filebuf);
		Close(inf);
		Close(outf);
		return (TRUE);
		}
	if (n <= 0)
		{
       		Free(filebuf);
		/* n==0 means timeout with no chars read */
		fprintf(stderr,"cp: Error whilst reading %s : %lx\n",
					srcpath->Name, Result2((Object *)inf));
		Close(inf);
		Close(outf);
		return (TRUE);
		}
/**
*** BLV : bug in the 1.1 release for Write(). it returns n even if the
*** server gave an error message such as disk full. Result2 is filled in.
**/
	elif ((Write(outf, filebuf, n, TIMEOUT) != n) ||
              (outf->Result2 != 0))
		{
		fprintf(stderr,"cp: Error whilst writing %s : %lx\n",
      						dstdir->Name, Result2((Object *)outf));
		Free(filebuf);
		Close(inf);
		Close(outf);
		return (TRUE);
		}
	}
}
d89 9
a97 1
void usage()
d99 300
a398 2
  fprintf(stderr, USAGE);
}
d400 2
a401 3
int main(
int argc,
char **argv )
d403 1
a403 3
Object	*TargetObj, *SrcObj;
char	*dest;
int	i, l;
d405 12
a416 6
if (argc < 3)
	{
	fprintf(stderr,"cp: Insufficient arguments\n");
	usage();
	exit(1);
	}
a417 15
while (*(++argv)[0] == '-')
	{
	if (strcmp(*argv,"-i") == 0)
		interactive = TRUE;
	elif (strcmp(*argv,"-r") == 0)
		recursive = TRUE;
	else
		{
		fprintf(stderr,"cp: Unknown option %s\n",*argv);
		usage();
		exit(1);
		}
	argc--;
	}
argc--;
d419 121
a539 72
if (argc < 2)
	{ /* Have we still got enough arguments? */
	fprintf(stderr, "cp: Too few arguments\n");
	usage();
	exit(1);
	}

/* Check if destination is a directory */
if ((TargetObj = Locate(CurrentDir, argv[argc-1])) != NULL
     && TargetObj->Type & Type_Directory)
	direct = TRUE;

if (argc!=2 && direct == FALSE)
	{
 	fprintf(stderr,
	"cp: Destination must be a directory when using more than two arguments\n");
	
	usage();
	exit(1);
	}

if (direct)
	{
	/* file1 ... filen -> dir copy */
	for(i = 0; i < argc-1; i++)
		{
		if ((SrcObj = Locate(CurrentDir, argv[i])) == NULL)
			{
			fprintf(stderr,
			  "cp: File %s does not exist\n", argv[i]);
			exit(1);
			}
		/* check if src dir contains target dir! */
		if (recursive && (l = strlen(SrcObj->Name)) <= strlen(TargetObj->Name)
			&& strncmp(SrcObj->Name, TargetObj->Name, l) == 0
			&& (TargetObj->Name[l] == '/' || TargetObj->Name[l] == '\0'))
			/* last test is to make sure src dir is not partial name of target i.e. fred in freddy */
			{
			/* fprintf(stderr,"Src dir = %s, target dir = %s lastc = %c\n",SrcObj->Name, TargetObj->Name, TargetObj->Name[l]);*/
			fprintf(stderr,
			"cp: Cannot recursively copy directory into itself\n");
			exit(1);
			}
		else
			{
			/* get  last part of name */
			if ((dest = strrchr(SrcObj->Name,'/')) == NULL)
				dest = SrcObj->Name;  /* no '/' so use entire name */
			else
				++dest;	/* inc past last '/' */
			/* fprintf(stderr, "src = %s, dest = %s / %s\n",SrcObj->Name, TargetObj->Name, dest); */
			copyfile(SrcObj, TargetObj, dest);
			}
		}
	}
else
	{
	/* file -> file copy */
	if ((SrcObj = Locate(CurrentDir, *argv)) == NULL)
		{
		fprintf(stderr,"cp: File %s does not exist\n",*argv);
		exit(1);
		}
	if ( (! (recursive)) && (SrcObj->Type & Type_Directory) ) /* Modification to deal with recursive copy to new directory */
		{                                                 /* PRH 4/7/90 */
		fprintf(stderr,"cp: Cannot copy a directory to a file\n");
		exit(1);
		}
	copyfile(SrcObj, CurrentDir, argv[1]);
	}
	exit(0);
}
@


1.3
log
@error message for not using a directory with three plus arguments
has been made nickc friendly
@
text
@d19 1
a19 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/cp.c,v 1.2 90/08/23 10:02:54 james Exp $";
a34 3
int copyfile(Object *, Object *, char *);
void usage(void);

a41 103
int main(argc,argv)
int argc;
char **argv;
{
Object	*TargetObj, *SrcObj;
char	*dest;
int	i, l;

if (argc < 3)
	{
	fprintf(stderr,"cp: Insufficient arguments\n");
	usage();
	exit(1);
	}

while (*(++argv)[0] == '-')
	{
	if (strcmp(*argv,"-i") == 0)
		interactive = TRUE;
	elif (strcmp(*argv,"-r") == 0)
		recursive = TRUE;
	else
		{
		fprintf(stderr,"cp: Unknown option %s\n",*argv);
		usage();
		exit(1);
		}
	argc--;
	}
argc--;

if (argc < 2)
	{ /* Have we still got enough arguments? */
	fprintf(stderr, "cp: Too few arguments\n");
	usage();
	exit(1);
	}

/* Check if destination is a directory */
if ((TargetObj = Locate(CurrentDir, argv[argc-1])) != NULL
     && TargetObj->Type & Type_Directory)
	direct = TRUE;

if (argc!=2 && direct == FALSE)
	{
 	fprintf(stderr,
	"cp: Destination must be a directory when using more than two arguments\n");
	
	usage();
	exit(1);
	}

if (direct)
	{
	/* file1 ... filen -> dir copy */
	for(i = 0; i < argc-1; i++)
		{
		if ((SrcObj = Locate(CurrentDir, argv[i])) == NULL)
			{
			fprintf(stderr,
			  "cp: File %s does not exist\n", argv[i]);
			exit(1);
			}
		/* check if src dir contains target dir! */
		if (recursive && (l = strlen(SrcObj->Name)) <= strlen(TargetObj->Name)
			&& strncmp(SrcObj->Name, TargetObj->Name, l) == 0
			&& (TargetObj->Name[l] == '/' || TargetObj->Name[l] == '\0'))
			/* last test is to make sure src dir is not partial name of target i.e. fred in freddy */
			{
			/* fprintf(stderr,"Src dir = %s, target dir = %s lastc = %c\n",SrcObj->Name, TargetObj->Name, TargetObj->Name[l]);*/
			fprintf(stderr,
			"cp: Cannot recursively copy directory into itself\n");
			exit(1);
			}
		else
			{
			/* get  last part of name */
			if ((dest = strrchr(SrcObj->Name,'/')) == NULL)
				dest = SrcObj->Name;  /* no '/' so use entire name */
			else
				++dest;	/* inc past last '/' */
			/* fprintf(stderr, "src = %s, dest = %s / %s\n",SrcObj->Name, TargetObj->Name, dest); */
			copyfile(SrcObj, TargetObj, dest);
			}
		}
	}
else
	{
	/* file -> file copy */
	if ((SrcObj = Locate(CurrentDir, *argv)) == NULL)
		{
		fprintf(stderr,"cp: File %s does not exist\n",*argv);
		exit(1);
		}
	if ( (! (recursive)) && (SrcObj->Type & Type_Directory) ) /* Modification to deal with recursive copy to new directory */
		{                                                 /* PRH 4/7/90 */
		fprintf(stderr,"cp: Cannot copy a directory to a file\n");
		exit(1);
		}
	copyfile(SrcObj, CurrentDir, argv[1]);
	}
	exit(0);
}
d46 4
a49 3
int copyfile(srcpath, dstdir, dst)
Object	*srcpath, *dstdir;
char	*dst;
d51 7
a57 7
Stream	*inf, *outf;
int	n, i, len;
word	size;
char	fulldst[MAXPATH];
long	buffsize;
char	*filebuf;
Object  *srcobj;
d70 1
a70 1
				fprintf(stderr,"cp: Cannot create %s : %x\n",
d77 1
a77 1
		len = GetFileSize(inf)/sizeof(DirEntry);
d85 1
a85 1
				"cp: Read failure on directory %s : %x\n", srcpath->Name, Result2(inf));
d142 1
a142 1
	  "cp: Cannot open %s : %x\n", srcpath->Name, Result2(srcpath));
d149 1
a149 1
	  "cp: Error trying to create %s : %x \n", dst, Result2(dstdir));
d168 1
a168 1
while ((filebuf = Malloc(buffsize)) == NULL)
d183 1
a183 1
	n = Read(inf, filebuf, buffsize, TIMEOUT);
d195 1
a195 1
		fprintf(stderr,"cp: Error whilst reading %s : %x\n",
d208 1
a208 1
		fprintf(stderr,"cp: Error whilst writing %s : %x\n",
d221 104
@


1.2
log
@*** empty log message ***
@
text
@d19 1
a19 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/cp.c,v 1.1 90/08/22 16:15:16 james Exp Locker: james $";
d91 1
a91 1
	"cp: If more than two arguments destination must be a directory\n");
@


1.1
log
@Initial revision
@
text
@d19 1
a19 1
static char rcsid[] = "$Header$";
@
