head	1.2;
access;
symbols
	Helios_1_3_1:1.2
	Helios_C40_1_3_Official_Release:1.1
	Alenia_release:1.1
	Helios1_3:1.1
	C40_Field_Test_2:1.1
	C40_Field_Test_R1:1.1
	Helios13_beta:1.1;
locks; strict;
comment	@ * @;


1.2
date	93.07.12.13.34.52;	author nickc;	state Exp;
branches;
next	1.1;

1.1
date	91.12.04.18.09.55;	author martyn;	state Exp;
branches;
next	;


desc
@malloc with memory checking
@


1.2
log
@fixed compile time warnings
@
text
@/* xmalloc.c -- malloc with out of memory checking
   Copyright (C) 1990, 1991 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

#define STDC_HEADERS
#ifdef STDC_HEADERS
#include <stdlib.h>
#else
char *malloc ();
char *realloc ();
void free ();
#endif

extern void error ( int, int , const char *, ... );

/* Allocate N bytes of memory dynamically, with error checking.  */

char *
xmalloc (unsigned n )
{
  char *p;

  p = (char *)malloc (n);
  if (p == 0)
    /* Must exit with 2 for `cmp'. */
    error (2, 0, "virtual memory exhausted");
  return p;
}

/* Change the size of an allocated block of memory P to N bytes,
   with error checking.
   If P is NULL, run xmalloc.
   If N is 0, run free and return NULL.  */

char *
xrealloc (
     char *p,
     unsigned n )
{
  if (p == 0)
    return xmalloc (n);
  if (n == 0)
    {
      free (p);
      return 0;
    }
  p = (char *)realloc (p, n);
  if (p == 0)
    /* Must exit with 2 for `cmp'. */
    error (2, 0, "virtual memory exhausted");
  return p;
}
@


1.1
log
@Initial revision
@
text
@d18 1
d27 1
a27 1
void error ();
d32 1
a32 2
xmalloc (n)
     unsigned n;
d36 1
a36 1
  p = malloc (n);
d49 3
a51 3
xrealloc (p, n)
     char *p;
     unsigned n;
d60 1
a60 1
  p = realloc (p, n);
@
