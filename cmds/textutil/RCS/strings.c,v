head	1.6;
access;
symbols
	Helios_1_3_1:1.6
	Helios_C40_1_3_Official_Release:1.6
	Alenia_release:1.5
	Helios1_3:1.5
	C40_Field_Test_2:1.5
	C40_Field_Test_R1:1.4
	Helios13_beta:1.4
	Helios1_2_2:1.4
	Helios1_2_2Beta:1.4
	Helios1_2_1:1.4
	Helios1_2:1.4;
locks; strict;
comment	@ * @;


1.6
date	93.03.10.14.13.04;	author nickc;	state Exp;
branches;
next	1.5;

1.5
date	92.09.25.10.45.09;	author martyn;	state Exp;
branches;
next	1.4;

1.4
date	90.11.20.11.50.48;	author martyn;	state Exp;
branches;
next	1.3;

1.3
date	90.11.16.18.37.34;	author paul;	state Exp;
branches;
next	1.2;

1.2
date	90.11.14.16.37.22;	author martyn;	state Exp;
branches;
next	1.1;

1.1
date	90.08.30.15.01.48;	author james;	state Exp;
branches;
next	;


desc
@@


1.6
log
@fixed bug 1075 (strings not work on text files) plus two other undiscovered bugs (corrupts memory with strings longer than 255 characters, and fails to display an unterminated string at eof)
@
text
@/*
 * Strings:
 *
 * Finds and prints any ascii strings in a binary file.
 * A string is a sequence of 4 or more printable characters ending with a
 * newline or a null. If no input files exist, stdin is read.
 *
 * PAB 28/9/90
 *
 * RcsId:	$Id: strings.c,v 1.5 1992/09/25 10:45:09 martyn Exp nickc $	(C) Copyright 1990, Perihelion Software Ltd.
 *		$Log: strings.c,v $
 * Revision 1.5  1992/09/25  10:45:09  martyn
 * changed error  message
 *
 * Revision 1.4  1990/11/20  11:50:48  martyn
 * added -a option after much discussion with PB
 *
 * Revision 1.1  90/08/30  15:01:48  james
 * Initial revision
 * 
 */

#ifdef __TRAN
static char *rcsid = "$Header: /hsrc/cmds/textutil/RCS/strings.c,v 1.5 1992/09/25 10:45:09 martyn Exp nickc $";
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#define TRUE 		1
#define FALSE		0
#define MAX_STRING	255

int offsetopt	    = FALSE;
int all_terminators = FALSE;
int length	    = 4;

#define show_string   			\
  string[ seq ] = '\0';			\
  \
  if (offsetopt)			\
    printf("%8x %s\n",strstart,string); \
  else					\
    puts(string);			\
  \
  seq = 0


void
strings( FILE * file )
{
  char	string[ MAX_STRING ];
  int	c;
  int	strstart = 0;
  int	offset   = 0;
  int	seq      = 0;

  
  while ((c = fgetc( file )) != EOF)
    {
      if (isprint( c ))
	{
	  if (seq == 0)
	    strstart = offset;

	  if (seq >= MAX_STRING - 1)
	    {
	      show_string;
	    }

	  string[ seq++ ] = c;
	}
      else
	{
	  if ((c == '\n' || c == '\r' || c == '\0' || all_terminators)
	       && seq >= length)
	    {
	      show_string;
	    }
      
	  seq = 0;
	}
      
      offset++;
    }

  if (seq >= length)
    {
      show_string;
    }
  
  return;
  
} /* strings */


int
main(
     int 	argc,
     char **	argv )
{
  FILE *	fpi;

  
  while (argv[1][0] == '-')
    {
      switch (argv[1][1])
	{
	case 'o':
	  offsetopt = TRUE;
	  break;
	  
	case 'a':
	  all_terminators = TRUE;
	  break;
	  
	case 0:		/* lone '-' */
	  break;	/* for compatibility with unix! */
	  
	default:
	  if (!isdigit(argv[1][1]))
	    {
	      fprintf(stderr,"strings: unknown option '%s'", argv[1]);
	      exit(1);
	    }
	  
	  if ((length = atoi(argv[1] + 1)) >= MAX_STRING)
	    {
	      fprintf(stderr,"strings: -n too big");
	      exit(2);
	    }
	  
	  break;
	}
      
      argc--;
      argv++;
    }
  
  if (argc < 2)
    {
      strings(stdin);
    }
  else
    {
      while (--argc >= 1)
	{
	  if ((fpi = fopen(argv[argc],"rb")) == NULL)
	    {
	      fprintf(stderr, "strings: %s ", argv[argc]);
	      perror("");
	      exit(1);
	    }
	  
	  strings(fpi);
	  fclose(fpi);
	}
    }
  
  return 0;

} /* main */

@


1.5
log
@changed error  message
@
text
@d10 1
a10 1
 * RcsId:	$Id: strings.c,v 1.4 1990/11/20 11:50:48 martyn Exp martyn $	(C) Copyright 1990, Perihelion Software Ltd.
d12 3
d23 3
a25 1
static char *rcsid = "$Header: /hsrc/cmds/textutil/RCS/strings.c,v 1.4 1990/11/20 11:50:48 martyn Exp martyn $";
d32 7
a38 3
#define TRUE 1
#define FALSE 0
#define MAX_STRING 255
d40 9
a48 1
void strings(FILE *file);
a49 3
int offsetopt = FALSE;
int all_terminators = FALSE;
int length = 4;
d51 2
a52 4
int
main(argc, argv)
int argc;
char **argv;
d54 13
a66 1
	FILE *fpi;
d68 4
a71 28
	while(argv[1][0] == '-') {
		switch (argv[1][1]) {
		case 'o':
			offsetopt = TRUE;
			break;

		case 'a':
			all_terminators = TRUE;
			break;

		case 0:		/* lone '-' */
			break;	/* for compatibility with unix! */

		default:
			if (!isdigit(argv[1][1])) {
				fprintf(stderr,"strings: unknown option");
				exit(1);
			}
			
			if((length = atoi(argv[1] + 1)) >= MAX_STRING) {
				fprintf(stderr,"strings: -n too big");
				exit(2);
			}
			break;
		}
		argc--;
		argv++;
	}
d73 1
a73 3
	if (argc < 2)
	{
		strings(stdin);
d75 1
a75 1
	else
d77 7
a83 10
		while (--argc >= 1)
		{
			if ((fpi = fopen(argv[argc],"rb")) == NULL) {
				fprintf(stderr, "strings: %s ", argv[argc]);
				perror("");
				exit(1);
			}
			strings(fpi);
			fclose(fpi);
		}
d85 12
a97 2
	return 0;
}
d99 4
a102 1
void strings(FILE *file)
d104 1
a104 2
	char string[MAX_STRING];
	int c, strstart = 0, offset = 0, seq = 0;
d106 43
a148 1
	while ((c = fgetc(file)) != EOF)
d150 9
a158 19
		if (isprint(c)) {
			if (seq == 0)
				strstart = offset;
			string[seq++] = c;
		}
		else
		{
			if (((c == '\n' || c == '\0' || all_terminators)
				 && seq >= length)
                                 || seq >= MAX_STRING-1) {
				string[seq] = '\0';
				if (offsetopt)
					printf("%8x %s\n",strstart,string);
				else
					puts(string);
			}
			seq = 0;
		}
		offset++;
d160 6
a165 1
}
@


1.4
log
@added -a option after much discussion with PB
@
text
@d10 5
a14 2
 * RcsId:	$Id: strings.c,v 1.1 90/08/30 15:01:48 james Exp $	(C) Copyright 1990, Perihelion Software Ltd.
 *		$Log:	strings.c,v $
d20 1
a20 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/strings.c,v 1.1 90/08/30 15:01:48 james Exp $";
d82 2
a83 1
				perror("strings: input file");
@


1.3
log
@fixed redefinition of TRUE and FALSE
@
text
@d10 1
a10 1
 * RcsId:	$Id: strings.c,v 1.2 90/11/14 16:37:22 martyn Exp Locker: paul $	(C) Copyright 1990, Perihelion Software Ltd.
a11 3
 * Revision 1.2  90/11/14  16:37:22  martyn
 * re-wrote main loop to make it work !
 * 
d17 1
a17 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/strings.c,v 1.2 90/11/14 16:37:22 martyn Exp Locker: paul $";
a18 1
#include <helios.h>
d24 2
a25 4
#ifndef TRUE
# define TRUE 1
# define FALSE 0
#endif
d31 1
d47 4
d95 1
a95 1
	forever
d97 1
a97 3
		offset++;

		while (isprint(c = fgetc(file))) {
a99 2
			if (seq == MAX_STRING-1)
				break;
a100 1
			offset++;
d102 12
a113 10

		if(c  == EOF)
			break;

		if ( seq >= length ) {
			string[seq] = '\0';
			if (offsetopt)
				printf("%8x %s\n",strstart-1,string);
			else
				puts(string);
d115 1
a115 1
		seq = 0;
@


1.2
log
@re-wrote main loop to make it work !
@
text
@d10 1
a10 1
 * RcsId:	$Id: strings.c,v 1.1 90/08/30 15:01:48 james Exp $	(C) Copyright 1990, Perihelion Software Ltd.
d12 3
d20 1
a20 1
static char *rcsid = "$Header: /usr/perihelion/Helios/cmds/com/RCS/strings.c,v 1.1 90/08/30 15:01:48 james Exp $";
d28 4
a31 2
#define TRUE 1
#define FALSE 0
@


1.1
log
@Initial revision
@
text
@d10 5
a14 2
 * RcsId:	$Id$	(C) Copyright 1990, Perihelion Software Ltd.
 *		$Log$
d17 1
a17 1
static char *rcsid = "$Header$";
d19 1
d91 1
a91 1
	while ((c = fgetc(file)) != EOF)
d93 3
a95 1
		if (isprint(c)) {
d98 2
d101 1
d103 10
a112 10
		else
		{
			if (((c == '\n' || c == '\0') && seq >= length) || seq >= MAX_STRING-1) {
				string[seq] = '\0';
				if (offsetopt)
					printf("%8x %s\n",strstart,string);
				else
					puts(string);
			}
			seq = 0;
d114 1
a114 1
		offset++;
@
