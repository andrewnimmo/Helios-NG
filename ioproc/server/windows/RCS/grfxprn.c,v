head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	93.08.12.14.04.21;	author bart;	state Exp;
branches;
next	1.2;

1.2
date	92.07.29.16.13.04;	author bart;	state Exp;
branches;
next	1.1;

1.1
date	92.06.19.09.56.48;	author bart;	state Exp;
branches;
next	;


desc
@Windows-specific component of the I/O Server
@


1.3
log
@Rewrite of Windows-specific bits of the I/O Server by Mike Gunning
@
text
@/***************************************************************************/
/***************************************************************************/
/**		Helios I/O Server under Microsoft Windows		  **/
/**									  **/
/**		Copyright (C) 1990, CSIR - MIKOMTEK.			  **/
/**			      All Rights Reserved.			  **/
/**									  **/
/**   grfxprn.c 							  **/
/**									  **/
/**	This file contains the graphics printer interface to the I/O	  **/
/**	Server under Microsoft Windows. The server enables a user on the  **/
/**	transputer to display the contents of a metafile created under	  **/
/**	Windows, on a printer.						  **/
/**									  **/
/**   Author : S.A. Wilson  05/90					  **/
/**									  **/
/**   Site   : CSIR - MIKOMTEK						  **/
/**									  **/
/***************************************************************************/
/***************************************************************************/


#include "helios.h"

#if (MSWINDOWS && print_graphics)

/* The structure associated with each printer job being executed. This	 */
/* server has been designed so as to cater for a number of print jobs	 */
/* executing at the same time, which should be possible, especially if	 */
/* the MS-WINDOWS program SPOOLER can be loaded. However, the transputer */
/* programs only allow one print job at a time to be executed.		 */

typedef struct GrfPrnNode { DirEntryNode node;	  /* directory structure */
			    HWND	 handle;  /* window handle */
			    Attributes	 attr;
			    BOOL	 busy;	  /* still printing? */
			    BOOL	 abort;   /* user abort flag */
			    HWND	 DlgPrint;  /* dialog box handle */
			    Conode	 *writerco;
			    HDC 	 hDC;
			    int 	 stream_count;
			  } GrfPrnNode;

/* Printing in Windows effectively means that once you start the print job  */
/* your program is dedicated solely to doing the printing. However, the     */
/* server is a multitasking program, so if the print job could be suspended */
/* at regular intervals, we can get the server to continue running, even    */
/* while we are printing. This is possible by using banding when printing.  */
/* (Banding is covered in the MS-WINDOWS manuals.) It is not entirely	    */
/* satisfactory, as we have to play a complete metafile for each band of    */
/* the printer, which is still a lengthy process. So in an attempt to get   */
/* some sort of performance from the server, we need to suspend the print   */
/* job, between bands, for a fairly lengthy period of time. So I have left  */
/* it up to the user to decide how long the print job must be suspended     */
/* between bands. The user can supply an entry in the host.con file called  */
/* Print_Delay, and the value supplied there will be approximately the	    */
/* number of seconds the print job will be suspended between bands. If the  */
/* entry is not in the host.con, the delay will default to 30 seconds.	    */
/* Should the user not want any delays between the printing of the bands,   */
/* then the server will execute only the single print task for the duration */
/* of the print job.							    */

#define default_print_delay 30L

long FAR PASCAL GrfPrnProc(HWND, unsigned, WORD, LONG);
BOOL FAR PASCAL AbortProc(HDC, short);
BOOL FAR PASCAL PrintDlgProc(HWND, unsigned, WORD, DWORD);

extern	void	    get_meta_name(LPSTR);
PRIVATE void	    Print_Graphics(Conode *);
PRIVATE void	    Test_Finished(Conode *);
PRIVATE void	    Do_Print(Conode *);
PRIVATE GrfPrnNode *create_print_node(LPSTR);
PRIVATE void	    close_print_window(GrfPrnNode *);
PRIVATE HDC	    GetPrinterDC(void);
PRIVATE GrfPrnNode *find_print_name(LPSTR);


static DirHeader  GrfPrn_List;
static HANDLE	  metaMF = (HANDLE) 0;
static GrfPrnNode *print_window = (GrfPrnNode *) NULL;
static HDC	  printerDC = (HDC) 0;

/* GrfPrn_Routines holds the two routines that form the private protocol */
/* interface between the transputer and the I/O Server. 		 */

VoidFnPtr GrfPrn_Routines[2] = {  Print_Graphics, Test_Finished };

/* GrfPrn_Testfun is called when the I/O Server is initialised. It will   */
/* attempt to register a class of window associated with a print job. If  */
/* we are able to register the window class, the graphics printer server  */
/* will be available, otherwise not.					  */

void GrfPrn_Testfun(ret_code)
   bool *ret_code;
{
  *ret_code = print_registered;
}



void GrfPrn_InitServer(myco)
   Conode *myco;
{
   InitList(&(GrfPrn_List.list));  /* Initialise the linked list, containing */
   GrfPrn_List.entries = 0L;	   /* info on all active print jobs.	     */
}

/* GrfPrn_TidyServer will close down the graphics printer server on the PC.  */
/* It terminates all active print jobs, and closes all open windows	     */
/* associated with active print jobs.					     */

void GrfPrn_TidyServer(myco)
   Conode *myco;
{ GrfPrnNode *prn, *new_prn;

  for (prn = (GrfPrnNode *) GrfPrn_List.list.head;
       prn->node.node.next ne (GrfPrnNode *) NULL; )
  {
       new_prn = (GrfPrnNode *) prn->node.node.next;
       close_print_window(prn); 	  /* close window */
       prn = new_prn;
   }
   use(myco);
}

/* GrfPrn_Open is invoked by the standard Helios call Open, when applied to */
/* the graphics printer server. The function will open a new stream for     */
/* either the graphics printer server itself, for an active print job, or   */
/* for a print job. A new print job is activated only if the O_Create flag  */
/* is set, and the OpenMode is specified, in the Helios Open call.	    */
/*									    */
/* To start a new print job, we first initialise a GrfPrnNode structure for */
/* the print job, and add the node to the list of active print jobs. If     */
/* this successful then we open a new stream for the print job. 	    */

void GrfPrn_Open(myco)
   Conode *myco;
{
  char	     *temp;
  word	     openmode = mcb->Control[OpenMode_off];
  GrfPrnNode *prn;

  if (!strcmp(IOname, "grfxprn")) {	 /* Stream for the server? */
     NewStream(Type_Directory, Flags_Closeable,
		(word) ((DirHeader far *) &(GrfPrn_List)), WindowDir_Handlers);
     return;
  }

  for (temp = IOname; (*temp ne '/') && (*temp ne '\0'); temp++);

  if (*temp eq '\0') {
      Request_Return(EC_Error + SS_IOProc + EG_Name + EO_Message, 0L, 0L);
      return;
  }

  temp++;
  prn = find_print_name(temp);	 /* does the specified print job exist? */
  if (prn eq (GrfPrnNode *) NULL) {  /* No, so stream is for a new	*/
    if (openmode & O_Create) {	     /* print job			*/
	  /* Initialise a Graphnode for the new window */
       if ((prn = create_print_node(temp)) eq (GrfPrnNode *) NULL) {
	   Request_Return(EC_Error + SS_IOProc + EG_NoMemory + EO_File, 0L, 0L);
	   return;
       }
    }
    else {
      Request_Return(EC_Error + SS_IOProc + EG_Unknown + EO_File, 0L, 0L);
      return;
    }
  }

  NewStream(Type_File, Flags_Closeable + Flags_Interactive,
	      (word) ((GrfPrnNode far *) prn), GrfPrn_Handlers);
  use(myco);
}


/* GrfPrn_Locate services the Helios Locate Request. */

void GrfPrn_Locate(myco)
   Conode *myco;
{
   char       *name;
   word       temp;
   GrfPrnNode *prn;

   if (!strcmp(IOname, "grfxprn")) {  /* Locate the server */
      temp = FormOpenReply(Type_Directory, 0L, -1L, -1L);
      Request_Return(ReplyOK, open_reply, temp);
      return;
   }

   /* Locate request not for the server, but for an active print job */

   for (name = IOname; (*name ne '/') && (*name ne '\0'); name++);

   if (*name eq '\0') {
      Request_Return(EC_Error + SS_IOProc + EG_Name + EO_Message, 0L, 0L);
      return;
   }

   name++;
   prn = find_print_name(name);   /* Try to find print job */
   if (prn ne (GrfPrnNode *) NULL) {
      temp = FormOpenReply(Type_File, 0L, -1L, -1L);
      Request_Return(ReplyOK, open_reply, temp);
      return;
   }

   Request_Return(EC_Error + SS_IOProc + EG_Unknown + EO_File, 0L, 0L);
   use(myco);
}

word GrfPrn_InitStream(myco)
   Conode *myco;
{
   GrfPrnNode *prn = (GrfPrnNode *) myco->extra;

   prn->stream_count++;
   return(ReplyOK);
}


word GrfPrn_TidyStream(myco)
   Conode *myco;
{
   GrfPrnNode *prn = (GrfPrnNode *) myco->extra;

   prn->stream_count--;
   return(0L);
}


/* GrfPrn_Close is used to close down a print job. By this time the print */
/* job has been completed, and we need to close the window associated	  */
/* with the print job. When the window is closed, the GrfPrnNode	  */
/* structure associated with the print job is removed from the list of	  */
/* active print jobs, and freed.					  */

void GrfPrn_Close(myco)
   Conode *myco;
{
   GrfPrnNode  *prn = (GrfPrnNode *) myco->extra;

   if (mcb->MsgHdr.Reply ne 0L)
      Request_Return(ReplyOK, 0L, 0L);

   close_print_window(prn);   /* close window */

   GrfPrn_TidyStream(myco);

   Seppuku();
}


/* The transputer uses a private protocol to start the print job, and to */
/* interrogate the server, until the print job is finished.		 */

void GrfPrn_PrivateStream(myco)
   Conode *myco;
{
   int	      mess_no;

   mess_no	   = (int) mcb->MsgHdr.FnRc & 0xFFF;  /* get the message number */
   (GrfPrn_Routines[mess_no]) (myco);	 /* call the desired function */
}



/* GrfPrn_ObjectInfo is used to return information about either the graphics */
/* printer server, or an active print job. For the graphics printer server,  */
/* we return the standard ObjInfo structure used in the I/O Server, as well  */
/* as a list of capabilities and attributes associated with the printer      */
/* setup in Windows.							     */
/*									     */
/* For active print jobs, only the normal ObjInfo struture is returned.      */

void GrfPrn_ObjectInfo(myco)
   Conode *myco;
{
   DeviceInfo far *Heliosinfo = (DeviceInfo far *) mcb->Data;
   char 	  *name;
   GrfPrnNode	  *prn;
   int		  ct, DC_Created;

   Heliosinfo->obj.DirEntry.Type   = swap(Type_File);	    /* standard I/O */
   Heliosinfo->obj.DirEntry.Flags  = swap(0L);		    /* server return*/
   Heliosinfo->obj.DirEntry.Matrix = swap(DefFileMatrix);   /* to an	    */
   Heliosinfo->obj.Account	   = swap(0L);		    /* ObjectInfo   */
   Heliosinfo->obj.Creation	   = swap(Startup_Time);    /* request	    */
   Heliosinfo->obj.Access	   = swap(Startup_Time);
   Heliosinfo->obj.Modified	   = swap(Startup_Time);

   if (!strcmp(IOname, "grfxprn")) {
      Heliosinfo->obj.DirEntry.Type   = swap(Type_Directory);
      Heliosinfo->obj.DirEntry.Matrix = swap(DefDirMatrix);
      strcpy(Heliosinfo->obj.DirEntry.Name, "grfxprn");
      Heliosinfo->obj.Size	      = swap(0L);

      if (GrfPrn_List.entries > 0) {
	prn = (GrfPrnNode *) GrfPrn_List.list.head;
	printerDC = prn->hDC;
	DC_Created = 0;
      }
      else {
	 printerDC  = GetPrinterDC();
	 DC_Created = 1;
      }

      if (printerDC ne (HDC) 0) {   /* get info on the setup printer */

#ifdef never
	 for (ct = 2; ct < 25; ct += 2)
	    Heliosinfo->info[ct / 2 - 1] = (word) GetDeviceCaps(printerDC, ct);

	 Heliosinfo->info[12] = (word) GetDeviceCaps(printerDC, RASTERCAPS);
	 Heliosinfo->info[13] = (word) GetDeviceCaps(printerDC, ASPECTX);
	 Heliosinfo->info[14] = (word) GetDeviceCaps(printerDC, ASPECTY);
	 Heliosinfo->info[15] = (word) GetDeviceCaps(printerDC, ASPECTXY);
	 Heliosinfo->info[16] = (word) GetDeviceCaps(printerDC, LOGPIXELSX);
	 Heliosinfo->info[17] = (word) GetDeviceCaps(printerDC, LOGPIXELSY);
#endif

	 if (DC_Created) DeleteDC(printerDC);
      }
#ifdef never
      else {
	for (ct = 0; ct < 18; ct++)
	    Heliosinfo->info[ct] = 0L;
      }
#endif

      Request_Return(ReplyOK, 0L, (word) sizeof(DeviceInfo));
      return;
   }

   for (name = IOname; (*name ne '/') && (name ne '\0'); name++);

   if (*name eq '\0') {
      Request_Return(EC_Error + SS_IOProc + EG_Name + EO_Message, 0L, 0L);
      return;
   }

   name++;
   prn = find_print_name(name);

   if (prn ne (GrfPrnNode *) NULL) {   /* Info on open graphic windows */
      strcpy(Heliosinfo->obj.DirEntry.Name, prn->node.direntry.Name);
      Heliosinfo->obj.Size = swap((word) prn->stream_count);

      Request_Return(ReplyOK, 0L, (word) sizeof(ObjInfo));
      return;
   }

   Request_Return(EC_Error + SS_IOProc + EG_Unknown + EO_File, 0L, 0L);
   use(myco);
}



/* The above routines are the standard Helios I/O server routines, needed  */
/* to create and use a server in Helios. The routines that follow, are the */
/* routines that implement the printer functions.			   */


/***************************************************************************/
/* find_print_name							   */
/*									   */
/* Parameters :-							   */
/*									   */
/*	   name - A string identifying a particular print job		   */
/*									   */
/* Function :-								   */
/*	The function searches through the list of active print jobs until  */
/*	it finds the GrfPrnNode structure containing the string specified  */
/*	by name.							   */
/*									   */
/* Returns :-								   */
/*	The address of the GrfPrnNode structure if the string is found,    */
/*	NULL if the string was not found.				   */
/***************************************************************************/

GrfPrnNode *find_print_name(name)
   LPSTR name;
{
   GrfPrnNode *prn;  /* address of the GrfPrnNode structure */

   for (prn = (GrfPrnNode *) GrfPrn_List.list.head;   /* search through list */
	prn->node.node.next ne (Node *) NULL;	    /* of active print jobs  */
	prn = (GrfPrnNode *) prn->node.node.next)
   {
	if (!mystrcmp(name, &(prn->node.direntry.Name[0])))
	    return(prn);   /* return address of GrfPrnNode structure if found */
    }

    return((GrfPrnNode *) NULL);  /* NULL if not found */
}


/***************************************************************************/
/* find_print_DC							   */
/*									   */
/* Parameters :-							   */
/*									   */
/*	   prnDC - A printer device context				   */
/*									   */
/* Function :-								   */
/*	The function searches through the list of active print jobs until  */
/*	it finds the GrfPrnNode structure containing the device context    */
/*	specified by prnDC.						   */
/*									   */
/* Returns :-								   */
/*	The address of the GrfPrnNode structure if the context is found,   */
/*	NULL if not found.						   */
/***************************************************************************/


GrfPrnNode *find_print_DC(prnDC)
   HDC prnDC;
{
   GrfPrnNode *prn;  /* address of the GrfPrnNode structure */

   for (prn = (GrfPrnNode *) GrfPrn_List.list.head;   /* search through list */
	prn->node.node.next ne (Node *) NULL;	    /* of active print jobs  */
	prn = (GrfPrnNode *) prn->node.node.next)
   {
	if (prn->hDC eq prnDC)
	    return(prn);  /* return address of GrfPrnNode structure if found */
    }

    return((GrfPrnNode *) NULL);  /* NULL if not found */
}


/***************************************************************************/
/* find_print_dlg							   */
/*									   */
/* Parameters :-							   */
/*									   */
/*	   hDlg - A handle to a dialog box.				   */
/*									   */
/* Function :-								   */
/*	The function searches through the list of active print jobs until  */
/*	it finds the GrfPrnNode structure containing the handle specified  */
/*	by hDlg.							   */
/*									   */
/* Returns :-								   */
/*	The address of the GrfPrnNode structure if the handle is found,    */
/*	NULL if not found.						   */
/***************************************************************************/


GrfPrnNode *find_print_dlg(hDlg)
   HWND hDlg;
{
   GrfPrnNode *prn;  /* address of the GrfPrnNode structure */

   for (prn = (GrfPrnNode *) GrfPrn_List.list.head;   /* search through list */
	prn->node.node.next ne (Node *) NULL;	    /* of active print jobs  */
	prn = (GrfPrnNode *) prn->node.node.next)
   {
	if (prn->DlgPrint eq hDlg)
	    return(prn);   /* return address of GrfPrnNode structure if found */
    }

    return((GrfPrnNode *) NULL);  /* NULL if not found */
}


/***************************************************************************/
/* create_print_node							   */
/*									   */
/* Parameters :-							   */
/*									   */
/*	   temp - A string containing the name of a print job.		   */
/*									   */
/* Function :-								   */
/*	The function attempts initialise the print job. If first tries to  */
/*	allocate memory for the GrfPrnNode structure that will be	   */
/*	associated with the print job. If memory is allocated, the window  */
/*	associated with the print job will be opened and displayed. The    */
/*	GrfPrnNode structure is then initialised and added to the list of  */
/*	active print jobs.						   */
/*									   */
/* Returns :-								   */
/*	The address of the GrfPrnNode structure if successfully 	   */
/*	initialised, NULL if not.					   */
/***************************************************************************/


PRIVATE GrfPrnNode *create_print_node(temp)
  LPSTR temp;
{
   GrfPrnNode  *prn;	   /* address of the created GrfPrnNode structure */
   LOCALHANDLE memhandle;   /* local memory handle */

      /* Allocate memory for the GrfPrnNode structure. */

   prn = malloc(sizeof(GrfPrnNode));
   if (prn eq NULL)
    { Request_Return(EC_Warn + SS_IOProc + EG_NoMemory + EO_Server, 0L, 0L);
      return((GrfPrnNode *) NULL);
    }

   prn->stream_count = 0;	     /* no streams open yet   */
   strcpy(&(prn->node.direntry.Name[0]), temp);  /* insert name of */
				      /* window associated with structure */

   prn->handle = CreateWindow(Print_Name, temp, WS_OVERLAPPED, 0, 0, 100, 100,
			      NULL, NULL, PROGINSTANCE, NULL);
   if (prn->handle eq (HWND) 0) {
      LocalUnlock(memhandle);
      LocalFree(memhandle);
      return((GrfPrnNode *) NULL);
   }

   ShowWindow(prn->handle, SW_MINIMIZE);  /* show window associated with */
   UpdateWindow(prn->handle);		  /* print job. 		 */

   prn->abort	 = FALSE;		  /* initialise GrfPrnNode structure */
   prn->busy	 = FALSE;
   prn->DlgPrint = (HWND) 0;
   prn->hDC	 = (HDC) 0;
   prn->node.direntry.Type = Type_File;
   GrfPrn_List.entries++;
   InitAttributes((Attributes far *) &(prn->attr));
   AddTail(&(prn->node.node), &(GrfPrn_List.list)); /* Add to list of  */
   return(prn); 				   /* print jobs      */
}

/***************************************************************************/
/* close_print_window							   */
/*									   */
/* Parameters :-							   */
/*									   */
/*	   prn - A pointer to a GrfPrnNode structure.			   */
/*									   */
/* Function :-								   */
/*	The function tidies up the print job associated with prn, by	   */
/*	closing the dialog window if it has not been closed, deleting the  */
/*	printer device context if it has not been deleted, and closing the */
/*	window associated with the print job. The structure pointed to by  */
/*	prn is removed from the list of active print jobs, and is deleted. */
/*									   */
/* Returns :-								   */
/*	Nothing.							   */
/***************************************************************************/


PRIVATE void close_print_window(prn)
   GrfPrnNode *prn;
{					     /* close dialog box */
   if (prn->DlgPrint ne (HWND) 0) DestroyWindow(prn->DlgPrint);
   if (prn->hDC ne (HDC) 0) DeleteDC(prn->hDC);   /* delete device context */
   DestroyWindow(prn->handle);		/* close window */

   GrfPrn_List.entries--;		/* remove prn from list of active */
   free(Remove(&(prn->node.node)));
}


/***************************************************************************/
/* GetPrinterDC 							   */
/*									   */
/* Parameters :-							   */
/*									   */
/*	   None.							   */
/*									   */
/* Function :-								   */
/*	The function obtains a device context for the printer defined in   */
/*	the win.ini file as the device printer. 			   */
/*									   */
/* Returns :-								   */
/*	A handle to the device context if successful, 0 if not. 	   */
/***************************************************************************/


PRIVATE HDC GetPrinterDC(void)
{
   HDC	hDC;
   char *device, *driver, *output, *temp;

/* we first extract the relevant information from the win.ini file. */

   GetProfileString("windows", "device", "", &misc_buffer1[0], 64);

/* we then extract the name of the printer driver, the ouput port and the */
/* name of the printer, from the string returned by GetProfileString.	  */

   device = &misc_buffer1[0];	 /* get printer name */
   for (temp = device; (*temp ne ',') && (*temp ne '\0'); temp++);
   if (*temp eq '\0') return(0);
   *temp = '\0';
   temp++;

   for (; (*temp eq ' ') && (*temp ne '\0'); temp++);
   if (*temp eq '\0') return(0);

   driver = temp;	    /* get driver name */
   for (; (*temp ne ',') && (*temp ne '\0'); temp++);
   if (*temp eq '\0') return(0);
   *temp = '\0';
   temp++;

   for (; (*temp eq ' ') && (*temp ne '\0'); temp++);
   if (*temp eq '\0') return(0);

   output = temp;	   /* get output port */
   for (; (*temp ne ',') && (*temp ne ' ') && (*temp ne '\0'); temp++);
   *temp = '\0';

/* create the printer device context */

   hDC = CreateDC((LPSTR) driver, (LPSTR) device, (LPSTR) output, NULL);
   return(hDC);
}


/***************************************************************************/
/* Print_Graphics			     message number = 0 	   */
/*									   */
/* Parameters :-							   */
/*									   */
/*	   myco - A pointer to a conode structure.			   */
/*									   */
/* Function :-								   */
/*	The function attempts to start up the print job. It first has to   */
/*	take the metafile name, which is passed in the data vector, and    */
/*	convert it to DOS format. A handle to the metafile has then to be  */
/*	obtained. If this fails, it is assumed that the file name is	   */
/*	invalid, and the print job is aborted. If a handle to the metafile */
/*	is obtained, the printer device context has to be created. If the  */
/*	printer device context cannot be created, the job is aborted.	   */
/*	The function then creates a new coroutine, which will actually do  */
/*	the required printing. The new coroutine is added to the polling   */
/*	list, and the GrfPrnNode structure associated with the print job   */
/*	is fully initailised. The coroutine that will do the printing is   */
/*	activated.							   */
/*									   */
/* Returns :-								   */
/*	Nothing.							   */
/***************************************************************************/


void Print_Graphics(myco)
   Conode *myco;
{
   word       replyport = mcb->MsgHdr.Reply;
   word       name_size = mcb->MsgHdr.DataSize;   /* length of file name */
   GrfPrnNode *prn = (GrfPrnNode *) myco->extra;
   Conode     *writer = (Conode *) NULL;
   char       name[80];

   mcb->Data[(int) name_size] = '\0';	 /* make sure file name is NULL  */
   get_meta_name(&name[0]);		 /* terminated */
   metaMF = GetMetaFile(&name[0]);
   if (metaMF eq (HANDLE) 0) {
      ServerDebug("Unable to get metafile handle!");
      Request_Return(EC_Error + SS_IOProc + EG_NoMemory + EO_File, 0L, 0L);
      return;
   }

   printerDC = GetPrinterDC();	 /* create printer device context */
   if (printerDC eq (HDC) 0) {
      ServerDebug("Unable to get printer device context!!");
      DeleteMetaFile(metaMF);
      Request_Return(EC_Error + SS_IOProc + EG_NoMemory + EO_File, 0L, 0L);
      return;
   }

   writer = NewCo(Do_Print);	  /* create coroutine to do print */
   if (writer eq (Conode *) NULL) {
      ServerDebug("Unable to start up writer coroutine!");
      DeleteMetaFile(metaMF);
      DeleteDC(printerDC);
      Request_Return(EC_Error + SS_IOProc + EG_NoMemory + EO_File, 0L, 0L);
      return;
   }

   AddTail(&(writer->node), PollingCo);
   writer->id	     = -1L;	    /* initialise coroutine, and GrfPrnNode */
   writer->timelimit = MAXTIME;     /* structure			    */
   writer->name[0]   = '\0';
   writer->flags     = 0L;
   writer->type      = 0L;
   prn->writerco     = writer;
   prn->hDC	     = printerDC;
   print_window      = prn;
   prn->busy	     = TRUE;

   mcb->MsgHdr.Reply = replyport;
   Request_Return(ReplyOK, 0L, 0L);
   StartCo(writer);
}


/***************************************************************************/
/* Do_Print								   */
/*									   */
/* Parameters :-							   */
/*									   */
/*	   myco - A pointer to a conode structure.			   */
/*									   */
/* Function :-								   */
/*	The function runs as a seperate coroutine in the server. It has to */
/*	perform the task of displaying the graphics held in a metafile on  */
/*	a printer. Parameters required by the routine are passed via	   */
/*	statics set up in Print_Graphics. The routine first has to create  */
/*	a dialog box, and an abort function, which enables a user to abort */
/*	the print job at his/her discretion. If this fails, the print job  */
/*	is aborted. The function then attempts to start a document on the  */
/*	printer. If this fails the print job is aborted.		   */
/*									   */
/*	Once the document has been started the function proceeds with the  */
/*	printing of the metafile supplied. It uses the technique of	   */
/*	banding, which is covered in the MS-WINDOWS manuals. To allow the  */
/*	server to continue running while the function is printing, it has  */
/*	to suspend the printing after each band has been completed. The    */
/*	duration of this suspension can be specified by the user, by	   */
/*	inserting the Print_Delay field in the host.con file. If the field */
/*	is not supplied, the default delay will be 30 seconds.		   */
/*									   */
/*	Once the print job has terminated, or the user has aborted it, the */
/*	dialog box, printer device context, etc is deleted, and the	   */
/*	coroutine treminates.						   */
/*									   */
/* Returns :-								   */
/*	Nothing.							   */
/***************************************************************************/


PRIVATE void Do_Print(myco)
   Conode *myco;
{
   HDC	      prnDC = printerDC;
   HANDLE     hMF   = metaMF;
   GrfPrnNode *prn  = print_window;
   FARPROC    lpfnDlgProc, lpfnAbortProc;
   int	      escape_error;
   RECT       rect;
   word       timelimit,  print_delay = get_int_config("Print_Delay");

   if (print_delay eq Invalid_config) print_delay = default_print_delay;
   prn->abort = FALSE;

/* create a dialog box */

   lpfnDlgProc	 = MakeProcInstance(PrintDlgProc, PROGINSTANCE);
   prn->DlgPrint = CreateDialog(PROGINSTANCE, "PrintDlgBox", prn->handle,
				lpfnDlgProc);

   if (prn->DlgPrint eq (HWND) 0) {
      ServerDebug("Insufficient memory to print graphics!!");
      FreeProcInstance(lpfnDlgProc);
      prn->busy = FALSE;
      DeleteMetaFile(hMF);
      DeleteDC(prnDC);
      prn->hDC = (HDC) 0;
      Remove(&(myco->node));
      Seppuku();
    }

/* set up abort proc */

    lpfnAbortProc = MakeProcInstance(AbortProc, PROGINSTANCE);
    if (Escape(prnDC, SETABORTPROC, 0, (LPSTR) lpfnAbortProc, NULL) < 0) {
	ServerDebug("Error setting printer abort function!!");
	goto print_done;
    }

    myco->type = CoReady;
    Suspend();
    if (myco->type eq CoSuicide) goto print_done;

/* start document on the printer */

    if (Escape(prnDC, STARTDOC, strlen(&(prn->node.direntry.Name[0])),
	       &(prn->node.direntry.Name[0]), NULL) < 0) {
	 ServerDebug("Printer not ready!!");
	 goto print_done;
    }

    escape_error = Escape(prnDC, NEXTBAND, 0, NULL, (LPSTR) &rect);
    if (escape_error < 0) {
	ServerDebug("Printer error during first newband!!");
	goto print_done;
    }

    while (!IsRectEmpty(&rect) && !prn->abort && (escape_error > 0) &&
	   (myco->type ne CoSuicide)) {

       timelimit = Now + divlong((OneSec * print_delay), time_unit);
       myco->timelimit = timelimit;

       forever {    /* delay print job for print_delay seconds */
	 myco->type = CoReady;
	 Suspend();

	 if (myco->type eq CoSuicide) {   /* abort print job */
	     SendMessage(prn->DlgPrint, WM_COMMAND, 0, 0L);
	     break;
	 }
	 if (prn->abort) break;
	 if (myco->type eq CoTimeout) break;
	 (*lpfnAbortProc) (prnDC, 0);
       }

       if ((myco->type ne CoSuicide) && !prn->abort) {
	  (*lpfnAbortProc) (prnDC, 0);

	  if (!PlayMetaFile(prnDC, hMF)) {
	     if (!prn->abort) {
		ServerDebug("Printer error while playing meta file!!");
		SendMessage(prn->DlgPrint, WM_COMMAND, 0, 0L);
	     }
	     continue;
	  }

	  (*lpfnAbortProc) (prnDC, 0);

	  escape_error = Escape(prnDC, NEXTBAND, 0, NULL, (LPSTR) &rect);
       }
    }

    if (escape_error > 0) {
       if (prn->abort)
	  Escape(prnDC, ABORTDOC, 0, NULL, NULL);
       else
	  Escape(prnDC, ENDDOC, 0, NULL, NULL);
    }
    else
       ServerDebug("Print Failed!! -- Error : %d\r\n", escape_error);

print_done:		 /* tidy up print job */
    prn->busy = FALSE;
    DeleteMetaFile(hMF);
    if (!prn->abort) DestroyWindow(prn->DlgPrint);
    prn->DlgPrint = (HWND) 0;
    DeleteDC(prnDC);
    prn->hDC = (HDC) 0;
    FreeProcInstance(lpfnDlgProc);
    FreeProcInstance(lpfnAbortProc);
    Remove(&(myco->node));
    Seppuku();
}


/***************************************************************************/
/* Test_Finished			 message number = 1		   */
/*									   */
/* Parameters :-							   */
/*									   */
/*	   myco - A pointer to a conode structure.			   */
/*									   */
/* Function :-								   */
/*	The function sits and waits for the print job to terminate. Once   */
/*	the print job has terminated, a suitable reply is sent back to the */
/*	transputer.							   */
/*									   */
/*	The transputer makes use of this routine to determine when the	   */
/*	print job finishes. Once the print job has finished, the	   */
/*	transputer can orchestrate the tidying up of the graphics printer  */
/*	server. 							   */
/*									   */
/* Returns :-								   */
/*	Nothing.							   */
/***************************************************************************/


void Test_Finished(myco)
   Conode *myco;
{
   word       timelimit = Now + divlong(mcb->Control[0], time_unit);
   word       replyport = mcb->MsgHdr.Reply;
   GrfPrnNode *prn = (GrfPrnNode *) myco->extra;

   AddTail(Remove(&(myco->node)), PollingCo);
   forever {
      myco->timelimit = timelimit;   /* sit here and wait for a print */
      myco->type      = CoReady;     /* job to finish.		      */
      Suspend();

      if (!prn->busy) { 		     /* is the print job finished? */
	 mcb->MsgHdr.Reply = replyport;
	 Request_Return(ReplyOK, 0L, 0L);  /* yes, send reply to transputer */
	 PostInsert(Remove(&(myco->node)), Heliosnode);
	 return;
      }

      if (myco->type eq CoSuicide)
	return;

      if (myco->type eq CoTimeout) break;
   }

   /* print job has not been completed by the time the Helios request  */
   /* timed out, so send back reply to that effect.		       */

   mcb->MsgHdr.Reply = replyport;
   Request_Return(EC_Recover + SS_IOProc + EG_Timeout + EO_Stream, 0L, 0L);
   PostInsert(Remove(&(myco->node)), Heliosnode);
}


/* The standard window function required by Windows, for a window class */
/* We dont expect any action to take place in the window, so we dont	*/
/* bother to process any messages associated with windows associated	*/
/* with print jobs.							*/

long FAR PASCAL GrfPrnProc(hWnd, iMessage, wParam, lParam)
    HWND     hWnd;
    unsigned iMessage;
    WORD     wParam;
    LONG     lParam;
{
    return(DefWindowProc(hWnd, iMessage, wParam, lParam));
}


/* The abort procedure required by the printer driver in Windows. This */
/* procedure is called by Windows during printing, and is essential if */
/* we wish to allow other applications and tasks to run in the Windows */
/* environment while we are printing.				       */

BOOL FAR PASCAL AbortProc(hPrnDC, nCode)
   HDC	 hPrnDC;
   short nCode;
{
   MSG	      msg;
   GrfPrnNode *prn;

   if (nCode < 0) {
      ServerDebug("AbortProc recieved nCode of %d", nCode);
      return(FALSE);
   }

   prn = find_print_DC(hPrnDC);
   if (prn eq (GrfPrnNode *) NULL) {
      ServerDebug("PRINTER ERROR : Unable to locate printer node!!");
      return(FALSE);
   }

   while (!prn->abort && PeekMessage(&msg, NULL, 0, 0, PM_REMOVE)) {
      if (!prn->DlgPrint ||
	  !IsDialogMessage(prn->DlgPrint, &msg)) {
	      TranslateMessage(&msg);
	      DispatchMessage(&msg);
      }
   }
   return(!prn->abort);
}


/* The function associated with the dialog box created during a print job */
/* and is used to allow the user to terminate a print job at his/her	  */
/* discretion.								  */

BOOL FAR PASCAL PrintDlgProc(hDlg, iMessage, wParam, lParam)
   HWND     hDlg;
   unsigned iMessage;
   WORD     wParam;
   DWORD    lParam;
{
   GrfPrnNode *prn;

   prn = find_print_dlg(hDlg);
   if (prn eq (GrfPrnNode *) NULL) prn = print_window;

   switch(iMessage) {
      case WM_INITDIALOG :
	       SetWindowText(hDlg, prn->node.direntry.Name);
	       EnableMenuItem(GetSystemMenu(hDlg, FALSE), SC_CLOSE, MF_GRAYED);
	       break;

      case WM_COMMAND :
	       prn->abort = TRUE;
	       DestroyWindow(hDlg);
	       prn->DlgPrint = 0;
	       break;

      default :
	    return FALSE;
   }
   return TRUE;
}


#endif
@


1.2
log
@Patches to compile under Microsoft C 7.0
@
text
@d313 1
d323 1
d327 1
d332 1
@


1.1
log
@Initial revision
@
text
@d144 1
a144 1
  if (!lstrcmp(IOname, "grfxprn")) {	 /* Stream for the server? */
d188 1
a188 1
   if (!lstrcmp(IOname, "grfxprn")) {  /* Locate the server */
d295 1
a295 1
   if (!lstrcmp(IOname, "grfxprn")) {
d298 1
a298 1
      lstrcpy(Heliosinfo->obj.DirEntry.Name, "grfxprn");
d345 1
a345 1
      lstrcpy(Heliosinfo->obj.DirEntry.Name, prn->node.direntry.Name);
d503 1
a503 1
   lstrcpy(&(prn->node.direntry.Name[0]), temp);  /* insert name of */
@
