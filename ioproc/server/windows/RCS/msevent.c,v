head	1.1;
access;
symbols;
locks; strict;
comment	@ * @;


1.1
date	92.06.19.09.58.13;	author bart;	state Exp;
branches;
next	;


desc
@Windows-specific component of the I/O Server
@


1.1
log
@Initial revision
@
text
@/****************************************************************************/
/*									    */
/*    Helios I/O Server Under MS- WINDOWS				    */
/*									    */
/*    CopyRight (C) 1991, Concurrent Technology Systems.		    */
/*    All Rights Reserved.						    */
/*									    */
/*    File : msevents.c 						    */
/*									    */
/*    This file is an event server, which sends back events to Helios. The  */
/*    events include menu selections on the normal shell windows, and	    */
/*    repaint and keyboard messages on the graphic windows.		    */
/*									    */
/*    Author : S.A. Wilson						    */
/*									    */
/****************************************************************************/

#define MsEvent_Module

#include "helios.h"

/* also include the header file required for this program module */

#include "msevent.h"


#define 	      MsEvent_limit 64
PRIVATE MsEvent       MsEvent_Table[MsEvent_limit];
PRIVATE int	      MsEvent_head, MsEvent_tail, MsEvent_Loaded = 0;
int		      MsEvent_Active = 0;
PRIVATE word	      MsEvent_count, MsEvent_ack;
event_handler msevent_handler;

void MsEvent_InitServer(myco)
Conode *myco;
{ MsEvent_head	= 0;
  MsEvent_tail	= 0;
  MsEvent_count = 0L;
  MsEvent_ack	= -1L;
  msevent_handler.port = (word) NULL;
  MsEvent_Loaded = 1;
  use(myco)
}

void MsEvent_TidyServer(myco)
Conode *myco;
{ MsEvent_Loaded = 0;
  MsEvent_Active = 0;
  use(myco)
}

void MsEvent_Testfun(result)
bool *result;
{
  *result = 1;
}

void new_msevent(type, id, word1, word2)
   SHORT type, id;
   word  word1, word2;
{ register MsEvent *curr_msevent;

  curr_msevent = &(MsEvent_Table[MsEvent_head]);

  curr_msevent->Type			 = Event_MsEvent;
  curr_msevent->Counter 		 = MsEvent_count++;
  curr_msevent->Stamp			 = Now;
  curr_msevent->Device.GenEvent.FnCode	 = type;
  curr_msevent->Device.GenEvent.WindowId = id;
  curr_msevent->Device.GenEvent.word1	 = word1;
  curr_msevent->Device.GenEvent.word2	 = word2;

  MsEvent_head = (MsEvent_head + 1) & (MsEvent_limit - 1);
  if (MsEvent_head eq MsEvent_tail)	  /* buffer overflow */
    { MsEvent_tail = (MsEvent_tail + 1) & (MsEvent_limit - 1);
      curr_msevent->Type |= Flag_Buffer;
    }
}  

PRIVATE void fn( send_msevents, (void));
void do_msevent()
{
	  /* Are there any ms events outstanding, and is there a handler */
	  /* for the ms events (i.e. has there been an enable_events) ?  */
  if ((msevent_handler.port ne (word) NULL) && (MsEvent_tail ne MsEvent_head))
    send_msevents();
}


void copy_msevent(to, from)
   MsEvent far *to, far *from;
{ to->Type     = from->Type;
  to->Counter  = from->Counter;
  to->Stamp    =
	  divlong( ((from->Stamp - initial_stamp) * 1000L),(word) CLK_TCK);
  to->Device.Junk.junk1 = from->Device.Junk.junk1;
  to->Device.Junk.junk2 = from->Device.Junk.junk2;
  to->Device.Junk.junk3 = from->Device.Junk.junk3;
}



/**
*** When poll_the_devices() detects that there are outstanding ms events
*** and there is a ms event handler active it calls this routine to send
*** the data off to the event handler on the transputer. There is a limit
*** of IOCDataMax on the amount I can send, so that limits the number of
*** events in the table which I can use up. As usual for event handlers I
*** have to worry about the need for acknowledgements and some data may
*** have got lost due to buffer overflow. The data is copied into a message
*** data area, the message is initialised and sent off, and that is it.
**/

PRIVATE void send_msevents()
{
  MsEvent far *table = (MsEvent far *) mcb->Data;
  int	  count  = 0;
  word    FnRc   = 0L;

               /* Should the handler acknowledge ? */
  if ((MsEvent_count - MsEvent_ack) > (MsEvent_limit / 2))
    FnRc = EventRc_Acknowledge;

                       /* Copy the events into the message data area,       */
                       /* and check for lost events due to buffer overflow. */
  while ((MsEvent_tail ne MsEvent_head) &&
	 (count < (IOCDataMax / sizeof(MsEvent))))
    { if ((MsEvent_Table[MsEvent_tail].Type & Flag_Buffer) ne 0L)
        { FnRc |= EventRc_IgnoreLost;
	  MsEvent_Table[MsEvent_tail].Type &= ~Flag_Buffer;
	}
      copy_msevent((MsEvent far *) &(table[count++]),
		 (MsEvent far *) &MsEvent_Table[MsEvent_tail]);
      MsEvent_tail = (MsEvent_tail + 1) & (MsEvent_limit - 1);
    }

  mcb->MsgHdr.Reply = msevent_handler.port;
  mcb->MsgHdr.Dest  = 0L;
  mcb->MsgHdr.Flags = MsgHdr_Flags_preserve + MsgHdr_Flags_sacrifice;
							     /* and send it */
  Request_Return(FnRc, 0L, (word)(sizeof(MsEvent) * count));
}

/**
*** opening a msevent is very straightforward.
**/

void MsEvent_Open(myco)
Conode *myco;
{
  if (strcmp(IOname, "msevents") )
    { Request_Return(EC_Error + SS_IOProc + EG_Name + EO_Message, 0L, 0L);
      return;
    }

  NewStream(Type_File, Flags_Closeable + Flags_Interactive, NULL, 
	    MsEvent_Handlers);
  use(myco)
}

word MsEvent_InitStream(myco)
Conode *myco;
{
  myco->extra = (word far *) NULL; /* A new stream does not own the event handler */
  return(ReplyOK);
}

word MsEvent_TidyStream(myco)
Conode *myco;
{	   /* does this stream own ms events ?*/
	   /* The stream must not time out if it still owns the event handler */
  if ((event_handler far *) myco->extra ne (event_handler far *) NULL)
   return(1L);
  else
   return(0L);
}

void MsEvent_Close(myco)
Conode *myco;
{ if (mcb->MsgHdr.Reply ne 0L)
    Request_Return(ReplyOK, 0L, 0L);
  if ((event_handler far *) myco->extra ne (event_handler far *) NULL)
   { ((event_handler far *) myco->extra)->port = 0L;
     MsEvent_Active = 0;
   }
  Seppuku();
}

void MsEvent_EnableEvents(myco)
Conode *myco;
{
  word mask = mcb->Control[EnableEventsMask_off] & Event_MsEvent;

  if (mask eq 0L)			      /* disable a ms handler */
    { if (msevent_handler.port ne (word) NULL)	/* is there a ms handler ? */
       { msevent_handler.port = (word) NULL;
	 msevent_handler.ownedby = (word *) NULL;
	 MsEvent_Active = 0;
       }
      mcb->Control[Reply1_off] = 0L;
      Request_Return(ReplyOK, 1L, 0L);
    }
  else                                       /* install an event handler */
    { if (msevent_handler.port ne (word) NULL) /* disable an existing handler */
	 msevent_handler.ownedby = (word *) NULL;
      else
	MsEvent_Active = 1;
      msevent_handler.port = mcb->MsgHdr.Reply;
      msevent_handler.ownedby = (word *) &(myco->extra);
      myco->extra  = (ptr) &msevent_handler;
      mcb->Control[Reply1_off] = mask;
      mcb->MsgHdr.Flags = MsgHdr_Flags_preserve;
      Request_Return(ReplyOK, 1L, 0L);
    } 
}

/**
*** MsEvent_acknowledge is used to tell me that I can release some of my buffer
*** space. Because my buffers are statically allocated and I allow for buffer
*** overflow anyway it is not essential. However, I suspect that its use
*** reduces the frequency of the Ignore_Lost flag and hence the system will
*** recover better if a message is lost. I do not check the validity of the
*** number acknowledged because this allows the other end to acknowledge
*** upto MaxInt events immediately.
**/

void MsEvent_Acknowledge(myco)
Conode *myco;
{
  MsEvent_ack  = mcb->Control[AcknowledgeCount_off];
  use(myco)
}

/**
*** MsEvent_NegAcknowledge is used to indicate that one or more messages has been
*** lost. The mcb provided contains the number of the next message expected,
*** and I have to reset my tail pointer to correspond to that event. Then
*** poll_the_devices() will take care of sending the data again.
***
*** There are severe problems if the buffer is almost full, the negative
*** acknowledgement takes me back to an event that has been overwritten or is
*** about to be overwritten, and a new ms interrupt occurs... I need
*** semaphore protection and truly parallel processes to do this properly, but
*** I have to make do with an ST or a PC. Hence I can but hope that this routine
*** will never cause a crash, or not regularly enough to trace the problem to
*** me....
**/

void MsEvent_NegAcknowledge(myco)
Conode *myco;
{
  word count	= mcb->Control[NegAcknowledgeCount_off];
  word curcount = MsEvent_Table[MsEvent_tail].Counter;

                                   /* validate the event count */
  if (count > curcount) return;    /* cannot negacknowledge an unsent message */

/**
*** Now move backwards through MsEvent_table until I reach the current head
*** pointer or until the current event is the one after the one acknowledged.
**/
  while (curcount ne count)
   { if (MsEvent_tail eq ((MsEvent_head + 1) & (MsEvent_limit - 1)))
       break;      /* cannot go back any further */
           /* Yukk, I need semaphores here but I have not got them */
     MsEvent_tail = (MsEvent_tail - 1) & (MsEvent_limit - 1);
     curcount	= MsEvent_Table[MsEvent_tail].Counter;
   }

  if (curcount ne count)                  /* Not reached correct event */
    MsEvent_Table[MsEvent_tail].Type |= Flag_Buffer;   /* so buffer overflow */

                /* A negative acknowledgement tells me which message has been */
                /* received. */
  MsEvent_ack = count - 1;

  use(myco)
}

/*---------------------------------------------------------------------------*/
/* Similar code for MsMouse events					     */

#define 	      MsMouse_limit 64
PRIVATE MsEvent       MsMouse_Table[MsMouse_limit];
PRIVATE int	      MsMouse_head, MsMouse_tail, MsMouse_Loaded = 0;
int		      MsMouse_Active = 0;
PRIVATE word	      MsMouse_count, MsMouse_ack;
event_handler	      msmouse_handler;

void MsMouse_InitServer(myco)
Conode *myco;
{ MsMouse_head	= 0;
  MsMouse_tail	= 0;
  MsMouse_count = 0L;
  MsMouse_ack	= -1L;
  msmouse_handler.port = (word) NULL;
  MsMouse_Loaded = 1;
  use(myco)
}

void MsMouse_TidyServer(myco)
Conode *myco;
{ MsMouse_Loaded = 0;
  MsMouse_Active = 0;
  use(myco)
}

void MsMouse_Testfun(result)
bool *result;
{
  *result = 1;
}

void new_msmouse(mouse_x, mouse_y, mouse_buttons, winid)
   SHORT mouse_x, mouse_y;
   word  mouse_buttons;
   int	 winid;
{ register MsEvent *curr_msmouse;

  curr_msmouse = &(MsMouse_Table[MsMouse_head]);

  curr_msmouse->Type			 = Event_MsMouse;
  curr_msmouse->Counter 		 = MsMouse_count++;
  curr_msmouse->Stamp			 = Now;
  curr_msmouse->Device.Mouse.X		 = mouse_x;
  curr_msmouse->Device.Mouse.Y		 = mouse_y;
  curr_msmouse->Device.Mouse.Buttons	 = mouse_buttons;
  curr_msmouse->Device.Mouse.WinId	 = winid;

  MsMouse_head = (MsMouse_head + 1) & (MsMouse_limit - 1);
  if (MsMouse_head eq MsMouse_tail)	  /* buffer overflow */
    { MsMouse_tail = (MsMouse_tail + 1) & (MsMouse_limit - 1);
      curr_msmouse->Type |= Flag_Buffer;
    }
}  

PRIVATE void fn( send_msmouses, (void));
void do_msmouse()
{
	  /* Are there any ms events outstanding, and is there a handler */
	  /* for the ms events (i.e. has there been an enable_events) ?  */
  if ((msmouse_handler.port ne (word) NULL) && (MsMouse_tail ne MsMouse_head))
    send_msmouses();
}


void copy_msmouse(to, from)
   MsEvent *to, far *from;
{ to->Type     = from->Type;
  to->Counter  = from->Counter;
  to->Stamp    =
	  divlong( ((from->Stamp - initial_stamp) * 1000L),(word) CLK_TCK);
  to->Device.Junk.junk1 = from->Device.Junk.junk1;
  to->Device.Junk.junk2 = from->Device.Junk.junk2;
  to->Device.Junk.junk3 = from->Device.Junk.junk3;
}



/**
*** When poll_the_devices() detects that there are outstanding ms events
*** and there is a ms event handler active it calls this routine to send
*** the data off to the event handler on the transputer. There is a limit
*** of IOCDataMax on the amount I can send, so that limits the number of
*** events in the table which I can use up. As usual for event handlers I
*** have to worry about the need for acknowledgements and some data may
*** have got lost due to buffer overflow. The data is copied into a message
*** data area, the message is initialised and sent off, and that is it.
**/

PRIVATE void send_msmouses()
{
  MsEvent *table = (MsEvent *) mcb->Data;
  int	  count  = 0;
  word    FnRc   = 0L;

               /* Should the handler acknowledge ? */
  if ((MsMouse_count - MsMouse_ack) > (MsMouse_limit / 2))
    FnRc = EventRc_Acknowledge;

                       /* Copy the events into the message data area,       */
                       /* and check for lost events due to buffer overflow. */
  while ((MsMouse_tail ne MsMouse_head) &&
	 (count < (IOCDataMax / sizeof(MsEvent))))
    { if ((MsMouse_Table[MsMouse_tail].Type & Flag_Buffer) ne 0L)
        { FnRc |= EventRc_IgnoreLost;
	  MsMouse_Table[MsMouse_tail].Type &= ~Flag_Buffer;
	}
      copy_msmouse((MsEvent *) &(table[count++]),
		 (MsEvent *) &MsMouse_Table[MsMouse_tail]);
      MsMouse_tail = (MsMouse_tail + 1) & (MsMouse_limit - 1);
    }

  mcb->MsgHdr.Reply = msmouse_handler.port;
  mcb->MsgHdr.Dest  = 0L;
  mcb->MsgHdr.Flags = MsgHdr_Flags_preserve + MsgHdr_Flags_sacrifice;
							     /* and send it */
  Request_Return(FnRc, 0L, (word)(sizeof(MsEvent) * count));
}

/**
*** opening a msmouse is very straightforward.
**/

void MsMouse_Open(myco)
Conode *myco;
{
  if (strcmp(IOname, "msmouse") )
    { Request_Return(EC_Error + SS_IOProc + EG_Name + EO_Message, 0L, 0L);
      return;
    }

  NewStream(Type_File, Flags_Closeable + Flags_Interactive, NULL, 
	    MsMouse_Handlers);
  use(myco)
}

word MsMouse_InitStream(myco)
Conode *myco;
{
  myco->extra = (word far *) NULL; /* A new stream does not own the event handler */
  return(ReplyOK);
}

word MsMouse_TidyStream(myco)
Conode *myco;
{	   /* does this stream own ms events ?*/
	   /* The stream must not time out if it still owns the event handler */
  if ((event_handler far *) myco->extra ne (event_handler far *) NULL)
   return(1L);
  else
   return(0L);
}

void MsMouse_Close(myco)
Conode *myco;
{ if (mcb->MsgHdr.Reply ne 0L)
    Request_Return(ReplyOK, 0L, 0L);
  if ((event_handler far *) myco->extra ne (event_handler far *) NULL)
   { ((event_handler far *) myco->extra)->port = 0L;
     MsMouse_Active = 0;
   }
  Seppuku();
}

void MsMouse_EnableEvents(myco)
Conode *myco;
{
  word mask = mcb->Control[EnableEventsMask_off] & Event_MsMouse;

  if (mask eq 0L)			      /* disable a ms handler */
    { if (msmouse_handler.port ne (word) NULL)	/* is there a ms handler ? */
       { msmouse_handler.port = (word) NULL;
	 msmouse_handler.ownedby = (word *) NULL;
	 MsMouse_Active = 0;
       }
      mcb->Control[Reply1_off] = 0L;
      Request_Return(ReplyOK, 1L, 0L);
    }
  else                                       /* install an event handler */
    { if (msmouse_handler.port ne (word) NULL) /* disable an existing handler */
	 msmouse_handler.ownedby = (word *) NULL;
      else
	MsMouse_Active = 1;
      msmouse_handler.port = mcb->MsgHdr.Reply;
      msmouse_handler.ownedby = (word *) &(myco->extra);
      myco->extra  = (ptr) &msmouse_handler;
      mcb->Control[Reply1_off] = mask;
      mcb->MsgHdr.Flags = MsgHdr_Flags_preserve;
      Request_Return(ReplyOK, 1L, 0L);
    } 
}

/**
*** MsMouse_acknowledge is used to tell me that I can release some of my buffer
*** space. Because my buffers are statically allocated and I allow for buffer
*** overflow anyway it is not essential. However, I suspect that its use
*** reduces the frequency of the Ignore_Lost flag and hence the system will
*** recover better if a message is lost. I do not check the validity of the
*** number acknowledged because this allows the other end to acknowledge
*** upto MaxInt events immediately.
**/

void MsMouse_Acknowledge(myco)
Conode *myco;
{
  MsMouse_ack  = mcb->Control[AcknowledgeCount_off];
  use(myco)
}

/**
*** MsMouse_NegAcknowledge is used to indicate that one or more messages has been
*** lost. The mcb provided contains the number of the next message expected,
*** and I have to reset my tail pointer to correspond to that event. Then
*** poll_the_devices() will take care of sending the data again.
***
*** There are severe problems if the buffer is almost full, the negative
*** acknowledgement takes me back to an event that has been overwritten or is
*** about to be overwritten, and a new ms interrupt occurs... I need
*** semaphore protection and truly parallel processes to do this properly, but
*** I have to make do with an ST or a PC. Hence I can but hope that this routine
*** will never cause a crash, or not regularly enough to trace the problem to
*** me....
**/

void MsMouse_NegAcknowledge(myco)
Conode *myco;
{
  word count	= mcb->Control[NegAcknowledgeCount_off];
  word curcount = MsMouse_Table[MsMouse_tail].Counter;

                                   /* validate the event count */
  if (count > curcount) return;    /* cannot negacknowledge an unsent message */

/**
*** Now move backwards through MsMouse_table until I reach the current head
*** pointer or until the current event is the one after the one acknowledged.
**/
  while (curcount ne count)
   { if (MsMouse_tail eq ((MsMouse_head + 1) & (MsMouse_limit - 1)))
       break;      /* cannot go back any further */
           /* Yukk, I need semaphores here but I have not got them */
     MsMouse_tail = (MsMouse_tail - 1) & (MsMouse_limit - 1);
     curcount	= MsMouse_Table[MsMouse_tail].Counter;
   }

  if (curcount ne count)                  /* Not reached correct event */
    MsMouse_Table[MsMouse_tail].Type |= Flag_Buffer;   /* so buffer overflow */

                /* A negative acknowledgement tells me which message has been */
                /* received. */
  MsMouse_ack = count - 1;

  use(myco)
}

@
