head	1.4;
access;
symbols;
locks; strict;
comment	@ * @;


1.4
date	92.09.08.20.19.44;	author craig;	state Exp;
branches;
next	1.3;

1.3
date	92.09.06.13.18.36;	author craig;	state Exp;
branches;
next	1.2;

1.2
date	92.07.29.16.13.04;	author bart;	state Exp;
branches;
next	1.1;

1.1
date	92.06.19.09.59.12;	author bart;	state Exp;
branches;
next	;


desc
@Windows-specific component of the I/O Server
@


1.4
log
@Fixed test for packet length > MAXETHERPKT
@
text
@/*
-- ===========================================================================
-- MS Windows DPMI support
-- crf: June 1992
-- ===========================================================================
RcsId: $Id: win_ether.c,v 1.3 1992/09/06 13:18:36 craig Exp $
*/

#define DPMI_INT		0x31

/*
-- DPMI Int 31H functions
*/

/*
-- crf: 30/08/92
-- The Windows kernel provides the following DPMI functions that were
-- previously invoked via interrupts :
-- ALLOCATE_DESCRIPTOR	0x0000		AllocSelector()		
-- FREE_DESCRIPTOR	0x0001		FreeSelector()
-- SET_SEGMENT_BASE	0x0007		SelSelectorBase()
-- SET_SEGMENT_LIMIT	0x0008		SetSelectorLimit()
*/

#define GET_REAL_INT_VECTOR	0x0200
#define SIMULATE_REAL_INT	0x0300
#define ALLOC_REAL_CALLBACK	0x0303
#define FREE_REAL_CALLBACK	0x0304

#ifdef ETHER_DEBUG
#define GET_VERSION		0x0400
#endif /* ETHER_DEBUG */

typedef struct {
	UWORD _di, _si, _bp ;	
	UWORD _reserved ;	
	UWORD _bx, _dx, _cx, _ax ;	
	USHORT _flags ;
	USHORT _es, _ds, _fs, _gs ;
	USHORT _ip, _cs ;
	USHORT _sp, _ss ;
} real_reg_struct ;

typedef struct {
	byte access_type_buffer [PKT_TYPE_LEN] ;
	byte address_buffer [LEN_ETHER_ADDR] ;
	real_reg_struct callback_regs ;
	real_reg_struct real_int_regs ;
	byte tx_buffer [MAXETHERPKT] ;
	byte rx_buffer [MAX_PKT_TABLE] [MAXETHERPKT] ;
} DOS_data_struct ;

PRIVATE DOS_data_struct *DOS_data ;
PRIVATE USHORT wSegment = 0 ;
PRIVATE USHORT wSelector = 0 ;

PRIVATE USHORT SEG_real_int_handler = 0 ;
PRIVATE USHORT OFF_real_int_handler = 0 ;

PRIVATE USHORT SEG_real_callback = 0 ;
PRIVATE USHORT OFF_real_callback = 0 ;

PRIVATE SHORT DPMI_err = 0 ;

/*
------------------------------------------------------------------------------
*/

#define TEST_DPMI_ERROR							\
	if (regs.x.cflag)						\
	{								\
		DPMI_err = regs.x.ax ;  				\
		return -1 ;						\
	}

#define RETURN_ERROR(msg)						\
	{								\
		(void) notify_error (msg) ;				\
		return -1 ;						\
	}

#define SIMULATE_INT(interrupt_no)					\
	if (simulate_real_mode_int (interrupt_no,			\
				&DOS_data->real_int_regs,		\
				regs, sregs) < 0)			\
		RETURN_ERROR ("Failed to simulate real mode interrupt")

/*
------------------------------------------------------------------------------
*/

/*
-- DPMI services
*/
PRIVATE SHORT allocate_descriptor (USHORT *) ;
PRIVATE SHORT free_descriptor (USHORT *) ;
PRIVATE SHORT set_segment_base_addr (USHORT, USHORT, USHORT) ;
PRIVATE SHORT set_segment_limit (USHORT) ;
PRIVATE SHORT get_real_int_vector (USHORT, USHORT *, USHORT *) ;
PRIVATE SHORT simulate_real_mode_int (USHORT, real_reg_struct *, 
				union _REGS, struct _SREGS) ;
PRIVATE SHORT alloc_real_callback (void (*) (void), real_reg_struct *, 
				USHORT *, USHORT *) ;
PRIVATE SHORT free_callback_addr (USHORT *, USHORT *) ;
#ifdef ETHER_DEBUG
PRIVATE SHORT get_version (SHORT *, SHORT *) ;
#endif /* ETHER_DEBUG */

/*
-- Support routines
*/
PRIVATE SHORT allocate_dos_memory (DOS_data_struct **, USHORT *, USHORT *) ;
PRIVATE SHORT free_dos_memory (USHORT *) ;
PRIVATE word DPMI_getvect (USHORT, USHORT) ;
PRIVATE SHORT init_selector (USHORT, USHORT, USHORT) ;
PRIVATE void set_up_real_mode_int (SHORT, real_reg_struct *, 
				union _REGS, struct _SREGS) ;
PRIVATE void release_DPMI_resources (USHORT *, USHORT *, USHORT *) ;

/*
-- Called from pcasm.cpp
*/
void DPMI_callback (void) ;

/*
------------------------------------------------------------------------------
*/

PRIVATE SHORT allocate_dos_memory (DOS_data_struct **DOS_data_ptr,
				USHORT *selector, USHORT *segment)
{
	UWORD dMem = GlobalDosAlloc (sizeof (DOS_data_struct)) ;
	if (!dMem)
		return (-1) ;
	*segment = HIWORD (dMem) ;
	*selector = LOWORD (dMem) ;

	FP_SEG(*DOS_data_ptr) = *selector;
	FP_OFF(*DOS_data_ptr) = 0;

#ifdef ETHER_DEBUG
	notify ("Allocated %d bytes of DOS memory", sizeof (DOS_data_struct)) ;
	notify ("wSelector = 0x%4x", *selector) ;
	notify ("wSegment  = 0x%4x", *segment) ;

	{
		SHORT major_version, minor_version ;
		if (get_version (&major_version, &minor_version) < 0)
			(void) notify_error ("Warning: failed to get DPMI version") ;
		else
			notify ("DPMI version: %d.%02d", major_version, 
							minor_version) ;
	}
#endif /* ETHER_DEBUG */

	return (0) ;
}

/*
------------------------------------------------------------------------------
*/

PRIVATE SHORT free_dos_memory (USHORT *DOS_mem_selector)
{
	if (*DOS_mem_selector)
	{
#ifdef ETHER_DEBUG
		notify ("GlobalDosFree: selector = 0x%4x", *DOS_mem_selector) ;
#endif /* ETHER_DEBUG */
		if (GlobalDosFree (*DOS_mem_selector))
			return (-1) ;
		*DOS_mem_selector = 0 ;
	}
	return (0) ;
}

/*
------------------------------------------------------------------------------
*/

USHORT wDataSelector ;

PRIVATE SHORT allocate_descriptor (USHORT *selector)
{
/*
-- crf: 30/08/92
-- Note: AllocSelector(uSelector) - according to SDK Programmer's Reference 
-- Vol 2: Functions p. 11, if uSelector is zero, the function returns a new,
-- uninitialized selector. Hence, I would expect to allocate a new selector
-- as follows: *selector = AllocSelector(0). This does in fact appear to 
-- allocate a new selector; however, there are problems associated with 
-- setting the selector limit (GetSelectorLimit() always returns 0 after
-- limit has been set). I have therefore followed the strategy used in the
-- Tdosmem.c example (refer windev/samples/tdosmem) where AllocSelector() is
-- used to create a copy of an existing selector.
*/
	wDataSelector = HIWORD ((DWORD) (USHORT *) &wDataSelector) ;
	*selector = AllocSelector (wDataSelector) ;
	if (*selector == 0)
		return (-1) ;	
#ifdef ETHER_DEBUG
	notify ("Allocated descriptor: selector = 0x%4x", *selector) ;
#endif /* ETHER_DEBUG */
	return (0) ;
}

/*
------------------------------------------------------------------------------
*/

PRIVATE SHORT free_descriptor (USHORT *selector)
{
	if (*selector)
	{
#ifdef ETHER_DEBUG
		notify ("Freeing descriptor: selector = 0x%4x", *selector) ;
#endif /* ETHER_DEBUG */
		if (FreeSelector (*selector) != 0)
			return (-1) ;
	}
	return (0) ;
}

/*
------------------------------------------------------------------------------
*/

PRIVATE SHORT set_segment_base_addr (USHORT selector, 
				USHORT real_seg, USHORT real_off)
{
	UWORD linear_base_addr = (real_seg << 4) + real_off ;
#ifdef ETHER_DEBUG
	notify ("SetSelectorBase: selector = 0x%x  base_addr = 0x%x", selector, linear_base_addr) ;
#endif /* ETHER_DEBUG */
	if (SetSelectorBase (selector, linear_base_addr) == 0)
		return (-1) ;
/*
-- crf: check that it worked ...
*/
	if (GetSelectorBase (selector) != linear_base_addr)
		return (-1) ;
	return (0) ;
}

/*
------------------------------------------------------------------------------
*/

#define SEG_LIMIT	0xFFFF

PRIVATE SHORT set_segment_limit (USHORT selector)
{
#ifdef ETHER_DEBUG
	notify ("SetSelectorLimit: selector = 0x%x  SEG_LIMIT = 0x%x", selector, SEG_LIMIT) ;
#endif /* ETHER_DEBUG */

/*
-- crf: should not really be setting the segment limit like this ...
-- DPMI spec. V1.0 p. 63 : "Client programs must use the LSL instruction to
-- *query* the limit for a descriptor"
*/
	SetSelectorLimit (selector, SEG_LIMIT) ;
	{
/*
-- crf: check that it worked ...
*/
		UWORD limit ;
		limit = GetSelectorLimit (selector) ;
#ifdef ETHER_DEBUG
		notify ("GetSelectorLimit: selector = 0x%x  limit = 0x%x", selector, limit) ;
#endif /* ETHER_DEBUG */
		if (limit != SEG_LIMIT)
			return (-1) ;
	}		
	return (0) ;
}

/*
------------------------------------------------------------------------------
*/

PRIVATE SHORT get_real_int_vector (USHORT int_no,
				USHORT *seg_int_handler, 
				USHORT *off_int_handler)
{
	union _REGS regs;
	struct _SREGS sregs ;

	_segread (&sregs) ;

	regs.x.ax = GET_REAL_INT_VECTOR ;
	regs.h.bl = (UBYTE) int_no ;
	_int86x (DPMI_INT, &regs, &regs, &sregs) ;
	TEST_DPMI_ERROR
/*
-- CX:DX = segment:offset of real mode interrupt handler
*/	
	*seg_int_handler = regs.x.cx ;
	*off_int_handler = regs.x.dx ;
	return (0) ;
}

/*
------------------------------------------------------------------------------
*/

PRIVATE SHORT simulate_real_mode_int (USHORT int_no, 
				real_reg_struct *real_regs,
				union _REGS regs, struct _SREGS sregs)
{
	set_up_real_mode_int (int_no, real_regs, regs, sregs) ;

	sregs.es = FP_SEG (real_regs) ;
	regs.x.di = FP_OFF (real_regs) ;

	regs.x.ax = SIMULATE_REAL_INT ;
	regs.h.bl = (UBYTE) int_no ;
	regs.h.bh = 0 ;
	regs.x.cx = 0 ;

/*
-- crf: this is a bit dodgy - only necessary when ds = wSegment
*/
	sregs.ds = wSelector ;

	_int86x (DPMI_INT, &regs, &regs, &sregs) ;
	TEST_DPMI_ERROR
	return (0) ;
}

/*
------------------------------------------------------------------------------
*/

PRIVATE SHORT alloc_real_callback (void (*callback_fn) (void), 
	real_reg_struct *real_reg_data, 
	USHORT *seg_callback, USHORT *off_callback)
{
	union _REGS regs ;
	struct _SREGS sregs ;

	_segread (&sregs) ;

	regs.x.ax = ALLOC_REAL_CALLBACK ;

	sregs.ds  = FP_SEG (callback_fn) ;
	regs.x.si = FP_OFF (callback_fn) ;

	sregs.es = FP_SEG (real_reg_data) ;
	regs.x.di = FP_OFF (real_reg_data) ;

	_int86x (DPMI_INT, &regs, &regs, &sregs) ;
	TEST_DPMI_ERROR

	*seg_callback = regs.x.cx ;
	*off_callback = regs.x.dx ;

	return (0) ;
}

/*
------------------------------------------------------------------------------
*/

PRIVATE SHORT free_callback_addr (USHORT *seg_callback, USHORT *off_callback)
{
	union _REGS regs ;
	struct _SREGS sregs ;
 	_segread (&sregs) ;

	if (*seg_callback)
	{
#ifdef ETHER_DEBUG
		notify ("Freeing real mode callback address") ;
#endif /* ETHER_DEBUG */
		regs.x.ax = FREE_REAL_CALLBACK ;
		regs.x.cx = *seg_callback ;
		regs.x.dx = *off_callback ;

		_int86x (DPMI_INT, &regs, &regs, &sregs) ;
		TEST_DPMI_ERROR
		*seg_callback = 0 ;
		*off_callback = 0 ;
	}
	return (0) ;
}

/*
------------------------------------------------------------------------------
*/

#ifdef ETHER_DEBUG
PRIVATE SHORT get_version (SHORT *major_version, SHORT *minor_version)
{
	union _REGS regs ;
	struct _SREGS sregs ;

	_segread (&sregs) ;
	regs.x.ax = GET_VERSION ;
	_int86x (DPMI_INT, &regs, &regs, &sregs) ;
	TEST_DPMI_ERROR
/*
-- AH = major version
-- AL = minor version
-- BX = flags
-- CX = processor type
-- DH = current value of virtual master PIC base interrupt
-- DL = current value of virtual slave  PIC base interrupt
*/
        *major_version = regs.h.ah ;
        *minor_version = regs.h.al ;

	return 0 ;
}
#endif /* ETHER_DEBUG */

/*
------------------------------------------------------------------------------
*/

PRIVATE word DPMI_getvect (USHORT int_no, USHORT selector)
{
	void *vec_ptr ;

	if (get_real_int_vector (int_no, &SEG_real_int_handler, 
				&OFF_real_int_handler) < 0)
		RETURN_ERROR ("Failed to get real mode interrupt vector") ;

	if (init_selector (selector, 
			SEG_real_int_handler, OFF_real_int_handler) < 0)
		RETURN_ERROR ("Failed to initialize selector") ;

	FP_SEG (vec_ptr) = selector ;
	FP_OFF (vec_ptr) = 0 ;

	return (word) (vec_ptr) ;
}

/*
------------------------------------------------------------------------------
*/

PRIVATE SHORT init_selector (USHORT selector,
			USHORT real_seg, USHORT real_off)
{
	if (set_segment_base_addr (selector, real_seg, real_off) < 0)
		RETURN_ERROR ("Failed to set segment base address") ;
	if (set_segment_limit (selector) < 0)
		RETURN_ERROR ("Failed to set segment limit") ;

	return 0 ;
}

/*
------------------------------------------------------------------------------
*/

PRIVATE void set_up_real_mode_int (SHORT int_no, real_reg_struct *real_regs,
			union _REGS regs, struct _SREGS sregs)
{
	real_regs->_di = regs.x.di ;
	real_regs->_si = regs.x.si ;
	real_regs->_bp = 0 ;
	real_regs->_reserved = 0 ;
	real_regs->_bx = regs.x.bx ;
	real_regs->_dx = regs.x.dx ;
	real_regs->_cx = regs.x.cx ;
	real_regs->_ax = regs.x.ax ;
	{
		USHORT temp_flags ;
		_asm
		{
			push ax
			pushf
			pop ax
			mov temp_flags, ax
			pop ax
		}
		real_regs->_flags = temp_flags ;
	}
	real_regs->_es = sregs.es ;
	real_regs->_ds = sregs.ds ;
	real_regs->_fs = 0 ;
	real_regs->_gs = 0 ;
/*
-- DPMI spec. V1.0 p. 87
-- CS:IP not used
*/
	real_regs->_ip = 0 ;
	real_regs->_cs = 0 ;

/*
-- DPMI spec. V1.0 p. 87
-- if SS:SP = 0, DPMI host will provide real mode stack
*/
	real_regs->_sp = 0 ;
	real_regs->_ss = 0 ;
}

/*
------------------------------------------------------------------------------
*/

PRIVATE void release_DPMI_resources (USHORT *DOS_mem_selector, 
			USHORT *seg_callback, USHORT *off_callback)
{
	if (free_dos_memory (DOS_mem_selector) < 0)
		(void) notify_error ("Warning: failed to release DOS memory") ;

	if (free_callback_addr (seg_callback, off_callback) < 0)
		(void) notify_error ("Warning: failed to release callback address") ;
}

/*
------------------------------------------------------------------------------
*/

PRIVATE SHORT rcvr_index = 0 ;

/*
-- crf: this routine is fundamentally equivalent to PROC receiver in pcasm.cpp
*/

void DPMI_callback ()
{
	real_reg_struct *real_regs = &DOS_data->callback_regs ;

/*
-- DPMI spec. v1.0 p. 36
-- set proper address for resumption of real mode execution
*/
	real_regs->_cs = SEG_real_int_handler ;
	real_regs->_ip = OFF_real_int_handler ;

/*
;	======================================================================
;	Which call is this ? If 1st (AX == 0), return pointer to buffer in
;	ES:DI. If second (AX == 1), the packet has been copied into the 
;	buffer
;	======================================================================
*/
	if (real_regs->_ax == 0)
	{
/*
;	======================================================================
;	1st call (AX == 0)
;	Enter with CX == packet length
;	Return pointer to buffer in ES:DI
;	======================================================================

;	======================================================================
;	Check for buffer overflow
;	======================================================================
*/
		if (pkt_rcvd == MAX_PKT_TABLE)
		{
#ifdef ETHER_DEBUG
			pkt_overflow = 1 ;
#endif /* ETHER_DEBUG */
			goto discard_pkt ;
		}

/*
;	======================================================================
;	Check if packet will fit into buffer
;	======================================================================
*/
		if ((SHORT) real_regs->_cx > MAXETHERPKT)
		{
			pkt_too_long = (SHORT) real_regs->_cx ;
			goto discard_pkt ;
		}

/*
;	======================================================================
;	Put packet length into pkt_len vector
;	======================================================================
*/
		pkt_len [rcvr_index] = (SHORT) real_regs->_cx ;

/*
;	======================================================================
;	Set pointer to buffer in ES:DI
;	======================================================================
*/
		{
			byte *rx_ptr = DOS_data->rx_buffer [rcvr_index] ;
			real_regs->_es = wSegment ;
			real_regs->_di = FP_OFF (rx_ptr) ;
		}
	}
	else
	{
/*
;	======================================================================
;	2nd call (AX == 1)
;	Packet has been copied into buffer
;	======================================================================

;	======================================================================
;	Increment index (with wrap around) and packet count
;	======================================================================
*/
		rcvr_index = ++rcvr_index % MAX_PKT_TABLE ;
		pkt_rcvd ++ ;
	}

	return ;

/*
;	======================================================================
;	Error - return 0:0 in ES:DI
;	(pkt driver will throw packet away ...)
;	======================================================================
*/

discard_pkt:
		real_regs->_es = 0 ;
		real_regs->_di = 0 ;
}

/*
------------------------------------------------------------------------------
*/
@


1.3
log
@1. Cleaned up
2. Where applicable, replaced DPMI interrupts with Windows kernel functions
3. Fixed bug in DPMI_callback() (address for resumption of real mode
execution was not being set when packets were discarded)
@
text
@d6 1
a6 1
RcsId: $Id: win_ether.c,v 1.10 1992/09/06 12:33:09 craig Exp $
d568 1
a568 1
		if (real_regs->_cx > MAXETHERPKT)
@


1.2
log
@Patches to compile under Microsoft C 7.0
@
text
@d6 1
a6 1
RcsId: $Id: win_ether.c,v 1.1 1992/06/19 09:59:12 bart Exp $
d14 11
a24 4
#define ALLOCATE_DESCRIPTOR	0x0000
#define FREE_DESCRIPTOR		0x0001
#define SET_SEGMENT_BASE	0x0007
#define SET_SEGMENT_LIMIT	0x0008
a92 7
-- DOS System routines
*/

UWORD	FAR PASCAL GlobalDosAlloc (UWORD) ;
USHORT	FAR PASCAL GlobalDosFree (USHORT) ;

/*
d101 2
a102 2
				union REGS, struct SREGS) ;
PRIVATE SHORT alloc_real_callback (SHORT (*) (void), real_reg_struct *, 
d117 1
a117 1
				union REGS, struct SREGS) ;
d181 2
d185 16
a200 9
	union REGS regs ;
	struct SREGS sregs ;
	_segread (&sregs) ;

	regs.x.ax = ALLOCATE_DESCRIPTOR ;
	regs.x.cx = 1 ;
	_int86x (DPMI_INT, &regs, &regs, &sregs) ;
	TEST_DPMI_ERROR
	*selector = regs.x.ax ;
a212 4
	union REGS regs ;
	struct SREGS sregs ;
 	_segread (&sregs) ;

d218 2
a219 5
		regs.x.ax = FREE_DESCRIPTOR ;
		regs.x.bx = *selector ;
		_int86x (DPMI_INT, &regs, &regs, &sregs) ;
		TEST_DPMI_ERROR
		*selector = 0 ;
d231 11
a241 15
	union REGS regs;
	struct SREGS sregs ;

	_segread (&sregs) ;

	regs.x.ax = SET_SEGMENT_BASE ;
	regs.x.bx = selector ;
	{
		UWORD linear_base_addr = (real_seg << 4) +
					real_off ;
		regs.x.cx = HIWORD (linear_base_addr) ;
		regs.x.dx = LOWORD (linear_base_addr) ;
	}
	_int86x (DPMI_INT, &regs, &regs, &sregs) ;
	TEST_DPMI_ERROR
d253 3
a255 2
	union REGS regs;
	struct SREGS sregs ;
a256 6
	_segread (&sregs) ;

	regs.x.ax = SET_SEGMENT_LIMIT ;
	regs.x.bx = selector ;
	regs.x.cx = 0 ;
	regs.x.dx = SEG_LIMIT ;
d262 13
a274 2
	_int86x (DPMI_INT, &regs, &regs, &sregs) ;
	TEST_DPMI_ERROR
d286 2
a287 2
	union REGS regs;
	struct SREGS sregs ;
d309 1
a309 1
				union REGS regs, struct SREGS sregs)
d335 1
a335 1
PRIVATE SHORT alloc_real_callback (SHORT (*callback_fn) (void), 
d339 2
a340 2
	union REGS regs ;
	struct SREGS sregs ;
d367 2
a368 2
	union REGS regs ;
	struct SREGS sregs ;
d395 2
a396 2
	union REGS regs ;
	struct SREGS sregs ;
d459 1
a459 1
			union REGS regs, struct SREGS sregs)
d527 1
d529 7
a606 7

/*
-- DPMI spec. v1.0 p. 36
-- set proper address for resumption of real mode execution
*/
	real_regs->_cs = SEG_real_int_handler ;
	real_regs->_ip = OFF_real_int_handler ;
@


1.1
log
@Initial revision
@
text
@d6 1
a6 1
RcsId: $Id: win_ether.c,v 1.4 1992/06/14 14:54:07 craig Exp $
d185 1
a185 1
	segread (&sregs) ;
d189 1
a189 1
	int86x (DPMI_INT, &regs, &regs, &sregs) ;
d206 1
a206 1
 	segread (&sregs) ;
d215 1
a215 1
		int86x (DPMI_INT, &regs, &regs, &sregs) ;
d232 1
a232 1
	segread (&sregs) ;
d242 1
a242 1
	int86x (DPMI_INT, &regs, &regs, &sregs) ;
d258 1
a258 1
	segread (&sregs) ;
d269 1
a269 1
	int86x (DPMI_INT, &regs, &regs, &sregs) ;
d285 1
a285 1
	segread (&sregs) ;
d289 1
a289 1
	int86x (DPMI_INT, &regs, &regs, &sregs) ;
d322 1
a322 1
	int86x (DPMI_INT, &regs, &regs, &sregs) ;
d338 1
a338 1
	segread (&sregs) ;
d348 1
a348 1
	int86x (DPMI_INT, &regs, &regs, &sregs) ;
d365 1
a365 1
 	segread (&sregs) ;
d376 1
a376 1
		int86x (DPMI_INT, &regs, &regs, &sregs) ;
d394 1
a394 1
	segread (&sregs) ;
d396 1
a396 1
	int86x (DPMI_INT, &regs, &regs, &sregs) ;
@
