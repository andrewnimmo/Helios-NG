head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	92.03.06.11.53.47;	author martyn;	state Exp;
branches;
next	1.2;

1.2
date	91.07.22.13.45.50;	author martyn;	state Exp;
branches;
next	1.1;

1.1
date	91.07.22.13.42.48;	author martyn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@new version from TELMAT
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--             H E L I O S   U N I X  L I N K  I / O   S Y S T E M      --
--             ---------------------------------------------------      --
--                                                                      --
--             Copyright (C) 1989, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
--      smmouse.c                                                        --
--                                                                      --
------------------------------------------------------------------------*/
/* SccsId: 3.8 28/3/90\ Copyright (C) 1989, Perihelion Software Ltd.        */

#include "../helios.h"

/**
*** NB : all of this code is untested. It is also unfinished, since the
*** code to convert host mouse and keyboard events to Helios events is
*** not supplied. It does, however, give a good basis with which to start.
**/
/**
*** This code implements support for the mouse and raw keyboard devices.
*** There are 5 main routines for each device. The initialise routine is
*** called when the Server starts up or reboots. The tidy routine is called
*** when the Server exits or just before a reboot. The start routine is
*** called when Helios wants mouse events. The stop routine is called if
*** Helios no longer wants mouse messages. The read_events routine is
*** a polling routine to check for new data.
***
*** At present the init routine is a no-op, but it may have to reset some
*** more statics. The tidy routine closes the file descriptor to the device
*** if it is currently open. The start routine opens the device, and
*** if successful it enables a MultiWait - the Server will now select() on
*** the file descriptor as well as the link and any other devices being
*** polled. The stop routine disables the MultiWait and closes the file
*** descriptor.
**/

PRIVATE int  mouse_fd    = -1;
PRIVATE WORD mouse_ready = 0L;

void initialise_mouse()
{
}

void tidy_mouse()
{ if (mouse_fd ne -1)
   close(mouse_fd);
  mouse_fd = -1;
  mouse_ready = 0L;
}

void start_mouse()
{ 
  mouse_fd = open("/dev/mouse", O_RDWR);
  if (mouse_fd ne -1)
   { AddMultiwait(Multi_MouseInput, &mouse_ready, mouse_fd);
     mouse_ready = 0L;
   }
}

void stop_mouse()
{ if (mouse_fd ne -1)
   { ClearMultiwait(Multi_MouseInput, &mouse_ready, mouse_fd);
     close(mouse_fd);
     mouse_fd = -1;
   }
  mouse_ready = 0L;
}

/**
*** This is the routine which involves some work. The flag mouse_ready
*** will be set if there is some data outstanding on the file descriptor.
*** This data should be read in and analysed, and the flag should be
*** cleared. The results should be made known to the main I/O Server
*** by calls to new_mouse(). That routine takes three arguments,
*** a 16-bit x position, a 16-bit y position, and a 32-bit value
*** indicating the current button state. The positions are pseudo-absolute,
*** the Helios mouse device works in a 32768*32768 coordinate system
*** which wraps around. This may seem a strange way of doing it, but
*** it allows several different ways of recovering from errors if messages
*** get lost.
***
*** For more details of the mouse mechanism, see the PC implementation
*** in ibm/pclocal.c
**/

extern void fn( new_mouse, (SHORT x, SHORT Y, WORD buttons));

void read_mouse_events()
{ if (mouse_ready)
   { mouse_ready = 0L;
   }
}

/**
*** Similar code for the keyboard. Some additional work may be needed
*** when opening the stream, to put the keyboard into the right mode.
*** Helios needs scancodes and key-up key-down events for all keys,
*** without any translation. X-windows handles all the keyboard table
*** translation, shift keys, auto-repeat, etc. Of course your keyboard
*** is unlikely to correspond to the default X keyboard, and you may have
*** to inform X about the correct keyboard mappings.
**/
PRIVATE int  keyboard_fd    = -1;
PRIVATE WORD keyboard_ready = 0L;

void initialise_keyboard()
{
}

void tidy_keyboard()
{ if (keyboard_fd ne -1)
   close(keyboard_fd);
  keyboard_fd    = -1;
  keyboard_ready = 0L;
}

void start_keyboard()
{ 
  keyboard_fd = open("/dev/kbd", O_RDWR);
  if (keyboard_fd ne -1)
   { AddMultiwait(Multi_KeyboardInput, &keyboard_ready, keyboard_fd);
     keyboard_ready = 0L;
   }
}

void stop_keyboard()
{ if (keyboard_fd ne -1)
   { ClearMultiwait(Multi_KeyboardInput, &keyboard_ready, keyboard_fd);
     close(keyboard_fd);
     keyboard_fd = -1;
   }
  keyboard_ready = 0L;
}

/**
*** read_keyboard_events() is a polling routine to handle raw keyboard
*** events. Like the mouse polling routine, it should read data from
*** the stream, convert this data to Helios events, and call a
*** new_keyboard() routine with the data. new_keyboard() takes two arguments,
*** an event which can be up or down, and a key which should be the
*** scan-code. Again, consult the PC sources for more details.
***
*** It is very desirable for read_keyboard_events() to be able to cope
*** with the debugging options, e.g. reboot or enable message debugging.
*** Unfortunately I have not thought of a good way of doing it. If it
*** is possible to take the events and map them to ASCII internally,
*** they could be filtered through the same or similar finite state
*** machine in sun/sunlocal.c, which handles the debugging options.
*** The work involved is non-trivial.
**/
extern void fn( new_keyboard, (WORD event, WORD key));

void read_keyboard_events()
{ if (keyboard_ready)
   { keyboard_ready = 0L;
   }
}

@


1.2
log
@latest version from Telmat Jun 1991
@
text
@a40 5
PRIVATE int  mouse_resolution, mouse_divisor;
PRIVATE int actual_x = 16384, actual_y = 16384;
PRIVATE int last_x = 16384, last_y = 16384;
PRIVATE int deltax = 0, deltay = 0;
PRIVATE int buttons_state = 0;
a43 24
	
	WORD res = get_int_config("mouse_resolution");
	WORD div = get_int_config("mouse_divisor");

	  last_x = 0; last_y = 0;       /* last coordinates sent to trannie */
	  actual_x = last_x; actual_y = last_y;	/* current internal coordinates */
						/* these two must differ by mouse_res */
						/* to generate an event */
	  deltax = 0; deltay = 0;               /* accumulated deltas in clicks */
						/* must change by mouse_div to */
						/* affect actual_x, actual_y */
	  if (res eq Invalid_config)
	   mouse_resolution = 1;
	  else
	   mouse_resolution = (int) res;
	
	  if (div eq Invalid_config)
	   mouse_divisor = 1;
	  else
	   mouse_divisor = (int) div;
	
	  if (mouse_divisor eq 0) mouse_divisor = 1;
	  if (mouse_resolution eq 0) mouse_resolution = 1;

d47 1
a47 3
{ 

if (mouse_fd ne -1)
a52 58
/* ------------------------------------------- */
/*#include "termio.h"*/
/*	Copyright (c) 1984 AT&T	*/
/*	  All Rights Reserved  	*/

/*	THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF AT&T	*/
/*	The copyright notice above does not evidence any   	*/
/*	actual or intended publication of such source code.	*/

#define	NCC	8

/* input modes */
#define	IGNBRK	0000001
#define	IGNPAR	0000004

/* output modes */
#define	TAB3	0014000
/* control modes */
#define	CS8	0000060
#define	CREAD	0000200
#define	PARENB	0000400
#define	PARODD	0001000
#define	HUPCL	0002000
/*
 * Ioctl control packet
 */
struct termio {
	unsigned short	c_iflag;	/* input modes */
	unsigned short	c_oflag;	/* output modes */
	unsigned short	c_cflag;	/* control modes */
	unsigned short	c_lflag;	/* line discipline modes */
	char	c_line;		/* line discipline */
	unsigned char	c_cc[NCC];	/* control chars */
};

#define	TIOC	('T'<<8)
#define	TCGETA	(TIOC|1)
#define	TCSETA	(TIOC|2)

/* ------------------------------------------- */
#define DEVICE_NOT_EXIST 0
#define ERROR_IOCTL	 1
#define WMOUSE_ERROR	 2
#define MOUSE_OK	 0xffff
# define abs(x)			(x>=0 ? x : -(x))

/* set mouse in  */
PRIVATE int Set_Mouse_Three_Byte()
{
	char c=0x54;
	
	if (!mouse_fd) return(DEVICE_NOT_EXIST);
	if (write(mouse_fd,&c,1)!=1) return(WMOUSE_ERROR);
	return(MOUSE_OK);
}

PRIVATE int b_fcntl_mouse,nb_fcntl_mouse;

d55 1
a55 5
	struct termio TERM;
	int 	fcntl_mouse;
	
  mouse_fd = open("/dev/mouse",O_RDWR|O_NDELAY);
	/* open file in read-write mode and  Non-blocking I/O */
d58 1
a58 24
     if (ioctl(mouse_fd,TCGETA,&TERM) ne -1) {
		TERM.c_iflag= IGNBRK | IGNPAR;
		TERM.c_oflag= TAB3;
		TERM.c_cflag= B1200|CS8|CREAD|HUPCL|PARENB|PARODD;
	/* select baud 1200, 8 bits, parity none, one stop bit, Enable to receive */
		TERM.c_lflag= 0;
		TERM.c_line= 0;
		TERM.c_cc[0]= 0x7f;
		TERM.c_cc[1]= 0x16;
		TERM.c_cc[2]= 0x23;
		TERM.c_cc[3]= 0x40;
		TERM.c_cc[4]= 0x1;
		TERM.c_cc[5]= 0x0;
		TERM.c_cc[6]= 0x0;
		TERM.c_cc[7]= 0x0;
		if (ioctl(mouse_fd,TCSETA,&TERM) ne -1) {
			fcntl(mouse_fd,F_GETFL,&fcntl_mouse);
			b_fcntl_mouse = fcntl_mouse & (~O_NDELAY); /* blocking I/O */
			nb_fcntl_mouse =fcntl_mouse| O_NDELAY;/* Non-blocking I/O */
			Set_Mouse_Three_Byte();
		     	mouse_ready = 1L;
		}
	}
     
d63 2
a64 6
{ 

if (mouse_fd ne -1)
   { 
/* ClearMultiwait(Multi_MouseInput, &mouse_ready, mouse_fd); */   
ClearMultiwait(Multi_MouseInput, mouse_fd);
a86 1
/* ----------------------------------------------------------------------- */
d88 1
a88 4
PRIVATE int Get_Mouse_Three_Byte(x,y,status)
SHORT *x,*y,*status;
{
	char c;
a89 22
	if (read(mouse_fd,&c,1)) { /* if read byte */
		*status = (SHORT) c;
		fcntl(mouse_fd,F_SETFL,b_fcntl_mouse);/* blocking I/O */
		read(mouse_fd,&c,1);
		*x= (SHORT) c;
		read(mouse_fd,&c,1);
		*y= (SHORT) c;
		fcntl(mouse_fd,F_SETFL,nb_fcntl_mouse); /* Non-blocking I/O */
		return(1);
	}
	return(0);
}

extern void fn( new_mouse, (SHORT x, SHORT Y, WORD buttons));
/* ------------------------------------------------------------------ */
/* 
PB:
	- la fonction ClearMultiwait
	- structure Mouse_Event
	-  dans la fonction new_mouse l'ordre des parametres est inverse ???
*/
/* ------------------------------------------------------------------ */
d91 3
a93 90
{  
SHORT dx,dy ,buttons;
int sign;

#define but_left	1
#define but_right	2
#define but_middle	4

	if (mouse_ready)
	{ 
		if (Get_Mouse_Three_Byte(&dx,&dy,&buttons))
		{
			if ((buttons & but_left) ne (buttons_state & but_left))
			{ 
				if (buttons & but_left)
			    	{
					new_mouse( actual_y,actual_x, Buttons_Button0_Down);
			      		buttons_state |= but_left;
			    	}
			   	else
			    	{
					new_mouse(actual_y,actual_x, Buttons_Button0_Up);
			      		buttons_state &= ~but_left;
			    	}
			  	last_x = actual_x; 
				last_y = actual_y;
			 }  
		      
			 if ((buttons & but_right) ne (buttons_state & but_right))
			 {
				if (buttons & but_right)
			    	{
					new_mouse( actual_y,actual_x, Buttons_Button1_Down);
			      		buttons_state |= but_right;
			    	}
			   	else
			    	{
					new_mouse( actual_y,actual_x, Buttons_Button1_Up);
			      		buttons_state &= ~but_right;
			    	}
			  	last_x = actual_x;
				last_y = actual_y;
			 }  
		      
			 if ((buttons & but_middle) ne (buttons_state & but_middle))
			 {
				if (buttons & but_middle)
			    	{
					new_mouse( actual_y,actual_x, Buttons_Button2_Down);
			      		buttons_state |= but_middle;
			    }
			    else
			    {
			     	new_mouse( actual_y,actual_x, Buttons_Button2_Up);
			   	buttons_state &= ~but_middle;
			    }
			    last_x = actual_x;
			    last_y = actual_y;
			 }  
		      
			deltax += dx; 
			deltay -= dy;
		      
			if (abs(deltax) > mouse_divisor)
			 { 
			   sign = (deltax > 0) ? 1 : -1;
			   deltax = abs(deltax);
			   actual_x += sign * (deltax / mouse_divisor);
			   actual_x &= 0x7fff;
			   deltax = sign * (deltax % mouse_divisor);
			 }
		      
			if (abs(deltay) > mouse_divisor)
			 { 
			   sign = (deltay > 0) ? 1 : -1;
			   deltay = abs(deltay);
			   actual_y += sign * (deltay / mouse_divisor);
			   actual_y &= 0x7fff;
			   deltay = sign * (deltay & mouse_divisor);
			 }
		      
			if ( ( abs(actual_x - last_x) >= mouse_resolution) ||
			     ( abs(actual_y - last_y) >= mouse_resolution) )
			 { 
			 	new_mouse( actual_y,actual_x, Buttons_Unchanged);
			   	last_x = actual_x; 
				last_y = actual_y;
			 }
		}
	}
a106 3
#define Max_Key 0x7F  /* Highest scan code */
PRIVATE int  E0_code, E1_code, shift, control;
PRIVATE BYTE keys_down[Max_Key];
a109 2
	int kaka;
	keyboard_ready = 0;
d113 1
a113 2
{
if (keyboard_fd ne -1)
a118 4
/* ioctl pour le clavier (console)  */
#define SYSCLAV		(('S'<<8)|1)
#define TRANPARENT	4

d121 1
a121 4
  struct termio TERM;

  if (keyboard_fd eq -1)
	  keyboard_fd = open("/dev/console", O_RDONLY|O_NDELAY);
d123 2
a124 20
  { 
      TERM.c_iflag= 0;
      TERM.c_oflag= 0;
      TERM.c_cflag= 0x5ad;
      
      TERM.c_lflag= 0;
      TERM.c_line= 0;
      TERM.c_cc[0]= 0x7f;
      TERM.c_cc[1]= 0x1c;
      TERM.c_cc[2]= 0x23;
      TERM.c_cc[3]= 0x40;
      TERM.c_cc[4]= 0x1;
      TERM.c_cc[5]= 0x0;
      TERM.c_cc[6]= 0x0;
      TERM.c_cc[7]= 0x0;
      if ( (ioctl(keyboard_fd,TCSETA,&TERM)!= -1) )
      {
            AddMultiwait(Multi_KeyboardInput, &keyboard_ready, keyboard_fd);
            keyboard_ready = 1L;
     }
d129 2
a130 3
{
	if (keyboard_fd ne -1)
   { ClearMultiwait(Multi_KeyboardInput, keyboard_fd);
d156 2
a157 11
{  
   unsigned char get_scancode;

   if (keyboard_ready)
   { 

   	if ( read(keyboard_fd ,&get_scancode,1) == 1) 
	{
		new_keyboard(Keys_KeyDown, (WORD) get_scancode);
	        new_keyboard(Keys_KeyUp, (WORD) get_scancode);
	}
@


1.1
log
@Initial revision
@
text
@d41 5
d49 24
d76 3
a78 1
{ if (mouse_fd ne -1)
d84 58
d144 5
a148 1
  mouse_fd = open("/dev/mouse", O_RDWR);
d151 24
a174 1
     mouse_ready = 0L;
d179 6
a184 2
{ if (mouse_fd ne -1)
   { ClearMultiwait(Multi_MouseInput, &mouse_ready, mouse_fd);
d207 1
d209 18
d228 12
d241 86
a326 4
void read_mouse_events()
{ if (mouse_ready)
   { mouse_ready = 0L;
   }
d340 3
d346 2
d351 2
a352 1
{ if (keyboard_fd ne -1)
d358 4
d364 4
a367 1
  keyboard_fd = open("/dev/kbd", O_RDWR);
d369 20
a388 2
   { AddMultiwait(Multi_KeyboardInput, &keyboard_ready, keyboard_fd);
     keyboard_ready = 0L;
d393 3
a395 2
{ if (keyboard_fd ne -1)
   { ClearMultiwait(Multi_KeyboardInput, &keyboard_ready, keyboard_fd);
d421 11
a431 2
{ if (keyboard_ready)
   { keyboard_ready = 0L;
@
