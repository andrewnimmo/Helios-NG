head	1.3;
access;
symbols;
locks; strict;
comment	@ * @;


1.3
date	92.03.06.11.53.47;	author martyn;	state Exp;
branches;
next	1.2;

1.2
date	91.07.22.13.44.34;	author martyn;	state Exp;
branches;
next	1.1;

1.1
date	91.07.22.13.42.48;	author martyn;	state Exp;
branches;
next	;


desc
@@


1.3
log
@new version from TELMAT
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--             H E L I O S   U N I X  L I N K  I / O   S Y S T E M      --
--             ---------------------------------------------------      --
--                                                                      --
--             Copyright (C) 1989, Perihelion Software Ltd.             --
--                        All Rights Reserved.                          --
--                                                                      --
--      smlink.c                                                        --
--                                                                      --
------------------------------------------------------------------------*/
/* SccsId: %I% %G%\ Copyright (C) 1989, Perihelion Software Ltd.        */

/**
*** This is code specific to the sm90 link interface.
**/

/*  New release of the SM90 Helios Server which takes in account the
    semaphores at the boards
*/

/* -------------------- site on TELMAT workstation --------------------------
-
-  site	  ITFTP32	link number	 SM90 Cpu       3TRP      link number
-	  board number			board number  board number
-	 
-   0	     0		/dev/link0_mt0	     0	0	 8     /dev/link8a_mt0
-   1	     8		/dev/link8_mt0	     0	0	 8     /dev/link8b_mt0
-   2	    16		/dev/link16_mt0	     0	0	 8     /dev/link8c_mt0
-   3	    24		/dev/link24_mt0	     0	0	 24    /dev/link24a_mt0
-   4	    32		/dev/link32_mt0	     0	0	 24    /dev/link24b_mt0
-   5	    40		/dev/link40_mt0	     0	0	 24    /dev/link24c_mt0
-   6	    48		/dev/link48_mt0	     0	0	 32    /dev/link32a_mt0
-   7	    56		/dev/link56_mt0	     0	0	 32    /dev/link32b_mt0
-
-   8	     0		/dev/link0_mt1	     1	0	 32    /dev/link32c_mt0
-   9	     8		/dev/link8_mt1	     1	1	 8     /dev/link8a_mt1
-  10	    16		/dev/link16_mt1	     1	1	 8     /dev/link8b_mt1
-  11	    24		/dev/link24_mt1	     1	1	 8     /dev/link8c_mt1
-----------------------------------------------------------------------------*/

#define Linklib_Module

#include "../helios.h"
#include "semaconst.h"

#define SOLEIL_DBG FALSE

#include <sys/trans.h>

#define link_fd (link_table[current_link].fildes)

#define TRP3_Max_Link    9	/* 3TRP board */
#define ITFTP32_Max_Link 8	/* ITFTP32 board */
#define MAX_MT		 4

PRIVATE Trans_link itftp32_links[ITFTP32_Max_Link * MAX_MT];
PRIVATE Trans_link trp3_links[TRP3_Max_Link * MAX_MT];


/******************************* TRP3 BOARD *********************************/


void trp3_init_link()
{ int i;
  int numlink;
  char carlink;

  number_of_links = TRP3_Max_Link * MAX_MT;
  link_table      = &(trp3_links[0]);
  for (i = 0; i < number_of_links ; i++){
	numlink = ( i % 9 ) / 3;
		numlink = (numlink == 0) ? 8*(numlink + 1) : 8*(numlink + 2) ;
		switch (i %3){
			case 0 : carlink = 'a';break;
			case 1 : carlink = 'b';break;
			case 2 : carlink = 'c';break;
		}
		sprintf(link_table[i].link_name, "/dev/link%d%c_mt%d",numlink,carlink,i/9);

		link_table[i].flags      = Link_flags_unused + Link_flags_uninitialised +
                                Link_flags_firsttime;
		link_table[i].connection = -1;
		link_table[i].fildes     = -1;
		link_table[i].state      = Link_Reset;
		link_table[i].ready      = 0;
}

}

void trp3_free_link(tabno)
int tabno;
{ 
	if (link_table[tabno].fildes ne -1){ 
#if 0
		ioctl(link_table[tabno].fildes, LNRESET_ROOT, 0);
#endif
		close(link_table[tabno].fildes);
		}
	trans_sema(link_table[tabno].link_name, RELEASE);
	link_table[tabno].fildes = -1;
}


void trp3_reset_transputer()
{
  ioctl(link_fd, LNRESET_ROOT, 0);
}

void trp3_analyse_transputer()
{
  ioctl(link_fd,LNRESET_ANALYSE,0);
}


int trp3_open_link(tabno)
int tabno;
{ 
  int linksm;
  int numlink;
  int process;

	process=trans_sema(link_table[tabno].link_name,ACQUIRE);
	switch(process)
 		{
		case TRANS_FREE: 
			break;
		case SEMA_ERROR: 
			return (0);
  		case TRANS_UNKNOW: 
			printf("Cannot recognize site %s\n\r",link_table[tabno].link_name);
		  	break;	/* return (0); */
  		default: 
			printf("**** ABORT HELIOS : SITE %d already in use by another process \r\n",tabno);
	       		return (0);
  		}

	link_table[tabno].fildes = open(link_table[tabno].link_name, O_RDWR);
	if (link_table[tabno].fildes eq -1){ 
#if 0
		printf("cannot open link device : %s\r\n",link_table[tabno].link_name);
#endif
		trans_sema(link_table[tabno].link_name,RELEASE);
		return(0);
		}

	fcntl(link_table[tabno].fildes, F_SETFD, 1);
	ioctl(link_table[tabno].fildes, LNRESET_ROOT, 0);

	ioctl(link_table[tabno].fildes, LNSETTIMEOUT, 1000); 
 
	return(1);
}
 

/**
*** for now, a server can only talk to one link
**/

/******************************* ITFTP32 BOARD *********************************/


void itftp32_init_link()
{ int i;

  number_of_links = ITFTP32_Max_Link * MAX_MT;
  link_table      = &(itftp32_links[0]);
  for (i = 0; i < number_of_links ; i++){
	sprintf(link_table[i].link_name, "/dev/link%d_mt%d",(i %8) * 8, i / 8);

	link_table[i].flags      = Link_flags_unused + Link_flags_uninitialised +
                                Link_flags_firsttime;
	link_table[i].connection = -1;
	link_table[i].fildes     = -1;
	link_table[i].state      = Link_Reset;
	link_table[i].ready      = 0;
   }

}


void itftp32_reset_transputer()
{
  ioctl(link_fd,LNRESET_ROOT, 0);
}


void itftp32_analyse_transputer()
{
  ioctl(link_fd,LNRESET_ANALYSE,0);
}




int itftp32_open_link(tabno)
int tabno;
{ 
  int linksm;
  int numlink;
  int process;

	switch (tabno % 8){
		case 	0: linksm = -1;	break;
		case 	1: linksm =  1;	break; 
		case 	2: linksm = -1; break; 
		case 	3: linksm =  3;	break; 
		case 	4: linksm =  4;	break; 
		case 	5: linksm = -1;	break; 
		case 	6: linksm = -1;	break; 
		case 	7: linksm = -1;	break; 
		default	 : linksm = -1;
	}

	if (linksm == -1) {
#if 0
		printf("Invalid site number : %d\n\r",tabno);
#endif
		}

  	if ( linksm != -1 ){
  		process=trans_sema(link_table[tabno].link_name,ACQUIRE);
		switch(process)
  		{
			case TRANS_FREE: 
				break;
			case SEMA_ERROR: 
				return (0);
	  		case TRANS_UNKNOW: 
				printf("Cannot recognize site %s\n\r",link_table[tabno].link_name);
			  	break;	/* return (0); */
	  		default: 
				printf("**** ABORT HELIOS : SITE %d already in use by another process \r\n",tabno);
	          		return (0);
  		}
	}
	else return(0);

	link_table[tabno].fildes = open(link_table[tabno].link_name, O_RDWR);
	if (link_table[tabno].fildes eq -1){ 
#if 0
		printf("cannot open link device : %s\r\n",link_table[tabno].link_name);
#endif
		trans_sema(link_table[tabno].link_name,RELEASE);
		return(0);
		}

	fcntl(link_table[tabno].fildes, F_SETFD, 1);
	ioctl(link_table[tabno].fildes, LNRESET_ROOT, 0);

	ioctl(link_table[tabno].fildes, LNSETTIMEOUT, 1000); 

	return(1);
}
 
void itftp32_free_link(tabno)
int tabno;
{ 
	if (link_table[tabno].fildes ne -1){ 
#if 0
		ioctl(link_table[tabno].fildes, LNRESET_ROOT, 0);
#endif
		close(link_table[tabno].fildes);
		}
	trans_sema(link_table[tabno].link_name, RELEASE);
	link_table[tabno].fildes = -1;
}


void fatal()
{ printf("Bad news : routine fatal() has been called\r\n");
}

@


1.2
log
@latest version from Telmat Jun 1991
@
text
@a88 7
  for ( ; number_of_links >= 0; number_of_links--)
   { struct stat buf;
     if (stat(link_table[number_of_links].link_name, &buf) eq 0)
      break;                   /* OK, found the last known site */
     if (errno ne ENOENT)      /* Appears to exist, but not currently usable */
      break;
   }       
d95 1
d97 1
d140 1
d142 1
a178 7
  for ( ; number_of_links >= 0; number_of_links--)
   { struct stat buf;
     if (stat(link_table[number_of_links].link_name, &buf) eq 0)
      break;                   /* OK, found the last known site */
     if (errno ne ENOENT)      /* Appears to exist, but not currently usable */
      break;
   }       
d216 1
d218 1
d241 1
d243 1
d260 1
d262 1
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
/* SccsId: 3.8 28/3/90\ Copyright (C) 1989, Perihelion Software Ltd.        */
d15 5
a19 46
*** This is code specific to the sm90 link interface. The  SM90 can have
*** up to 64 link adapters, 8 link adapters per 680x0, and upto 8
*** 680x0 processors in one machine.
***
*** |------------------------------------------------------------------------|
*** | mt-board	0	8	16	24	32	40	48	56   |
*** |------------------------------------------------------------------------|
*** |    0	0	1	2	3	4	5	6	7    |
*** |  	 1	8	9	10	11	12	13	14	15   | 
*** | 	 2	16	17	18	19	20	21	22	23   |
*** | 	 .	.	.	.    	.	.	.	.	.    |
*** | 	 7	56	57	58	58	60	61	62	63   |
*** |------------------------------------------------------------------------|
***
*** The site number is the same as the semaphore number : 
***
*** 	site number 	mt	board          device
***
***	 0		0	  0	   /dev/link0_mt0
***	 1		0	  8	   /dev/link8_mt0
***	 2		0	  16	   /dev/link16_mt0
***	 3		0	  24	   /dev/link24_mt0
***	 4		0	  32	   /dev/link32_mt0
***	 :		:	  :	   
***	 7		0	  56	   /dev/link56_mt0
***	
***	 8		1	  0	   /dev/link0_mt1
***	 9		1	  8	   /dev/link8_mt1
***	10		1	  16	   /dev/link16_mt1
***	 :	  	:	   :
***	15		1	  56	   /dev/link56_mt1
***	 :	  	:	   :
***	 :	  	:	   :
***	 :	  	:	   :
***
***	56		7	  0	   /dev/link0_mt7
***	57		7	  8	   /dev/link8_mt7
***	58		7	  16	   /dev/link16_mt7
***	 :		:	   :
***	63		7	  56	   /dev/link56_mt7
***
*** So, there is a static table of 64 Trans_link structures,
*** and itftp32_init_link() does the usual initialisation.
***
*** At present the link device does not do any locking, so that is
*** the responsibility of the open_link and free_link routines.
d22 20
d45 1
a45 1
#include "trans32.h"
d47 4
a51 2
#define ITFTP32_Max_Link 64
PRIVATE Trans_link itftp32_links[ITFTP32_Max_Link];
d53 12
a64 1
void itftp32_init_link()
d66 2
d69 11
a79 5
  number_of_links = ITFTP32_Max_Link;
  link_table      = &(itftp32_links[0]);
  for (i = 0; i < ITFTP32_Max_Link; i++)
   sprintf(link_table[i].link_name, "/dev/link%d_mt%d",
           (i %8) * 8, i / 8);
d81 8
d98 1
a98 1
int itftp32_open_link(tabno)
d100 11
d112 2
a113 6
/**
*** The link I/O code supplied does not appear to allow access to
*** link devices 0 or 2, not quite sure why.
**/
  if ((tabno % 8 eq 0) || (tabno % 8 eq 2))
    return(0); 
d115 4
a118 2
  if (!sema_acquire(tabno))
   return(0);
a119 5
  link_table[tabno].fildes = open(link_table[tabno].link_name, O_RDWR);
  if (link_table[tabno].fildes eq -1)
   { sema_release(tabno);
     return(0);
   }
d121 38
a158 2
  fcntl(link_table[tabno].fildes, F_SETFD, 1);
  ioctl(link_table[tabno].fildes, RESET_ROOT, 0);
d160 1
a160 1
*** The supplied link I/O code also performs another ioctl
a161 1
  ioctl(link_table[tabno].fildes, LNSETTIMEOUT, 1);
d163 1
a163 2
  return(1);
} 
d165 15
a179 5
void itftp32_free_link(tabno)
int tabno;
{ if (link_table[tabno].fildes ne -1)
   { ioctl(link_table[tabno].fildes, RESET_ROOT);
     close(link_table[tabno].fildes);
d181 8
a188 2
  sema_release(tabno);
  link_table[tabno].fildes = -1;
d191 1
d194 1
a194 1
  ioctl(link_fd,RESET_ROOT, 0);
d197 1
d200 1
a200 1
  ioctl(link_fd,RESET_ANALYSE,0);
d203 71
a276 1

@
