head	1.13;
access;
symbols
	Helios_1_3_1:1.11
	Helios_C40_1_3_Official_Release:1.8
	Helios-C40:1.8
	Alenia_release:1.6
	Helios1_3:1.6
	C40_Field_Test_2:1.6
	Helios13_beta:1.5
	Helios1_2_1:1.4;
locks; strict;
comment	@ * @;


1.13
date	94.07.06.10.44.59;	author mgun;	state Exp;
branches;
next	1.12;

1.12
date	94.06.29.13.42.25;	author tony;	state Exp;
branches;
next	1.11;

1.11
date	93.10.22.11.19.23;	author bart;	state Exp;
branches;
next	1.10;

1.10
date	93.10.20.16.48.34;	author bart;	state Exp;
branches;
next	1.9;

1.9
date	93.06.16.12.10.55;	author bart;	state Exp;
branches;
next	1.8;

1.8
date	93.02.09.13.57.13;	author bart;	state Exp;
branches;
next	1.7;

1.7
date	93.01.12.15.52.58;	author bart;	state Exp;
branches;
next	1.6;

1.6
date	92.07.29.16.30.42;	author bart;	state Exp;
branches;
next	1.5;

1.5
date	92.06.19.10.35.15;	author bart;	state Exp;
branches;
next	1.4;

1.4
date	90.10.19.14.07.04;	author alan;	state Exp;
branches;
next	1.3;

1.3
date	90.10.18.15.38.49;	author alan;	state Exp;
branches;
next	1.2;

1.2
date	90.10.18.15.33.51;	author alan;	state Exp;
branches;
next	1.1;

1.1
date	90.10.16.15.59.36;	author alan;	state Exp;
branches;
next	;


desc
@coroutine support library
@


1.13
log
@Fixed some bugs introduced by Tony's changes
@
text
@/*------------------------------------------------------------------------
--                                                                      --
--         H E L I O S   I N P U T / O U T P U T   S E R V E R          --
--         ---------------------------------------------------          --
--                                                                      --
--              Copyright (C) 1987, Perihelion Software Ltd.            --
--                         All Rights Reserved.                         --
--                                                                      --
--  cofuns.c                                                            --
--                                                                      --
--          Extra coroutine library functions, and the linked           --
--                                                                      --
--          lists library.                                              --
--                                                                      --
--  Author:  BLV 8/10/87                                                --
--                                                                      --
------------------------------------------------------------------------*/
/* RcsId: $Id: cofuns.c,v 1.12 1994/06/29 13:42:25 tony Exp $ */
/* Copyright (C) 1987, Perihelion Software Ltd.       			*/

/**
*** I do not intend to document this code, since it should work if you have
*** got the low level coroutine library right. Anyway, it is all simple.
**/

#define CofunsModule
#include "helios.h"

#if !PC
#if SOLARIS
#include <stdarg.h>
#else
#include <varargs.h>
#endif
#include <stdlib.h>
#endif

/**
*** The low level coroutine library, written in assembler language
**/
#if SOLARIS

PUBLIC int fn (InitCo,	   (void));
PUBLIC ptr fn (CreateCo,   (void * (*)(void *), int));
PUBLIC int fn (CallCo,	   (ptr, int));
PUBLIC int fn (WaitCo,	   (int));
PUBLIC int fn (DeleteCo,   (ptr));

#else
/* On the MAC I require also the stacksize for InitCo */
#if MAC
PUBLIC  word fn( InitCo,   (word));
#else
PUBLIC  word fn( InitCo,   (void));
#endif
PUBLIC  word fn( CallCo,   (ptr, word));
PUBLIC  ptr  fn( WaitCo,   (word));
PUBLIC  word fn( DeleteCo, (ptr));
PUBLIC  ptr  fn( CreateCo, (VoidFnPtr, word));
PUBLIC  word CurrentCo;
#endif

/**
*** Coroutine stack sizes : these can be configured
**/
PRIVATE word Stacksize;
#define CoDeleted (123456L)
Conode *current_conode;

               /* virtual memory systems need much larger stacks */
#if (UNIX && !MEIKORTE && !ARMBSD && !SCOUNIX && !SOLARIS)
#define default_stacksize 50000L
#endif
#if (ARMBSD)
         /* R140 has limited swap space, and 10K suffices */
#define default_stacksize 10000L
#endif
#if (MSWINDOWS)
#define default_stacksize 4096
#endif
#if (MAC || (PC && !MSWINDOWS))
#define default_stacksize 2000L
#endif
#if (SOLARIS)
#define default_stack_size	0	/* Works it out for itself */
#endif

#ifndef default_stacksize
#define default_stacksize 5000L
#endif


word InitColib()
{ 
  Stacksize = get_int_config("Coroutine_Stack");
  if (Stacksize eq Invalid_config) Stacksize = default_stacksize;
#if (PC)
	/* The stack must fit into the buffer in main()'s stackframe	*/
  if (Stacksize > 4096) Stacksize = 4096;
#endif
#if WINDOWS
	/* On Windows the stack must be fairly large. */
  if (Stacksize < 3000) Stacksize = 3000;
#endif

  current_conode = (Conode *) NULL;
#if MAC
  return(InitCo(Stacksize));
#else
  return(InitCo()); 
#endif  
}

/*
 * BLV - this function does not appear to have been called from anywhere
 * for a very long time. If the coroutine library involves a memory
 * allocation for CurrentCo/RootCo during InitCo then the result would
 * be a memory leak every time the I/O Server reboots. I have added a call
 * to TidyColib() to the I/O Server's tidy-up code in server.c, but to
 * avoid possible complications for now this is only effective on the PC.
 * It should really be checked for all implementations.
 */
void TidyColib()
{ 
#if (PC)
  iofree((byte *)CurrentCo);
#endif
}

void Suspend()
{ (void) WaitCo(false);
}

void Seppuku()
{
 (void) WaitCo(CoDeleted);
}

PRIVATE VoidConFnPtr co_function;
PRIVATE Conode    *new_conode;

#if ANSI_prototypes

#if SOLARIS
PRIVATE void * new_coroutine(void * not_used)
#else
PRIVATE void new_coroutine(void)
#endif

#else
PRIVATE void new_coroutine()
#endif
{ VoidConFnPtr my_function = co_function;
  Conode    *my_conode  = new_conode;

  (void) WaitCo(false);

  (*my_function)(my_conode);

#if SOLARIS
  not_used = NULL;

  return (void *)NULL;
#endif
}

Conode *NewCo(fun)       /* create a new coroutine and put it on the */
VoidConFnPtr fun;           /* waiting list */
{
  co_function = fun;
  new_conode  = (Conode *) malloc(sizeof(Conode));

  if (new_conode ne (Conode *) NULL)
     { memset((char *) new_conode, 0, sizeof(Conode));
#if SOLARIS
       new_conode->cobase = CreateCo(&new_coroutine, Stacksize);
#else
       new_conode->cobase = CreateCo(func(new_coroutine), Stacksize);
#endif

       if (!(new_conode->cobase))
         { iofree(new_conode); return(false); }
       CallCo(new_conode->cobase, 0L);  /* first CallCo loses argument, fun  */

       return(new_conode);              /* must always WaitCo near beginning */
     }
  return(false);
} 

                      /* call a coroutine, check to see if deleted */
void StartCo(conode)           
Conode *conode;
{ Conode *save_conode = current_conode;
  current_conode = conode;

  if (CallCo( conode->cobase, (word) conode) eq CoDeleted)
   { 
     Remove(&(conode->node));
     DeleteCo( conode->cobase);
     iofree(conode);
   }
  current_conode = save_conode;
}

/**
*** Basic semaphore-style operations for use within coroutines. Aimed
*** at providing locking on the various devices. The Wait() routine
*** must never be called from inside the main coroutine. Also, it must
*** be called if and only if the coroutine is on the WaitingCo list.
**/
typedef struct semaphore_wait {
        Node   node;
        Conode *cortn;
} semaphore_wait;

void Wait(sem)
Semaphore *sem;
{
  sem->count--;
  if (sem->count < 0)   /* access denied */
   { semaphore_wait *wait = (semaphore_wait *) malloc(sizeof(semaphore_wait));

     if (wait eq (semaphore_wait *) NULL)
      return;	/* Up the creek anyway */

     wait->cortn = current_conode;
     AddTail(&(wait->node), &(sem->list));
     current_conode->flags |= CoFlag_Waiting;
     current_conode->type = 0L;
     AddTail(Remove(&(current_conode->node)), PollingCo);

     Suspend();

     if (current_conode->type ne CoSuicide)
      AddTail(Remove(&(current_conode->node)), WaitingCo);
     current_conode->flags &= ~CoFlag_Waiting;
     Remove(&(wait->node));
     iofree(wait);
     if ((current_conode->type eq CoSuicide) || 
         (current_conode->type eq CoTimeout))
      sem->count++;
   }
}

void Signal(sem)
Semaphore *sem;
{ 
  sem->count++;
  if (sem->count < 1)  /* another coroutine is waiting */
   { semaphore_wait *wait;
     wait = (semaphore_wait *) sem->list.head;
     if (wait->node.next ne (Node *) NULL)
      { 
        if (wait->cortn->type ne CoSuicide)
         StartCo(wait->cortn);
      }
   }				
}

void InitSemaphore(sem, count)
Semaphore *sem;
int count;
{ InitList(&sem->list);
  sem->count = count;
}

/*------------------------------------------------------------------------
--                                                                      --
--  Lists                                                               --
--                                                                      --
--      Usual linked list library, but containing only the              --
--      functions which I can be bothered to use.                       --
------------------------------------------------------------------------*/

/* create and initialise a list header, returning 0 to indicate failure */
List *MakeHeader()
{ List *newptr;

  newptr = (List *) malloc( sizeof(List) );
  if (newptr ne NULL)
    InitList(newptr);

  return(newptr);
}

/* initialise a list header to the empty list */
void InitList(listptr)
List *listptr;
{
  listptr->head  = (Node *) &(listptr->earth);
  listptr->earth = NULL;
  listptr->tail  = (Node *) listptr;
} 

/* add a node to the beginning of the list */
Node *AddHead(node, header)
Node *node;
List *header;
{
  node->next = header->head;
  node->prev = (Node *)header;
  header->head = node;
  (node->next)->prev = node;
  return(node);
}

Node *AddTail(node, header)
Node *node;
List *header;
{
  Node * head;

  node->prev = header->tail;
  header->tail = node;
  node->next = (Node *) &(header->earth);
  (node->prev)->next = node;

  return(node);
}

Node *listRemove(node)
Node *node;
{

 if (node == NULL)	return NULL;
 
 if (node->prev != NULL)
   {
     (node->prev)->next = node->next;
   }
 if (node -> next != NULL)
   {
     (node->next)->prev = node->prev;
   }
  return(node);
}

Node *NextNode(node)
Node *node;
{ return(node->next);
}

word TstList(header)
List *header;
{ 
  if ((header->head)->next eq NULL) return(false);
  return(true);
}

#if (ANSI_prototypes && !AMIGA)
	/* To complicate things, some compilers completely disallow K&R C	*/

void WalkList(List *list, VoidNodeFnPtr fun, ...)
{
 Node *node, *node2;
  word arg1, arg2;
  va_list args;

  va_start(args, fun);
  arg1 = va_arg(args, word);
  arg2 = va_arg(args, word);
  va_end(args);

  for (node=list->head; node->next ne NULL; node=node2)
    { node2 = node->next;
      (*fun)(node, arg1, arg2);
    }
}

word Wander(List *list, WordNodeFnPtr fun, ...)
{ Node *node, *node2;
  word result, arg1, arg2;
  va_list args;

  va_start(args, fun);
  arg1 = va_arg(args, word);
  arg2 = va_arg(args, word);
  va_end(args);

  result = false;

  for (node=list->head; (node->next ne NULL) && !result;
       node = node2)
    { node2 = node->next;
      result = (*fun)(node, arg1, arg2);
    }

  return(result);
}

#else /* ANSI_prototypes && !AMIGA */

void WalkList(list, fun, arg1, arg2)
List *list;
VoidFnPtr fun;
word arg1, arg2;
{ Node *node, *node2;

  for (node=list->head; node->next ne NULL; node=node2)
    { node2 = node->next;
      (*fun)(node, arg1, arg2);
    }
}

word Wander(list, fun, arg1, arg2)
List *list;
WordFnPtr fun;
word arg1, arg2;
{ Node *node, *node2;
  word result;

  result = false;

  for (node=list->head; (node->next ne NULL) && !result;
       node = node2)
    { node2 = node->next;
      result = (*fun)(node, arg1, arg2);
    }

  return(result);
}

#endif /* ANSI_prototypes */

                /* This routine just frees every node in the list */
void FreeList(list)
List *list;
{ Node *node, *node2;
  Node * head = list -> head;

#if SOLARIS

  if (head -> prev == NULL)
    { /* empty list */
      return;
    }

  if (list -> earth != NULL)
    {
      /*
       * Somewhere along the line, the earth element of a list gets corrupted in the
       * directory Conode pointer.  This is a quick fix to avoid core dumping
       * messily.
       */

      Debug (Directory_Flag, ("Warning: corrupted earth in list 0x%lx", (long)list));

      InitList (list);

      return;
    }

#endif

  for (node = list->head; node->next ne NULL; node = node2)
    { node2 = node->next;
      iofree(Remove(node));
    }
}

                          /* this routine is needed by the debugger */
void PreInsert(next, node)
Node *next, *node;
{
  node->next = next;
  node->prev = next->prev;
  next->prev = node;
  node->prev->next = node;
}

          /* This routine is used to maintain the order of nodes in WaitingCo */
          /* It puts the node just after the list node given                  */
void PostInsert(node, before)
Node *node, *before;
{
  node->next       = before->next;
  node->prev       = before;
  before->next     = node;
  node->next->prev = node;
}

          /* This routine returns the number of nodes in a list. */
word ListLength(header)
List *header;
{ Node *node;
  word result = 0L;

  for (node = header->head; node->next ne (Node *) NULL; node = node->next)
    result++;

  return(result);
}


@


1.12
log
@Support for Solaris added
Support for matchbox added
@
text
@d18 1
a18 1
/* RcsId: $Id: cofuns.c,v 1.11 1993/10/22 11:19:23 bart Exp $ */
d28 2
d36 1
@


1.11
log
@Attempt to sort out the mess surrounding TidyColib(). See the comment
for details.
@
text
@d18 1
a18 1
/* RcsId: $Id: cofuns.c,v 1.10 1993/10/20 16:48:34 bart Exp $ */
d28 6
d38 9
d58 2
d68 1
a68 1
#if (UNIX && !MEIKORTE && !ARMBSD && !SCOUNIX)
d81 4
d123 1
a123 1
  free((byte *)CurrentCo);
d136 1
a136 1
PRIVATE VoidFnPtr co_function;
d139 9
d149 2
a150 1
{ VoidFnPtr my_function = co_function;
d156 6
d165 1
a165 1
VoidFnPtr fun;           /* waiting list */
d172 3
d176 2
d179 1
a179 1
         { free(new_conode); return(false); }
d197 1
a197 1
     free(conode);
d235 1
a235 1
     free(wait);
d286 2
a287 1
{ listptr->head  = (Node *) &(listptr->earth);
d296 2
a297 1
{ node->next = header->head;
d307 4
a310 1
{ node->prev = header->tail;
d314 1
d320 12
a331 2
{ (node->prev)->next = node->next;
  (node->next)->prev = node->prev;
d342 2
a343 1
{ if ((header->head)->next eq NULL) return(false);
d349 4
a352 8
#if (RS6000 || HP9000)
void WalkList(List *list, VoidFnPtr fun, ...)
#else
void WalkList(list, fun, ...)
List *list;
VoidFnPtr fun;
#endif
{ Node *node, *node2;
d367 1
a367 7
#if (RS6000 || HP9000)
word Wander(List *list, WordFnPtr fun, ...)
#else
word Wander(list, fun, ...)
List *list;
WordFnPtr fun;
#endif
d387 3
a389 1
#else
d408 1
d426 18
d445 7
d454 1
a454 1
      free(Remove(node));
d461 2
a462 1
{ node->next = next;
d472 2
a473 1
{ node->next       = before->next;
@


1.10
log
@Under Windows a minimum stacksize must be enforced.
@
text
@d18 1
a18 1
/* RcsId: $Id: cofuns.c,v 1.9 1993/06/16 12:10:55 bart Exp $ */
d90 9
d101 1
d103 1
@


1.9
log
@Ported to SCO Unix
@
text
@d18 1
a18 1
/* RcsId: $Id: cofuns.c,v 1.8 1993/02/09 13:57:13 bart Exp $ */
d76 4
@


1.8
log
@Added HP9000 support
@
text
@d18 1
a18 1
/* RcsId: $Id: cofuns.c,v 1.7 1993/01/12 15:52:58 bart Exp $ */
d51 1
a51 1
#if (UNIX && !MEIKORTE && !ARMBSD)
@


1.7
log
@ported to RS6000
@
text
@d18 1
a18 1
/* RcsId: $Id: cofuns.c,v 1.6 1992/07/29 16:30:42 bart Exp $ */
d275 1
a275 1
#if (RS6000)
d297 1
a297 1
#if RS6000
@


1.6
log
@various patches to compile under Microsoft C 7.0
@
text
@d18 1
a18 1
/* RcsId: $Id: cofuns.c,v 1.5 1992/06/19 10:35:15 bart Exp $ */
d274 4
d281 1
d297 3
d303 1
@


1.5
log
@Major upgrade to V3.91 :
 1) includes C40 support
 2) now compiles for Helios and for Windows
@
text
@d18 1
a18 1
/* RcsId: $Id: cofuns.c,v 1.1 1992/06/02 08:37:11 craig Exp $ */
d73 1
a73 1
#if (MSWINDOWS)
d75 1
a75 1
  if (Stacksize > default_stacksize) Stacksize = default_stacksize;
@


1.4
log
@#ifdef MAC -> #if MAC
@
text
@d18 1
a18 1
/* RcsId: $Id: cofuns.c,v 1.3 90/10/18 15:38:49 alan Exp Locker: alan $ */
d34 1
a34 1
PUBLIC  WORD fn( InitCo,   (WORD));
d36 1
a36 1
PUBLIC  WORD fn( InitCo,   (void));
d38 5
a42 5
PUBLIC  WORD fn( CallCo,   (ptr, WORD));
PUBLIC  ptr  fn( WaitCo,   (WORD));
PUBLIC  WORD fn( DeleteCo, (ptr));
PUBLIC  ptr  fn( CreateCo, (VoidFnPtr, WORD));
PUBLIC  WORD CurrentCo;
d46 1
a46 1
PRIVATE WORD Stacksize;
d53 1
a53 1
#else
d57 5
a61 2
#else
#if (PC || MAC)
d63 2
a64 1
#else
d66 1
a66 3
#endif /* PC */
#endif /* ARMBSD */
#endif /* UNIX */
d68 4
a71 2
WORD InitColib()
{ Stacksize = get_int_config("Coroutine_Stack");
d73 5
d88 1
a88 1
  free((BYTE *)CurrentCo);
d92 1
a92 1
{ (void) WaitCo(FALSE);
d107 1
a107 1
  (void) WaitCo(FALSE);
d122 1
a122 1
         { free(new_conode); return(FALSE); }
d127 1
a127 1
  return(FALSE);
d158 1
a158 2
{ semaphore_wait wait;

d161 7
a167 2
   { wait.cortn = current_conode;
     AddTail(&(wait.node), &(sem->list));
d171 1
d173 1
d177 2
a178 1
     Remove(&(wait.node));
d269 2
a270 2
{ if ((header->head)->next eq NULL) return(FALSE);
  return(TRUE);
d278 1
a278 1
  WORD arg1, arg2;
d282 2
a283 2
  arg1 = va_arg(args, WORD);
  arg2 = va_arg(args, WORD);
d300 2
a301 2
  arg1 = va_arg(args, WORD);
  arg2 = va_arg(args, WORD);
d304 1
a304 1
  result = FALSE;
d318 1
a318 1
WORD arg1, arg2;
d330 1
a330 1
WORD arg1, arg2;
d333 1
a333 1
  result = FALSE;
d377 1
a377 1
WORD ListLength(header)
d380 1
a380 1
  WORD result = 0L;
@


1.3
log
@another go at adding MAC stuff
@
text
@d18 1
a18 1
/* RcsId: $Id: cofuns.c,v 1.2 90/10/18 15:33:51 alan Exp Locker: alan $ */
d33 1
a33 1
#ifdef MAC
@


1.2
log
@added MAC support
@
text
@d18 1
a18 1
/* RcsId: $Id: cofuns.c,v 1.1 90/10/16 15:59:36 alan Exp Locker: alan $ */
d58 1
a58 1
#if (PC)
a60 4
#if (MAC)
	/* 1000 seems to work, but for safety reasons ...*/
#define default_stacksize 2000L
#else
a61 1
#endif /* MAC */
@


1.1
log
@Initial revision
@
text
@d18 1
a18 1
/* RcsId: $Id$ */
d32 4
d37 1
d61 4
d66 1
d75 3
d79 1
@
