head	1.6;
access;
symbols
	Helios_1_3_1:1.4
	Helios_C40_1_3_Official_Release:1.3
	Helios-C40:1.3;
locks; strict;
comment	@ * @;


1.6
date	94.07.06.15.26.16;	author tony;	state Exp;
branches;
next	1.5;

1.5
date	94.06.29.13.46.19;	author tony;	state Exp;
branches;
next	1.4;

1.4
date	93.05.13.11.34.26;	author bart;	state Exp;
branches;
next	1.3;

1.3
date	93.05.10.10.04.01;	author nick;	state Exp;
branches;
next	1.2;

1.2
date	93.04.01.16.35.08;	author nick;	state Exp;
branches;
next	1.1;

1.1
date	93.03.01.11.26.49;	author nick;	state Exp;
branches;
next	;


desc
@IO server support for Ariel VC40 board.
@


1.6
log
@Improved debug statement
@
text
@
#define Linklib_Module

/*{{{  Includes */
#include "../helios.h"

#include <sys/mman.h>

#include "vc40dsp.h"
/*}}}*/

/*{{{  Configuration */

#define TESTER		0

#define POLL_LOOPS	0	/* Number of times to busy wait		*/

#define	RX_IN_INTERRUPT	0	/* Do receive processing in interrupt	*/

#define	TX_IN_INTERRUPT	0	/* Do transmit processing in interrupt	*/


#define VC40_MAX_LINKS	1		/* Number of links supported	*/

#if 0
#define VC40_DEVICE	"/dev/vc40b1"	/* The device special file	*/
#endif

#define VC40_SIGNAL	SIGUSR1		/* Inter-processor interrupt	*/

void vc40_signal();
/*}}}*/

/*{{{  Support types */

typedef WORD 			Atomic;

typedef long			MPtr;

#define	MInc_(m,o)		((m)+(o))
#define MtoC_(m)		((void *)(m))
#define CtoM_(m)		((MPtr)(m))

#define MPSize			1

typedef	long			SMPtr;

#define	SMPSize			1;

#define	SMWord_(m,o)		(*((long *)((m)+(o))))
#define	SetSMWord_(m,o,v)	(*((long *)((m)+(o)))=(v))
#define SMData_(d,m,o,s)	cpswap(d,(char *)((m)+(o)),s)
#define SetSMData_(m,o,d,s)	cpswap((char *)((m)+(o)),d,s)
#define SMInc_(m,o)		((m)+(o))

typedef long			SaveState;

char VC40_Device[16];

void cpswap ();

/*}}}*/

#include "sml.h"

/*{{{  Variables */

int		VC40_Fd = -1;		/* Fd of vc40 device			*/

CBPtr		ABuf;		/* Base address of mapped shared RAM	*/

struct vic_ipcr *VMECr;		/* VME VIC control regs			*/

LinkInfo	Links[VC40_MAX_LINKS]; /* links			*/

int EnableInterrupt = FALSE;

extern int  (*rdrdy_fn) ();

int	c40_errno;	/* error number used like errno */

/*
 * Information about the shared memory used for the link required in
 * several functions.
 */

u_long srambase;
u_long sramsize;

extern char        *bootstrap;        /* see module tload.c */
extern word        bootsize;

long nsig = 0;

long nwait = 0;

int	VC40_Fail = 0;

int	VC40_Type = 0;	/* 1 => HYDRA I, 2 => HYDRA II */
/*}}}*/

/*{{{  Debugging */

#if 0

static void show_cb (cb)
CBPtr cb;
{
	int *wb = (int *)SMInc_(cb, CBOverhead);
	
	ServerDebug ("CB: %08x DR %x Ack %x Size %08x Buf %08x %08x %08x %08x",
		cb, CBWord_(cb,DataReady), CBWord_(cb,Ack),
		CBWord_(cb,Size), wb[0], wb[1], wb[2], wb[3]);
}

#else

#define show_cb(cb)

#endif

#ifdef VC40_DEBUG
print_vc40info (struct vc40info *	v)
{
	ServerDebug ("intpri		: %ld", v -> intpri);
	ServerDebug ("intvec		: 0x%lx", v -> intvec);
	ServerDebug ("dram_base	: 0x%lx", v -> dram_base);
	ServerDebug ("dram_size	: 0x%lx", v -> dram_size);
	ServerDebug ("numdsp		: %ld", v -> numdsp);
	ServerDebug ("hardrev\t	: %c", v -> hardrev);
	ServerDebug ("mserno		: 0x%lx", v -> mserno);
	ServerDebug ("firmrevs	: %s", v -> firmrevs);
	ServerDebug ("drvrevs\t	: %s", v -> drvrevs);
	ServerDebug ("board_type	: %s", ((v -> board_type == HYDRAI) ? "HYDRAI" : (v -> board_type == HYDRAII) ? "HYDRAII" : "unknown"));
}
#endif

/*}}}*/

/*{{{  init, open and free */

int vc40_settype ()
{
	struct vc40info		vc40info;

	if (VC40_Fd == -1)
	{
		VC40_Fd = c40_id2fd (c40_open(VC40_Device, O_RDWR));

		if (VC40_Fd == -1)
		{
			ServerDebug ("Error - failed to open device %s", VC40_Device);

			VC40_Fail = 1;

			return -1;
		}
	}

	if (c40_getinfo (VC40_Fd, &vc40info) == -1)
	{
		ServerDebug ("Error - failed to board info for %s",
				(VC40_Device[0] == '\0') ? "NULL" : VC40_Device);

		c40_close (VC40_Fd);  VC40_Fd = -1;

			VC40_Fail = 1;

		return -1;
	}

	c40_close (VC40_Fd);  VC40_Fd = -1;

	return ((vc40info.board_type == HYDRAI) ? 1
						: (vc40info.board_type == HYDRAII) ? 2 : -1);
}


/*
 * HYDRA I
 *
 * For Hydra I boards, the shared memory link is placed at the end
 * of the chosen global strobe.  send_config () in tload.c modifies
 * the size of the strobe in the config vector, and the kernel simply
 * goes to the end of the given strobe to locate the shared memory link.
 */
#if ANSI_prototypes
void vc40_init_hydrai_link (int	hydrai_fd)
#else
void vc40_init_hydrai_link (hydrai_fd)
int	hydrai_fd;
#endif
{
	/* u_long srambase;	- global variable also used in vc40_reset ()	 */
	/* u_long sramsize;	- global variable also used in vc40_init_link () */
	u_long gbase;
	u_long gsize;

	u_long	sml_offset;
	u_long	sml_length;

	/*
	 * Retrieve the relevant constants from the host.con file.
	 */
	if (get_config ("c40_sml_g1"))
	{
		gbase = get_int_config ("c40_idrom_gbase1");
		gsize = get_int_config ("c40_idrom_gsize1");
	}
	else
	{
		gbase = get_int_config ("c40_idrom_gbase0");
		gsize = get_int_config ("c40_idrom_gsize0");
	}

	if (gbase == Invalid_config || gsize == Invalid_config)
	{
		ServerDebug ("Invalid strobe for shared memory link");

		VC40_Fail = 1;

		return;
	}

	sramsize = get_int_config ("c40_sml_size");

	switch (sramsize)
	{
	default:
		ServerDebug ("Invalid size for shared RAM, 8k assumed");
	case Invalid_config:
		sramsize = 8;

	case 8:
	case 16:
	case 32:
	case 64:
		sramsize *= 1024;	/* convert to KBytes */
	}

	/* srambase is a global, and is used in vc40_reset () later */

	srambase = gbase + gsize - (sramsize/4);
/*
	ServerDebug ("NEW: srambase = 0x%lx", srambase);
	ServerDebug ("NEW: sramsize = 0x%lx", sramsize);
*/
	sml_offset = (srambase - gbase) * 4;	/* convert to bytes */
	sml_length = sramsize;			/* already in bytes */

/*	ServerDebug ("NEW: offset = 0x%lx, length = 0x%lx", sml_offset, sml_length); */

	ABuf = (CBPtr)(c40_map_shmem (hydrai_fd, sml_offset, sml_length));

/*	ServerDebug ("NEW: ABuf = 0x%lx", (long)ABuf); */

	if ((int)ABuf == -1)
	{
		ServerDebug ("Cannot map Hydra I device %s",VC40_Device);

		VC40_Fail = 1;

		return;
	}
}

/*
 * HYDRA II
 *
 * For Hydra II boards, the shared memory link is always placed at
 * 0x80000000.  
 */

#if ANSI_prototypes
void vc40_init_hydraii_link (int	hydraii_fd)
#else
void vc40_init_hydraii_link (hydraii_fd)
int	hydraii_fd;
#endif
{
	/* u_long srambase;	- global variable also used in vc40_reset ()	 */
	/* u_long sramsize;	- global variable also used in vc40_init_link () */

	if (get_config ("c40_sml_g1"))
	{
		ServerDebug ("Error - shared memory link must be on global strobe 0 - ignoring option c40_sml_g1");
	}

	sramsize = get_int_config ("c40_sml_size");

	switch (sramsize)
	{
	default:
	case 64:
	  	/*
		 * The maximum size of the shared memory area is 32K.  Unfortunately
		 * we use the four words of this to contain -
		 * 	the actual shared memory address,
		 *	number of DSP's, interrupt priority, interrupt vector.
		 *
		 * It may be possible to implement a shared link which is ALMOST
		 * 32K, but I've left this for now.
		 */
		ServerDebug ("Invalid size for shared RAM, 8k assumed");
	case Invalid_config:
		sramsize = 8;

	case 8:
	case 16:
	case 32:
		sramsize *= 1024;	/* convert to KBytes */	

		break;
	}

	/* set up base of the shared memory area */
	srambase = 0x80000000;

	/* sml_offset = 0; */		/* convert to bytes */
	/* sml_length = sramsize; */	/* already in bytes */

	ABuf = (CBPtr)(c40_map_shmem (hydraii_fd, 0, sramsize));

/*	ServerDebug ("vc40_init_hydraii_links () - ABuf = 0x%lx", (long)ABuf); */

	if ((int)ABuf == -1 )
	{
		ServerDebug("Cannot map Hydra II device %s", VC40_Device);

		VC40_Fail = 1;

		return;
	}
}

void vc40_init_link ()
{
	int i;
	
	struct vc40info	vc40info;

	u_long	sml_area;

	char *	hydra_device;

	if (Server_Mode eq Mode_Daemon)
	{
		ServerDebug("Hydra: the link daemon cannot support the vc40 board.");
		longjmp(exit_jmpbuf, 1);
	}

	/*
	 * Open the device ...
	 */

	hydra_device = get_config ("vc40_site");

	if (hydra_device != NULL)
	{
		sprintf (VC40_Device, "/dev/vc40%s", hydra_device);

		VC40_Fd = c40_id2fd (c40_open (VC40_Device, O_RDWR));
	}
	else
	{
		/*
		 * The library function c40_open () has code to handle
		 * looking for a vc40 device.
		 */
		VC40_Fd = c40_id2fd (c40_open (NULL, O_RDWR));
	}
	
	if (VC40_Fd == -1 )
	{
		ServerDebug ("Cannot open %s",VC40_Device);

		VC40_Fail = 1;

		return;
	}

	if (c40_getinfo (VC40_Fd, &vc40info) == -1)
	{
		ServerDebug ("failed to get board info for %s",
				(VC40_Device[0] == '\0') ? "NULL" : VC40_Device);

		VC40_Fail = 1;
	}
#ifdef VC40_DEBUG
	else
	{
		print_vc40info (&vc40info);
	}
#endif

	if (vc40info.board_type == HYDRAI)
	{
		VC40_Type = 1;

		vc40_init_hydrai_link (VC40_Fd);
	}
	else if (vc40info.board_type == HYDRAII)
	{
		VC40_Type = 2;

		vc40_init_hydraii_link (VC40_Fd);
	}
	else
	{
		ServerDebug ("Error: unknown board_type %d", vc40info.board_type);

		VC40_Fail = 1;

		return;
	}

	if (ABuf == -1)
	{
		return;
	}

	/*
	 * sml_area - the area in memory used for one link.
	 * The area is split into two channels - transmit & receive
	 */

/*	ServerDebug ("NEW: sramsize = 0x%lx", sramsize); */

/*	memset ((char *)(ABuf, 0, sramsize)); */
	{
		u_long * p = (u_long *)(ABuf);
		for (i = 0; i < sramsize / 4; i++)
		{
			p[i] = 0l;
		}
	}

	sml_area = sramsize / VC40_MAX_LINKS;

/*	ServerDebug ("NEW: sml_area = 0x%lx", sml_area); */

	for (i = 0; i < VC40_MAX_LINKS; i++)
	{
		LinkInfo *link = &Links[i];
		SMLChannel *sc = &(link -> Channel[0]);
		CBPtr cb = SMInc_(ABuf, i * sml_area);

/*		ServerDebug ("NEW: [1] cb = 0x%lx (increment 0x%lx)", (long)cb, i * sml_area); */
		show_cb (cb);

		link->Unit = VC40_Fd;

		InitSMLChan (sc, cb, sml_area / 2);
		link->TxChan = sc;
		show_cb (cb);

		/* sc++; */
		sc = &(link -> Channel[1]);
		cb = SMInc_(cb, sml_area / 2);

/*		ServerDebug ("NEW: [2] cb = 0x%lx (increment 0x%lx)", (long)cb, sml_area / 2); */

		InitSMLChan (sc, cb, sml_area / 2);
		show_cb (cb);

		{
			int	i, *w;

			w = (int *)(SMInc_(cb, CBOverhead));

			for (i = 0; i < 16; i++)
			{
				w[i] = 0xfadeddad;
			}
		}

		link->RxChan = sc;

		link_table[i].link_name[0] = '\0';
	}

	/* now setup signal handler for C40->Host interrupt	*/

	(void)signal (VC40_SIGNAL, vc40_signal);

	if (vc40info.board_type != HYDRAII)
	{
/*		ServerDebug ("Enabling interrupts in vc40_init_link ()"); */

		EnableInterrupt = TRUE;
		c40_enint (VC40_Fd, VC40_SIGNAL);
	}
}

void vc40_enint ()
{
	/*
	 * The interupt vectors on the Hydra II board can only be set up
	 * on the host side, hence we wait for the kernel to set a flag on 
	 * completion of the initialisation of the shared memory area.
	 */

	SMLChannel *	sc = Links[current_link].RxChan;
	CBPtr		cb = sc -> Cb;

/*	ServerDebug ("@@vc40_enint () - cb = 0x%lx", (long)cb); */

	while (CBWord_(cb,Protocol) == 0)
	{
		;
	}

/*	ServerDebug ("vc40_enint () - enabling interupts (Protocol: 0x%lx)",
			CBWord_(cb, Protocol)); */

	if (c40_enint (VC40_Fd, VC40_SIGNAL) == -1)
	{
		ServerDebug ("vc40_enint () - failed to enable interupts");
	}

/*	ServerDebug ("vc40_enint () - resetting protocol flag"); */

	SetCBWord_(cb, Protocol, 0);

	EnableInterrupt = TRUE;

/*	ServerDebug ("vc40_enint () - THE END"); */
}

#if ANSI_prototypes
int vc40_open_link (int	tabno)
#else
int vc40_open_link (tabno)
int tabno;
#endif
{
	if (tabno > VC40_MAX_LINKS || VC40_Fail)
	{
		return 0;
	}
	
	link_table[tabno].fildes = tabno;
	link_table[tabno].flags = Link_flags_not_selectable;

	return 1;
}

#if ANSI_prototypes
void vc40_free_link (int	tabno)
#else
void vc40_free_link (tabno)
int	tabno;
#endif
{
	c40_reset (Links[current_link].Unit);

	c40_close (Links[current_link].Unit);

	link_table[tabno].fildes = -1;

/*	ServerDebug ("nwait %d nsig %d", nwait, nsig); */
}

/*}}}*/
/*{{{  reset */

char peekbuf[8*1024];
int *wpb = (int *)peekbuf;

/*
 * The IO Server needs to tell the bootstrap code the Shared Memory Link address.
 * It does this by placing it in a specific location in memory which the bootstrap
 * knows about.  For Hydra I boards this location is 0x8d000000 and for Hydra II
 * it is 0x80004000.
 * The words following this address also contain information to be passed to the
 * kernel - the number of DSP's, the interrupt priority and the interrupt vector.
 */

void vc40_reset ()
{
	u_long addr = 0x002ffc00;
	struct vc40info info;
	struct
	{
		word srambase;
		word ndsp;
		word intpri;
		word intvec;
	} hydrai_info;

	struct
	{
		word	dr;
		word	ack;
		word	sze;
	} CBInitInfo;

	u_long	communication_address;

	int res;

	int i;
	u_long cw;

	CBInitInfo.dr = 0;
	CBInitInfo.ack = 0;
	CBInitInfo.sze = 0xdeadbeef;

/*	ServerDebug("vc40_reset"); */

	res = c40_reset(Links[current_link].Unit);
	if (res !=  0)
	{
		ServerDebug ("c40_reset: %d %d", res, errno);

		longjmp_exit;

		return;
	}

	for (i = 0; i < bootsize; i+=4)
	{
		int *w = (int *)(bootstrap+i);
		*w = swap(*w);
	}
		
	res = c40_getinfo (Links[current_link].Unit,&info);
	if (res != 0)
	{
		ServerDebug ("c40_getinfo: %d %d", res, errno);

		longjmp_exit;

		return;
	}

	if (info.board_type == HYDRAI)
	{
		VC40_Type = 1;

		communication_address = 0x8d000000;

		hydrai_info.srambase = srambase;
		hydrai_info.ndsp = info.numdsp;
		hydrai_info.intpri = info.intpri;
		hydrai_info.intvec = info.intvec;
	}
	else if (info.board_type == HYDRAII)
	{
		VC40_Type = 2;
		/* communication_address = 0xc0000000; */
	}
	else
	{
		ServerDebug ("Error: unknown board type 0x%lx", info.board_type);

		longjmp_exit;

		return;
	}

/*
	ServerDebug ("vc40_reset () - communication address = 0x%lx", communication_address);

	ServerDebug ("vc40_reset () - srambase = 0x%lx", srambase);
*/
	/* clear data ready and ack flags */
	res = c40_write_long (Links[current_link].Unit,
			      srambase,
			      &CBInitInfo,
			      sizeof (CBInitInfo) / sizeof (u_long));
	if (res != 0)
	{
		ServerDebug ("failed to initialise CB in vc40-reset ()");

		longjmp_exit;

		return;
	}

	if (info.board_type == HYDRAI)
	{
/*
		ServerDebug ("vc40_reset () - hydrai_info:[0x%lx, %d, %d, 0x%x]",
					hydrai_info.srambase,
					hydrai_info.ndsp,	
					hydrai_info.intpri,
					hydrai_info.intvec);
*/
		res = c40_write_long (Links[current_link].Unit,
				      communication_address,
				      &hydrai_info,
				      sizeof(hydrai_info)/sizeof(u_long));
		if (res !=  0)
		{
			ServerDebug ("c40_write_long2: %d %d", res, c40_errno);

			longjmp_exit;
	
			return;
		}
	}

	/*
	 *   We don't need to send any information to the nucleus with a
	 * Hydra II board.
	 */

/*	ServerDebug ("vc40_reset () - writing bootstrap @@ 0x%lx", addr); */
	
	res = c40_write_long (Links[current_link].Unit, addr, bootstrap, bootsize/sizeof(u_long));
	if (res != 0)
	{
		ServerDebug ("c40_write_long: %d %d", res, c40_errno);

		longjmp_exit;

		return;
	}

	res = c40_run (Links[current_link].Unit, addr); 
	if (res !=  0)
	{
		ServerDebug ("c40_run: %d %d", res, errno);

		longjmp_exit;

		return;
	}
}

/*}}}*/
/*{{{  interface routines */

int vc40_rdrdy1 ()
{
	return (SMLRxRdy (&Links[current_link]));
}

int vc40_rdrdy ()
{
	/* EnableInterrupt = TRUE; */

	rdrdy_fn = func (vc40_rdrdy1);

	return (SMLRxRdy (&Links[current_link]));
}

int vc40_wrrdy ()
{
	return (SMLTxRdy (&Links[current_link]));
}

#if ANSI_prototypes
int vc40_byte_to_link (int	data)
#else
int vc40_byte_to_link (data)
int 	data;
#endif
{
	char c = data;
	LinkTransferInfo info;

/*	ServerDebug ("@@vc40_byte_to_link (0x%02x)", data); */

	info.link = &Links[current_link];
	info.size = 1;
	info.buf  = CtoM_(&c);

	SMLTx (&info);

	if (Links[current_link].TxChan->Reason == SML_Aborted)
		return 1;
	else
		return 0;
}

#if ANSI_prototypes
int vc40_byte_from_link (UBYTE *	where)
#else
int vc40_byte_from_link (where)
UBYTE *	where;
#endif
{
	LinkTransferInfo info;

/*	ServerDebug ("@@vc40_byte_from_link ()"); */

	info.link = &Links[current_link];
	info.size = 1;
	info.buf  = CtoM_(where);

	SMLRx (&info);

	if (Links[current_link].RxChan->Reason == SML_Aborted)
	{
/*		ServerDebug ("vc40_byte_from_link () - read byte 0x%x", *where); */
		return 1;
	}
	else
	{
/*		ServerDebug ("vc40_byte_from_link () - failed to read byte"); */
		return 0;
	}
}

#if ANSI_prototypes
int vc40_send_block (int	count,
		     char *	data,
		     int	timeout)
#else
int vc40_send_block (count, data, timeout)
int 	count;
char 	*data;
int 	timeout;
#endif
{
	LinkTransferInfo info;

/*	ServerDebug ("@@vc40_send_block (%d, 0x%08lx, %d)", count, *(long *)data, timeout); */

	info.link = &Links[current_link];
	info.size = count;
	info.buf  = CtoM_(data);

	SMLTx (&info);

	if (Links[current_link].TxChan->Reason == SML_Aborted)
		return count;
	else
		return 0;
}

#if ANSI_prototypes
int vc40_fetch_block (int	count,
		      char *	data,
		      int	timeout)
#else
int vc40_fetch_block (count, data, timeout)
int 	count;
char	*data;
int 	timeout;
#endif
{
	LinkTransferInfo info;

/*	ServerDebug ("@@vc40_fetch_block (%d, data ptr, %d)", count, timeout); */

	info.link = &Links[current_link];
	info.size = count;
	info.buf  = CtoM_(data);

	SMLRx (&info);

	if (Links[current_link].RxChan->Reason == SML_Aborted)
	{
/*		ServerDebug ("vc40_fetch_block () - failed to read %d bytes", count); */
		return count;
	}
	else
	{
/*		ServerDebug ("vc40_fetch_block () - read %d bytes, starting with %x", count, data[0]); */
		return 0;
	}

}


void vc40_analyse ()
{
	vc40_reset ();
}


/*}}}*/
/*{{{  Interrupt */

int	SIMsgCount = 0;

#if ANSI_prototypes
static void SendInterrupt (word *	vector)
#else
static void SendInterrupt (vector)
word *	vector;
#endif
{
	/* ServerDebug ("SendInterrupt (%d)", (long)vector); */

	if (!EnableInterrupt)
	  {
	    /* ServerDebug ("SendInterrupt () - not enabled"); */
	    return;
	  }

	if (c40_iof2 (Links[current_link].Unit) == -1)
	  {
	    ServerDebug ("SendInterrupt () - ioctl () failed, errno = %d", errno);
	  }
/*
	else
	  {
	    ServerDebug ("SendInterrupt () - ioctl () succeeded");
	  }
*/
}

/*}}}*/
/*{{{  vc40_signal */

void vc40_signal ()
{
	nsig++;

/*	ServerDebug ("vc40_signal () - call number %d", nsig); */
}
/*}}}*/
/*{{{  C40 routines */

#include "c40sundriv.c"

/*}}}*/
/*{{{  Await */
/*--------------------------------------------------------
-- Await						--
--							--
-- Wait for the given Atomic variable to become non-	--
-- zero.						--
--							--
--------------------------------------------------------*/

#if ANSI_prototypes
static void Await (SMLChannel *	sc,
		   SMPtr	atom)
#else
static void Await (sc, atom)
SMLChannel *	sc;
SMPtr 		atom;
#endif
{
	WORD poll;

	sc->Reason = SML_Wakeup;

	nwait++;

#if 0
ServerDebug ("Await (sc: 0x%lx, atom: 0x%lx[0x%lx])", (long)sc, atom, SMWord_(atom, 0));
show_cb (sc -> Cb);
#endif

#if 1
while (SMWord_(atom, 0) == 0)
{
	;
}
#endif

#if POLL_LOOPS > 0
	poll = POLL_LOOPS;

	while (poll--)
	{
		if (SMWord_(atom, 0) != 0)
		{
			return;
		}
	}
#else
	if (SMWord_(atom, 0) != 0)
	{
/*		ServerDebug ("Await () - returning, SMWord_(atom:0x%lx, 0) = %d", (long)atom, SMWord_(atom, 0)); */

		return;
	}
#endif

	/* Wait for 5 seconds for something to happen. If it doesn't	*/
	/* abort the transfer.						*/

	poll = 20;

	while (poll--)
	{
		sleep (1);

/*		ServerDebug ("\tAwait %x[%x] (polling)", atom, SMWord_(atom, 0)); */
		show_cb (sc -> Cb);

		if (SMWord_(atom,0) != 0) 
		{
/*			ServerDebug ("Await %x[%x] done", atom, SMWord_(atom, 0)); */
			return;
		}
	}

/*	ServerDebug ("Await %x[%x] abort", atom, SMWord_(atom, 0)); */

	sc->Reason 		= SML_Aborted;
	
	return;

}
/*}}}*/
/*{{{  cpswap */
#if SUN4
#if ANSI_prototypes
void cpswap (char *	dst,
	     char *	src,
	     int	size)
#else
void cpswap (dst, src, size)
char *	dst;
char *	src;
int 	size;
#endif
{
	register char *d = dst;
	register char *s = src;
	register int   z = size;

#if 0
	if (z <= 0 )
	{
		ServerDebug ("cpswap: d %x s %x z %x", d, s, z);
	}
#endif

#if 1
	while (z >= 16)
	{
		d[0] = s[3];
		d[1] = s[2];
		d[2] = s[1];
		d[3] = s[0];

		d[4] = s[7];
		d[5] = s[6];
		d[6] = s[5];
		d[7] = s[4];

		d[8] = s[11];
		d[9] = s[10];
		d[10] = s[9];
		d[11] = s[8];

		d[12] = s[15];
		d[13] = s[14];
		d[14] = s[13];
		d[15] = s[12];

		d += 16;
		s += 16;
		z -= 16;
	}
#endif
#if 1
	while (z >= 8)
	{
		d[0] = s[3];
		d[1] = s[2];
		d[2] = s[1];
		d[3] = s[0];

		d[4] = s[7];
		d[5] = s[6];
		d[6] = s[5];
		d[7] = s[4];

		d += 8;
		s += 8;
		z -= 8;
	}
#endif
#if 1
	while (z >= 4)
	{
		d[0] = s[3];
		d[1] = s[2];
		d[2] = s[1];
		d[3] = s[0];

		d += 4;
		s += 4;
		z -= 4;
	}
#endif
	if (z <= 0)
	{
		return;
	}

	while (z--)
	{
		d[z^3] = s[z];
	}

#if 0
	if (((long)d & 3) == 0 && ((long)s & 3) == 0)
	{
		/* aligned source and dest */
	}
#endif
}

#endif
/*}}}*/

#include "smlgen.c"
@


1.5
log
@Support for Ariel's Hydra II board added
@
text
@d259 1
a259 1
		ServerDebug ("Cannot map %s",VC40_Device);
d328 1
a328 1
		ServerDebug("Cannot map %s", VC40_Device);
@


1.4
log
@There was no test to prevent shared memory boards from being used within
Hydra, although the necessary bootstrap code does not exists.
@
text
@d11 1
d25 3
a27 3
#define VC40_DEVICE	"/dev/vc40a1"	/* The device special file	*/


d33 1
a45 1

a49 1

d58 1
d60 2
a61 1
void cpswap();
d68 1
a68 1
int		AFd;		/* Fd of vc40 device			*/
a73 1

d76 1
a76 1
int EnableInterrupt = TRUE;
d78 1
a78 1
extern int  (*rdrdy_fn)();
d82 4
a85 1
WORD srambase;
d87 2
a92 1

d96 4
d101 1
d106 1
a106 1
static void show_cb(cb)
d109 1
a109 1
	int *wb = (int *)SMInc_(cb,CBOverhead);
d111 3
a113 2
	ServerDebug("CB: %08x DR %x Ack %x Size %08x Buf %08x %08x %08x %08x",
		cb,CBWord_(cb,DataReady),CBWord_(cb,Ack),CBWord_(cb,Size),wb[0],wb[1],wb[2],wb[3]);
d121 17
d139 1
d141 2
a142 1
void vc40_init_link()
d144 15
a158 6
	int i;
	int fd;
	
	WORD sramsize;
	WORD gbase;
	WORD gsize;
d160 1
a160 1
	if (Server_Mode eq Mode_Daemon)
d162 8
a169 2
		ServerDebug("Hydra: the link daemon cannot support the vc40 board.");
		longjmp(exit_jmpbuf, 1);
d172 34
a205 1
	if( get_config("c40_sml_g1" ) )
d207 2
a208 2
		gbase = get_int_config("c40_idrom_gbase1");
		gsize = get_int_config("c40_idrom_gsize1");
d212 2
a213 2
		gbase = get_int_config("c40_idrom_gbase0");
		gsize = get_int_config("c40_idrom_gsize0");
d216 1
a216 1
	if( gbase == Invalid_config || gsize == Invalid_config )
d218 5
a222 2
		ServerDebug("Invalid strobe for shared memory link");
		longjmp( exit_jmpbuf, 1);
d225 3
a227 2
	sramsize = get_int_config("c40_sml_size");
	switch( sramsize )
d230 1
a230 1
		ServerDebug("Invalid size for shared RAM, 8k assumed");
d233 1
d238 112
a349 1
		sramsize *= 512;	/* set size to half of value */
d352 5
a356 1
	srambase = gbase + gsize - (sramsize/2);
d358 3
a360 1
	fd = open(VC40_DEVICE, O_RDWR);
d362 12
a373 1
	if( fd == -1 )
d375 4
a378 1
		ServerDebug("Cannot open %s",VC40_DEVICE);
d382 31
a412 1
	ABuf = (CBPtr)c40_map_dram(fd, (srambase-gbase)*4, sramsize*VC40_MAX_LINKS*2);
d414 4
a417 1
	if( (int)ABuf == -1 )
a418 1
		ServerDebug("Cannot map %s",VC40_DEVICE);
d422 21
a442 1
	for( i = 0; i < VC40_MAX_LINKS; i++ )
d445 2
a446 2
		SMLChannel *sc = &link->Channel[0];
		CBPtr cb = SMInc_(ABuf,(2*i*sramsize));
d448 2
a449 1
		link->Unit = fd;
d451 3
a453 1
		InitSMLChan(sc,cb,sramsize);
d455 13
d469 1
a469 2
		sc++;
		cb = SMInc_(cb,sramsize);
d471 6
a476 1
		InitSMLChan(sc,cb,sramsize);
d484 38
a521 1
	c40_enint(fd, VC40_SIGNAL);
d523 1
a523 1
	(void)signal(VC40_SIGNAL, vc40_signal );
d525 3
d530 4
a533 1
int vc40_open_link(tabno)
d535 1
d537 4
a540 1
	if( tabno > VC40_MAX_LINKS ) return 0;
d548 6
a553 2
void vc40_free_link(tabno)
int tabno;
d555 1
a555 1
	c40_reset(Links[current_link].Unit);
d557 1
a557 1
	close(Links[current_link].Unit);
d561 1
a561 1
/* ServerDebug("nwait %d nsig %d",nwait,nsig); */
d570 10
a579 1
void vc40_reset()
a580 1

d589 11
a599 1
	} VC40info;
d605 3
a607 1
/* ServerDebug("vc40_reset"); */
d609 2
d612 3
a614 1
	if( res != 0 ) ServerDebug("c40_reset: %d %d",res,errno);	
d616 6
a621 1
	for( i = 0; i < bootsize; i+=4)
d627 90
a716 13
#if 0
	/* This is probably unnecessary... */ 
	res = c40_halt(Links[current_link].Unit);
	if( res != 0 ) ServerDebug("c40_halt: %d %d",res,errno);	
#endif	

	res = c40_getinfo(Links[current_link].Unit,&info);
	if( res != 0 ) ServerDebug("c40_getinfo: %d %d",res,errno);	

	VC40info.srambase = srambase;
	VC40info.ndsp = info.numdsp;
	VC40info.intpri = info.intpri;
	VC40info.intvec = info.intvec;
d718 2
a719 2
	res = c40_write_long( Links[current_link].Unit, addr, bootstrap, bootsize/sizeof(u_long));
	if( res != 0 ) ServerDebug("c40_write_long: %d %d",res,c40_errno);
d721 4
a724 2
	res = c40_write_long( Links[current_link].Unit, 0x8d000000, &VC40info, sizeof(VC40info)/sizeof(u_long));
	if( res != 0 ) ServerDebug("c40_write_long2: %d %d",res,c40_errno);
d726 1
a726 2
	res = c40_run( Links[current_link].Unit, addr );
	if( res != 0 ) ServerDebug("c40_run: %d %d",res,errno);
d728 2
d735 1
a735 1
int vc40_rdrdy1()
d737 1
a737 1
	return SMLRxRdy(&Links[current_link]);
d740 1
a740 1
int vc40_rdrdy()
d742 1
a742 1
	EnableInterrupt = TRUE;
d744 1
a744 1
	rdrdy_fn = func(vc40_rdrdy1);	
d746 1
a746 1
	return SMLRxRdy(&Links[current_link]);
d749 1
a749 1
int vc40_wrrdy()
d751 1
a751 1
	return SMLTxRdy(&Links[current_link]);
d754 6
a759 2
int vc40_byte_to_link(data)
int data;
d764 2
d770 1
a770 1
	SMLTx(&info);
d772 1
a772 1
	if( Links[current_link].TxChan->Reason == SML_Aborted )
d774 2
a775 1
	else return 0;
d778 6
a783 2
int vc40_byte_from_link(where)
UBYTE *where;
d787 2
d793 1
a793 1
	SMLRx(&info);
d795 3
a797 1
	if( Links[current_link].RxChan->Reason == SML_Aborted )
d799 6
a804 1
	else return 0;
d807 10
a816 4
int vc40_send_block(count,data,timeout)
int count;
char *data;
int timeout;
d820 2
d826 1
a826 1
	SMLTx(&info);
d828 1
a828 1
	if( Links[current_link].TxChan->Reason == SML_Aborted )
d830 2
a831 2
	else return 0;
	
d834 10
a843 4
int vc40_fetch_block(count,data,timeout)
int count;
char *data;
int timeout;
d847 2
d853 1
a853 1
	SMLRx(&info);
d855 3
a857 1
	if( Links[current_link].RxChan->Reason == SML_Aborted )
d859 6
a864 1
	else return 0;
d869 1
a869 1
void vc40_analyse()
d871 1
a871 1
	vc40_reset();
d878 8
a885 2
static void SendInterrupt(vector)
int vector;
d887 1
a887 1
	if( !EnableInterrupt ) return;
d889 16
a904 1
	ioctl(Links[current_link].Unit, VC40IOF2 );
d910 1
a910 1
void vc40_signal()
d913 2
d931 8
a938 3
static void Await(sc,atom)
SMLChannel *sc;
SMPtr atom;
d947 2
a948 2
ServerDebug("Await %x[%x]",atom,SMWord_(atom,0));
show_cb(sc->Cb);
d952 4
a955 1
while( SMWord_(atom,0) == 0 );
d961 7
a967 1
	while( poll-- ) if( SMWord_(atom,0) != 0 ) return;
d969 6
a974 1
	if( SMWord_(atom,0) != 0 ) return;
a976 1

d980 1
a980 1
	poll = 5;
d982 1
a982 1
	while( poll-- )
d984 1
a984 2
		sleep(1);
/* ServerDebug("Await %x[%x]",atom,SMWord_(atom,0)); */
d986 4
a989 1
		if( SMWord_(atom,0) != 0 ) 
d991 1
a991 1
/* ServerDebug("Await %x[%x] done",atom,SMWord_(atom,0)); */
d995 3
a997 1
/* ServerDebug("Await %x[%x] abort",atom,SMWord_(atom,0)); */
d1006 10
a1015 4
void cpswap(dst,src,size)
char *dst;
char *src;
int size;
d1021 6
a1026 1
/*	if( z <= 0 ) ServerDebug("cpswap: d %x s %x z %x",d,s,z); */
d1029 1
a1029 1
	while( z >= 16 )
d1051 3
a1053 3
		d+=16;
		s+=16;
		z-=16;
d1057 1
a1057 1
	while( z >= 8 )
d1069 3
a1071 3
		d+=8;
		s+=8;
		z-=8;
d1075 1
a1075 1
	while( z >= 4 )
d1082 3
a1084 3
		d+=4;
		s+=4;
		z-=4;
d1087 4
a1090 1
	if( z <= 0 ) return;
d1092 4
a1095 1
	while( z-- ) d[z^3] = s[z];
a1096 4
/*	while( z ) { d[z^3] = s[z]; z--; }	*/

/*	z--; do{ d[z^3] = s[z]; z--; } while(z>=0); */

d1098 1
a1098 1
	if( ((long)d & 3) == 0 && ((long)s & 3) == 0 )
a1100 2

		
@


1.3
log
@Debugging disabled.
@
text
@d121 6
@


1.2
log
@Working version.
@
text
@d94 1
a94 1
#if 1
@


1.1
log
@Initial revision
@
text
@a25 1
#define VC40_BUFSIZE	(8*1024)	/* size of buffers		*/
a26 1
#define VC40_MAPOFFSET	0		/* Offset into device for SRAM	*/
a27 1

d75 4
d81 1
d83 1
d88 3
d105 1
a105 6
int c40_get_long(c40_fd, dsp_addr, lval)
int c40_fd;		/* file descriptor */
u_long dsp_addr;	/* address on DSP to read buffer from */
u_long *lval;
{
	int	rcode;
d107 1
a107 9
	rcode = ioctl(c40_fd, VC40SETADDR, &dsp_addr);
	if (rcode == -1) {
		c40_errno = errno;
		return (-1);
	}
	rcode = read(c40_fd, lval, sizeof(u_long));
	c40_errno = errno;
	return (rcode);
}
a108 23
static void show_cw()
{
	u_long cw;
	int res = c40_get_long(Links[0].Unit ,0x0bf7c008, &cw);
ServerDebug("Hydra Control Register %x   (%x %x)",cw,res,c40_errno);
}


static check_buf(sc)
SMLChannel *sc;
{
#if 0
	register int i;
	register int size = CBWord_(sc->Cb,Size);
	register char *src = sc->Buf;
	register char *buf = sc->Cb->Buffer;

	for( i = 0; i < size ; i++ )
	{
		register char s = src[i];
		register char b = buf[i^3];
		if( s != b ) ServerDebug("Buffer corrupt at %d: %x != %x",i,s,b);
	}
a109 3
}

#endif
d117 3
a119 1
ServerDebug("vc40_init_link");
d121 33
a153 3
#if TESTER
	fd = 100;
#else
a154 1
#endif
a155 1
ServerDebug("dev fd %d",fd);
d161 4
a164 9
#if TESTER
	ABuf = (CBPtr)malloc(VC40_BUFSIZE*VC40_MAX_LINKS*2);
	VMECr = (struct vic_ipcr *)malloc(sizeof(struct vic_ipcr));
#else
	ABuf = (CBPtr)c40_map_dram(fd,0, VC40_BUFSIZE*VC40_MAX_LINKS*2);
	VMECr = (struct vic_ipcr *)c40_map_ipcr(fd);
#endif
ServerDebug("buffer %x",ABuf);
	if( (int)ABuf == -1 || (int) VMECr == -1 )
d174 1
a174 1
		CBPtr cb = SMInc_(ABuf,(2*i*VC40_BUFSIZE));
d178 1
a178 1
		InitSMLChan(sc,cb,VC40_BUFSIZE);
d180 1
a180 1
show_cb(cb);
d182 1
a182 1
		cb = SMInc_(cb,VC40_BUFSIZE);
d184 1
a184 1
		InitSMLChan(sc,cb,VC40_BUFSIZE);
d186 1
a186 1
show_cb(cb);
d195 1
a200 1
ServerDebug("vc40_open_link");
d212 4
a215 1
ServerDebug("vc40_free_link");	
d217 2
a228 1
#if TESTER
a229 3
ServerDebug("vc40_reset");

#else
d231 8
a238 1
/*	u_long addr = 0x40000e00; */
d244 1
a244 1
ServerDebug("vc40_reset");
d247 1
a247 1
ServerDebug("c40_reset: %d %d",res,errno);	
d255 2
a256 4
	for(i = 0; i < sizeof(peekbuf); i++ ) peekbuf[i] = 0;
	
ServerDebug("ArielReset(%d)",current_link);
	
d258 2
a259 4
ServerDebug("c40_halt: %d %d",res,errno);	
	
	{
		struct vc40info info;
d261 2
a262 4
		res = c40_getinfo(Links[current_link].Unit,&info);
ServerDebug("c40_getinfo: %d %d",res,errno);	
		ServerDebug("C40 info: %x %x %x %x %x",info);
	}
d264 4
a267 5
show_cb(Links[current_link].TxChan->Cb);
	
ServerDebug("bootstrap %x %x",bootstrap,bootsize);
	res = c40_write_long(	Links[current_link].Unit, addr, bootstrap, bootsize/sizeof(u_long));
ServerDebug("c40_write_long: %d %d",res,c40_errno);
d269 2
a270 2
	c40_read_long( Links[current_link].Unit, addr, peekbuf, sizeof(peekbuf)/sizeof(u_long));
ServerDebug("c40_read_long: %d %d",res,c40_errno);
d272 3
a274 1
ServerDebug("peeked: %x %x %x %x %x",wpb[0],wpb[1],wpb[2],wpb[3],wpb[4]);
d276 1
a276 1
ServerDebug("c40_run: %d %d",res,errno);
a277 5
#if 0
{
char x = 0;
printf("type `c` to continue:\n");
while( x != `c` ) read(0,&x,1);
d280 2
a281 3
	res = c40_halt(Links[current_link].Unit);
ServerDebug("c40_halt: %d %d",res,errno);	
#endif
d283 3
a285 5
show_cb(Links[current_link].TxChan->Cb);
sleep(1);
show_cb(Links[current_link].TxChan->Cb);

#endif
a287 3
/*}}}*/
/*{{{  interface routines */

d290 5
a294 6
/*ServerDebug("vc40_rdrdy");	*/
#if TESTER
	return 0;
#else
	return SMLRxRdy(Links[current_link].RxChan);
#endif
d299 1
a299 6
ServerDebug("vc40_wrrdy");
#if TESTER
	return 0;
#else
	return SMLTxRdy(Links[current_link].TxChan);
#endif
a307 4
ServerDebug("vc40_byte_to_link %x",data);
#if TESTER
	return 0;
#endif
a322 5
ServerDebug("vc40_byte_from_link");	
show_cb(Links[current_link].RxChan->Cb);
#if TESTER
	return 0;
#endif
a340 6
ServerDebug("vc40_send_block(%x,%x,%x)",count,data,timeout);
ServerDebug("data: %08x %08x %08x %08x",
	((WORD *)data)[0],((WORD *)data)[1],((WORD *)data)[2],((WORD *)data)[3]);
#if 0 /* TESTER */
	return 0;
#endif
a347 2
ServerDebug("SMLTx reason: %x",Links[current_link].TxChan->Reason);

a360 3
ServerDebug("vc40_fetch_block(%x,%x,%x)",count,data,timeout);
show_cb(Links[current_link].RxChan->Cb);

a364 4
#if TESTER
	return 0;
#endif

d386 3
a388 1
	VMECr->set_icms0 = 1;
d396 1
a396 1
	ServerDebug("vc40_signal");
a402 84
#if 0
/****************************************************************************
 * c40_write_long()
 *
 * function used by COFF loader to download programs to Hydra
 */
int c40_write_long(c40_fd, dsp_addr, buf, wcnt)
int c40_fd;		/* file descriptor */
u_long dsp_addr;	/* address on DSP to write buffer to */
u_long *buf;		/* buffer of longs to write to DSP */
u_int	wcnt;		/* number of longs to write to DSP */
{
	int	rcode;

	rcode = ioctl(c40_fd, VC40SETADDR, &dsp_addr);
	if (rcode == -1) {
		c40_errno = errno;
		return (-1);
	}
	rcode = write(c40_fd, buf, sizeof(u_long)*wcnt);
	c40_errno = errno;
	return (rcode);
}

/****************************************************************************
 * c40_read_long()
 *
 */
int c40_read_long(c40_fd, dsp_addr, buf, wcnt)
int c40_fd;		/* file descriptor */
u_long dsp_addr;	/* address on DSP to read buffer from */
u_long *buf;		/* buffer of longs to read from DSP */
u_int	wcnt;		/* number of longs to read from DSP */
{
	int	rcode;

	rcode = ioctl(c40_fd, VC40SETADDR, &dsp_addr);
	if (rcode == -1) {
		c40_errno = errno;
		return (-1);
	}
	rcode = read(c40_fd, buf, sizeof(u_long)*wcnt);
	c40_errno = errno;
	return (rcode);
}

/****************************************************************************
 * c40_map_dram()
 *
 * maps in Hydra's DRAM to the user's virtual address space
 */
char *c40_map_dram(c40_fd, offs, len)
int c40_fd;	/* unit's file descriptor */
u_long offs;	/* offset from the beginning of the unit's DRAM to start */
u_long len;	/* number of *bytes* to map */
{
	char *vpstart;
	u_long psize = getpagesize();	/* get system's page size */
	u_long pstart, poff;

	/*
	 * calculate beginning of nearest page, and offset from beginning
	 * of page.
	 */
	pstart = (offs / psize) * psize;
	poff = offs % psize;

	/*
	 * map the DRAM in
	 */
ServerDebug("mapping: pstart: 0x%x; len: %d; offset: 0x%x", pstart, len, poff);
	vpstart = (char *) mmap((caddr_t)0, len, PROT_READ|PROT_WRITE,
		MAP_SHARED, c40_fd, pstart);
	if (vpstart == (char *)(-1)) {
		return ((char *)-1);
	}

	/*
	 * return virtual address
	 */
	return (vpstart + poff);
}

#endif
d421 2
d425 4
a429 2
ServerDebug("Await %x[%x] done",atom,SMWord_(atom,0));
return;
a431 7
ServerDebug("Await %x[%x]",atom,SMWord_(atom,0));	
show_cb(sc->Cb);

#if TESTER
	SetCBWord_(sc->Cb,DataReady,0);
	return;
#endif
d449 1
a449 1
ServerDebug("Await %x[%x]",atom,SMWord_(atom,0));
d451 5
a455 1
		if( SMWord_(atom,0) != 0 ) return;
d457 1
a457 1
ServerDebug("Await %x[%x] abort",atom,SMWord_(atom,0));
d465 1
a465 1

d475 77
a551 1
	while( z-- ) d[z^0x3] = s[z];
d553 2
@
