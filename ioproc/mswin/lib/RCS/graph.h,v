head	1.1;
access;
symbols
	Helios_1_3_1:1.1
	Helios_C40_1_3_Official_Release:1.1;
locks; strict;
comment	@ * @;


1.1
date	92.12.05.16.33.50;	author craig;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@#ifndef __syslib_h
#include <syslib.h>
#endif

/* bitmap structures and defines */


/* data structures for palettes */

typedef struct PALETTEENTRY { BYTE red;    /* intensity of red     */
                              BYTE green;  /* intensity of green   */
                              BYTE blue;   /* intensity of blue    */
                              BYTE flags;  /* palette use flags    */
                            } PALETTEENTRY;

typedef struct LOGPALETTE { unsigned short version;     /* struct version = 0x300 */
                            unsigned short num_entries; /* no entries in palette  */
                            PALETTEENTRY pal[1];        /* actual palette entries */
                          } LOGPALETTE;

/* Structure definition for a bitmap */

typedef struct BITMAP { word width;	     /* width in pixels 	   */
			word height;	     /* height in scan lines	   */
			word planes;	     /* color planes		   */
			word bits_pix;	     /* bits per pixel		   */
			word byte_width;     /* bytes per line. (even no.) */
			BYTE *bits;	     /* 1's & 0's of the bitmap    */
	       } BITMAP;

/* Structure definition for the user defined fonts */

typedef struct FONT {  short int  height;	 /* character height	*/
		       short int  width;	 /* character width	*/
		       short int  tilt; 	 /* angle of text	*/
		       short int  orientation;	 /* angle of characters */
		       short int  weight;	 /* Bold Face?		*/
		       UBYTE	  italic;	 /* Italic text?	*/
		       UBYTE	  underline;	 /* Text underlined?	*/
		       UBYTE	  strikeout;	 /* Strikeout text?	*/
		       UBYTE	  charset;	 /* OEM or ANSI?	*/
		       UBYTE	  OutPrecision;  /* not used.		*/
		       UBYTE	  ClipPrecision; /* not used.		*/
		       UBYTE	  quality;	 /* font matching	*/
		       UBYTE	  pitch_family;  /* pitch and family	*/
		       UBYTE	  face_name[32]; /* type face		*/
	       }FONT;

/* Structure to hold the various text dimension fields */

typedef struct TextDim {  word height;		  /* character height  */
			  word ave_width;	  /* character width   */
			  word ascent;		  /* character ascent  */
			  word descent; 	  /* character descent */
			  word internal_leading;  /* external leading  */
			  word external_leading;  /* internal leading  */
		}TextDim;

/* Font Related Definitions */

/* Font Types */

#define OEM_FIXED   10	     /* These are  */
#define ANSI_FIXED  11	     /* the stock  */
#define ANSI_VAR    12	     /* fonts	   */
#define SYSTEM_FONT 13	     /* used in    */
#define DEVICE_FONT 14	     /* MS-WINDOWS */
#define USER_FONT   15	     /* USER_FONT used for a user defined font */

/* Font Quality definitons */

#define Q_DEFAULT   0
#define Q_DRAFT     1
#define Q_PROOF     2

/* Pitch Definitions */

#define P_DEFAULT   0
#define P_FIXED     1
#define P_VARIABLE  2

/* Character Set Definitions */

#define ANSI_CHAR   0
#define OEM_CHAR    255

/* Font Family Definitions */

#define ANYONE	    (0<<4)
#define ROMAN	    (1<<4)
#define SWISS	    (2<<4)
#define MODERN	    (3<<4)
#define SCRIPT	    (4<<4)
#define DECORATIVE  (5<<4)

/* Font Weight Definitions */

#define W_NORMAL    400
#define W_BOLD	    900


/* Precision definitions */

#define OUT_DEFAULT 0
#define OUT_STRING  1
#define OUT_CHAR    2
#define OUT_STROKE  3


#define CLIP_DEFAULT  0
#define CLIP_CHAR     1
#define CLIP_STROKE   2


/* Definitions for Text Alignment */

#define TA_BASELINE		24
#define TA_BOTTOM		8
#define TA_LEFT			0
#define TA_RIGHT		2
#define TA_CENTRE		6
#define TA_TOP			0

/* definitions of the different palette entry flags */

#define PC_EXPLICIT      0x02
#define PC_NOCOLLAPSE    0x04
#define PC_RESERVED      0x01


/* definitions for colors availiable */

#define RGB(r,g,b)        (((word) ((b) << 8 | (g)) << 8) | (r))
#define PALETTEINDEX(i)   ((word)0x01000000 | ((word)(i)))
#define PALETTERGB(r,g,b) ((word)0x02000000 | RGB(r,g,b))
#define GETR(rgb)         ((BYTE) (rgb))
#define GETG(rgb)         ((BYTE) ((rgb) >> 8))
#define GETB(rgb)         ((BYTE) ((rgb) >> 16))

#define BLACK	      RGB(0, 0, 0)
#define BLUE	      RGB(0, 0, 255)
#define GREEN	      RGB(0, 255, 0)
#define CYAN	      RGB(0, 255, 255)
#define RED	      RGB(255, 0, 0)
#define MAGENTA       RGB(255, 0, 255)
#define YELLOW	      RGB(255, 255, 0)
#define WHITE	      RGB(255, 255, 255)


/* Definitions for line styles */

#define SOLID	      0     /* solid line */
#define DASH	      1     /* ---------- */
#define DOT	      2     /* .......... */
#define DASHDOT       3     /* _._._._._. */
#define DASHDOTDOT    4     /* _.._.._.._ */
#define NULL_PEN      5     /* invisible line */

/* Definitions for background styles */

#define TRANSPARENT   1
#define OPAQUE        2

/*Definitions for Fill Styles */

/* #define SOLID      0  */	/* defined previously */
#define HOLLOW	      1
#define H_HORIZONTAL  2
#define H_VERTICAL    3
#define H_LEFTDIAG    4
#define H_RIGHTDIAG   5
#define H_CROSS       6
#define H_DIAGCROSS   7

/* Definitions for fill modes */

#define ALTERNATE     1
#define WINDING       2


/*  Definitions for Mapping Modes */

#define M_TEXT	      1
#define M_LOMETRIC    2
#define M_HIMETRIC    3
#define M_LOENGLISH   4
#define M_HIENGLISH   5
#define M_TWIPS       6
#define M_ISOTROPIC   7
#define M_ANISOTROPIC 8


/* Definitions to help with device and logical origin and extents */

#define LOGIC	      0
#define DEVICE	      1


/* Definitions for cursor shapes */

#define ARROW	   32512
#define CROSS	   32515
#define IBEAM	   32513
#define ICON	   32641
#define SIZE	   32640
#define UPARROW    32516
#define WAIT	   32514



/* ROP code definitions */
			     /* Assuming S = source & D = destination  bits */

#define NOTSRCERASE  0x1100A6	     /* ~(S | D) */
#define NOTSRCCOPY   0x330008	     /* ~S	 */
#define SRCERASE     0x440328	     /* S & ~D	 */
#define SRCINVERT    0x660046	     /* S ^ D	 */
#define SRCAND	     0x8800C6	     /* S & D	 */
#define SRCCOPY      0xCC0020	     /* S	 */
#define SRCPAINT     0xEE0086	     /* S | D	 */


/* DeviceCaps Definitions */

#define TECHNOLOGY 0
#define HORZSIZE   1
#define VERTSIZE   2
#define HORZRES    3
#define VERTRES    4
#define BITSPIXEL  5
#define PLANES	   6
#define NUMBRUSHES 7
#define NUMPENS    8
#define NUMMARKERS 9
#define NUMFONTS   10
#define NUMCOLORS  11
#define RASTERCAPS 12
#define ASPECTX    13
#define ASPECTY    14
#define ASPECTXY   15
#define LOGPIXELSX 16
#define LOGPIXELSY 17


/* MSEvent type definitions */

#define MS_Menu    1
#define MS_Repaint 2
#define MS_KBD     3
#define MS_Resize  4


/* The following defines are for the message box flag options */
/* and the return values                                      */

/* flag options */

#define MB_ABORTRETRYIGNORE   0x0002
#define MB_DEFBUTTON1         0x0000
#define MB_DEFBUTTON2         0x0100
#define MB_DEFBUTTON3         0x0200
#define MB_ICONASTERISK       0x0040
#define MB_ICONEXCLAMATION    0x0030
#define MB_ICONHAND           0x0010
#define MB_ICONINFORMATION    0x0040
#define MB_ICONQUESTION       0x0020
#define MB_ICONSTOP           0x0010
#define MB_OK                 0x0000
#define MB_OKCANCEL           0x0001
#define MB_RETRYCANCEL        0x0005
#define MB_YESNO              0x0004
#define MB_YESNOCANCEL        0x0003

/* return values */

#define IDABORT               3
#define IDCANCEL              2
#define IDIGNORE              5
#define IDNO                  7
#define IDOK                  1
#define IDRETRY               4
#define IDYES                 6


/* opengraph window border options */

#define WS_OVERLAPPED         0x00000000L
#define WS_CAPTION            0x00c00000L
#define WS_SYSMENU            0x00080000L
#define WS_THICKFRAME         0x00040000L
#define WS_MINIMIZEBOX        0x00020000L
#define WS_MAXIMIZEBOX        0x00010000L
#define WS_POPUP              0x80000000L
#define WS_BORDER             0x00800000L

/* opengraph showmode window options */

#define SW_HIDE               0
#define SW_MINIMIZE           6
#define SW_RESTORE            9
#define SW_SHOW               5
#define SW_MINNOACTIVE        7
#define SW_SHOWNA             8
#define SW_NOACTIVATE         4
#define SW_SHOWNORMAL         1
#define SW_MAXIMIZED          3
#define SW_SHOWMINIMIZED      2

#define WS_OVERLAPPEDWINDOW (WS_OVERLAPPED | WS_CAPTION | WS_SYSMENU | WS_THICKFRAME | WS_MINIMIZEBOX | WS_MAXIMIZEBOX)
#define WS_POPUPWINDOW      (WS_POPUP | WS_BORDER | WS_SYSMENU)


/* Function definitions */


/* Window independent functions */

extern word        GetMaxX(void);
extern word        GetMaxY(void);
extern word        GetCaptionSize(void);
extern word        GetMenuSize(void);
extern word        GetSwapButton(void);
extern word        GetResizeFrameX(void);
extern word        GetResizeFrameY(void);
extern word        GetBorderFrameX(void);
extern word        GetBorderFrameY(void);
extern BITMAP     *CreateBitMap(word, word, word, word, BYTE *);
extern BITMAP     *CreateDIBitMap(Stream *, word, word);
extern void        DeleteBitMap(BITMAP *);
extern int         SetBitMapBits(BITMAP *, BYTE *);
extern int         InitGraphics(VoidFnPtr, VoidFnPtr);
extern int         TidyGraphics(void);
extern int         FLUSH(void);
extern int         MSEventSupported(void);
extern int         MSMouseSupported(void);

/* Window functions */

extern Stream *OpenGraph(BYTE *, word, word, word, word, word, word);
extern word    GraphID(Stream *);
extern int     CloseGraph(Stream *);
extern int     MessageBox(Stream *, char *, char *, word);

/* Output Functions */

extern int     PutPixel(Stream *, word, word, word);
extern int     MoveTo(Stream *, word, word);
extern int     LineTo(Stream *, word, word);
extern int     DrawLine(Stream *, word, word, word, word);
extern int     TextOut(Stream *, word, word, BYTE *);
extern int     Squares_Circles(Stream *, word, word, word, word, word);

#define Rectangle(a, b, c, d, e)    Squares_Circles(a, 0, b, c, d, e)
#define Ellipse(a, b, c, d, e)	    Squares_Circles(a, 1, b, c, d, e)
#define Circle(a, b, c, d)	    Squares_Circles(a, 1, b-d, c-d, b+d, c+d)

extern int     poly_functions(Stream *, word, word *, word);

#define PolyLine(a, b, c)	    poly_functions(a, b, c, 0)
#define FillPoly(a, b, c)	    poly_functions(a, b, c, 1)

extern int     arc_functions(Stream *, word, word, word, word, word, word,
				       word, word, word);

#define Arc(a,b,c,d,e,f,g,h,i)	    arc_functions(a,b,c,d,e,f,g,h,i,1)
#define Chord(a,b,c,d,e,f,g,h,i)    arc_functions(a,b,c,d,e,f,g,h,i,2)
#define Pie(a,b,c,d,e,f,g,h,i)	    arc_functions(a,b,c,d,e,f,g,h,i,3)

extern int     FillRect(Stream *, word, word, word, word, word);
extern int     DrawBitMap(Stream *, BITMAP *, word, word, word);
extern int     ClearGraph(Stream *);

/* palette manipulation function */

LOGPALETTE *CreatePalette(unsigned short);
int FreePalette(LOGPALETTE *);
int SelectPalette(Stream *, LOGPALETTE *);
int UnselectPalette(Stream *);


/* Control functions */

extern int     SetLineColor(Stream *, word);
extern int     SetLineStyle(Stream *, word);
extern int     SetLineWidth(Stream *, word);
extern int     SetBkColor(Stream *, word);
extern int     SetBkMode(Stream *, word);
extern int     SetFillAttr(Stream *, word, word);
extern int     SetFillMode(Stream *, int);
extern int     SetTextColor(Stream *, word);
extern int     SetTextOps(Stream *, word, word);

#define SetTextSpacing(a, b)        SetTextOps(a, b, 0)
#define SetTextAlign(a, b)          SetTextOps(a, b, 1)

extern int     SetMapMode(Stream *, word);
extern int     font_ops(Stream *, word, FONT *);

#define SelectFont(a, b)	    font_ops(a, b, NULL);
#define CreateFont(a, b)	    font_ops(a, USER_FONT, b);

extern int     SetDeviceOrigins(Stream *, word, word, word);

#define SetDeviceOrg(a, b, c)	    SetDeviceOrigins(a, b, c, DEVICE)
#define SetLogicalOrg(a, b, c)	    SetDeviceOrigins(a, b, c, LOGIC)

extern int     SetDeviceExtents(Stream *, word, word, word);

#define SetDeviceExt(a, b, c)	    SetDeviceExtents(a, b, c, DEVICE)
#define SetLogicalExt(a, b, c)	    SetDeviceExtents(a, b, c, LOGIC)


/* Input Functions */

extern int     get_two_words(Stream *, word *, word *, word);

#define GetWindowSize(a, b, c)	    get_two_words(a, b, c, 18)
#define GetXY(a, b, c)		    get_two_words(a, b, c, 19)

extern word    get_text_attr(Stream *, word);

#define GetTextColor(a) 	    get_text_attr(a, 1)
#define GetTextAlign(a) 	    get_text_attr(a, 2)
#define GetTextSpacing(a)	    get_text_attr(a, 3)
#define GetFont(a)		    get_text_attr(a, 4)

extern word    get_line_attr(Stream *, word);

#define GetLineColor(a) 	    get_line_attr(a, 1)
#define GetLineStyle(a) 	    get_line_attr(a, 2)
#define GetLineWidth(a) 	    get_line_attr(a, 3)

extern word    get_fill_attr(Stream *, word);

#define GetFillColor(a) 	    get_fill_attr(a, 1)
#define GetFillStyle(a) 	    get_fill_attr(a, 2)
#define GetFillMode(a)		    get_fill_attr(a, 3)

extern word    GetMapMode(Stream *);
extern int     org_and_ext(Stream *, word *, word *, word);

#define GetLogicalOrg(a, b, c)	    org_and_ext(a, b, c, 1)
#define GetDeviceOrg(a, b, c)	    org_and_ext(a, b, c, 2)
#define GetLogicalExt(a, b, c)	    org_and_ext(a, b, c, 3)
#define GetDeviceExt(a, b, c)	    org_and_ext(a, b, c, 4)

extern word    get_bk_attr(Stream *, word);

#define GetBkColor(a)		    get_bk_attr(a, 1)
#define GetBkMode(a)		    get_bk_attr(a, 2)

extern int     GetTextDim(Stream *, TextDim *);
extern int     GetDeviceCaps(Stream *, int);

/* Mouse functions */

extern int     SetCursorPos(Stream *, word, word);
extern int     ClipCursor(Stream *, word, word, word, word);
extern int     ChangeCursor(Stream *, word);
extern int     EnableMouse(Stream *);
extern int     DisableMouse(Stream *);


/* Meta File Functions */

extern word    CreateMetaFile(Stream *, byte *);
extern int     CloseMetaFile(Stream *, word);
extern word    GetMetaFile(Stream *, byte *);
extern int     PlayMetaFile(Stream *, word);
extern int     DeleteMetaFile(Stream *, word);

/* Printer Support */

#define ClosePrinter CloseGraph

extern Stream  *InitPrinter(void);
extern int     PrintGraphics(Stream *, BYTE *);
@
