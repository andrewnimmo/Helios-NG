head	1.1;
access;
symbols
	Helios_1_3_1:1.1
	Helios_C40_1_3_Official_Release:1.1;
locks; strict;
comment	@ * @;


1.1
date	92.12.05.16.34.11;	author craig;	state Exp;
branches;
next	;


desc
@@


1.1
log
@Initial revision
@
text
@/* Structure definition for a bitmap. Also defined in graph.h. */

typedef struct BITMAP { word width;	      /* width in pixels	    */
			word height;	      /* height in scan lines	    */
			word planes;	      /* color planes		    */
			word bits_pix;	      /* bits per pixel 	    */
			word byte_width;      /* bytes per line. (even no.) */
			BYTE *bits;	      /* 1's & 0's of the bitmap    */
	       } BITMAP;


/* Structure for the definition of a logical palette and entry */

typedef struct PALETTEENTRY { BYTE red;    /* intensity of red     */
                              BYTE green;  /* intensity of green   */
                              BYTE blue;   /* intensity of blue    */
                              BYTE flags;  /* palette use flags    */
                            } PALETTEENTRY;

typedef struct LOGPALETTE { unsigned short version;        /* struct version = 0x300 */
                            unsigned short num_entries;    /* no entries in palette  */
                            PALETTEENTRY pal[1]; /* actual palette entries */
                          } LOGPALETTE;


/* Palette flag Definitions */

#define PC_RESERVED      0x01
#define PC_EXPLICIT      0x02
#define PC_NOCOLLAPSE    0x04


/* Structure definition for the user defined fonts */

typedef struct FONT {  short int  height;	 /* character height	*/
		       short int  width;	 /* character width	*/
		       short int  tilt; 	 /* angle of text	*/
		       short int  orientation;	 /* angle of characters */
		       short int  weight;	 /* Bold Face?		*/
		       UBYTE	  italic;	 /* Italic text?	*/
		       UBYTE	  underline;	 /* Text underlined?	*/
		       UBYTE	  strikeout;	 /* Strikeout text?	*/
		       UBYTE	  charset;	 /* OEM or ANSI?	*/
		       UBYTE	  OutPrecision;  /* not used.		*/
		       UBYTE	  ClipPrecision; /* not used.		*/
		       UBYTE	  quality;	 /* font matching	*/
		       UBYTE	  pitch_family;  /* pitch and family	*/
		       UBYTE	  face_name[32]; /* type face		*/
	       }FONT;

/* structure definition for the text dimension fields */

typedef struct TextDim { word height;		 /* character height  */
			 word ave_width;	 /* character width   */
			 word ascent;		 /* character ascent  */
			 word descent;		 /* character descent */
			 word internal_leading;  /* external leading  */
			 word external_leading;  /* internal leading  */
		}TextDim;


/* Font Related Definitions */

/* Font Types */

#define OEM_FIXED   10	      /* These are  */
#define ANSI_FIXED  11	      /* the stock  */
#define ANSI_VAR    12	      /* fonts	    */
#define SYSTEM_FONT 13	      /* used in    */
#define DEVICE_FONT 14	      /* MS-WINDOWS */
#define USER_FONT   15	      /* USER_FONT not related to MS-WINDOWS */

/* Font Quality definitons */

#define Q_DEFAULT   0
#define Q_DRAFT     1
#define Q_PROOF     2

/* Pitch Definitions */

#define P_DEFAULT   0
#define P_FIXED     1
#define P_VARIABLE  2

/* Character Set Definitions */

#define ANSI_CHAR   0
#define OEM_CHAR    255

/* Font Family Definitions */

#define ANYONE	    (0<<4)
#define ROMAN	    (1<<4)
#define SWISS	    (2<<4)
#define MODERN	    (3<<4)
#define SCRIPT	    (4<<4)
#define DECORATIVE  (5<<4)

/* Font Weight Definitions */

#define W_NORMAL    400
#define W_BOLD	    900

/* Some font precision definitions */

#define OUT_DEFAULT 0
#define OUT_STROKE 3

#define CLIP_DEFAULT 0
#define CLIP_STROKE  2

/* Some color definitions */

#define RGB(r,g,b)    (((word) ((b) << 8 | (g)) << 8) | (r))
#define GETR(rgb)     ((BYTE) (rgb & 0x0000FF))
#define GETG(rgb)     ((BYTE) (rgb & 0x00FF00))
#define GETB(rgb)     ((BYTE) (rgb & 0xFF0000))

#define BLACK	      RGB(0, 0, 0)
#define BLUE	      RGB(0, 0, 255)
#define GREEN	      RGB(0, 255, 0)
#define CYAN	      RGB(0, 255, 255)
#define RED	      RGB(255, 0, 0)
#define MAGENTA       RGB(255, 0, 255)
#define YELLOW	      RGB(255, 255, 0)
#define WHITE	      RGB(255, 255, 255)


/* line style definitions */

#define SOLID	      0    /* solid line */
#define DASH	      1    /* ---------- */
#define DOT	      2    /* .......... */
#define DASHDOT       3    /* _._._._._. */
#define DASHDOTDOT    4    /* _.._.._.._ */
#define NULL_PEN      5    /* invisible line */

/* background mode definitions */

#define TRANSPARENT   1
#define OPAQUE        2

/* Fill mode definitions */

#define ALTERNATE     1
#define WINDING       2

/* text alignment definitions */

#define LEFT	      0
#define RIGHT         2
#define CENTRE        6


/* Definitions to help with device and logical origin and extents */

#define DEVICE	      0
#define LOGIC	      1


/* Just a couple of the mapping modes defined in graph.h */

#define M_TEXT	      1
#define M_ISOTROPIC   7
#define M_ANISOTROPIC 8

/* Definitions for cursor shapes */

#define ARROW	   32512
#define CROSS	   32515
#define IBEAM	   32513
#define ICON	   32641
#define SIZE	   32640
#define UPARROW    32516
#define WAIT	   32514


/* Structure and variable definitions used in graphics library. */

/* Structure returned from ObjectInfo call. This structure is used in the */
/* InitGrapics() call. */

typedef struct DeviceInfo { ObjInfo obj;      /* See syslib.h */
			    word    info[18]; /* Device information */
	       }DeviceInfo;


/* Structure to hold the current line attributes for each graph */

typedef struct LineAttr{ word  color;		 /* line color */
			 word  style;		 /* line style */
			 word  width;		 /* line width */
			 int   color_changed;	 /* Set by SetLineColor */
			 int   style_changed;	 /* Set by SetLineStyle */
			 int   width_changed;	 /* Set by SetLineWidth */
	       }LineAttr;

/* Structure to hold the current screen background attributes for each graph*/

typedef struct BkGround{ word color;	 /* background color */
			 word mode;	 /* background mode  */
	       }BkGround;

/*Structure to hold the fill attributes for each graph */

typedef struct FillAttr{ word color;	/* fill color */
			 word style;	/* fill style */
			 word mode;	/* fill mode  */
	       }FillAttr;

/* Structure to hold the text attributes for each graph */

typedef struct TextAttr{ word  color;	       /* text color		  */
			 int   color_changed;  /* set by SetTextColor	  */
			 word  align;	       /* text align attribute	  */
			 word  spacing;        /* inter-character spacing */
			 word  font_type;      /* pre-defined fonts	  */
			 FONT *font;	       /* user defined fonts	  */
	       }TextAttr;


/* Structure to hold the screen mapping attributes for each graph */

typedef struct MapAttr{ word mode;	       /* mapping mode		  */
			word window_org[2];    /* logical origin (x & y)  */
			word viewprt_org[2];   /* device origin (x & y)   */
			word window_ext[2];    /* logical extents (x & y) */
			word viewprt_ext[2];   /* device extents (x & y)  */
	       }MapAttr;


/* Structure of each node in the list of current graph windows */

typedef struct GraphNode{ struct GraphNode   *next;	 /* link in list    */
				 Stream      *graph_id;  /* unique id	    */
				 BYTE	     Name[10];	 /* windows name    */
				 word        WinID;      /* mswin id no     */
				 LineAttr    line_attr;  /* line attributes */
				 BkGround    BKground;	 /* background attr.*/
				 FillAttr    fill_attr;  /* fill attributes */
				 TextAttr    text_attr;  /* text attributes */
				 MapAttr     map_attr;	 /* mapping attr.   */
				 word	     info[18];	 /* device information */
	       }GraphNode;



#define Graph_Message  0x67770000L   /* Private graphics messages	  */
#define max_words      255	     /* size of control vector		  */
@
